// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/09/2019 21:15:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pixelCounterTop
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pixelCounterTop_vlg_vec_tst();
// constants                                           
// general purpose registers
reg nextPixelPulse;
reg pipelineClk;
reg reset;
// wires                                               
wire [4:0] layer;
wire [10:0] x;
wire [10:0] y;

// assign statements (if any)                          
pixelCounterTop i1 (
// port map - connection between master ports and signals/registers   
	.layer(layer),
	.nextPixelPulse(nextPixelPulse),
	.pipelineClk(pipelineClk),
	.reset(reset),
	.x(x),
	.y(y)
);
initial 
begin 
#1000000 $stop;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #60000 1'b0;
	reset = #10000 1'b1;
	reset = #660000 1'b0;
	reset = #10000 1'b1;
end 

// pipelineClk
always
begin
	pipelineClk = 1'b0;
	pipelineClk = #5000 1'b1;
	#5000;
end 

// nextPixelPulse
initial
begin
	nextPixelPulse = 1'b0;
	nextPixelPulse = #600000 1'b1;
	nextPixelPulse = #10000 1'b0;
	nextPixelPulse = #40000 1'b1;
	nextPixelPulse = #10000 1'b0;
	nextPixelPulse = #30000 1'b1;
	nextPixelPulse = #10000 1'b0;
end 
endmodule

