
Sparkbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd98  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800d038  0800d038  0001d038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d134  0800d134  0001d134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d13c  0800d13c  0001d13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d140  0800d140  0001d140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800d144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000051c4  24000078  0800d1bc  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400523c  0800d1bc  0002523c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003fa30  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000068ae  00000000  00000000  0005fad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022a8  00000000  00000000  00066388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002090  00000000  00000000  00068630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007fbc  00000000  00000000  0006a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e8cb  00000000  00000000  0007267c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ce14  00000000  00000000  000a0f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021dd5b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000961c  00000000  00000000  0021ddb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d020 	.word	0x0800d020

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800d020 	.word	0x0800d020

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f001 f81e 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f826 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fab8 	bl	8000b58 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f970 	bl	80008cc <MX_USART3_UART_Init>
  MX_DAC1_Init();
 80005ec:	f000 f8a8 	bl	8000740 <MX_DAC1_Init>
  MX_FMC_Init();
 80005f0:	f000 fa06 	bl	8000a00 <MX_FMC_Init>
  MX_RNG_Init();
 80005f4:	f000 f8e0 	bl	80007b8 <MX_RNG_Init>
  MX_SDMMC1_SD_Init();
 80005f8:	f000 f8f4 	bl	80007e4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80005fc:	f000 f910 	bl	8000820 <MX_SPI1_Init>
  MX_DMA_Init();
 8000600:	f000 f9b0 	bl	8000964 <MX_DMA_Init>
  MX_FATFS_Init();
 8000604:	f009 f9f0 	bl	80099e8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000608:	f009 fcb6 	bl	8009f78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800060c:	4a05      	ldr	r2, [pc, #20]	; (8000624 <main+0x4c>)
 800060e:	2100      	movs	r1, #0
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <main+0x50>)
 8000612:	f009 fd32 	bl	800a07a <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <main+0x54>)
 800061a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061c:	f009 fcf2 	bl	800a004 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x48>
 8000622:	bf00      	nop
 8000624:	0800d05c 	.word	0x0800d05c
 8000628:	08000d4d 	.word	0x08000d4d
 800062c:	24004a7c 	.word	0x24004a7c

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b09c      	sub	sp, #112	; 0x70
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063a:	224c      	movs	r2, #76	; 0x4c
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f00c fc20 	bl	800ce84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2220      	movs	r2, #32
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f00c fc1a 	bl	800ce84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000650:	2002      	movs	r0, #2
 8000652:	f002 fa1b 	bl	8002a8c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b36      	ldr	r3, [pc, #216]	; (8000734 <SystemClock_Config+0x104>)
 800065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065e:	4a35      	ldr	r2, [pc, #212]	; (8000734 <SystemClock_Config+0x104>)
 8000660:	f023 0301 	bic.w	r3, r3, #1
 8000664:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000666:	4b33      	ldr	r3, [pc, #204]	; (8000734 <SystemClock_Config+0x104>)
 8000668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b31      	ldr	r3, [pc, #196]	; (8000738 <SystemClock_Config+0x108>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000678:	4a2f      	ldr	r2, [pc, #188]	; (8000738 <SystemClock_Config+0x108>)
 800067a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <SystemClock_Config+0x108>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800068c:	bf00      	nop
 800068e:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <SystemClock_Config+0x108>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800069a:	d1f8      	bne.n	800068e <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <SystemClock_Config+0x10c>)
 800069e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a0:	f023 0303 	bic.w	r3, r3, #3
 80006a4:	4a25      	ldr	r2, [pc, #148]	; (800073c <SystemClock_Config+0x10c>)
 80006a6:	f043 0302 	orr.w	r3, r3, #2
 80006aa:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006ac:	2321      	movs	r3, #33	; 0x21
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b6:	2301      	movs	r3, #1
 80006b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80006c6:	2378      	movs	r3, #120	; 0x78
 80006c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006d6:	2308      	movs	r3, #8
 80006d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fa0a 	bl	8002b00 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f2:	f000 fb42 	bl	8000d7a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	233f      	movs	r3, #63	; 0x3f
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000702:	2308      	movs	r3, #8
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fe00 	bl	8003320 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000726:	f000 fb28 	bl	8000d7a <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3770      	adds	r7, #112	; 0x70
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	58000400 	.word	0x58000400
 8000738:	58024800 	.word	0x58024800
 800073c:	58024400 	.word	0x58024400

08000740 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2224      	movs	r2, #36	; 0x24
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f00c fb99 	bl	800ce84 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_DAC1_Init+0x70>)
 8000754:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <MX_DAC1_Init+0x74>)
 8000756:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000758:	4815      	ldr	r0, [pc, #84]	; (80007b0 <MX_DAC1_Init+0x70>)
 800075a:	f001 f8cb 	bl	80018f4 <HAL_DAC_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000764:	f000 fb09 	bl	8000d7a <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000774:	2301      	movs	r3, #1
 8000776:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	4619      	mov	r1, r3
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <MX_DAC1_Init+0x70>)
 8000784:	f001 f8d8 	bl	8001938 <HAL_DAC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 faf4 	bl	8000d7a <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2210      	movs	r2, #16
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_DAC1_Init+0x70>)
 800079a:	f001 f8cd 	bl	8001938 <HAL_DAC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80007a4:	f000 fae9 	bl	8000d7a <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	24004a80 	.word	0x24004a80
 80007b4:	40007400 	.word	0x40007400

080007b8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_RNG_Init+0x24>)
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <MX_RNG_Init+0x28>)
 80007c0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_RNG_Init+0x24>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_RNG_Init+0x24>)
 80007ca:	f005 fafd 	bl	8005dc8 <HAL_RNG_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80007d4:	f000 fad1 	bl	8000d7a <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	24004bec 	.word	0x24004bec
 80007e0:	48021800 	.word	0x48021800

080007e4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_SDMMC1_SD_Init+0x34>)
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <MX_SDMMC1_SD_Init+0x38>)
 80007ec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_SDMMC1_SD_Init+0x34>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_SDMMC1_SD_Init+0x34>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_SDMMC1_SD_Init+0x34>)
 80007fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000800:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <MX_SDMMC1_SD_Init+0x34>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <MX_SDMMC1_SD_Init+0x34>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	24004b24 	.word	0x24004b24
 800081c:	52007000 	.word	0x52007000

08000820 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_SPI1_Init+0xa4>)
 8000826:	4a28      	ldr	r2, [pc, #160]	; (80008c8 <MX_SPI1_Init+0xa8>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <MX_SPI1_Init+0xa4>)
 800082c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000830:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_SPI1_Init+0xa4>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_SPI1_Init+0xa4>)
 800083a:	2203      	movs	r2, #3
 800083c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <MX_SPI1_Init+0xa4>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_SPI1_Init+0xa4>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_SPI1_Init+0xa4>)
 800084c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000850:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_SPI1_Init+0xa4>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_SPI1_Init+0xa4>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_SPI1_Init+0xa4>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_SPI1_Init+0xa4>)
 8000866:	2200      	movs	r2, #0
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_SPI1_Init+0xa4>)
 800086c:	2200      	movs	r2, #0
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_SPI1_Init+0xa4>)
 8000872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000876:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_SPI1_Init+0xa4>)
 800087a:	2200      	movs	r2, #0
 800087c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_SPI1_Init+0xa4>)
 8000880:	2200      	movs	r2, #0
 8000882:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_SPI1_Init+0xa4>)
 8000886:	2200      	movs	r2, #0
 8000888:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_SPI1_Init+0xa4>)
 800088c:	2200      	movs	r2, #0
 800088e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_SPI1_Init+0xa4>)
 8000892:	2200      	movs	r2, #0
 8000894:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_SPI1_Init+0xa4>)
 8000898:	2200      	movs	r2, #0
 800089a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_SPI1_Init+0xa4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_SPI1_Init+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_SPI1_Init+0xa4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_SPI1_Init+0xa4>)
 80008b0:	f006 fce2 	bl	8007278 <HAL_SPI_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80008ba:	f000 fa5e 	bl	8000d7a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	24004c78 	.word	0x24004c78
 80008c8:	40013000 	.word	0x40013000

080008cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008d2:	4a23      	ldr	r2, [pc, #140]	; (8000960 <MX_USART3_UART_Init+0x94>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_USART3_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_USART3_UART_Init+0x90>)
 8000916:	f007 f8ef 	bl	8007af8 <HAL_UART_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000920:	f000 fa2b 	bl	8000d7a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_USART3_UART_Init+0x90>)
 8000928:	f008 f83c 	bl	80089a4 <HAL_UARTEx_SetTxFifoThreshold>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000932:	f000 fa22 	bl	8000d7a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	4808      	ldr	r0, [pc, #32]	; (800095c <MX_USART3_UART_Init+0x90>)
 800093a:	f008 f871 	bl	8008a20 <HAL_UARTEx_SetRxFifoThreshold>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000944:	f000 fa19 	bl	8000d7a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_USART3_UART_Init+0x90>)
 800094a:	f007 fff2 	bl	8008932 <HAL_UARTEx_DisableFifoMode>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000954:	f000 fa11 	bl	8000d7a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	24004a94 	.word	0x24004a94
 8000960:	40004800 	.word	0x40004800

08000964 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_stream0
  */
static void MX_DMA_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096a:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_DMA_Init+0x90>)
 800096c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000970:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <MX_DMA_Init+0x90>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800097a:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_DMA_Init+0x90>)
 800097c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_stream0 on DMA1_Stream0 */
  hdma_memtomem_dma1_stream0.Instance = DMA1_Stream0;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_DMA_Init+0x94>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <MX_DMA_Init+0x98>)
 800098c:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_DMA_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_DMA_Init+0x94>)
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_DMA_Init+0x94>)
 800099c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a0:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_DMA_Init+0x94>)
 80009a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_DMA_Init+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_DMA_Init+0x94>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream0.Init.Mode = DMA_NORMAL;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_DMA_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_DMA_Init+0x94>)
 80009be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009c2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_DMA_Init+0x94>)
 80009c6:	2204      	movs	r2, #4
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_DMA_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_DMA_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_DMA_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream0) != HAL_OK)
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_DMA_Init+0x94>)
 80009de:	f001 f8db 	bl	8001b98 <HAL_DMA_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_DMA_Init+0x88>
  {
    Error_Handler( );
 80009e8:	f000 f9c7 	bl	8000d7a <Error_Handler>
  }

}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	58024400 	.word	0x58024400
 80009f8:	24004c00 	.word	0x24004c00
 80009fc:	40020010 	.word	0x40020010

08000a00 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000a2c:	4b45      	ldr	r3, [pc, #276]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a2e:	4a46      	ldr	r2, [pc, #280]	; (8000b48 <MX_FMC_Init+0x148>)
 8000a30:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000a32:	4b44      	ldr	r3, [pc, #272]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a34:	4a45      	ldr	r2, [pc, #276]	; (8000b4c <MX_FMC_Init+0x14c>)
 8000a36:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000a38:	4b42      	ldr	r3, [pc, #264]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000a44:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000a4a:	4b3e      	ldr	r3, [pc, #248]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000a50:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a56:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000a5c:	4b39      	ldr	r3, [pc, #228]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000a62:	4b38      	ldr	r3, [pc, #224]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000a6a:	4b36      	ldr	r3, [pc, #216]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a70:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a76:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000a7c:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000a88:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <MX_FMC_Init+0x144>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a94:	230f      	movs	r3, #15
 8000a96:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000a98:	230f      	movs	r3, #15
 8000a9a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8000a9c:	23ff      	movs	r3, #255	; 0xff
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000aa8:	2311      	movs	r3, #17
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000aac:	2300      	movs	r3, #0
 8000aae:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4822      	ldr	r0, [pc, #136]	; (8000b44 <MX_FMC_Init+0x144>)
 8000aba:	f006 fcfb 	bl	80074b4 <HAL_SRAM_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_FMC_Init+0xc8>
  {
    Error_Handler( );
 8000ac4:	f000 f959 	bl	8000d7a <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <MX_FMC_Init+0x150>)
 8000aca:	4a22      	ldr	r2, [pc, #136]	; (8000b54 <MX_FMC_Init+0x154>)
 8000acc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <MX_FMC_Init+0x150>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <MX_FMC_Init+0x150>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ada:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_FMC_Init+0x150>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_FMC_Init+0x150>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_FMC_Init+0x150>)
 8000ae8:	2240      	movs	r2, #64	; 0x40
 8000aea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_FMC_Init+0x150>)
 8000aee:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000af2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_FMC_Init+0x150>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_FMC_Init+0x150>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_FMC_Init+0x150>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_FMC_Init+0x150>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000b10:	2310      	movs	r3, #16
 8000b12:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 8000b14:	2310      	movs	r3, #16
 8000b16:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 8000b20:	2310      	movs	r3, #16
 8000b22:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 8000b24:	2310      	movs	r3, #16
 8000b26:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <MX_FMC_Init+0x150>)
 8000b2e:	f006 fb67 	bl	8007200 <HAL_SDRAM_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_FMC_Init+0x13c>
  {
    Error_Handler( );
 8000b38:	f000 f91f 	bl	8000d7a <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3738      	adds	r7, #56	; 0x38
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	24004ba0 	.word	0x24004ba0
 8000b48:	52004000 	.word	0x52004000
 8000b4c:	52004104 	.word	0x52004104
 8000b50:	24004d00 	.word	0x24004d00
 8000b54:	52004140 	.word	0x52004140

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	; 0x38
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b6f      	ldr	r3, [pc, #444]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a6d      	ldr	r2, [pc, #436]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b6b      	ldr	r3, [pc, #428]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	623b      	str	r3, [r7, #32]
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8c:	4b67      	ldr	r3, [pc, #412]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	4a66      	ldr	r2, [pc, #408]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000b94:	f043 0320 	orr.w	r3, r3, #32
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9c:	4b63      	ldr	r3, [pc, #396]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f003 0320 	and.w	r3, r3, #32
 8000ba6:	61fb      	str	r3, [r7, #28]
 8000ba8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000baa:	4b60      	ldr	r3, [pc, #384]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a5e      	ldr	r2, [pc, #376]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b5c      	ldr	r3, [pc, #368]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b58      	ldr	r3, [pc, #352]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	4a57      	ldr	r2, [pc, #348]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd8:	4b54      	ldr	r3, [pc, #336]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b51      	ldr	r3, [pc, #324]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a4f      	ldr	r2, [pc, #316]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b4d      	ldr	r3, [pc, #308]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c04:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a48      	ldr	r2, [pc, #288]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c22:	4b42      	ldr	r3, [pc, #264]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a40      	ldr	r2, [pc, #256]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0310 	and.w	r3, r3, #16
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c40:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <MX_GPIO_Init+0x1d4>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c64:	4832      	ldr	r0, [pc, #200]	; (8000d30 <MX_GPIO_Init+0x1d8>)
 8000c66:	f001 fef7 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c70:	4830      	ldr	r0, [pc, #192]	; (8000d34 <MX_GPIO_Init+0x1dc>)
 8000c72:	f001 fef1 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2102      	movs	r1, #2
 8000c7a:	482f      	ldr	r0, [pc, #188]	; (8000d38 <MX_GPIO_Init+0x1e0>)
 8000c7c:	f001 feec 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	4829      	ldr	r0, [pc, #164]	; (8000d3c <MX_GPIO_Init+0x1e4>)
 8000c96:	f001 fd17 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c9a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	481f      	ldr	r0, [pc, #124]	; (8000d30 <MX_GPIO_Init+0x1d8>)
 8000cb4:	f001 fd08 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4818      	ldr	r0, [pc, #96]	; (8000d34 <MX_GPIO_Init+0x1dc>)
 8000cd2:	f001 fcf9 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MX_GPIO_Init+0x1e8>)
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4816      	ldr	r0, [pc, #88]	; (8000d44 <MX_GPIO_Init+0x1ec>)
 8000cea:	f001 fced 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	4811      	ldr	r0, [pc, #68]	; (8000d48 <MX_GPIO_Init+0x1f0>)
 8000d04:	f001 fce0 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <MX_GPIO_Init+0x1e0>)
 8000d20:	f001 fcd2 	bl	80026c8 <HAL_GPIO_Init>

}
 8000d24:	bf00      	nop
 8000d26:	3738      	adds	r7, #56	; 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	58020400 	.word	0x58020400
 8000d34:	58020c00 	.word	0x58020c00
 8000d38:	58021000 	.word	0x58021000
 8000d3c:	58020800 	.word	0x58020800
 8000d40:	11110000 	.word	0x11110000
 8000d44:	58021800 	.word	0x58021800
 8000d48:	58020000 	.word	0x58020000

08000d4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f009 fa22 	bl	800a19e <osDelay>
 8000d5a:	e7fb      	b.n	8000d54 <StartDefaultTask+0x8>

08000d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d6c:	d101      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6e:	f000 fc91 	bl	8001694 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7e:	b672      	cpsid	i
}
 8000d80:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <Error_Handler+0x8>

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_MspInit+0x38>)
 8000d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_MspInit+0x38>)
 8000d92:	f043 0302 	orr.w	r3, r3, #2
 8000d96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_MspInit+0x38>)
 8000d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	210f      	movs	r1, #15
 8000dac:	f06f 0001 	mvn.w	r0, #1
 8000db0:	f000 fd78 	bl	80018a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <HAL_DAC_MspInit+0x80>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d129      	bne.n	8000e36 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_DAC_MspInit+0x84>)
 8000de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000de8:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <HAL_DAC_MspInit+0x84>)
 8000dea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000dee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_DAC_MspInit+0x84>)
 8000df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_DAC_MspInit+0x84>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <HAL_DAC_MspInit+0x84>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_DAC_MspInit+0x84>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e1e:	2330      	movs	r3, #48	; 0x30
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e22:	2303      	movs	r3, #3
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_DAC_MspInit+0x88>)
 8000e32:	f001 fc49 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40007400 	.word	0x40007400
 8000e44:	58024400 	.word	0x58024400
 8000e48:	58020000 	.word	0x58020000

08000e4c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b0b2      	sub	sp, #200	; 0xc8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	22bc      	movs	r2, #188	; 0xbc
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f00c f811 	bl	800ce84 <memset>
  if(hrng->Instance==RNG)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <HAL_RNG_MspInit+0x68>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d11e      	bne.n	8000eaa <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e70:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 fe1d 	bl	8003abc <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000e88:	f7ff ff77 	bl	8000d7a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_RNG_MspInit+0x6c>)
 8000e8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_RNG_MspInit+0x6c>)
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_RNG_MspInit+0x6c>)
 8000e9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	37c8      	adds	r7, #200	; 0xc8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	48021800 	.word	0x48021800
 8000eb8:	58024400 	.word	0x58024400

08000ebc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0ba      	sub	sp, #232	; 0xe8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	22bc      	movs	r2, #188	; 0xbc
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f00b ffd1 	bl	800ce84 <memset>
  if(hsd->Instance==SDMMC1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a37      	ldr	r2, [pc, #220]	; (8000fc4 <HAL_SD_MspInit+0x108>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d166      	bne.n	8000fba <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef6:	f107 0318 	add.w	r3, r7, #24
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fdde 	bl	8003abc <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000f06:	f7ff ff38 	bl	8000d7a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <HAL_SD_MspInit+0x10c>)
 8000f0c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f10:	4a2d      	ldr	r2, [pc, #180]	; (8000fc8 <HAL_SD_MspInit+0x10c>)
 8000f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f16:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <HAL_SD_MspInit+0x10c>)
 8000f1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <HAL_SD_MspInit+0x10c>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	4a26      	ldr	r2, [pc, #152]	; (8000fc8 <HAL_SD_MspInit+0x10c>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <HAL_SD_MspInit+0x10c>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <HAL_SD_MspInit+0x10c>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_SD_MspInit+0x10c>)
 8000f4e:	f043 0308 	orr.w	r3, r3, #8
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_SD_MspInit+0x10c>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f64:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f7e:	230c      	movs	r3, #12
 8000f80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4810      	ldr	r0, [pc, #64]	; (8000fcc <HAL_SD_MspInit+0x110>)
 8000f8c:	f001 fb9c 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f90:	2304      	movs	r3, #4
 8000f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000fa8:	230c      	movs	r3, #12
 8000faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <HAL_SD_MspInit+0x114>)
 8000fb6:	f001 fb87 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	37e8      	adds	r7, #232	; 0xe8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	52007000 	.word	0x52007000
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58020800 	.word	0x58020800
 8000fd0:	58020c00 	.word	0x58020c00

08000fd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0ba      	sub	sp, #232	; 0xe8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	22bc      	movs	r2, #188	; 0xbc
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00b ff45 	bl	800ce84 <memset>
  if(hspi->Instance==SPI1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a37      	ldr	r2, [pc, #220]	; (80010dc <HAL_SPI_MspInit+0x108>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d166      	bne.n	80010d2 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800100a:	2300      	movs	r3, #0
 800100c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100e:	f107 0318 	add.w	r3, r7, #24
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fd52 	bl	8003abc <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800101e:	f7ff feac 	bl	8000d7a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001022:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <HAL_SPI_MspInit+0x10c>)
 8001024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001028:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <HAL_SPI_MspInit+0x10c>)
 800102a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800102e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_SPI_MspInit+0x10c>)
 8001034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_SPI_MspInit+0x10c>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001046:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <HAL_SPI_MspInit+0x10c>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <HAL_SPI_MspInit+0x10c>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_SPI_MspInit+0x10c>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001064:	4a1e      	ldr	r2, [pc, #120]	; (80010e0 <HAL_SPI_MspInit+0x10c>)
 8001066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800106a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_SPI_MspInit+0x10c>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001094:	2305      	movs	r3, #5
 8001096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800109e:	4619      	mov	r1, r3
 80010a0:	4810      	ldr	r0, [pc, #64]	; (80010e4 <HAL_SPI_MspInit+0x110>)
 80010a2:	f001 fb11 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80010a6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80010aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010c0:	2305      	movs	r3, #5
 80010c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4806      	ldr	r0, [pc, #24]	; (80010e8 <HAL_SPI_MspInit+0x114>)
 80010ce:	f001 fafb 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	37e8      	adds	r7, #232	; 0xe8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40013000 	.word	0x40013000
 80010e0:	58024400 	.word	0x58024400
 80010e4:	58020c00 	.word	0x58020c00
 80010e8:	58021800 	.word	0x58021800

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0b8      	sub	sp, #224	; 0xe0
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	22bc      	movs	r2, #188	; 0xbc
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f00b feb9 	bl	800ce84 <memset>
  if(huart->Instance==USART3)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a2d      	ldr	r2, [pc, #180]	; (80011cc <HAL_UART_MspInit+0xe0>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d152      	bne.n	80011c2 <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800111c:	2302      	movs	r3, #2
 800111e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001120:	2304      	movs	r3, #4
 8001122:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 75;
 8001124:	234b      	movs	r3, #75	; 0x4b
 8001126:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001128:	2302      	movs	r3, #2
 800112a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001134:	2340      	movs	r3, #64	; 0x40
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001138:	2320      	movs	r3, #32
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8001140:	2301      	movs	r3, #1
 8001142:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fcb6 	bl	8003abc <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_UART_MspInit+0x6e>
    {
      Error_Handler();
 8001156:	f7ff fe10 	bl	8000d7a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_UART_MspInit+0xe4>)
 800115c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <HAL_UART_MspInit+0xe4>)
 8001162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001166:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_UART_MspInit+0xe4>)
 800116c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_UART_MspInit+0xe4>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <HAL_UART_MspInit+0xe4>)
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_UART_MspInit+0xe4>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001196:	f44f 7340 	mov.w	r3, #768	; 0x300
 800119a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011b0:	2307      	movs	r3, #7
 80011b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <HAL_UART_MspInit+0xe8>)
 80011be:	f001 fa83 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	37e0      	adds	r7, #224	; 0xe0
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40004800 	.word	0x40004800
 80011d0:	58024400 	.word	0x58024400
 80011d4:	58020c00 	.word	0x58020c00

080011d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0b6      	sub	sp, #216	; 0xd8
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80011de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011ee:	4b5a      	ldr	r3, [pc, #360]	; (8001358 <HAL_FMC_MspInit+0x180>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f040 80ab 	bne.w	800134e <HAL_FMC_MspInit+0x176>
    return;
  }
  FMC_Initialized = 1;
 80011f8:	4b57      	ldr	r3, [pc, #348]	; (8001358 <HAL_FMC_MspInit+0x180>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	22bc      	movs	r2, #188	; 0xbc
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f00b fe3c 	bl	800ce84 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800120c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001210:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001212:	2300      	movs	r3, #0
 8001214:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fc4e 	bl	8003abc <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 8001226:	f7ff fda8 	bl	8000d7a <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800122a:	4b4c      	ldr	r3, [pc, #304]	; (800135c <HAL_FMC_MspInit+0x184>)
 800122c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001230:	4a4a      	ldr	r2, [pc, #296]	; (800135c <HAL_FMC_MspInit+0x184>)
 8001232:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001236:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800123a:	4b48      	ldr	r3, [pc, #288]	; (800135c <HAL_FMC_MspInit+0x184>)
 800123c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PG15   ------> FMC_SDNCAS
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001248:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800124c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001262:	230c      	movs	r3, #12
 8001264:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001268:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800126c:	4619      	mov	r1, r3
 800126e:	483c      	ldr	r0, [pc, #240]	; (8001360 <HAL_FMC_MspInit+0x188>)
 8001270:	f001 fa2a 	bl	80026c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8001274:	2319      	movs	r3, #25
 8001276:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800128c:	230c      	movs	r3, #12
 800128e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001292:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001296:	4619      	mov	r1, r3
 8001298:	4832      	ldr	r0, [pc, #200]	; (8001364 <HAL_FMC_MspInit+0x18c>)
 800129a:	f001 fa15 	bl	80026c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800129e:	f248 1333 	movw	r3, #33075	; 0x8133
 80012a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012b8:	230c      	movs	r3, #12
 80012ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4828      	ldr	r0, [pc, #160]	; (8001368 <HAL_FMC_MspInit+0x190>)
 80012c6:	f001 f9ff 	bl	80026c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80012ca:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80012ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e4:	230c      	movs	r3, #12
 80012e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012ee:	4619      	mov	r1, r3
 80012f0:	481e      	ldr	r0, [pc, #120]	; (800136c <HAL_FMC_MspInit+0x194>)
 80012f2:	f001 f9e9 	bl	80026c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80012f6:	f24c 0333 	movw	r3, #49203	; 0xc033
 80012fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001310:	230c      	movs	r3, #12
 8001312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001316:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800131a:	4619      	mov	r1, r3
 800131c:	4814      	ldr	r0, [pc, #80]	; (8001370 <HAL_FMC_MspInit+0x198>)
 800131e:	f001 f9d3 	bl	80026c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 800133a:	2309      	movs	r3, #9
 800133c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001344:	4619      	mov	r1, r3
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <HAL_FMC_MspInit+0x18c>)
 8001348:	f001 f9be 	bl	80026c8 <HAL_GPIO_Init>
 800134c:	e000      	b.n	8001350 <HAL_FMC_MspInit+0x178>
    return;
 800134e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001350:	37d8      	adds	r7, #216	; 0xd8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	24000094 	.word	0x24000094
 800135c:	58024400 	.word	0x58024400
 8001360:	58021400 	.word	0x58021400
 8001364:	58020800 	.word	0x58020800
 8001368:	58021800 	.word	0x58021800
 800136c:	58021000 	.word	0x58021000
 8001370:	58020c00 	.word	0x58020c00

08001374 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800137c:	f7ff ff2c 	bl	80011d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001390:	f7ff ff22 	bl	80011d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b090      	sub	sp, #64	; 0x40
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b0f      	cmp	r3, #15
 80013a8:	d827      	bhi.n	80013fa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 80013aa:	2200      	movs	r2, #0
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	201c      	movs	r0, #28
 80013b0:	f000 fa78 	bl	80018a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b4:	201c      	movs	r0, #28
 80013b6:	f000 fa8f 	bl	80018d8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80013ba:	4a29      	ldr	r2, [pc, #164]	; (8001460 <HAL_InitTick+0xc4>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <HAL_InitTick+0xc8>)
 80013c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013c6:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_InitTick+0xc8>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_InitTick+0xc8>)
 80013d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013de:	f107 0210 	add.w	r2, r7, #16
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 fb25 	bl	8003a38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d106      	bne.n	8001406 <HAL_InitTick+0x6a>
 80013f8:	e001      	b.n	80013fe <HAL_InitTick+0x62>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e02c      	b.n	8001458 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013fe:	f002 faef 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8001402:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001404:	e004      	b.n	8001410 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001406:	f002 faeb 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 800140a:	4603      	mov	r3, r0
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <HAL_InitTick+0xcc>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	0c9b      	lsrs	r3, r3, #18
 800141a:	3b01      	subs	r3, #1
 800141c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_InitTick+0xd0>)
 8001420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001424:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_InitTick+0xd0>)
 8001428:	f240 32e7 	movw	r2, #999	; 0x3e7
 800142c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800142e:	4a0f      	ldr	r2, [pc, #60]	; (800146c <HAL_InitTick+0xd0>)
 8001430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001432:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_InitTick+0xd0>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_InitTick+0xd0>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001440:	480a      	ldr	r0, [pc, #40]	; (800146c <HAL_InitTick+0xd0>)
 8001442:	f006 f887 	bl	8007554 <HAL_TIM_Base_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d104      	bne.n	8001456 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <HAL_InitTick+0xd0>)
 800144e:	f006 f8e3 	bl	8007618 <HAL_TIM_Base_Start_IT>
 8001452:	4603      	mov	r3, r0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3740      	adds	r7, #64	; 0x40
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	24000008 	.word	0x24000008
 8001464:	58024400 	.word	0x58024400
 8001468:	431bde83 	.word	0x431bde83
 800146c:	24004d34 	.word	0x24004d34

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <NMI_Handler+0x4>

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <TIM2_IRQHandler+0x10>)
 80014a2:	f006 f929 	bl	80076f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24004d34 	.word	0x24004d34

080014b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014b4:	4b39      	ldr	r3, [pc, #228]	; (800159c <SystemInit+0xec>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a38      	ldr	r2, [pc, #224]	; (800159c <SystemInit+0xec>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <SystemInit+0xf0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 030f 	and.w	r3, r3, #15
 80014cc:	2b06      	cmp	r3, #6
 80014ce:	d807      	bhi.n	80014e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014d0:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <SystemInit+0xf0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 030f 	bic.w	r3, r3, #15
 80014d8:	4a31      	ldr	r2, [pc, #196]	; (80015a0 <SystemInit+0xf0>)
 80014da:	f043 0307 	orr.w	r3, r3, #7
 80014de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <SystemInit+0xf4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <SystemInit+0xf4>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <SystemInit+0xf4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <SystemInit+0xf4>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	492b      	ldr	r1, [pc, #172]	; (80015a4 <SystemInit+0xf4>)
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <SystemInit+0xf8>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <SystemInit+0xf0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800150a:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <SystemInit+0xf0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 030f 	bic.w	r3, r3, #15
 8001512:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <SystemInit+0xf0>)
 8001514:	f043 0307 	orr.w	r3, r3, #7
 8001518:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <SystemInit+0xf4>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <SystemInit+0xf4>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <SystemInit+0xf4>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <SystemInit+0xf4>)
 800152e:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <SystemInit+0xfc>)
 8001530:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <SystemInit+0xf4>)
 8001534:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <SystemInit+0x100>)
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <SystemInit+0xf4>)
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <SystemInit+0x104>)
 800153c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <SystemInit+0xf4>)
 8001540:	2200      	movs	r2, #0
 8001542:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <SystemInit+0xf4>)
 8001546:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <SystemInit+0x104>)
 8001548:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <SystemInit+0xf4>)
 800154c:	2200      	movs	r2, #0
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <SystemInit+0xf4>)
 8001552:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <SystemInit+0x104>)
 8001554:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <SystemInit+0xf4>)
 8001558:	2200      	movs	r2, #0
 800155a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <SystemInit+0xf4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <SystemInit+0xf4>)
 8001562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <SystemInit+0xf4>)
 800156a:	2200      	movs	r2, #0
 800156c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <SystemInit+0x108>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <SystemInit+0x10c>)
 8001574:	4013      	ands	r3, r2
 8001576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800157a:	d202      	bcs.n	8001582 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <SystemInit+0x110>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <SystemInit+0x114>)
 8001584:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001588:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <SystemInit+0xec>)
 800158c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001590:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00
 80015a0:	52002000 	.word	0x52002000
 80015a4:	58024400 	.word	0x58024400
 80015a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80015ac:	02020200 	.word	0x02020200
 80015b0:	01ff0000 	.word	0x01ff0000
 80015b4:	01010280 	.word	0x01010280
 80015b8:	5c001000 	.word	0x5c001000
 80015bc:	ffff0000 	.word	0xffff0000
 80015c0:	51008108 	.word	0x51008108
 80015c4:	52004000 	.word	0x52004000

080015c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015cc:	f7ff ff70 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e8:	4c0a      	ldr	r4, [pc, #40]	; (8001614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f6:	f00b fc11 	bl	800ce1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7fe ffed 	bl	80005d8 <main>
  bx  lr
 80015fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001600:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001604:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001608:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800160c:	0800d144 	.word	0x0800d144
  ldr r2, =_sbss
 8001610:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001614:	2400523c 	.word	0x2400523c

08001618 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC3_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001622:	2003      	movs	r0, #3
 8001624:	f000 f933 	bl	800188e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001628:	f002 f830 	bl	800368c <HAL_RCC_GetSysClockFreq>
 800162c:	4602      	mov	r2, r0
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_Init+0x68>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	f003 030f 	and.w	r3, r3, #15
 8001638:	4913      	ldr	r1, [pc, #76]	; (8001688 <HAL_Init+0x6c>)
 800163a:	5ccb      	ldrb	r3, [r1, r3]
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	fa22 f303 	lsr.w	r3, r2, r3
 8001644:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_Init+0x68>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <HAL_Init+0x6c>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
 800165c:	4a0b      	ldr	r2, [pc, #44]	; (800168c <HAL_Init+0x70>)
 800165e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001660:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_Init+0x74>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001666:	200f      	movs	r0, #15
 8001668:	f7ff fe98 	bl	800139c <HAL_InitTick>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e002      	b.n	800167c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001676:	f7ff fb85 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	58024400 	.word	0x58024400
 8001688:	0800d080 	.word	0x0800d080
 800168c:	24000004 	.word	0x24000004
 8001690:	24000000 	.word	0x24000000

08001694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x20>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_IncTick+0x24>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <HAL_IncTick+0x24>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2400000c 	.word	0x2400000c
 80016b8:	24004d80 	.word	0x24004d80

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_GetTick+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	24004d80 	.word	0x24004d80

080016d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff ffee 	bl	80016bc <HAL_GetTick>
 80016e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d005      	beq.n	80016fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_Delay+0x44>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016fa:	bf00      	nop
 80016fc:	f7ff ffde 	bl	80016bc <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f7      	bhi.n	80016fc <HAL_Delay+0x28>
  {
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2400000c 	.word	0x2400000c

0800171c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetREVID+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0c1b      	lsrs	r3, r3, #16
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	5c001000 	.word	0x5c001000

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <__NVIC_SetPriorityGrouping+0x40>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	4313      	orrs	r3, r2
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x40>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	05fa0000 	.word	0x05fa0000

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <__NVIC_EnableIRQ+0x38>)
 80017b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ff4c 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b2:	f7ff ff63 	bl	800177c <__NVIC_GetPriorityGrouping>
 80018b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	6978      	ldr	r0, [r7, #20]
 80018be:	f7ff ffb3 	bl	8001828 <NVIC_EncodePriority>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff82 	bl	80017d4 <__NVIC_SetPriority>
}
 80018d0:	bf00      	nop
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff56 	bl	8001798 <__NVIC_EnableIRQ>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e014      	b.n	8001930 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	791b      	ldrb	r3, [r3, #4]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d105      	bne.n	800191c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fa52 	bl	8000dc0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2202      	movs	r2, #2
 8001920:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	795b      	ldrb	r3, [r3, #5]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_DAC_ConfigChannel+0x18>
 800194c:	2302      	movs	r3, #2
 800194e:	e11d      	b.n	8001b8c <HAL_DAC_ConfigChannel+0x254>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2202      	movs	r2, #2
 800195a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b04      	cmp	r3, #4
 8001962:	d174      	bne.n	8001a4e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001964:	f7ff feaa 	bl	80016bc <HAL_GetTick>
 8001968:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d134      	bne.n	80019da <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001970:	e011      	b.n	8001996 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001972:	f7ff fea3 	bl	80016bc <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d90a      	bls.n	8001996 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	f043 0208 	orr.w	r2, r3, #8
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2203      	movs	r2, #3
 8001990:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e0fa      	b.n	8001b8c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199c:	4b7d      	ldr	r3, [pc, #500]	; (8001b94 <HAL_DAC_ConfigChannel+0x25c>)
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1e6      	bne.n	8001972 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff fe95 	bl	80016d4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	6992      	ldr	r2, [r2, #24]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
 80019b4:	e01e      	b.n	80019f4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80019b6:	f7ff fe81 	bl	80016bc <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d90a      	bls.n	80019da <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	f043 0208 	orr.w	r2, r3, #8
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2203      	movs	r2, #3
 80019d4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0d8      	b.n	8001b8c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	dbe8      	blt.n	80019b6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff fe75 	bl	80016d4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	6992      	ldr	r2, [r2, #24]
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	ea02 0103 	and.w	r1, r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	69da      	ldr	r2, [r3, #28]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	21ff      	movs	r1, #255	; 0xff
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	ea02 0103 	and.w	r1, r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	6a1a      	ldr	r2, [r3, #32]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d11d      	bne.n	8001a92 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	221f      	movs	r2, #31
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a98:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d102      	bne.n	8001abc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	e00f      	b.n	8001adc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d102      	bne.n	8001aca <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	e008      	b.n	8001adc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	e001      	b.n	8001adc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6819      	ldr	r1, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	400a      	ands	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6819      	ldr	r1, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	22c0      	movs	r2, #192	; 0xc0
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43da      	mvns	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2201      	movs	r2, #1
 8001b82:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20008000 	.word	0x20008000

08001b98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff fd8c 	bl	80016bc <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e316      	b.n	80021de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a66      	ldr	r2, [pc, #408]	; (8001d50 <HAL_DMA_Init+0x1b8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d04a      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a65      	ldr	r2, [pc, #404]	; (8001d54 <HAL_DMA_Init+0x1bc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d045      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a63      	ldr	r2, [pc, #396]	; (8001d58 <HAL_DMA_Init+0x1c0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d040      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a62      	ldr	r2, [pc, #392]	; (8001d5c <HAL_DMA_Init+0x1c4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d03b      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a60      	ldr	r2, [pc, #384]	; (8001d60 <HAL_DMA_Init+0x1c8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d036      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a5f      	ldr	r2, [pc, #380]	; (8001d64 <HAL_DMA_Init+0x1cc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d031      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a5d      	ldr	r2, [pc, #372]	; (8001d68 <HAL_DMA_Init+0x1d0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d02c      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a5c      	ldr	r2, [pc, #368]	; (8001d6c <HAL_DMA_Init+0x1d4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d027      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a5a      	ldr	r2, [pc, #360]	; (8001d70 <HAL_DMA_Init+0x1d8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d022      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a59      	ldr	r2, [pc, #356]	; (8001d74 <HAL_DMA_Init+0x1dc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d01d      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a57      	ldr	r2, [pc, #348]	; (8001d78 <HAL_DMA_Init+0x1e0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d018      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a56      	ldr	r2, [pc, #344]	; (8001d7c <HAL_DMA_Init+0x1e4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a54      	ldr	r2, [pc, #336]	; (8001d80 <HAL_DMA_Init+0x1e8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00e      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a53      	ldr	r2, [pc, #332]	; (8001d84 <HAL_DMA_Init+0x1ec>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d009      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a51      	ldr	r2, [pc, #324]	; (8001d88 <HAL_DMA_Init+0x1f0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_DMA_Init+0xb8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_DMA_Init+0x1f4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d101      	bne.n	8001c54 <HAL_DMA_Init+0xbc>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_DMA_Init+0xbe>
 8001c54:	2300      	movs	r3, #0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 813b 	beq.w	8001ed2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a37      	ldr	r2, [pc, #220]	; (8001d50 <HAL_DMA_Init+0x1b8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d04a      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a36      	ldr	r2, [pc, #216]	; (8001d54 <HAL_DMA_Init+0x1bc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d045      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a34      	ldr	r2, [pc, #208]	; (8001d58 <HAL_DMA_Init+0x1c0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d040      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a33      	ldr	r2, [pc, #204]	; (8001d5c <HAL_DMA_Init+0x1c4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d03b      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <HAL_DMA_Init+0x1c8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d036      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a30      	ldr	r2, [pc, #192]	; (8001d64 <HAL_DMA_Init+0x1cc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d031      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a2e      	ldr	r2, [pc, #184]	; (8001d68 <HAL_DMA_Init+0x1d0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02c      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a2d      	ldr	r2, [pc, #180]	; (8001d6c <HAL_DMA_Init+0x1d4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d027      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2b      	ldr	r2, [pc, #172]	; (8001d70 <HAL_DMA_Init+0x1d8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d022      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2a      	ldr	r2, [pc, #168]	; (8001d74 <HAL_DMA_Init+0x1dc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d01d      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a28      	ldr	r2, [pc, #160]	; (8001d78 <HAL_DMA_Init+0x1e0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d018      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <HAL_DMA_Init+0x1e4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d013      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <HAL_DMA_Init+0x1e8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00e      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <HAL_DMA_Init+0x1ec>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a22      	ldr	r2, [pc, #136]	; (8001d88 <HAL_DMA_Init+0x1f0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_DMA_Init+0x174>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <HAL_DMA_Init+0x1f4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d108      	bne.n	8001d1e <HAL_DMA_Init+0x186>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e007      	b.n	8001d2e <HAL_DMA_Init+0x196>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d2e:	e02f      	b.n	8001d90 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d30:	f7ff fcc4 	bl	80016bc <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b05      	cmp	r3, #5
 8001d3c:	d928      	bls.n	8001d90 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2220      	movs	r2, #32
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2203      	movs	r2, #3
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e246      	b.n	80021de <HAL_DMA_Init+0x646>
 8001d50:	40020010 	.word	0x40020010
 8001d54:	40020028 	.word	0x40020028
 8001d58:	40020040 	.word	0x40020040
 8001d5c:	40020058 	.word	0x40020058
 8001d60:	40020070 	.word	0x40020070
 8001d64:	40020088 	.word	0x40020088
 8001d68:	400200a0 	.word	0x400200a0
 8001d6c:	400200b8 	.word	0x400200b8
 8001d70:	40020410 	.word	0x40020410
 8001d74:	40020428 	.word	0x40020428
 8001d78:	40020440 	.word	0x40020440
 8001d7c:	40020458 	.word	0x40020458
 8001d80:	40020470 	.word	0x40020470
 8001d84:	40020488 	.word	0x40020488
 8001d88:	400204a0 	.word	0x400204a0
 8001d8c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1c8      	bne.n	8001d30 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4b83      	ldr	r3, [pc, #524]	; (8001fb8 <HAL_DMA_Init+0x420>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001db6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d107      	bne.n	8001df4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	4313      	orrs	r3, r2
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001df4:	4b71      	ldr	r3, [pc, #452]	; (8001fbc <HAL_DMA_Init+0x424>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b71      	ldr	r3, [pc, #452]	; (8001fc0 <HAL_DMA_Init+0x428>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e00:	d328      	bcc.n	8001e54 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b28      	cmp	r3, #40	; 0x28
 8001e08:	d903      	bls.n	8001e12 <HAL_DMA_Init+0x27a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8001e10:	d917      	bls.n	8001e42 <HAL_DMA_Init+0x2aa>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b3e      	cmp	r3, #62	; 0x3e
 8001e18:	d903      	bls.n	8001e22 <HAL_DMA_Init+0x28a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b42      	cmp	r3, #66	; 0x42
 8001e20:	d90f      	bls.n	8001e42 <HAL_DMA_Init+0x2aa>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b46      	cmp	r3, #70	; 0x46
 8001e28:	d903      	bls.n	8001e32 <HAL_DMA_Init+0x29a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b48      	cmp	r3, #72	; 0x48
 8001e30:	d907      	bls.n	8001e42 <HAL_DMA_Init+0x2aa>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b4e      	cmp	r3, #78	; 0x4e
 8001e38:	d905      	bls.n	8001e46 <HAL_DMA_Init+0x2ae>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b52      	cmp	r3, #82	; 0x52
 8001e40:	d801      	bhi.n	8001e46 <HAL_DMA_Init+0x2ae>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_DMA_Init+0x2b0>
 8001e46:	2300      	movs	r3, #0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e52:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f023 0307 	bic.w	r3, r3, #7
 8001e6a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d117      	bne.n	8001eae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00e      	beq.n	8001eae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fa8f 	bl	80023b4 <DMA_CheckFifoParam>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e197      	b.n	80021de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f9ca 	bl	8002250 <DMA_CalcBaseAndBitshift>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	223f      	movs	r2, #63	; 0x3f
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	e0cd      	b.n	800206e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <HAL_DMA_Init+0x42c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d022      	beq.n	8001f22 <HAL_DMA_Init+0x38a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a39      	ldr	r2, [pc, #228]	; (8001fc8 <HAL_DMA_Init+0x430>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01d      	beq.n	8001f22 <HAL_DMA_Init+0x38a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a38      	ldr	r2, [pc, #224]	; (8001fcc <HAL_DMA_Init+0x434>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d018      	beq.n	8001f22 <HAL_DMA_Init+0x38a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a36      	ldr	r2, [pc, #216]	; (8001fd0 <HAL_DMA_Init+0x438>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_DMA_Init+0x38a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a35      	ldr	r2, [pc, #212]	; (8001fd4 <HAL_DMA_Init+0x43c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00e      	beq.n	8001f22 <HAL_DMA_Init+0x38a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a33      	ldr	r2, [pc, #204]	; (8001fd8 <HAL_DMA_Init+0x440>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d009      	beq.n	8001f22 <HAL_DMA_Init+0x38a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a32      	ldr	r2, [pc, #200]	; (8001fdc <HAL_DMA_Init+0x444>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d004      	beq.n	8001f22 <HAL_DMA_Init+0x38a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a30      	ldr	r2, [pc, #192]	; (8001fe0 <HAL_DMA_Init+0x448>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_DMA_Init+0x38e>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_DMA_Init+0x390>
 8001f26:	2300      	movs	r3, #0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 8097 	beq.w	800205c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <HAL_DMA_Init+0x42c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d021      	beq.n	8001f7c <HAL_DMA_Init+0x3e4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <HAL_DMA_Init+0x430>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01c      	beq.n	8001f7c <HAL_DMA_Init+0x3e4>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a21      	ldr	r2, [pc, #132]	; (8001fcc <HAL_DMA_Init+0x434>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d017      	beq.n	8001f7c <HAL_DMA_Init+0x3e4>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <HAL_DMA_Init+0x438>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d012      	beq.n	8001f7c <HAL_DMA_Init+0x3e4>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <HAL_DMA_Init+0x43c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00d      	beq.n	8001f7c <HAL_DMA_Init+0x3e4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <HAL_DMA_Init+0x440>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d008      	beq.n	8001f7c <HAL_DMA_Init+0x3e4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <HAL_DMA_Init+0x444>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <HAL_DMA_Init+0x3e4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <HAL_DMA_Init+0x448>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_DMA_Init+0x44c>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b40      	cmp	r3, #64	; 0x40
 8001fa4:	d020      	beq.n	8001fe8 <HAL_DMA_Init+0x450>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b80      	cmp	r3, #128	; 0x80
 8001fac:	d102      	bne.n	8001fb4 <HAL_DMA_Init+0x41c>
 8001fae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fb2:	e01a      	b.n	8001fea <HAL_DMA_Init+0x452>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e018      	b.n	8001fea <HAL_DMA_Init+0x452>
 8001fb8:	fe10803f 	.word	0xfe10803f
 8001fbc:	5c001000 	.word	0x5c001000
 8001fc0:	ffff0000 	.word	0xffff0000
 8001fc4:	58025408 	.word	0x58025408
 8001fc8:	5802541c 	.word	0x5802541c
 8001fcc:	58025430 	.word	0x58025430
 8001fd0:	58025444 	.word	0x58025444
 8001fd4:	58025458 	.word	0x58025458
 8001fd8:	5802546c 	.word	0x5802546c
 8001fdc:	58025480 	.word	0x58025480
 8001fe0:	58025494 	.word	0x58025494
 8001fe4:	fffe000f 	.word	0xfffe000f
 8001fe8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68d2      	ldr	r2, [r2, #12]
 8001fee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ff0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ff8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002000:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002008:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002010:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002018:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b6e      	ldr	r3, [pc, #440]	; (80021e8 <HAL_DMA_Init+0x650>)
 8002030:	4413      	add	r3, r2
 8002032:	4a6e      	ldr	r2, [pc, #440]	; (80021ec <HAL_DMA_Init+0x654>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	009a      	lsls	r2, r3, #2
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f905 	bl	8002250 <DMA_CalcBaseAndBitshift>
 8002046:	4603      	mov	r3, r0
 8002048:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	2201      	movs	r2, #1
 8002054:	409a      	lsls	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	e008      	b.n	800206e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2240      	movs	r2, #64	; 0x40
 8002060:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2203      	movs	r2, #3
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0b7      	b.n	80021de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a5f      	ldr	r2, [pc, #380]	; (80021f0 <HAL_DMA_Init+0x658>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d072      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a5d      	ldr	r2, [pc, #372]	; (80021f4 <HAL_DMA_Init+0x65c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d06d      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a5c      	ldr	r2, [pc, #368]	; (80021f8 <HAL_DMA_Init+0x660>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d068      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a5a      	ldr	r2, [pc, #360]	; (80021fc <HAL_DMA_Init+0x664>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d063      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a59      	ldr	r2, [pc, #356]	; (8002200 <HAL_DMA_Init+0x668>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d05e      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a57      	ldr	r2, [pc, #348]	; (8002204 <HAL_DMA_Init+0x66c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d059      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a56      	ldr	r2, [pc, #344]	; (8002208 <HAL_DMA_Init+0x670>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d054      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a54      	ldr	r2, [pc, #336]	; (800220c <HAL_DMA_Init+0x674>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d04f      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a53      	ldr	r2, [pc, #332]	; (8002210 <HAL_DMA_Init+0x678>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d04a      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a51      	ldr	r2, [pc, #324]	; (8002214 <HAL_DMA_Init+0x67c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d045      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a50      	ldr	r2, [pc, #320]	; (8002218 <HAL_DMA_Init+0x680>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d040      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a4e      	ldr	r2, [pc, #312]	; (800221c <HAL_DMA_Init+0x684>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d03b      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a4d      	ldr	r2, [pc, #308]	; (8002220 <HAL_DMA_Init+0x688>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d036      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a4b      	ldr	r2, [pc, #300]	; (8002224 <HAL_DMA_Init+0x68c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d031      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a4a      	ldr	r2, [pc, #296]	; (8002228 <HAL_DMA_Init+0x690>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d02c      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a48      	ldr	r2, [pc, #288]	; (800222c <HAL_DMA_Init+0x694>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d027      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a47      	ldr	r2, [pc, #284]	; (8002230 <HAL_DMA_Init+0x698>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d022      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a45      	ldr	r2, [pc, #276]	; (8002234 <HAL_DMA_Init+0x69c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01d      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a44      	ldr	r2, [pc, #272]	; (8002238 <HAL_DMA_Init+0x6a0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d018      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a42      	ldr	r2, [pc, #264]	; (800223c <HAL_DMA_Init+0x6a4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a41      	ldr	r2, [pc, #260]	; (8002240 <HAL_DMA_Init+0x6a8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00e      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a3f      	ldr	r2, [pc, #252]	; (8002244 <HAL_DMA_Init+0x6ac>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d009      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a3e      	ldr	r2, [pc, #248]	; (8002248 <HAL_DMA_Init+0x6b0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d004      	beq.n	800215e <HAL_DMA_Init+0x5c6>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a3c      	ldr	r2, [pc, #240]	; (800224c <HAL_DMA_Init+0x6b4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_DMA_Init+0x5ca>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_DMA_Init+0x5cc>
 8002162:	2300      	movs	r3, #0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d032      	beq.n	80021ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f99f 	bl	80024ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b80      	cmp	r3, #128	; 0x80
 8002174:	d102      	bne.n	800217c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002190:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d010      	beq.n	80021bc <HAL_DMA_Init+0x624>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d80c      	bhi.n	80021bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fa1c 	bl	80025e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	e008      	b.n	80021ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	a7fdabf8 	.word	0xa7fdabf8
 80021ec:	cccccccd 	.word	0xcccccccd
 80021f0:	40020010 	.word	0x40020010
 80021f4:	40020028 	.word	0x40020028
 80021f8:	40020040 	.word	0x40020040
 80021fc:	40020058 	.word	0x40020058
 8002200:	40020070 	.word	0x40020070
 8002204:	40020088 	.word	0x40020088
 8002208:	400200a0 	.word	0x400200a0
 800220c:	400200b8 	.word	0x400200b8
 8002210:	40020410 	.word	0x40020410
 8002214:	40020428 	.word	0x40020428
 8002218:	40020440 	.word	0x40020440
 800221c:	40020458 	.word	0x40020458
 8002220:	40020470 	.word	0x40020470
 8002224:	40020488 	.word	0x40020488
 8002228:	400204a0 	.word	0x400204a0
 800222c:	400204b8 	.word	0x400204b8
 8002230:	58025408 	.word	0x58025408
 8002234:	5802541c 	.word	0x5802541c
 8002238:	58025430 	.word	0x58025430
 800223c:	58025444 	.word	0x58025444
 8002240:	58025458 	.word	0x58025458
 8002244:	5802546c 	.word	0x5802546c
 8002248:	58025480 	.word	0x58025480
 800224c:	58025494 	.word	0x58025494

08002250 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a42      	ldr	r2, [pc, #264]	; (8002368 <DMA_CalcBaseAndBitshift+0x118>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d04a      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a41      	ldr	r2, [pc, #260]	; (800236c <DMA_CalcBaseAndBitshift+0x11c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d045      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a3f      	ldr	r2, [pc, #252]	; (8002370 <DMA_CalcBaseAndBitshift+0x120>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d040      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a3e      	ldr	r2, [pc, #248]	; (8002374 <DMA_CalcBaseAndBitshift+0x124>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d03b      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a3c      	ldr	r2, [pc, #240]	; (8002378 <DMA_CalcBaseAndBitshift+0x128>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d036      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a3b      	ldr	r2, [pc, #236]	; (800237c <DMA_CalcBaseAndBitshift+0x12c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d031      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a39      	ldr	r2, [pc, #228]	; (8002380 <DMA_CalcBaseAndBitshift+0x130>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d02c      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a38      	ldr	r2, [pc, #224]	; (8002384 <DMA_CalcBaseAndBitshift+0x134>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d027      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a36      	ldr	r2, [pc, #216]	; (8002388 <DMA_CalcBaseAndBitshift+0x138>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d022      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a35      	ldr	r2, [pc, #212]	; (800238c <DMA_CalcBaseAndBitshift+0x13c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d01d      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a33      	ldr	r2, [pc, #204]	; (8002390 <DMA_CalcBaseAndBitshift+0x140>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d018      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a32      	ldr	r2, [pc, #200]	; (8002394 <DMA_CalcBaseAndBitshift+0x144>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d013      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a30      	ldr	r2, [pc, #192]	; (8002398 <DMA_CalcBaseAndBitshift+0x148>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00e      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a2f      	ldr	r2, [pc, #188]	; (800239c <DMA_CalcBaseAndBitshift+0x14c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d009      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2d      	ldr	r2, [pc, #180]	; (80023a0 <DMA_CalcBaseAndBitshift+0x150>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d004      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <DMA_CalcBaseAndBitshift+0x154>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <DMA_CalcBaseAndBitshift+0xac>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <DMA_CalcBaseAndBitshift+0xae>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d024      	beq.n	800234c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3b10      	subs	r3, #16
 800230a:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <DMA_CalcBaseAndBitshift+0x158>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	4a24      	ldr	r2, [pc, #144]	; (80023ac <DMA_CalcBaseAndBitshift+0x15c>)
 800231c:	5cd3      	ldrb	r3, [r2, r3]
 800231e:	461a      	mov	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d908      	bls.n	800233c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <DMA_CalcBaseAndBitshift+0x160>)
 8002332:	4013      	ands	r3, r2
 8002334:	1d1a      	adds	r2, r3, #4
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	659a      	str	r2, [r3, #88]	; 0x58
 800233a:	e00d      	b.n	8002358 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <DMA_CalcBaseAndBitshift+0x160>)
 8002344:	4013      	ands	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6593      	str	r3, [r2, #88]	; 0x58
 800234a:	e005      	b.n	8002358 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40020010 	.word	0x40020010
 800236c:	40020028 	.word	0x40020028
 8002370:	40020040 	.word	0x40020040
 8002374:	40020058 	.word	0x40020058
 8002378:	40020070 	.word	0x40020070
 800237c:	40020088 	.word	0x40020088
 8002380:	400200a0 	.word	0x400200a0
 8002384:	400200b8 	.word	0x400200b8
 8002388:	40020410 	.word	0x40020410
 800238c:	40020428 	.word	0x40020428
 8002390:	40020440 	.word	0x40020440
 8002394:	40020458 	.word	0x40020458
 8002398:	40020470 	.word	0x40020470
 800239c:	40020488 	.word	0x40020488
 80023a0:	400204a0 	.word	0x400204a0
 80023a4:	400204b8 	.word	0x400204b8
 80023a8:	aaaaaaab 	.word	0xaaaaaaab
 80023ac:	0800d090 	.word	0x0800d090
 80023b0:	fffffc00 	.word	0xfffffc00

080023b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d120      	bne.n	800240a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d858      	bhi.n	8002482 <DMA_CheckFifoParam+0xce>
 80023d0:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <DMA_CheckFifoParam+0x24>)
 80023d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d6:	bf00      	nop
 80023d8:	080023e9 	.word	0x080023e9
 80023dc:	080023fb 	.word	0x080023fb
 80023e0:	080023e9 	.word	0x080023e9
 80023e4:	08002483 	.word	0x08002483
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d048      	beq.n	8002486 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80023f8:	e045      	b.n	8002486 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002402:	d142      	bne.n	800248a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002408:	e03f      	b.n	800248a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002412:	d123      	bne.n	800245c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	2b03      	cmp	r3, #3
 800241a:	d838      	bhi.n	800248e <DMA_CheckFifoParam+0xda>
 800241c:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <DMA_CheckFifoParam+0x70>)
 800241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002422:	bf00      	nop
 8002424:	08002435 	.word	0x08002435
 8002428:	0800243b 	.word	0x0800243b
 800242c:	08002435 	.word	0x08002435
 8002430:	0800244d 	.word	0x0800244d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
        break;
 8002438:	e030      	b.n	800249c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d025      	beq.n	8002492 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800244a:	e022      	b.n	8002492 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002454:	d11f      	bne.n	8002496 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800245a:	e01c      	b.n	8002496 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	2b02      	cmp	r3, #2
 8002462:	d902      	bls.n	800246a <DMA_CheckFifoParam+0xb6>
 8002464:	2b03      	cmp	r3, #3
 8002466:	d003      	beq.n	8002470 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002468:	e018      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
        break;
 800246e:	e015      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00e      	beq.n	800249a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
    break;
 8002480:	e00b      	b.n	800249a <DMA_CheckFifoParam+0xe6>
        break;
 8002482:	bf00      	nop
 8002484:	e00a      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        break;
 8002486:	bf00      	nop
 8002488:	e008      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        break;
 800248a:	bf00      	nop
 800248c:	e006      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        break;
 800248e:	bf00      	nop
 8002490:	e004      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        break;
 8002492:	bf00      	nop
 8002494:	e002      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        break;
 8002496:	bf00      	nop
 8002498:	e000      	b.n	800249c <DMA_CheckFifoParam+0xe8>
    break;
 800249a:	bf00      	nop
    }
  }

  return status;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop

080024ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d022      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a36      	ldr	r2, [pc, #216]	; (80025a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01d      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a35      	ldr	r2, [pc, #212]	; (80025a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d018      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a33      	ldr	r2, [pc, #204]	; (80025ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a32      	ldr	r2, [pc, #200]	; (80025b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00e      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a30      	ldr	r2, [pc, #192]	; (80025b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d009      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a2f      	ldr	r2, [pc, #188]	; (80025b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d004      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a2d      	ldr	r2, [pc, #180]	; (80025bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01a      	beq.n	800254a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	3b08      	subs	r3, #8
 800251c:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	461a      	mov	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a24      	ldr	r2, [pc, #144]	; (80025c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002538:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2201      	movs	r2, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002548:	e024      	b.n	8002594 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3b10      	subs	r3, #16
 8002552:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d806      	bhi.n	8002572 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4a1b      	ldr	r2, [pc, #108]	; (80025d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d902      	bls.n	8002572 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3308      	adds	r3, #8
 8002570:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	461a      	mov	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a16      	ldr	r2, [pc, #88]	; (80025dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002584:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2201      	movs	r2, #1
 800258e:	409a      	lsls	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	58025408 	.word	0x58025408
 80025a4:	5802541c 	.word	0x5802541c
 80025a8:	58025430 	.word	0x58025430
 80025ac:	58025444 	.word	0x58025444
 80025b0:	58025458 	.word	0x58025458
 80025b4:	5802546c 	.word	0x5802546c
 80025b8:	58025480 	.word	0x58025480
 80025bc:	58025494 	.word	0x58025494
 80025c0:	cccccccd 	.word	0xcccccccd
 80025c4:	16009600 	.word	0x16009600
 80025c8:	58025880 	.word	0x58025880
 80025cc:	aaaaaaab 	.word	0xaaaaaaab
 80025d0:	400204b8 	.word	0x400204b8
 80025d4:	4002040f 	.word	0x4002040f
 80025d8:	10008200 	.word	0x10008200
 80025dc:	40020880 	.word	0x40020880

080025e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d04a      	beq.n	800268c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d847      	bhi.n	800268c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a25      	ldr	r2, [pc, #148]	; (8002698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d022      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a24      	ldr	r2, [pc, #144]	; (800269c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d01d      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a22      	ldr	r2, [pc, #136]	; (80026a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d018      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a21      	ldr	r2, [pc, #132]	; (80026a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d013      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00e      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1e      	ldr	r2, [pc, #120]	; (80026ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d009      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d101      	bne.n	8002650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002650:	2300      	movs	r3, #0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	461a      	mov	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a15      	ldr	r2, [pc, #84]	; (80026bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002668:	671a      	str	r2, [r3, #112]	; 0x70
 800266a:	e009      	b.n	8002680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800267e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3b01      	subs	r3, #1
 8002684:	2201      	movs	r2, #1
 8002686:	409a      	lsls	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	58025408 	.word	0x58025408
 800269c:	5802541c 	.word	0x5802541c
 80026a0:	58025430 	.word	0x58025430
 80026a4:	58025444 	.word	0x58025444
 80026a8:	58025458 	.word	0x58025458
 80026ac:	5802546c 	.word	0x5802546c
 80026b0:	58025480 	.word	0x58025480
 80026b4:	58025494 	.word	0x58025494
 80026b8:	1600963f 	.word	0x1600963f
 80026bc:	58025940 	.word	0x58025940
 80026c0:	1000823f 	.word	0x1000823f
 80026c4:	40020940 	.word	0x40020940

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026d6:	4b89      	ldr	r3, [pc, #548]	; (80028fc <HAL_GPIO_Init+0x234>)
 80026d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026da:	e194      	b.n	8002a06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2101      	movs	r1, #1
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8186 	beq.w	8002a00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d00b      	beq.n	8002714 <HAL_GPIO_Init+0x4c>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d007      	beq.n	8002714 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002708:	2b11      	cmp	r3, #17
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b12      	cmp	r3, #18
 8002712:	d130      	bne.n	8002776 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800274a:	2201      	movs	r2, #1
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	f003 0201 	and.w	r2, r3, #1
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0xee>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b12      	cmp	r3, #18
 80027b4:	d123      	bne.n	80027fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	08da      	lsrs	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3208      	adds	r2, #8
 80027be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	220f      	movs	r2, #15
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	08da      	lsrs	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3208      	adds	r2, #8
 80027f8:	69b9      	ldr	r1, [r7, #24]
 80027fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0203 	and.w	r2, r3, #3
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80e0 	beq.w	8002a00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002840:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <HAL_GPIO_Init+0x238>)
 8002842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002846:	4a2e      	ldr	r2, [pc, #184]	; (8002900 <HAL_GPIO_Init+0x238>)
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_GPIO_Init+0x238>)
 8002852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800285e:	4a29      	ldr	r2, [pc, #164]	; (8002904 <HAL_GPIO_Init+0x23c>)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	220f      	movs	r2, #15
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a20      	ldr	r2, [pc, #128]	; (8002908 <HAL_GPIO_Init+0x240>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d052      	beq.n	8002930 <HAL_GPIO_Init+0x268>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a1f      	ldr	r2, [pc, #124]	; (800290c <HAL_GPIO_Init+0x244>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d031      	beq.n	80028f6 <HAL_GPIO_Init+0x22e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1e      	ldr	r2, [pc, #120]	; (8002910 <HAL_GPIO_Init+0x248>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d02b      	beq.n	80028f2 <HAL_GPIO_Init+0x22a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a1d      	ldr	r2, [pc, #116]	; (8002914 <HAL_GPIO_Init+0x24c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d025      	beq.n	80028ee <HAL_GPIO_Init+0x226>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <HAL_GPIO_Init+0x250>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01f      	beq.n	80028ea <HAL_GPIO_Init+0x222>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_GPIO_Init+0x254>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d019      	beq.n	80028e6 <HAL_GPIO_Init+0x21e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_GPIO_Init+0x258>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_GPIO_Init+0x21a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <HAL_GPIO_Init+0x25c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00d      	beq.n	80028de <HAL_GPIO_Init+0x216>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_GPIO_Init+0x260>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <HAL_GPIO_Init+0x212>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a17      	ldr	r2, [pc, #92]	; (800292c <HAL_GPIO_Init+0x264>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_GPIO_Init+0x20e>
 80028d2:	2309      	movs	r3, #9
 80028d4:	e02d      	b.n	8002932 <HAL_GPIO_Init+0x26a>
 80028d6:	230a      	movs	r3, #10
 80028d8:	e02b      	b.n	8002932 <HAL_GPIO_Init+0x26a>
 80028da:	2308      	movs	r3, #8
 80028dc:	e029      	b.n	8002932 <HAL_GPIO_Init+0x26a>
 80028de:	2307      	movs	r3, #7
 80028e0:	e027      	b.n	8002932 <HAL_GPIO_Init+0x26a>
 80028e2:	2306      	movs	r3, #6
 80028e4:	e025      	b.n	8002932 <HAL_GPIO_Init+0x26a>
 80028e6:	2305      	movs	r3, #5
 80028e8:	e023      	b.n	8002932 <HAL_GPIO_Init+0x26a>
 80028ea:	2304      	movs	r3, #4
 80028ec:	e021      	b.n	8002932 <HAL_GPIO_Init+0x26a>
 80028ee:	2303      	movs	r3, #3
 80028f0:	e01f      	b.n	8002932 <HAL_GPIO_Init+0x26a>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e01d      	b.n	8002932 <HAL_GPIO_Init+0x26a>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e01b      	b.n	8002932 <HAL_GPIO_Init+0x26a>
 80028fa:	bf00      	nop
 80028fc:	58000080 	.word	0x58000080
 8002900:	58024400 	.word	0x58024400
 8002904:	58000400 	.word	0x58000400
 8002908:	58020000 	.word	0x58020000
 800290c:	58020400 	.word	0x58020400
 8002910:	58020800 	.word	0x58020800
 8002914:	58020c00 	.word	0x58020c00
 8002918:	58021000 	.word	0x58021000
 800291c:	58021400 	.word	0x58021400
 8002920:	58021800 	.word	0x58021800
 8002924:	58021c00 	.word	0x58021c00
 8002928:	58022000 	.word	0x58022000
 800292c:	58022400 	.word	0x58022400
 8002930:	2300      	movs	r3, #0
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	f002 0203 	and.w	r2, r2, #3
 8002938:	0092      	lsls	r2, r2, #2
 800293a:	4093      	lsls	r3, r2
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002942:	4938      	ldr	r1, [pc, #224]	; (8002a24 <HAL_GPIO_Init+0x35c>)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	3302      	adds	r3, #2
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	3301      	adds	r3, #1
 8002a04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f47f ae63 	bne.w	80026dc <HAL_GPIO_Init+0x14>
  }
}
 8002a16:	bf00      	nop
 8002a18:	bf00      	nop
 8002a1a:	3724      	adds	r7, #36	; 0x24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	58000400 	.word	0x58000400

08002a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	e001      	b.n	8002a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
 8002a64:	4613      	mov	r3, r2
 8002a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a68:	787b      	ldrb	r3, [r7, #1]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a74:	e003      	b.n	8002a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a76:	887b      	ldrh	r3, [r7, #2]
 8002a78:	041a      	lsls	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	619a      	str	r2, [r3, #24]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_PWREx_ConfigSupply+0x70>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002aa0:	4b16      	ldr	r3, [pc, #88]	; (8002afc <HAL_PWREx_ConfigSupply+0x70>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d001      	beq.n	8002ab2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e01f      	b.n	8002af2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e01d      	b.n	8002af2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_PWREx_ConfigSupply+0x70>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f023 0207 	bic.w	r2, r3, #7
 8002abe:	490f      	ldr	r1, [pc, #60]	; (8002afc <HAL_PWREx_ConfigSupply+0x70>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ac6:	f7fe fdf9 	bl	80016bc <HAL_GetTick>
 8002aca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002acc:	e009      	b.n	8002ae2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ace:	f7fe fdf5 	bl	80016bc <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002adc:	d901      	bls.n	8002ae2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e007      	b.n	8002af2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_PWREx_ConfigSupply+0x70>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aee:	d1ee      	bne.n	8002ace <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	58024800 	.word	0x58024800

08002b00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	; 0x30
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e3ff      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8087 	beq.w	8002c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b20:	4b99      	ldr	r3, [pc, #612]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b2a:	4b97      	ldr	r3, [pc, #604]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d007      	beq.n	8002b46 <HAL_RCC_OscConfig+0x46>
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	2b18      	cmp	r3, #24
 8002b3a:	d110      	bne.n	8002b5e <HAL_RCC_OscConfig+0x5e>
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d10b      	bne.n	8002b5e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b46:	4b90      	ldr	r3, [pc, #576]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d06c      	beq.n	8002c2c <HAL_RCC_OscConfig+0x12c>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d168      	bne.n	8002c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e3d9      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0x76>
 8002b68:	4b87      	ldr	r3, [pc, #540]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a86      	ldr	r2, [pc, #536]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	e02e      	b.n	8002bd4 <HAL_RCC_OscConfig+0xd4>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x98>
 8002b7e:	4b82      	ldr	r3, [pc, #520]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a81      	ldr	r2, [pc, #516]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b7f      	ldr	r3, [pc, #508]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a7e      	ldr	r2, [pc, #504]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e01d      	b.n	8002bd4 <HAL_RCC_OscConfig+0xd4>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0xbc>
 8002ba2:	4b79      	ldr	r3, [pc, #484]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a78      	ldr	r2, [pc, #480]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b76      	ldr	r3, [pc, #472]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a75      	ldr	r2, [pc, #468]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_OscConfig+0xd4>
 8002bbc:	4b72      	ldr	r3, [pc, #456]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a71      	ldr	r2, [pc, #452]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b6f      	ldr	r3, [pc, #444]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a6e      	ldr	r2, [pc, #440]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d013      	beq.n	8002c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fd6e 	bl	80016bc <HAL_GetTick>
 8002be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be4:	f7fe fd6a 	bl	80016bc <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	; 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e38d      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bf6:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0xe4>
 8002c02:	e014      	b.n	8002c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe fd5a 	bl	80016bc <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fd56 	bl	80016bc <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e379      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c1e:	4b5a      	ldr	r3, [pc, #360]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x10c>
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80ae 	beq.w	8002d98 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3c:	4b52      	ldr	r3, [pc, #328]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c46:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_RCC_OscConfig+0x162>
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	2b18      	cmp	r3, #24
 8002c56:	d13a      	bne.n	8002cce <HAL_RCC_OscConfig+0x1ce>
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d135      	bne.n	8002cce <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c62:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_RCC_OscConfig+0x17a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e34b      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7a:	f7fe fd4f 	bl	800171c <HAL_GetREVID>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d817      	bhi.n	8002cb8 <HAL_RCC_OscConfig+0x1b8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d108      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x1a2>
 8002c90:	4b3d      	ldr	r3, [pc, #244]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c98:	4a3b      	ldr	r2, [pc, #236]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c9e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca0:	e07a      	b.n	8002d98 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	031b      	lsls	r3, r3, #12
 8002cb0:	4935      	ldr	r1, [pc, #212]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb6:	e06f      	b.n	8002d98 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb8:	4b33      	ldr	r3, [pc, #204]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	4930      	ldr	r1, [pc, #192]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ccc:	e064      	b.n	8002d98 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d045      	beq.n	8002d62 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cd6:	4b2c      	ldr	r3, [pc, #176]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 0219 	bic.w	r2, r3, #25
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4929      	ldr	r1, [pc, #164]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fce8 	bl	80016bc <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fce4 	bl	80016bc <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e307      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d02:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	f7fe fd05 	bl	800171c <HAL_GetREVID>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d817      	bhi.n	8002d4c <HAL_RCC_OscConfig+0x24c>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d108      	bne.n	8002d36 <HAL_RCC_OscConfig+0x236>
 8002d24:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d2c:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d32:	6053      	str	r3, [r2, #4]
 8002d34:	e030      	b.n	8002d98 <HAL_RCC_OscConfig+0x298>
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	031b      	lsls	r3, r3, #12
 8002d44:	4910      	ldr	r1, [pc, #64]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
 8002d4a:	e025      	b.n	8002d98 <HAL_RCC_OscConfig+0x298>
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	490b      	ldr	r1, [pc, #44]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
 8002d60:	e01a      	b.n	8002d98 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <HAL_RCC_OscConfig+0x288>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fca5 	bl	80016bc <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe fca1 	bl	80016bc <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d903      	bls.n	8002d8c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e2c4      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
 8002d88:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d8c:	4ba4      	ldr	r3, [pc, #656]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ee      	bne.n	8002d76 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80a9 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da6:	4b9e      	ldr	r3, [pc, #632]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002db0:	4b9b      	ldr	r3, [pc, #620]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d007      	beq.n	8002dcc <HAL_RCC_OscConfig+0x2cc>
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2b18      	cmp	r3, #24
 8002dc0:	d13a      	bne.n	8002e38 <HAL_RCC_OscConfig+0x338>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d135      	bne.n	8002e38 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dcc:	4b94      	ldr	r3, [pc, #592]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_OscConfig+0x2e4>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e296      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002de4:	f7fe fc9a 	bl	800171c <HAL_GetREVID>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d817      	bhi.n	8002e22 <HAL_RCC_OscConfig+0x322>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d108      	bne.n	8002e0c <HAL_RCC_OscConfig+0x30c>
 8002dfa:	4b89      	ldr	r3, [pc, #548]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e02:	4a87      	ldr	r2, [pc, #540]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e0a:	e075      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e0c:	4b84      	ldr	r3, [pc, #528]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	069b      	lsls	r3, r3, #26
 8002e1a:	4981      	ldr	r1, [pc, #516]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e20:	e06a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e22:	4b7f      	ldr	r3, [pc, #508]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	497b      	ldr	r1, [pc, #492]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e36:	e05f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d042      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e40:	4b77      	ldr	r3, [pc, #476]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a76      	ldr	r2, [pc, #472]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fc36 	bl	80016bc <HAL_GetTick>
 8002e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e54:	f7fe fc32 	bl	80016bc <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e255      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e66:	4b6e      	ldr	r3, [pc, #440]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e72:	f7fe fc53 	bl	800171c <HAL_GetREVID>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d817      	bhi.n	8002eb0 <HAL_RCC_OscConfig+0x3b0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d108      	bne.n	8002e9a <HAL_RCC_OscConfig+0x39a>
 8002e88:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e90:	4a63      	ldr	r2, [pc, #396]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002e92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e96:	6053      	str	r3, [r2, #4]
 8002e98:	e02e      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3f8>
 8002e9a:	4b61      	ldr	r3, [pc, #388]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	069b      	lsls	r3, r3, #26
 8002ea8:	495d      	ldr	r1, [pc, #372]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]
 8002eae:	e023      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3f8>
 8002eb0:	4b5b      	ldr	r3, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	061b      	lsls	r3, r3, #24
 8002ebe:	4958      	ldr	r1, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60cb      	str	r3, [r1, #12]
 8002ec4:	e018      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ec6:	4b56      	ldr	r3, [pc, #344]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a55      	ldr	r2, [pc, #340]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fbf3 	bl	80016bc <HAL_GetTick>
 8002ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002eda:	f7fe fbef 	bl	80016bc <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e212      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002eec:	4b4c      	ldr	r3, [pc, #304]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d036      	beq.n	8002f72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d019      	beq.n	8002f40 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0c:	4b44      	ldr	r3, [pc, #272]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f10:	4a43      	ldr	r2, [pc, #268]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fe fbd0 	bl	80016bc <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f20:	f7fe fbcc 	bl	80016bc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e1ef      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f32:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x420>
 8002f3e:	e018      	b.n	8002f72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f40:	4b37      	ldr	r3, [pc, #220]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f44:	4a36      	ldr	r2, [pc, #216]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7fe fbb6 	bl	80016bc <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f54:	f7fe fbb2 	bl	80016bc <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1d5      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d036      	beq.n	8002fec <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d019      	beq.n	8002fba <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f86:	4b26      	ldr	r3, [pc, #152]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a25      	ldr	r2, [pc, #148]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002f8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f92:	f7fe fb93 	bl	80016bc <HAL_GetTick>
 8002f96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f9a:	f7fe fb8f 	bl	80016bc <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e1b2      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fac:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x49a>
 8002fb8:	e018      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fba:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002fc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fb79 	bl	80016bc <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002fce:	f7fe fb75 	bl	80016bc <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e198      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <HAL_RCC_OscConfig+0x520>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8085 	beq.w	8003104 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_RCC_OscConfig+0x524>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a09      	ldr	r2, [pc, #36]	; (8003024 <HAL_RCC_OscConfig+0x524>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003004:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003006:	f7fe fb59 	bl	80016bc <HAL_GetTick>
 800300a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800300c:	e00c      	b.n	8003028 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800300e:	f7fe fb55 	bl	80016bc <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b64      	cmp	r3, #100	; 0x64
 800301a:	d905      	bls.n	8003028 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e178      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
 8003020:	58024400 	.word	0x58024400
 8003024:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003028:	4b96      	ldr	r3, [pc, #600]	; (8003284 <HAL_RCC_OscConfig+0x784>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0ec      	beq.n	800300e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x54a>
 800303c:	4b92      	ldr	r3, [pc, #584]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a91      	ldr	r2, [pc, #580]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
 8003048:	e02d      	b.n	80030a6 <HAL_RCC_OscConfig+0x5a6>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x56c>
 8003052:	4b8d      	ldr	r3, [pc, #564]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	4a8c      	ldr	r2, [pc, #560]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
 800305e:	4b8a      	ldr	r3, [pc, #552]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a89      	ldr	r2, [pc, #548]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	e01c      	b.n	80030a6 <HAL_RCC_OscConfig+0x5a6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d10c      	bne.n	800308e <HAL_RCC_OscConfig+0x58e>
 8003074:	4b84      	ldr	r3, [pc, #528]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a83      	ldr	r2, [pc, #524]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 800307a:	f043 0304 	orr.w	r3, r3, #4
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
 8003080:	4b81      	ldr	r3, [pc, #516]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a80      	ldr	r2, [pc, #512]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
 800308c:	e00b      	b.n	80030a6 <HAL_RCC_OscConfig+0x5a6>
 800308e:	4b7e      	ldr	r3, [pc, #504]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a7d      	ldr	r2, [pc, #500]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	6713      	str	r3, [r2, #112]	; 0x70
 800309a:	4b7b      	ldr	r3, [pc, #492]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	4a7a      	ldr	r2, [pc, #488]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80030a0:	f023 0304 	bic.w	r3, r3, #4
 80030a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d015      	beq.n	80030da <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fe fb05 	bl	80016bc <HAL_GetTick>
 80030b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe fb01 	bl	80016bc <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e122      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030cc:	4b6e      	ldr	r3, [pc, #440]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ee      	beq.n	80030b6 <HAL_RCC_OscConfig+0x5b6>
 80030d8:	e014      	b.n	8003104 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe faef 	bl	80016bc <HAL_GetTick>
 80030de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fe faeb 	bl	80016bc <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e10c      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030f8:	4b63      	ldr	r3, [pc, #396]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ee      	bne.n	80030e2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8101 	beq.w	8003310 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800310e:	4b5e      	ldr	r3, [pc, #376]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003116:	2b18      	cmp	r3, #24
 8003118:	f000 80bc 	beq.w	8003294 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	2b02      	cmp	r3, #2
 8003122:	f040 8095 	bne.w	8003250 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b58      	ldr	r3, [pc, #352]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a57      	ldr	r2, [pc, #348]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 800312c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fe fac3 	bl	80016bc <HAL_GetTick>
 8003136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313a:	f7fe fabf 	bl	80016bc <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e0e2      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800314c:	4b4e      	ldr	r3, [pc, #312]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f0      	bne.n	800313a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003158:	4b4b      	ldr	r3, [pc, #300]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 800315a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315c:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_RCC_OscConfig+0x78c>)
 800315e:	4013      	ands	r3, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003168:	0112      	lsls	r2, r2, #4
 800316a:	430a      	orrs	r2, r1
 800316c:	4946      	ldr	r1, [pc, #280]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 800316e:	4313      	orrs	r3, r2
 8003170:	628b      	str	r3, [r1, #40]	; 0x28
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	3b01      	subs	r3, #1
 8003178:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	3b01      	subs	r3, #1
 8003182:	025b      	lsls	r3, r3, #9
 8003184:	b29b      	uxth	r3, r3
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	3b01      	subs	r3, #1
 800318e:	041b      	lsls	r3, r3, #16
 8003190:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	3b01      	subs	r3, #1
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80031a2:	4939      	ldr	r1, [pc, #228]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80031a8:	4b37      	ldr	r3, [pc, #220]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	4a36      	ldr	r2, [pc, #216]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031b4:	4b34      	ldr	r3, [pc, #208]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b8:	4b35      	ldr	r3, [pc, #212]	; (8003290 <HAL_RCC_OscConfig+0x790>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031c0:	00d2      	lsls	r2, r2, #3
 80031c2:	4931      	ldr	r1, [pc, #196]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80031c8:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	f023 020c 	bic.w	r2, r3, #12
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	492c      	ldr	r1, [pc, #176]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031da:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	f023 0202 	bic.w	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	4928      	ldr	r1, [pc, #160]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031ec:	4b26      	ldr	r3, [pc, #152]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	4a25      	ldr	r2, [pc, #148]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f8:	4b23      	ldr	r3, [pc, #140]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	4a22      	ldr	r2, [pc, #136]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 80031fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003202:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003204:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 800320a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800320e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003210:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800321c:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe fa48 	bl	80016bc <HAL_GetTick>
 800322c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003230:	f7fe fa44 	bl	80016bc <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e067      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x730>
 800324e:	e05f      	b.n	8003310 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800325a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe fa2e 	bl	80016bc <HAL_GetTick>
 8003260:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe fa2a 	bl	80016bc <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e04d      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003276:	4b04      	ldr	r3, [pc, #16]	; (8003288 <HAL_RCC_OscConfig+0x788>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x764>
 8003282:	e045      	b.n	8003310 <HAL_RCC_OscConfig+0x810>
 8003284:	58024800 	.word	0x58024800
 8003288:	58024400 	.word	0x58024400
 800328c:	fffffc0c 	.word	0xfffffc0c
 8003290:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003294:	4b21      	ldr	r3, [pc, #132]	; (800331c <HAL_RCC_OscConfig+0x81c>)
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_RCC_OscConfig+0x81c>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d031      	beq.n	800330c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f003 0203 	and.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d12a      	bne.n	800330c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d122      	bne.n	800330c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d11a      	bne.n	800330c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	0a5b      	lsrs	r3, r3, #9
 80032da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d111      	bne.n	800330c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	0c1b      	lsrs	r3, r3, #16
 80032ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d108      	bne.n	800330c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	0e1b      	lsrs	r3, r3, #24
 80032fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3730      	adds	r7, #48	; 0x30
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	58024400 	.word	0x58024400

08003320 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e19c      	b.n	800366e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003334:	4b8a      	ldr	r3, [pc, #552]	; (8003560 <HAL_RCC_ClockConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d910      	bls.n	8003364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b87      	ldr	r3, [pc, #540]	; (8003560 <HAL_RCC_ClockConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 020f 	bic.w	r2, r3, #15
 800334a:	4985      	ldr	r1, [pc, #532]	; (8003560 <HAL_RCC_ClockConfig+0x240>)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b83      	ldr	r3, [pc, #524]	; (8003560 <HAL_RCC_ClockConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e184      	b.n	800366e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d010      	beq.n	8003392 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	4b7b      	ldr	r3, [pc, #492]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800337c:	429a      	cmp	r2, r3
 800337e:	d908      	bls.n	8003392 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003380:	4b78      	ldr	r3, [pc, #480]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	4975      	ldr	r1, [pc, #468]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 800338e:	4313      	orrs	r3, r2
 8003390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	4b70      	ldr	r3, [pc, #448]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d908      	bls.n	80033c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033ae:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	496a      	ldr	r1, [pc, #424]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	4b64      	ldr	r3, [pc, #400]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033d8:	429a      	cmp	r2, r3
 80033da:	d908      	bls.n	80033ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033dc:	4b61      	ldr	r3, [pc, #388]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	495e      	ldr	r1, [pc, #376]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d010      	beq.n	800341c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	4b59      	ldr	r3, [pc, #356]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003406:	429a      	cmp	r2, r3
 8003408:	d908      	bls.n	800341c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800340a:	4b56      	ldr	r3, [pc, #344]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4953      	ldr	r1, [pc, #332]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 8003418:	4313      	orrs	r3, r2
 800341a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d010      	beq.n	800344a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	4b4d      	ldr	r3, [pc, #308]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	429a      	cmp	r2, r3
 8003436:	d908      	bls.n	800344a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f023 020f 	bic.w	r2, r3, #15
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4947      	ldr	r1, [pc, #284]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 8003446:	4313      	orrs	r3, r2
 8003448:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d055      	beq.n	8003502 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003456:	4b43      	ldr	r3, [pc, #268]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	4940      	ldr	r1, [pc, #256]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 8003464:	4313      	orrs	r3, r2
 8003466:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d107      	bne.n	8003480 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003470:	4b3c      	ldr	r3, [pc, #240]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d121      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0f6      	b.n	800366e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d107      	bne.n	8003498 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003488:	4b36      	ldr	r3, [pc, #216]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d115      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0ea      	b.n	800366e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d107      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034a0:	4b30      	ldr	r3, [pc, #192]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0de      	b.n	800366e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b0:	4b2c      	ldr	r3, [pc, #176]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0d6      	b.n	800366e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034c0:	4b28      	ldr	r3, [pc, #160]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f023 0207 	bic.w	r2, r3, #7
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4925      	ldr	r1, [pc, #148]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d2:	f7fe f8f3 	bl	80016bc <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d8:	e00a      	b.n	80034f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034da:	f7fe f8ef 	bl	80016bc <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e0be      	b.n	800366e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f0:	4b1c      	ldr	r3, [pc, #112]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	429a      	cmp	r2, r3
 8003500:	d1eb      	bne.n	80034da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d010      	beq.n	8003530 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	429a      	cmp	r2, r3
 800351c:	d208      	bcs.n	8003530 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f023 020f 	bic.w	r2, r3, #15
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	490e      	ldr	r1, [pc, #56]	; (8003564 <HAL_RCC_ClockConfig+0x244>)
 800352c:	4313      	orrs	r3, r2
 800352e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d214      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353e:	4b08      	ldr	r3, [pc, #32]	; (8003560 <HAL_RCC_ClockConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 020f 	bic.w	r2, r3, #15
 8003546:	4906      	ldr	r1, [pc, #24]	; (8003560 <HAL_RCC_ClockConfig+0x240>)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354e:	4b04      	ldr	r3, [pc, #16]	; (8003560 <HAL_RCC_ClockConfig+0x240>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e086      	b.n	800366e <HAL_RCC_ClockConfig+0x34e>
 8003560:	52002000 	.word	0x52002000
 8003564:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003580:	429a      	cmp	r2, r3
 8003582:	d208      	bcs.n	8003596 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003584:	4b3c      	ldr	r3, [pc, #240]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	4939      	ldr	r1, [pc, #228]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 8003592:	4313      	orrs	r3, r2
 8003594:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d010      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	4b34      	ldr	r3, [pc, #208]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d208      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035b2:	4b31      	ldr	r3, [pc, #196]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	492e      	ldr	r1, [pc, #184]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d010      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699a      	ldr	r2, [r3, #24]
 80035d4:	4b28      	ldr	r3, [pc, #160]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035dc:	429a      	cmp	r2, r3
 80035de:	d208      	bcs.n	80035f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	4922      	ldr	r1, [pc, #136]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d010      	beq.n	8003620 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800360a:	429a      	cmp	r2, r3
 800360c:	d208      	bcs.n	8003620 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800360e:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4917      	ldr	r1, [pc, #92]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 800361c:	4313      	orrs	r3, r2
 800361e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003620:	f000 f834 	bl	800368c <HAL_RCC_GetSysClockFreq>
 8003624:	4602      	mov	r2, r0
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	4912      	ldr	r1, [pc, #72]	; (800367c <HAL_RCC_ClockConfig+0x35c>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
 800363c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <HAL_RCC_ClockConfig+0x358>)
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	4a0d      	ldr	r2, [pc, #52]	; (800367c <HAL_RCC_ClockConfig+0x35c>)
 8003648:	5cd3      	ldrb	r3, [r2, r3]
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
 8003654:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <HAL_RCC_ClockConfig+0x360>)
 8003656:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003658:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <HAL_RCC_ClockConfig+0x364>)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_RCC_ClockConfig+0x368>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd fe9a 	bl	800139c <HAL_InitTick>
 8003668:	4603      	mov	r3, r0
 800366a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	58024400 	.word	0x58024400
 800367c:	0800d080 	.word	0x0800d080
 8003680:	24000004 	.word	0x24000004
 8003684:	24000000 	.word	0x24000000
 8003688:	24000008 	.word	0x24000008

0800368c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	; 0x24
 8003690:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003692:	4bb3      	ldr	r3, [pc, #716]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800369a:	2b18      	cmp	r3, #24
 800369c:	f200 8155 	bhi.w	800394a <HAL_RCC_GetSysClockFreq+0x2be>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	0800370d 	.word	0x0800370d
 80036ac:	0800394b 	.word	0x0800394b
 80036b0:	0800394b 	.word	0x0800394b
 80036b4:	0800394b 	.word	0x0800394b
 80036b8:	0800394b 	.word	0x0800394b
 80036bc:	0800394b 	.word	0x0800394b
 80036c0:	0800394b 	.word	0x0800394b
 80036c4:	0800394b 	.word	0x0800394b
 80036c8:	08003733 	.word	0x08003733
 80036cc:	0800394b 	.word	0x0800394b
 80036d0:	0800394b 	.word	0x0800394b
 80036d4:	0800394b 	.word	0x0800394b
 80036d8:	0800394b 	.word	0x0800394b
 80036dc:	0800394b 	.word	0x0800394b
 80036e0:	0800394b 	.word	0x0800394b
 80036e4:	0800394b 	.word	0x0800394b
 80036e8:	08003739 	.word	0x08003739
 80036ec:	0800394b 	.word	0x0800394b
 80036f0:	0800394b 	.word	0x0800394b
 80036f4:	0800394b 	.word	0x0800394b
 80036f8:	0800394b 	.word	0x0800394b
 80036fc:	0800394b 	.word	0x0800394b
 8003700:	0800394b 	.word	0x0800394b
 8003704:	0800394b 	.word	0x0800394b
 8003708:	0800373f 	.word	0x0800373f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800370c:	4b94      	ldr	r3, [pc, #592]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d009      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003718:	4b91      	ldr	r3, [pc, #580]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	08db      	lsrs	r3, r3, #3
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	4a90      	ldr	r2, [pc, #576]	; (8003964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
 8003728:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800372a:	e111      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800372c:	4b8d      	ldr	r3, [pc, #564]	; (8003964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800372e:	61bb      	str	r3, [r7, #24]
    break;
 8003730:	e10e      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003732:	4b8d      	ldr	r3, [pc, #564]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003734:	61bb      	str	r3, [r7, #24]
    break;
 8003736:	e10b      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003738:	4b8c      	ldr	r3, [pc, #560]	; (800396c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800373a:	61bb      	str	r3, [r7, #24]
    break;
 800373c:	e108      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800373e:	4b88      	ldr	r3, [pc, #544]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003748:	4b85      	ldr	r3, [pc, #532]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003752:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003754:	4b82      	ldr	r3, [pc, #520]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800375e:	4b80      	ldr	r3, [pc, #512]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003762:	08db      	lsrs	r3, r3, #3
 8003764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003776:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80e1 	beq.w	8003944 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b02      	cmp	r3, #2
 8003786:	f000 8083 	beq.w	8003890 <HAL_RCC_GetSysClockFreq+0x204>
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b02      	cmp	r3, #2
 800378e:	f200 80a1 	bhi.w	80038d4 <HAL_RCC_GetSysClockFreq+0x248>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x114>
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d056      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x1c0>
 800379e:	e099      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037a0:	4b6f      	ldr	r3, [pc, #444]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d02d      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037ac:	4b6c      	ldr	r3, [pc, #432]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	08db      	lsrs	r3, r3, #3
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	4a6b      	ldr	r2, [pc, #428]	; (8003964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
 80037bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	ee07 3a90 	vmov	s15, r3
 80037c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d6:	4b62      	ldr	r3, [pc, #392]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003806:	e087      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003812:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003974 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800381a:	4b51      	ldr	r3, [pc, #324]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800382a:	ed97 6a02 	vldr	s12, [r7, #8]
 800382e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003970 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800383a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800383e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800384a:	e065      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003856:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003978 <HAL_RCC_GetSysClockFreq+0x2ec>
 800385a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385e:	4b40      	ldr	r3, [pc, #256]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003872:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003970 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800387a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800388e:	e043      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800397c <HAL_RCC_GetSysClockFreq+0x2f0>
 800389e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a2:	4b2f      	ldr	r3, [pc, #188]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038d2:	e021      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003978 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800390a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003916:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	0a5b      	lsrs	r3, r3, #9
 800391e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003922:	3301      	adds	r3, #1
 8003924:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	ee07 3a90 	vmov	s15, r3
 800392c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003930:	edd7 6a07 	vldr	s13, [r7, #28]
 8003934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800393c:	ee17 3a90 	vmov	r3, s15
 8003940:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003942:	e005      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]
    break;
 8003948:	e002      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800394a:	4b07      	ldr	r3, [pc, #28]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800394c:	61bb      	str	r3, [r7, #24]
    break;
 800394e:	bf00      	nop
  }

  return sysclockfreq;
 8003950:	69bb      	ldr	r3, [r7, #24]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3724      	adds	r7, #36	; 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	58024400 	.word	0x58024400
 8003964:	03d09000 	.word	0x03d09000
 8003968:	003d0900 	.word	0x003d0900
 800396c:	007a1200 	.word	0x007a1200
 8003970:	46000000 	.word	0x46000000
 8003974:	4c742400 	.word	0x4c742400
 8003978:	4a742400 	.word	0x4a742400
 800397c:	4af42400 	.word	0x4af42400

08003980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003986:	f7ff fe81 	bl	800368c <HAL_RCC_GetSysClockFreq>
 800398a:	4602      	mov	r2, r0
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	490f      	ldr	r1, [pc, #60]	; (80039d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003998:	5ccb      	ldrb	r3, [r1, r3]
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	fa22 f303 	lsr.w	r3, r2, r3
 80039a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80039ae:	5cd3      	ldrb	r3, [r2, r3]
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80039bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039be:	4a07      	ldr	r2, [pc, #28]	; (80039dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	58024400 	.word	0x58024400
 80039d4:	0800d080 	.word	0x0800d080
 80039d8:	24000004 	.word	0x24000004
 80039dc:	24000000 	.word	0x24000000

080039e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80039e4:	f7ff ffcc 	bl	8003980 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4904      	ldr	r1, [pc, #16]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	58024400 	.word	0x58024400
 8003a08:	0800d080 	.word	0x0800d080

08003a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a10:	f7ff ffb6 	bl	8003980 <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4904      	ldr	r1, [pc, #16]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	58024400 	.word	0x58024400
 8003a34:	0800d080 	.word	0x0800d080

08003a38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	223f      	movs	r2, #63	; 0x3f
 8003a46:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a48:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f003 0207 	and.w	r2, r3, #7
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003a54:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f003 020f 	and.w	r2, r3, #15
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003a78:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003a90:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCC_GetClockConfig+0x80>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 020f 	and.w	r2, r3, #15
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	601a      	str	r2, [r3, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	52002000 	.word	0x52002000

08003abc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ac8:	2300      	movs	r3, #0
 8003aca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d03f      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003adc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ae0:	d02a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ae2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ae6:	d824      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aec:	d018      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003af2:	d81e      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afc:	d007      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003afe:	e018      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b00:	4bab      	ldr	r3, [pc, #684]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	4aaa      	ldr	r2, [pc, #680]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b0c:	e015      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2102      	movs	r1, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fff3 	bl	8005b00 <RCCEx_PLL2_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b1e:	e00c      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3324      	adds	r3, #36	; 0x24
 8003b24:	2102      	movs	r1, #2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f002 f89c 	bl	8005c64 <RCCEx_PLL3_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b30:	e003      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
      break;
 8003b36:	e000      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b40:	4b9b      	ldr	r3, [pc, #620]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b4c:	4998      	ldr	r1, [pc, #608]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	650b      	str	r3, [r1, #80]	; 0x50
 8003b52:	e001      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d03d      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d826      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b6c:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003b89 	.word	0x08003b89
 8003b78:	08003b97 	.word	0x08003b97
 8003b7c:	08003ba9 	.word	0x08003ba9
 8003b80:	08003bc1 	.word	0x08003bc1
 8003b84:	08003bc1 	.word	0x08003bc1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b88:	4b89      	ldr	r3, [pc, #548]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	4a88      	ldr	r2, [pc, #544]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b94:	e015      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 ffaf 	bl	8005b00 <RCCEx_PLL2_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ba6:	e00c      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3324      	adds	r3, #36	; 0x24
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f002 f858 	bl	8005c64 <RCCEx_PLL3_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bb8:	e003      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bc8:	4b79      	ldr	r3, [pc, #484]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bcc:	f023 0207 	bic.w	r2, r3, #7
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	4976      	ldr	r1, [pc, #472]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	650b      	str	r3, [r1, #80]	; 0x50
 8003bda:	e001      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d042      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf4:	d02b      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfa:	d825      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003bfc:	2bc0      	cmp	r3, #192	; 0xc0
 8003bfe:	d028      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c00:	2bc0      	cmp	r3, #192	; 0xc0
 8003c02:	d821      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c04:	2b80      	cmp	r3, #128	; 0x80
 8003c06:	d016      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003c08:	2b80      	cmp	r3, #128	; 0x80
 8003c0a:	d81d      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003c10:	2b40      	cmp	r3, #64	; 0x40
 8003c12:	d007      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003c14:	e018      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c16:	4b66      	ldr	r3, [pc, #408]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	4a65      	ldr	r2, [pc, #404]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c22:	e017      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3304      	adds	r3, #4
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 ff68 	bl	8005b00 <RCCEx_PLL2_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c34:	e00e      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3324      	adds	r3, #36	; 0x24
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f002 f811 	bl	8005c64 <RCCEx_PLL3_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c46:	e005      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4c:	e002      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e000      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c5a:	4b55      	ldr	r3, [pc, #340]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	4952      	ldr	r1, [pc, #328]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	650b      	str	r3, [r1, #80]	; 0x50
 8003c6c:	e001      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d049      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c88:	d030      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003c8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c8e:	d82a      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003c90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c94:	d02c      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003c96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c9a:	d824      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca0:	d018      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca6:	d81e      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003cac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cb0:	d007      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003cb2:	e018      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb4:	4b3e      	ldr	r3, [pc, #248]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	4a3d      	ldr	r2, [pc, #244]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cc0:	e017      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f001 ff19 	bl	8005b00 <RCCEx_PLL2_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003cd2:	e00e      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3324      	adds	r3, #36	; 0x24
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 ffc2 	bl	8005c64 <RCCEx_PLL3_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ce4:	e005      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cea:	e002      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003cf8:	4b2d      	ldr	r3, [pc, #180]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d06:	492a      	ldr	r1, [pc, #168]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	658b      	str	r3, [r1, #88]	; 0x58
 8003d0c:	e001      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
 8003d10:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04c      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d28:	d030      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003d2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d2e:	d82a      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d34:	d02c      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003d36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d3a:	d824      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d40:	d018      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d46:	d81e      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d50:	d007      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003d52:	e018      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d54:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	4a15      	ldr	r2, [pc, #84]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d60:	e017      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3304      	adds	r3, #4
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 fec9 	bl	8005b00 <RCCEx_PLL2_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003d72:	e00e      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3324      	adds	r3, #36	; 0x24
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 ff72 	bl	8005c64 <RCCEx_PLL3_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d84:	e005      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	75fb      	strb	r3, [r7, #23]
      break;
 8003d8a:	e002      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003d8c:	bf00      	nop
 8003d8e:	e000      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10d      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003da6:	4902      	ldr	r1, [pc, #8]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	658b      	str	r3, [r1, #88]	; 0x58
 8003dac:	e004      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003dae:	bf00      	nop
 8003db0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
 8003db6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d032      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc8:	2b30      	cmp	r3, #48	; 0x30
 8003dca:	d01c      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003dcc:	2b30      	cmp	r3, #48	; 0x30
 8003dce:	d817      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d00c      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d813      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d016      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d10f      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de0:	4baf      	ldr	r3, [pc, #700]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4aae      	ldr	r2, [pc, #696]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003dec:	e00e      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2102      	movs	r1, #2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f001 fe83 	bl	8005b00 <RCCEx_PLL2_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003dfe:	e005      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
      break;
 8003e04:	e002      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e12:	4ba3      	ldr	r3, [pc, #652]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1e:	49a0      	ldr	r1, [pc, #640]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e24:	e001      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e26:	7dfb      	ldrb	r3, [r7, #23]
 8003e28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d047      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e3e:	d030      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e44:	d82a      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003e46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e4a:	d02c      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003e4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e50:	d824      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e56:	d018      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5c:	d81e      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e66:	d007      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003e68:	e018      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e6a:	4b8d      	ldr	r3, [pc, #564]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	4a8c      	ldr	r2, [pc, #560]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e76:	e017      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 fe3e 	bl	8005b00 <RCCEx_PLL2_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e88:	e00e      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3324      	adds	r3, #36	; 0x24
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 fee7 	bl	8005c64 <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e9a:	e005      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea0:	e002      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003eae:	4b7c      	ldr	r3, [pc, #496]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	4979      	ldr	r1, [pc, #484]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	650b      	str	r3, [r1, #80]	; 0x50
 8003ec0:	e001      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
 8003ec4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d049      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eda:	d02e      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee0:	d828      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003ee2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ee6:	d02a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003ee8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eec:	d822      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003eee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ef2:	d026      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ef4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ef8:	d81c      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003efe:	d010      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f04:	d816      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01d      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0e:	d111      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	2101      	movs	r1, #1
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 fdf2 	bl	8005b00 <RCCEx_PLL2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f20:	e012      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	2101      	movs	r1, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 fe9b 	bl	8005c64 <RCCEx_PLL3_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f32:	e009      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
      break;
 8003f38:	e006      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e004      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f4e:	4b54      	ldr	r3, [pc, #336]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f52:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5a:	4951      	ldr	r1, [pc, #324]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	650b      	str	r3, [r1, #80]	; 0x50
 8003f60:	e001      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d04b      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f7c:	d02e      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f82:	d828      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f88:	d02a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8e:	d822      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f94:	d026      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003f96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f9a:	d81c      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fa0:	d010      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fa6:	d816      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01d      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003fac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fb0:	d111      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 fda1 	bl	8005b00 <RCCEx_PLL2_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003fc2:	e012      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3324      	adds	r3, #36	; 0x24
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 fe4a 	bl	8005c64 <RCCEx_PLL3_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003fd4:	e009      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fda:	e006      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003fdc:	bf00      	nop
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003fe0:	bf00      	nop
 8003fe2:	e002      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003fe4:	bf00      	nop
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ff0:	4b2b      	ldr	r3, [pc, #172]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ffe:	4928      	ldr	r1, [pc, #160]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004000:	4313      	orrs	r3, r2
 8004002:	658b      	str	r3, [r1, #88]	; 0x58
 8004004:	e001      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d02f      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800401e:	d00e      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004024:	d814      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d015      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800402a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800402e:	d10f      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	4a1a      	ldr	r2, [pc, #104]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800403c:	e00c      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3304      	adds	r3, #4
 8004042:	2101      	movs	r1, #1
 8004044:	4618      	mov	r0, r3
 8004046:	f001 fd5b 	bl	8005b00 <RCCEx_PLL2_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800404e:	e003      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	75fb      	strb	r3, [r7, #23]
      break;
 8004054:	e000      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004062:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406a:	490d      	ldr	r1, [pc, #52]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800406c:	4313      	orrs	r3, r2
 800406e:	650b      	str	r3, [r1, #80]	; 0x50
 8004070:	e001      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d033      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	2b03      	cmp	r3, #3
 8004088:	d81c      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040cb 	.word	0x080040cb
 8004094:	080040a5 	.word	0x080040a5
 8004098:	080040b3 	.word	0x080040b3
 800409c:	080040cb 	.word	0x080040cb
 80040a0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a4:	4bb8      	ldr	r3, [pc, #736]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	4ab7      	ldr	r2, [pc, #732]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80040b0:	e00c      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2102      	movs	r1, #2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 fd21 	bl	8005b00 <RCCEx_PLL2_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80040c2:	e003      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
      break;
 80040c8:	e000      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80040ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040d2:	4bad      	ldr	r3, [pc, #692]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	f023 0203 	bic.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	49aa      	ldr	r1, [pc, #680]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040e4:	e001      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8086 	beq.w	8004204 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f8:	4ba4      	ldr	r3, [pc, #656]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4aa3      	ldr	r2, [pc, #652]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80040fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004104:	f7fd fada 	bl	80016bc <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800410a:	e009      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410c:	f7fd fad6 	bl	80016bc <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d902      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	75fb      	strb	r3, [r7, #23]
        break;
 800411e:	e005      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004120:	4b9a      	ldr	r3, [pc, #616]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ef      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d166      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004132:	4b95      	ldr	r3, [pc, #596]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004134:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800413c:	4053      	eors	r3, r2
 800413e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004142:	2b00      	cmp	r3, #0
 8004144:	d013      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004146:	4b90      	ldr	r3, [pc, #576]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004150:	4b8d      	ldr	r3, [pc, #564]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	4a8c      	ldr	r2, [pc, #560]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800415c:	4b8a      	ldr	r3, [pc, #552]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	4a89      	ldr	r2, [pc, #548]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004166:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004168:	4a87      	ldr	r2, [pc, #540]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004178:	d115      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417a:	f7fd fa9f 	bl	80016bc <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004180:	e00b      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fd fa9b 	bl	80016bc <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d902      	bls.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	75fb      	strb	r3, [r7, #23]
            break;
 8004198:	e005      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800419a:	4b7b      	ldr	r3, [pc, #492]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0ed      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d126      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ba:	d10d      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80041bc:	4b72      	ldr	r3, [pc, #456]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041ca:	0919      	lsrs	r1, r3, #4
 80041cc:	4b70      	ldr	r3, [pc, #448]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80041ce:	400b      	ands	r3, r1
 80041d0:	496d      	ldr	r1, [pc, #436]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	610b      	str	r3, [r1, #16]
 80041d6:	e005      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80041d8:	4b6b      	ldr	r3, [pc, #428]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	4a6a      	ldr	r2, [pc, #424]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041e2:	6113      	str	r3, [r2, #16]
 80041e4:	4b68      	ldr	r3, [pc, #416]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f2:	4965      	ldr	r1, [pc, #404]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	670b      	str	r3, [r1, #112]	; 0x70
 80041f8:	e004      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
 80041fc:	75bb      	strb	r3, [r7, #22]
 80041fe:	e001      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d07e      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004214:	2b28      	cmp	r3, #40	; 0x28
 8004216:	d867      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	080042ef 	.word	0x080042ef
 8004224:	080042e9 	.word	0x080042e9
 8004228:	080042e9 	.word	0x080042e9
 800422c:	080042e9 	.word	0x080042e9
 8004230:	080042e9 	.word	0x080042e9
 8004234:	080042e9 	.word	0x080042e9
 8004238:	080042e9 	.word	0x080042e9
 800423c:	080042e9 	.word	0x080042e9
 8004240:	080042c5 	.word	0x080042c5
 8004244:	080042e9 	.word	0x080042e9
 8004248:	080042e9 	.word	0x080042e9
 800424c:	080042e9 	.word	0x080042e9
 8004250:	080042e9 	.word	0x080042e9
 8004254:	080042e9 	.word	0x080042e9
 8004258:	080042e9 	.word	0x080042e9
 800425c:	080042e9 	.word	0x080042e9
 8004260:	080042d7 	.word	0x080042d7
 8004264:	080042e9 	.word	0x080042e9
 8004268:	080042e9 	.word	0x080042e9
 800426c:	080042e9 	.word	0x080042e9
 8004270:	080042e9 	.word	0x080042e9
 8004274:	080042e9 	.word	0x080042e9
 8004278:	080042e9 	.word	0x080042e9
 800427c:	080042e9 	.word	0x080042e9
 8004280:	080042ef 	.word	0x080042ef
 8004284:	080042e9 	.word	0x080042e9
 8004288:	080042e9 	.word	0x080042e9
 800428c:	080042e9 	.word	0x080042e9
 8004290:	080042e9 	.word	0x080042e9
 8004294:	080042e9 	.word	0x080042e9
 8004298:	080042e9 	.word	0x080042e9
 800429c:	080042e9 	.word	0x080042e9
 80042a0:	080042ef 	.word	0x080042ef
 80042a4:	080042e9 	.word	0x080042e9
 80042a8:	080042e9 	.word	0x080042e9
 80042ac:	080042e9 	.word	0x080042e9
 80042b0:	080042e9 	.word	0x080042e9
 80042b4:	080042e9 	.word	0x080042e9
 80042b8:	080042e9 	.word	0x080042e9
 80042bc:	080042e9 	.word	0x080042e9
 80042c0:	080042ef 	.word	0x080042ef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3304      	adds	r3, #4
 80042c8:	2101      	movs	r1, #1
 80042ca:	4618      	mov	r0, r3
 80042cc:	f001 fc18 	bl	8005b00 <RCCEx_PLL2_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80042d4:	e00c      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3324      	adds	r3, #36	; 0x24
 80042da:	2101      	movs	r1, #1
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 fcc1 	bl	8005c64 <RCCEx_PLL3_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80042e6:	e003      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	75fb      	strb	r3, [r7, #23]
      break;
 80042ec:	e000      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80042ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80042f6:	4b24      	ldr	r3, [pc, #144]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004302:	4921      	ldr	r1, [pc, #132]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	654b      	str	r3, [r1, #84]	; 0x54
 8004308:	e001      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430a:	7dfb      	ldrb	r3, [r7, #23]
 800430c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d03e      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431e:	2b05      	cmp	r3, #5
 8004320:	d820      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004322:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	0800436b 	.word	0x0800436b
 800432c:	08004341 	.word	0x08004341
 8004330:	08004353 	.word	0x08004353
 8004334:	0800436b 	.word	0x0800436b
 8004338:	0800436b 	.word	0x0800436b
 800433c:	0800436b 	.word	0x0800436b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	2101      	movs	r1, #1
 8004346:	4618      	mov	r0, r3
 8004348:	f001 fbda 	bl	8005b00 <RCCEx_PLL2_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004350:	e00c      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3324      	adds	r3, #36	; 0x24
 8004356:	2101      	movs	r1, #1
 8004358:	4618      	mov	r0, r3
 800435a:	f001 fc83 	bl	8005c64 <RCCEx_PLL3_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004362:	e003      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	75fb      	strb	r3, [r7, #23]
      break;
 8004368:	e000      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800436a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d110      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f023 0207 	bic.w	r2, r3, #7
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437e:	4902      	ldr	r1, [pc, #8]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004380:	4313      	orrs	r3, r2
 8004382:	654b      	str	r3, [r1, #84]	; 0x54
 8004384:	e008      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004386:	bf00      	nop
 8004388:	58024400 	.word	0x58024400
 800438c:	58024800 	.word	0x58024800
 8004390:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d039      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d820      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80043ae:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80043b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b4:	080043f7 	.word	0x080043f7
 80043b8:	080043cd 	.word	0x080043cd
 80043bc:	080043df 	.word	0x080043df
 80043c0:	080043f7 	.word	0x080043f7
 80043c4:	080043f7 	.word	0x080043f7
 80043c8:	080043f7 	.word	0x080043f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	2101      	movs	r1, #1
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 fb94 	bl	8005b00 <RCCEx_PLL2_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80043dc:	e00c      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3324      	adds	r3, #36	; 0x24
 80043e2:	2101      	movs	r1, #1
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 fc3d 	bl	8005c64 <RCCEx_PLL3_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80043ee:	e003      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
      break;
 80043f4:	e000      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80043f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043fe:	4bb7      	ldr	r3, [pc, #732]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	f023 0207 	bic.w	r2, r3, #7
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	49b3      	ldr	r1, [pc, #716]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800440e:	4313      	orrs	r3, r2
 8004410:	658b      	str	r3, [r1, #88]	; 0x58
 8004412:	e001      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d04b      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800442a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800442e:	d02e      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004434:	d828      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443a:	d02a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d822      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004442:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004446:	d026      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800444c:	d81c      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800444e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004452:	d010      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004458:	d816      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01d      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800445e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004462:	d111      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	2100      	movs	r1, #0
 800446a:	4618      	mov	r0, r3
 800446c:	f001 fb48 	bl	8005b00 <RCCEx_PLL2_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004474:	e012      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3324      	adds	r3, #36	; 0x24
 800447a:	2102      	movs	r1, #2
 800447c:	4618      	mov	r0, r3
 800447e:	f001 fbf1 	bl	8005c64 <RCCEx_PLL3_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004486:	e009      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	75fb      	strb	r3, [r7, #23]
      break;
 800448c:	e006      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800448e:	bf00      	nop
 8004490:	e004      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004492:	bf00      	nop
 8004494:	e002      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004496:	bf00      	nop
 8004498:	e000      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800449a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10a      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044a2:	4b8e      	ldr	r3, [pc, #568]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b0:	498a      	ldr	r1, [pc, #552]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	654b      	str	r3, [r1, #84]	; 0x54
 80044b6:	e001      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d04b      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80044d2:	d02e      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80044d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80044d8:	d828      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044de:	d02a      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80044e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e4:	d822      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80044e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044ea:	d026      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80044ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044f0:	d81c      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80044f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f6:	d010      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80044f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044fc:	d816      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01d      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004506:	d111      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3304      	adds	r3, #4
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f001 faf6 	bl	8005b00 <RCCEx_PLL2_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004518:	e012      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3324      	adds	r3, #36	; 0x24
 800451e:	2102      	movs	r1, #2
 8004520:	4618      	mov	r0, r3
 8004522:	f001 fb9f 	bl	8005c64 <RCCEx_PLL3_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800452a:	e009      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
      break;
 8004530:	e006      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004532:	bf00      	nop
 8004534:	e004      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004536:	bf00      	nop
 8004538:	e002      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800453e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004546:	4b65      	ldr	r3, [pc, #404]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004554:	4961      	ldr	r1, [pc, #388]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004556:	4313      	orrs	r3, r2
 8004558:	658b      	str	r3, [r1, #88]	; 0x58
 800455a:	e001      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004568:	2b00      	cmp	r3, #0
 800456a:	d04b      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004572:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004576:	d02e      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004578:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800457c:	d828      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800457e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004582:	d02a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004588:	d822      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800458a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800458e:	d026      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004590:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004594:	d81c      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800459a:	d010      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800459c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a0:	d816      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01d      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	d111      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	2100      	movs	r1, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 faa4 	bl	8005b00 <RCCEx_PLL2_Config>
 80045b8:	4603      	mov	r3, r0
 80045ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80045bc:	e012      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3324      	adds	r3, #36	; 0x24
 80045c2:	2102      	movs	r1, #2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 fb4d 	bl	8005c64 <RCCEx_PLL3_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80045ce:	e009      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	75fb      	strb	r3, [r7, #23]
      break;
 80045d4:	e006      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80045d6:	bf00      	nop
 80045d8:	e004      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80045da:	bf00      	nop
 80045dc:	e002      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80045de:	bf00      	nop
 80045e0:	e000      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80045e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045ea:	4b3c      	ldr	r3, [pc, #240]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045f8:	4938      	ldr	r1, [pc, #224]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	658b      	str	r3, [r1, #88]	; 0x58
 80045fe:	e001      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	7dfb      	ldrb	r3, [r7, #23]
 8004602:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461a:	d10a      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3324      	adds	r3, #36	; 0x24
 8004620:	2102      	movs	r1, #2
 8004622:	4618      	mov	r0, r3
 8004624:	f001 fb1e 	bl	8005c64 <RCCEx_PLL3_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004632:	4b2a      	ldr	r3, [pc, #168]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004640:	4926      	ldr	r1, [pc, #152]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004642:	4313      	orrs	r3, r2
 8004644:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465c:	d10a      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3324      	adds	r3, #36	; 0x24
 8004662:	2102      	movs	r1, #2
 8004664:	4618      	mov	r0, r3
 8004666:	f001 fafd 	bl	8005c64 <RCCEx_PLL3_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004674:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004682:	4916      	ldr	r1, [pc, #88]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004684:	4313      	orrs	r3, r2
 8004686:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d036      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800469a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800469e:	d01f      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80046a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046a4:	d817      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80046aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ae:	d009      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80046b0:	e011      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3304      	adds	r3, #4
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 fa21 	bl	8005b00 <RCCEx_PLL2_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80046c2:	e00e      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3324      	adds	r3, #36	; 0x24
 80046c8:	2102      	movs	r1, #2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f001 faca 	bl	8005c64 <RCCEx_PLL3_Config>
 80046d0:	4603      	mov	r3, r0
 80046d2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80046d4:	e005      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	75fb      	strb	r3, [r7, #23]
      break;
 80046da:	e002      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80046dc:	58024400 	.word	0x58024400
      break;
 80046e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046e8:	4b93      	ldr	r3, [pc, #588]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046f6:	4990      	ldr	r1, [pc, #576]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	658b      	str	r3, [r1, #88]	; 0x58
 80046fc:	e001      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
 8004700:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d033      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004714:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004718:	d01c      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800471a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800471e:	d816      	bhi.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004724:	d003      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800472a:	d007      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800472c:	e00f      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800472e:	4b82      	ldr	r3, [pc, #520]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	4a81      	ldr	r2, [pc, #516]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800473a:	e00c      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3324      	adds	r3, #36	; 0x24
 8004740:	2101      	movs	r1, #1
 8004742:	4618      	mov	r0, r3
 8004744:	f001 fa8e 	bl	8005c64 <RCCEx_PLL3_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800474c:	e003      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	75fb      	strb	r3, [r7, #23]
      break;
 8004752:	e000      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004756:	7dfb      	ldrb	r3, [r7, #23]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800475c:	4b76      	ldr	r3, [pc, #472]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800475e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476a:	4973      	ldr	r1, [pc, #460]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800476c:	4313      	orrs	r3, r2
 800476e:	654b      	str	r3, [r1, #84]	; 0x54
 8004770:	e001      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
 8004774:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d029      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800478a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478e:	d007      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004790:	e00f      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004792:	4b69      	ldr	r3, [pc, #420]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	4a68      	ldr	r2, [pc, #416]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800479e:	e00b      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	2102      	movs	r1, #2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 f9aa 	bl	8005b00 <RCCEx_PLL2_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047b0:	e002      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	75fb      	strb	r3, [r7, #23]
      break;
 80047b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b8:	7dfb      	ldrb	r3, [r7, #23]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d109      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80047be:	4b5e      	ldr	r3, [pc, #376]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	495b      	ldr	r1, [pc, #364]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047d0:	e001      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3324      	adds	r3, #36	; 0x24
 80047e6:	2102      	movs	r1, #2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 fa3b 	bl	8005c64 <RCCEx_PLL3_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d030      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800480c:	d017      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800480e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004812:	d811      	bhi.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004818:	d013      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800481a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481e:	d80b      	bhi.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d010      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004828:	d106      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800482a:	4b43      	ldr	r3, [pc, #268]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	4a42      	ldr	r2, [pc, #264]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004836:	e007      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	75fb      	strb	r3, [r7, #23]
      break;
 800483c:	e004      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800483e:	bf00      	nop
 8004840:	e002      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004842:	bf00      	nop
 8004844:	e000      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004848:	7dfb      	ldrb	r3, [r7, #23]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800484e:	4b3a      	ldr	r3, [pc, #232]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485a:	4937      	ldr	r1, [pc, #220]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800485c:	4313      	orrs	r3, r2
 800485e:	654b      	str	r3, [r1, #84]	; 0x54
 8004860:	e001      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d008      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004872:	4b31      	ldr	r3, [pc, #196]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004876:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	492e      	ldr	r1, [pc, #184]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004880:	4313      	orrs	r3, r2
 8004882:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004890:	4b29      	ldr	r3, [pc, #164]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800489e:	4926      	ldr	r1, [pc, #152]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d008      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048b0:	4b21      	ldr	r3, [pc, #132]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048bc:	491e      	ldr	r1, [pc, #120]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00d      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048ce:	4b1a      	ldr	r3, [pc, #104]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	4a19      	ldr	r2, [pc, #100]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048d8:	6113      	str	r3, [r2, #16]
 80048da:	4b17      	ldr	r3, [pc, #92]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048e4:	4914      	ldr	r1, [pc, #80]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da08      	bge.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fe:	490e      	ldr	r1, [pc, #56]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004900:	4313      	orrs	r3, r2
 8004902:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004910:	4b09      	ldr	r3, [pc, #36]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004914:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	4906      	ldr	r1, [pc, #24]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004920:	4313      	orrs	r3, r2
 8004922:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004924:	7dbb      	ldrb	r3, [r7, #22]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	58024400 	.word	0x58024400

0800493c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b090      	sub	sp, #64	; 0x40
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800494a:	f040 8095 	bne.w	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800494e:	4bae      	ldr	r3, [pc, #696]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	633b      	str	r3, [r7, #48]	; 0x30
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	2b04      	cmp	r3, #4
 800495c:	f200 8088 	bhi.w	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	0800497d 	.word	0x0800497d
 800496c:	080049a5 	.word	0x080049a5
 8004970:	080049cd 	.word	0x080049cd
 8004974:	08004a69 	.word	0x08004a69
 8004978:	080049f5 	.word	0x080049f5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800497c:	4ba2      	ldr	r3, [pc, #648]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004984:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004988:	d108      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800498a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800498e:	4618      	mov	r0, r3
 8004990:	f000 ff64 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004998:	f000 bc95 	b.w	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049a0:	f000 bc91 	b.w	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049a4:	4b98      	ldr	r3, [pc, #608]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b0:	d108      	bne.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049b2:	f107 0318 	add.w	r3, r7, #24
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fca8 	bl	800530c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049c0:	f000 bc81 	b.w	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049c8:	f000 bc7d 	b.w	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049cc:	4b8e      	ldr	r3, [pc, #568]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d8:	d108      	bne.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049da:	f107 030c 	add.w	r3, r7, #12
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fde8 	bl	80055b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049e8:	f000 bc6d 	b.w	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049f0:	f000 bc69 	b.w	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80049f4:	4b84      	ldr	r3, [pc, #528]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049fe:	4b82      	ldr	r3, [pc, #520]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d10c      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a10:	4b7d      	ldr	r3, [pc, #500]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	08db      	lsrs	r3, r3, #3
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	4a7c      	ldr	r2, [pc, #496]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a22:	e01f      	b.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a24:	4b78      	ldr	r3, [pc, #480]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a30:	d106      	bne.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a38:	d102      	bne.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004a3a:	4b75      	ldr	r3, [pc, #468]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3e:	e011      	b.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a40:	4b71      	ldr	r3, [pc, #452]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a4c:	d106      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a54:	d102      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004a56:	4b6f      	ldr	r3, [pc, #444]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a5a:	e003      	b.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004a60:	f000 bc31 	b.w	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004a64:	f000 bc2f 	b.w	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a68:	4b6b      	ldr	r3, [pc, #428]	; (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a6c:	f000 bc2b 	b.w	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a74:	f000 bc27 	b.w	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a7e:	f040 8095 	bne.w	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004a82:	4b61      	ldr	r3, [pc, #388]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a86:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004a8a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a92:	d04d      	beq.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9a:	f200 8084 	bhi.w	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	2bc0      	cmp	r3, #192	; 0xc0
 8004aa2:	d07d      	beq.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	2bc0      	cmp	r3, #192	; 0xc0
 8004aa8:	d87d      	bhi.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d02d      	beq.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	2b80      	cmp	r3, #128	; 0x80
 8004ab4:	d877      	bhi.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d012      	beq.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004ac2:	e070      	b.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ac4:	4b50      	ldr	r3, [pc, #320]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fec0 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ae0:	e3f1      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ae6:	e3ee      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ae8:	4b47      	ldr	r3, [pc, #284]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af4:	d107      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004af6:	f107 0318 	add.w	r3, r7, #24
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fc06 	bl	800530c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b04:	e3df      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b06:	2300      	movs	r3, #0
 8004b08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b0a:	e3dc      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b0c:	4b3e      	ldr	r3, [pc, #248]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b18:	d107      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b1a:	f107 030c 	add.w	r3, r7, #12
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fd48 	bl	80055b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b28:	e3cd      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b2e:	e3ca      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b30:	4b35      	ldr	r3, [pc, #212]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b3a:	4b33      	ldr	r3, [pc, #204]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8004b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d109      	bne.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b4c:	4b2e      	ldr	r3, [pc, #184]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	08db      	lsrs	r3, r3, #3
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	4a2d      	ldr	r2, [pc, #180]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b5e:	e01e      	b.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b60:	4b29      	ldr	r3, [pc, #164]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b6c:	d106      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b74:	d102      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b76:	4b26      	ldr	r3, [pc, #152]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b7a:	e010      	b.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b7c:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b88:	d106      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b90:	d102      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b92:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b96:	e002      	b.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b9c:	e393      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004b9e:	e392      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ba0:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ba4:	e38f      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004baa:	e38c      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb2:	f040 80a7 	bne.w	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004bb6:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004bbe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bc6:	d05f      	beq.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bce:	f200 8096 	bhi.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bd8:	f000 808e 	beq.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004be2:	f200 808c 	bhi.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bec:	d03a      	beq.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf4:	f200 8083 	bhi.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00e      	beq.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c04:	d01c      	beq.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004c06:	e07a      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	03d09000 	.word	0x03d09000
 8004c10:	003d0900 	.word	0x003d0900
 8004c14:	007a1200 	.word	0x007a1200
 8004c18:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c1c:	4baa      	ldr	r3, [pc, #680]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c28:	d107      	bne.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fe14 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c38:	e345      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c3e:	e342      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c40:	4ba1      	ldr	r3, [pc, #644]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c4e:	f107 0318 	add.w	r3, r7, #24
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fb5a 	bl	800530c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c5c:	e333      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c62:	e330      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c64:	4b98      	ldr	r3, [pc, #608]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c70:	d107      	bne.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c72:	f107 030c 	add.w	r3, r7, #12
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fc9c 	bl	80055b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c80:	e321      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c86:	e31e      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c88:	4b8f      	ldr	r3, [pc, #572]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c92:	4b8d      	ldr	r3, [pc, #564]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d109      	bne.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ca4:	4b88      	ldr	r3, [pc, #544]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	08db      	lsrs	r3, r3, #3
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	4a87      	ldr	r2, [pc, #540]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb6:	e01e      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cb8:	4b83      	ldr	r3, [pc, #524]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc4:	d106      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ccc:	d102      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004cce:	4b80      	ldr	r3, [pc, #512]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd2:	e010      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cd4:	4b7c      	ldr	r3, [pc, #496]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce0:	d106      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce8:	d102      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004cea:	4b7a      	ldr	r3, [pc, #488]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cee:	e002      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004cf4:	e2e7      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004cf6:	e2e6      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cf8:	4b77      	ldr	r3, [pc, #476]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cfc:	e2e3      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d02:	e2e0      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0a:	f040 809c 	bne.w	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004d0e:	4b6e      	ldr	r3, [pc, #440]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d12:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004d16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d1e:	d054      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d26:	f200 808b 	bhi.w	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d30:	f000 8083 	beq.w	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d3a:	f200 8081 	bhi.w	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d44:	d02f      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d4c:	d878      	bhi.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d5a:	d012      	beq.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8004d5c:	e070      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d5e:	4b5a      	ldr	r3, [pc, #360]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fd73 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d7a:	e2a4      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d80:	e2a1      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d82:	4b51      	ldr	r3, [pc, #324]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d90:	f107 0318 	add.w	r3, r7, #24
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fab9 	bl	800530c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004d9e:	e292      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004da4:	e28f      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004da6:	4b48      	ldr	r3, [pc, #288]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004db4:	f107 030c 	add.w	r3, r7, #12
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fbfb 	bl	80055b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004dc2:	e280      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dc8:	e27d      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004dca:	4b3f      	ldr	r3, [pc, #252]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dd2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004dd4:	4b3c      	ldr	r3, [pc, #240]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d10c      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004de6:	4b38      	ldr	r3, [pc, #224]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	08db      	lsrs	r3, r3, #3
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	4a36      	ldr	r2, [pc, #216]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df8:	e01e      	b.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004dfa:	4b33      	ldr	r3, [pc, #204]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e06:	d106      	bne.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8004e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e0e:	d102      	bne.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e10:	4b2f      	ldr	r3, [pc, #188]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e14:	e010      	b.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e16:	4b2c      	ldr	r3, [pc, #176]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e22:	d106      	bne.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e2a:	d102      	bne.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e2c:	4b29      	ldr	r3, [pc, #164]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e30:	e002      	b.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004e36:	e246      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004e38:	e245      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e3a:	4b27      	ldr	r3, [pc, #156]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e3e:	e242      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e44:	e23f      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4c:	f040 80a8 	bne.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004e50:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e54:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004e58:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e60:	d060      	beq.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e68:	f200 8097 	bhi.w	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e72:	f000 808f 	beq.w	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e7c:	f200 808d 	bhi.w	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e86:	d03b      	beq.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e8e:	f200 8084 	bhi.w	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8004e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9e:	d01d      	beq.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8004ea0:	e07b      	b.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ea2:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fcd1 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ebe:	e202      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec4:	e1ff      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004ec6:	bf00      	nop
 8004ec8:	58024400 	.word	0x58024400
 8004ecc:	03d09000 	.word	0x03d09000
 8004ed0:	003d0900 	.word	0x003d0900
 8004ed4:	007a1200 	.word	0x007a1200
 8004ed8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004edc:	4ba3      	ldr	r3, [pc, #652]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee8:	d107      	bne.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eea:	f107 0318 	add.w	r3, r7, #24
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fa0c 	bl	800530c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ef8:	e1e5      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004efe:	e1e2      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f00:	4b9a      	ldr	r3, [pc, #616]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f0c:	d107      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f0e:	f107 030c 	add.w	r3, r7, #12
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fb4e 	bl	80055b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f1c:	e1d3      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f22:	e1d0      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f24:	4b91      	ldr	r3, [pc, #580]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f2c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f2e:	4b8f      	ldr	r3, [pc, #572]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f40:	4b8a      	ldr	r3, [pc, #552]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	08db      	lsrs	r3, r3, #3
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	4a89      	ldr	r2, [pc, #548]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f52:	e01e      	b.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f54:	4b85      	ldr	r3, [pc, #532]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f60:	d106      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8004f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f68:	d102      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f6a:	4b82      	ldr	r3, [pc, #520]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6e:	e010      	b.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f70:	4b7e      	ldr	r3, [pc, #504]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f7c:	d106      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f84:	d102      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004f86:	4b7c      	ldr	r3, [pc, #496]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f8a:	e002      	b.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004f90:	e199      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004f92:	e198      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f94:	4b79      	ldr	r3, [pc, #484]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f98:	e195      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f9e:	e192      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fa6:	d173      	bne.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004fa8:	4b70      	ldr	r3, [pc, #448]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fb0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fb8:	d02f      	beq.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fc0:	d863      	bhi.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fce:	d012      	beq.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8004fd0:	e05b      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fd2:	4b66      	ldr	r3, [pc, #408]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fde:	d107      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fe0:	f107 0318 	add.w	r3, r7, #24
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 f991 	bl	800530c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fee:	e16a      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ff4:	e167      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ff6:	4b5d      	ldr	r3, [pc, #372]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005002:	d107      	bne.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005004:	f107 030c 	add.w	r3, r7, #12
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fad3 	bl	80055b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005012:	e158      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005018:	e155      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800501a:	4b54      	ldr	r3, [pc, #336]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800501c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005022:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005024:	4b51      	ldr	r3, [pc, #324]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b04      	cmp	r3, #4
 800502e:	d10c      	bne.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005036:	4b4d      	ldr	r3, [pc, #308]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	08db      	lsrs	r3, r3, #3
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	4a4b      	ldr	r2, [pc, #300]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005042:	fa22 f303 	lsr.w	r3, r2, r3
 8005046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005048:	e01e      	b.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800504a:	4b48      	ldr	r3, [pc, #288]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005056:	d106      	bne.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800505e:	d102      	bne.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005060:	4b44      	ldr	r3, [pc, #272]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005064:	e010      	b.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005066:	4b41      	ldr	r3, [pc, #260]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005072:	d106      	bne.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800507a:	d102      	bne.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800507c:	4b3e      	ldr	r3, [pc, #248]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005080:	e002      	b.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005086:	e11e      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005088:	e11d      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800508e:	e11a      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005096:	d133      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005098:	4b34      	ldr	r3, [pc, #208]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800509a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d004      	beq.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80050a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ae:	d012      	beq.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80050b0:	e023      	b.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050b2:	4b2e      	ldr	r3, [pc, #184]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050be:	d107      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fbc9 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80050ce:	e0fa      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050d4:	e0f7      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050d6:	4b25      	ldr	r3, [pc, #148]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050e2:	d107      	bne.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050e4:	f107 0318 	add.w	r3, r7, #24
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 f90f 	bl	800530c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80050f2:	e0e8      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050f8:	e0e5      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050fe:	e0e2      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005106:	f040 808f 	bne.w	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800510a:	4b18      	ldr	r3, [pc, #96]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800510c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005112:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800511a:	d075      	beq.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005122:	d87e      	bhi.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512a:	d060      	beq.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005132:	d876      	bhi.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800513a:	d045      	beq.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005142:	d86e      	bhi.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800514a:	d02b      	beq.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005152:	d866      	bhi.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005160:	d00e      	beq.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005162:	e05e      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005164:	f000 f8bc 	bl	80052e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005168:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800516a:	e0ac      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800516c:	58024400 	.word	0x58024400
 8005170:	03d09000 	.word	0x03d09000
 8005174:	003d0900 	.word	0x003d0900
 8005178:	007a1200 	.word	0x007a1200
 800517c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005180:	4b53      	ldr	r3, [pc, #332]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005188:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800518c:	d107      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800518e:	f107 0318 	add.w	r3, r7, #24
 8005192:	4618      	mov	r0, r3
 8005194:	f000 f8ba 	bl	800530c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800519c:	e093      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051a2:	e090      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051a4:	4b4a      	ldr	r3, [pc, #296]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b0:	d107      	bne.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051b2:	f107 030c 	add.w	r3, r7, #12
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 f9fc 	bl	80055b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051c0:	e081      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051c6:	e07e      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051c8:	4b41      	ldr	r3, [pc, #260]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d109      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051d4:	4b3e      	ldr	r3, [pc, #248]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	08db      	lsrs	r3, r3, #3
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	4a3d      	ldr	r2, [pc, #244]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051e6:	e06e      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051ec:	e06b      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80051ee:	4b38      	ldr	r3, [pc, #224]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051fa:	d102      	bne.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80051fc:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005200:	e061      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005206:	e05e      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005208:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005214:	d102      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8005216:	4b31      	ldr	r3, [pc, #196]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005218:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800521a:	e054      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005220:	e051      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005222:	2300      	movs	r3, #0
 8005224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005226:	e04e      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522e:	d148      	bne.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005230:	4b27      	ldr	r3, [pc, #156]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005238:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005240:	d02a      	beq.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005248:	d838      	bhi.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	2b00      	cmp	r3, #0
 800524e:	d004      	beq.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005256:	d00d      	beq.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005258:	e030      	b.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800525a:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005266:	d102      	bne.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8005268:	4b1c      	ldr	r3, [pc, #112]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800526c:	e02b      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005272:	e028      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005274:	4b16      	ldr	r3, [pc, #88]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005280:	d107      	bne.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fae8 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005290:	e019      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005296:	e016      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005298:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a4:	d107      	bne.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052a6:	f107 0318 	add.w	r3, r7, #24
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f82e 	bl	800530c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80052b4:	e007      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052ba:	e004      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052c0:	e001      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80052c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3740      	adds	r7, #64	; 0x40
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	58024400 	.word	0x58024400
 80052d4:	03d09000 	.word	0x03d09000
 80052d8:	003d0900 	.word	0x003d0900
 80052dc:	007a1200 	.word	0x007a1200

080052e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80052e4:	f7fe fb4c 	bl	8003980 <HAL_RCC_GetHCLKFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	091b      	lsrs	r3, r3, #4
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4904      	ldr	r1, [pc, #16]	; (8005308 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	58024400 	.word	0x58024400
 8005308:	0800d080 	.word	0x0800d080

0800530c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800530c:	b480      	push	{r7}
 800530e:	b089      	sub	sp, #36	; 0x24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005314:	4ba1      	ldr	r3, [pc, #644]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800531e:	4b9f      	ldr	r3, [pc, #636]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	0b1b      	lsrs	r3, r3, #12
 8005324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005328:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800532a:	4b9c      	ldr	r3, [pc, #624]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005336:	4b99      	ldr	r3, [pc, #612]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533a:	08db      	lsrs	r3, r3, #3
 800533c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	fb02 f303 	mul.w	r3, r2, r3
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8111 	beq.w	800557c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	2b02      	cmp	r3, #2
 800535e:	f000 8083 	beq.w	8005468 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b02      	cmp	r3, #2
 8005366:	f200 80a1 	bhi.w	80054ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d056      	beq.n	8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005376:	e099      	b.n	80054ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005378:	4b88      	ldr	r3, [pc, #544]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d02d      	beq.n	80053e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005384:	4b85      	ldr	r3, [pc, #532]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	08db      	lsrs	r3, r3, #3
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	4a84      	ldr	r2, [pc, #528]	; (80055a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
 8005394:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ae:	4b7b      	ldr	r3, [pc, #492]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053be:	ed97 6a03 	vldr	s12, [r7, #12]
 80053c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053de:	e087      	b.n	80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80053ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f2:	4b6a      	ldr	r3, [pc, #424]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005402:	ed97 6a03 	vldr	s12, [r7, #12]
 8005406:	eddf 5a67 	vldr	s11, [pc, #412]	; 80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800540a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800541a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005422:	e065      	b.n	80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005436:	4b59      	ldr	r3, [pc, #356]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005446:	ed97 6a03 	vldr	s12, [r7, #12]
 800544a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800544e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800545a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800545e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005466:	e043      	b.n	80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80055b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547a:	4b48      	ldr	r3, [pc, #288]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548a:	ed97 6a03 	vldr	s12, [r7, #12]
 800548e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800549e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054aa:	e021      	b.n	80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054be:	4b37      	ldr	r3, [pc, #220]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80054d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80054f0:	4b2a      	ldr	r3, [pc, #168]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	0a5b      	lsrs	r3, r3, #9
 80054f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800550a:	edd7 6a07 	vldr	s13, [r7, #28]
 800550e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005516:	ee17 2a90 	vmov	r2, s15
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800551e:	4b1f      	ldr	r3, [pc, #124]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	0c1b      	lsrs	r3, r3, #16
 8005524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005528:	ee07 3a90 	vmov	s15, r3
 800552c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005534:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005538:	edd7 6a07 	vldr	s13, [r7, #28]
 800553c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005544:	ee17 2a90 	vmov	r2, s15
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800554c:	4b13      	ldr	r3, [pc, #76]	; (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	0e1b      	lsrs	r3, r3, #24
 8005552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005566:	edd7 6a07 	vldr	s13, [r7, #28]
 800556a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800556e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005572:	ee17 2a90 	vmov	r2, s15
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800557a:	e008      	b.n	800558e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	609a      	str	r2, [r3, #8]
}
 800558e:	bf00      	nop
 8005590:	3724      	adds	r7, #36	; 0x24
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	58024400 	.word	0x58024400
 80055a0:	03d09000 	.word	0x03d09000
 80055a4:	46000000 	.word	0x46000000
 80055a8:	4c742400 	.word	0x4c742400
 80055ac:	4a742400 	.word	0x4a742400
 80055b0:	4af42400 	.word	0x4af42400

080055b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b089      	sub	sp, #36	; 0x24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055bc:	4ba1      	ldr	r3, [pc, #644]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80055c6:	4b9f      	ldr	r3, [pc, #636]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	0d1b      	lsrs	r3, r3, #20
 80055cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055d2:	4b9c      	ldr	r3, [pc, #624]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80055de:	4b99      	ldr	r3, [pc, #612]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e2:	08db      	lsrs	r3, r3, #3
 80055e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8111 	beq.w	8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b02      	cmp	r3, #2
 8005606:	f000 8083 	beq.w	8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b02      	cmp	r3, #2
 800560e:	f200 80a1 	bhi.w	8005754 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d056      	beq.n	80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800561e:	e099      	b.n	8005754 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005620:	4b88      	ldr	r3, [pc, #544]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d02d      	beq.n	8005688 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800562c:	4b85      	ldr	r3, [pc, #532]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	08db      	lsrs	r3, r3, #3
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	4a84      	ldr	r2, [pc, #528]	; (8005848 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
 800563c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005656:	4b7b      	ldr	r3, [pc, #492]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005666:	ed97 6a03 	vldr	s12, [r7, #12]
 800566a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800584c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800566e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800567a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005682:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005686:	e087      	b.n	8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005692:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569a:	4b6a      	ldr	r3, [pc, #424]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800584c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056ca:	e065      	b.n	8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056de:	4b59      	ldr	r3, [pc, #356]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80056f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800584c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800570e:	e043      	b.n	8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800571e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005722:	4b48      	ldr	r3, [pc, #288]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005732:	ed97 6a03 	vldr	s12, [r7, #12]
 8005736:	eddf 5a45 	vldr	s11, [pc, #276]	; 800584c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800573a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005752:	e021      	b.n	8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005766:	4b37      	ldr	r3, [pc, #220]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005776:	ed97 6a03 	vldr	s12, [r7, #12]
 800577a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800584c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800577e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800578a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800578e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005792:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005796:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005798:	4b2a      	ldr	r3, [pc, #168]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	0a5b      	lsrs	r3, r3, #9
 800579e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057be:	ee17 2a90 	vmov	r2, s15
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80057c6:	4b1f      	ldr	r3, [pc, #124]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	0c1b      	lsrs	r3, r3, #16
 80057cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d0:	ee07 3a90 	vmov	s15, r3
 80057d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80057e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ec:	ee17 2a90 	vmov	r2, s15
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80057f4:	4b13      	ldr	r3, [pc, #76]	; (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	0e1b      	lsrs	r3, r3, #24
 80057fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800580a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800580e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800581a:	ee17 2a90 	vmov	r2, s15
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005822:	e008      	b.n	8005836 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	609a      	str	r2, [r3, #8]
}
 8005836:	bf00      	nop
 8005838:	3724      	adds	r7, #36	; 0x24
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	58024400 	.word	0x58024400
 8005848:	03d09000 	.word	0x03d09000
 800584c:	46000000 	.word	0x46000000
 8005850:	4c742400 	.word	0x4c742400
 8005854:	4a742400 	.word	0x4a742400
 8005858:	4af42400 	.word	0x4af42400

0800585c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800585c:	b480      	push	{r7}
 800585e:	b089      	sub	sp, #36	; 0x24
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005864:	4ba0      	ldr	r3, [pc, #640]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800586e:	4b9e      	ldr	r3, [pc, #632]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005872:	091b      	lsrs	r3, r3, #4
 8005874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005878:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800587a:	4b9b      	ldr	r3, [pc, #620]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005884:	4b98      	ldr	r3, [pc, #608]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005888:	08db      	lsrs	r3, r3, #3
 800588a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	fb02 f303 	mul.w	r3, r2, r3
 8005894:	ee07 3a90 	vmov	s15, r3
 8005898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 8111 	beq.w	8005aca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	f000 8083 	beq.w	80059b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	f200 80a1 	bhi.w	80059fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d056      	beq.n	8005972 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80058c4:	e099      	b.n	80059fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058c6:	4b88      	ldr	r3, [pc, #544]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d02d      	beq.n	800592e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058d2:	4b85      	ldr	r3, [pc, #532]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	08db      	lsrs	r3, r3, #3
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	4a83      	ldr	r2, [pc, #524]	; (8005aec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80058de:	fa22 f303 	lsr.w	r3, r2, r3
 80058e2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	ee07 3a90 	vmov	s15, r3
 80058f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fc:	4b7a      	ldr	r3, [pc, #488]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005910:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005af0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005928:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800592c:	e087      	b.n	8005a3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	ee07 3a90 	vmov	s15, r3
 8005934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005938:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005af4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800593c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005940:	4b69      	ldr	r3, [pc, #420]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005948:	ee07 3a90 	vmov	s15, r3
 800594c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005950:	ed97 6a03 	vldr	s12, [r7, #12]
 8005954:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005af0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005970:	e065      	b.n	8005a3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	ee07 3a90 	vmov	s15, r3
 8005978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005af8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005984:	4b58      	ldr	r3, [pc, #352]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005994:	ed97 6a03 	vldr	s12, [r7, #12]
 8005998:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005af0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800599c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059b4:	e043      	b.n	8005a3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	ee07 3a90 	vmov	s15, r3
 80059bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005afc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80059c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c8:	4b47      	ldr	r3, [pc, #284]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d0:	ee07 3a90 	vmov	s15, r3
 80059d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80059dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005af0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80059e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059f8:	e021      	b.n	8005a3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	ee07 3a90 	vmov	s15, r3
 8005a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a04:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005af4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0c:	4b36      	ldr	r3, [pc, #216]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a14:	ee07 3a90 	vmov	s15, r3
 8005a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a20:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005af0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a3c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005a3e:	4b2a      	ldr	r3, [pc, #168]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	0a5b      	lsrs	r3, r3, #9
 8005a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a48:	ee07 3a90 	vmov	s15, r3
 8005a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a58:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a64:	ee17 2a90 	vmov	r2, s15
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005a6c:	4b1e      	ldr	r3, [pc, #120]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	0c1b      	lsrs	r3, r3, #16
 8005a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a86:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a92:	ee17 2a90 	vmov	r2, s15
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005a9a:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	0e1b      	lsrs	r3, r3, #24
 8005aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ab0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ab4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac0:	ee17 2a90 	vmov	r2, s15
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005ac8:	e008      	b.n	8005adc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	609a      	str	r2, [r3, #8]
}
 8005adc:	bf00      	nop
 8005ade:	3724      	adds	r7, #36	; 0x24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	03d09000 	.word	0x03d09000
 8005af0:	46000000 	.word	0x46000000
 8005af4:	4c742400 	.word	0x4c742400
 8005af8:	4a742400 	.word	0x4a742400
 8005afc:	4af42400 	.word	0x4af42400

08005b00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b0e:	4b53      	ldr	r3, [pc, #332]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d101      	bne.n	8005b1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e099      	b.n	8005c52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005b1e:	4b4f      	ldr	r3, [pc, #316]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a4e      	ldr	r2, [pc, #312]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005b24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b2a:	f7fb fdc7 	bl	80016bc <HAL_GetTick>
 8005b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b30:	e008      	b.n	8005b44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b32:	f7fb fdc3 	bl	80016bc <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d901      	bls.n	8005b44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e086      	b.n	8005c52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b44:	4b45      	ldr	r3, [pc, #276]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1f0      	bne.n	8005b32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b50:	4b42      	ldr	r3, [pc, #264]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	031b      	lsls	r3, r3, #12
 8005b5e:	493f      	ldr	r1, [pc, #252]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	628b      	str	r3, [r1, #40]	; 0x28
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	025b      	lsls	r3, r3, #9
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	061b      	lsls	r3, r3, #24
 8005b90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b94:	4931      	ldr	r1, [pc, #196]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b9a:	4b30      	ldr	r3, [pc, #192]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	492d      	ldr	r1, [pc, #180]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005bac:	4b2b      	ldr	r3, [pc, #172]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	f023 0220 	bic.w	r2, r3, #32
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	4928      	ldr	r1, [pc, #160]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005bbe:	4b27      	ldr	r3, [pc, #156]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	4a26      	ldr	r2, [pc, #152]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005bc4:	f023 0310 	bic.w	r3, r3, #16
 8005bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005bca:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005bcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bce:	4b24      	ldr	r3, [pc, #144]	; (8005c60 <RCCEx_PLL2_Config+0x160>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	69d2      	ldr	r2, [r2, #28]
 8005bd6:	00d2      	lsls	r2, r2, #3
 8005bd8:	4920      	ldr	r1, [pc, #128]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005bde:	4b1f      	ldr	r3, [pc, #124]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	4a1e      	ldr	r2, [pc, #120]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005be4:	f043 0310 	orr.w	r3, r3, #16
 8005be8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005bf0:	4b1a      	ldr	r3, [pc, #104]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	4a19      	ldr	r2, [pc, #100]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bfc:	e00f      	b.n	8005c1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d106      	bne.n	8005c12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	4a14      	ldr	r2, [pc, #80]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c10:	e005      	b.n	8005c1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	4a11      	ldr	r2, [pc, #68]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a0e      	ldr	r2, [pc, #56]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005c24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c2a:	f7fb fd47 	bl	80016bc <HAL_GetTick>
 8005c2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c30:	e008      	b.n	8005c44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c32:	f7fb fd43 	bl	80016bc <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e006      	b.n	8005c52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <RCCEx_PLL2_Config+0x15c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	58024400 	.word	0x58024400
 8005c60:	ffff0007 	.word	0xffff0007

08005c64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c72:	4b53      	ldr	r3, [pc, #332]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d101      	bne.n	8005c82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e099      	b.n	8005db6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c82:	4b4f      	ldr	r3, [pc, #316]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a4e      	ldr	r2, [pc, #312]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c8e:	f7fb fd15 	bl	80016bc <HAL_GetTick>
 8005c92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c94:	e008      	b.n	8005ca8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c96:	f7fb fd11 	bl	80016bc <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e086      	b.n	8005db6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ca8:	4b45      	ldr	r3, [pc, #276]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f0      	bne.n	8005c96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005cb4:	4b42      	ldr	r3, [pc, #264]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	051b      	lsls	r3, r3, #20
 8005cc2:	493f      	ldr	r1, [pc, #252]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	628b      	str	r3, [r1, #40]	; 0x28
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	025b      	lsls	r3, r3, #9
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	041b      	lsls	r3, r3, #16
 8005ce6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	061b      	lsls	r3, r3, #24
 8005cf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cf8:	4931      	ldr	r1, [pc, #196]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005cfe:	4b30      	ldr	r3, [pc, #192]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	492d      	ldr	r1, [pc, #180]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005d10:	4b2b      	ldr	r3, [pc, #172]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	4928      	ldr	r1, [pc, #160]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d22:	4b27      	ldr	r3, [pc, #156]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	4a26      	ldr	r2, [pc, #152]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d2e:	4b24      	ldr	r3, [pc, #144]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d32:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <RCCEx_PLL3_Config+0x160>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	69d2      	ldr	r2, [r2, #28]
 8005d3a:	00d2      	lsls	r2, r2, #3
 8005d3c:	4920      	ldr	r1, [pc, #128]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d42:	4b1f      	ldr	r3, [pc, #124]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	4a1e      	ldr	r2, [pc, #120]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d106      	bne.n	8005d62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d54:	4b1a      	ldr	r3, [pc, #104]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d60:	e00f      	b.n	8005d82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d106      	bne.n	8005d76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d68:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	4a14      	ldr	r2, [pc, #80]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d74:	e005      	b.n	8005d82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d76:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7a:	4a11      	ldr	r2, [pc, #68]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d82:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a0e      	ldr	r2, [pc, #56]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d8e:	f7fb fc95 	bl	80016bc <HAL_GetTick>
 8005d92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d94:	e008      	b.n	8005da8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d96:	f7fb fc91 	bl	80016bc <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e006      	b.n	8005db6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <RCCEx_PLL3_Config+0x15c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0f0      	beq.n	8005d96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	58024400 	.word	0x58024400
 8005dc4:	ffff0007 	.word	0xffff0007

08005dc8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e04d      	b.n	8005e76 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	7a5b      	ldrb	r3, [r3, #9]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb f82e 	bl	8000e4c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f023 0120 	bic.w	r1, r3, #32
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0204 	orr.w	r2, r2, #4
 8005e1a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e26:	2b40      	cmp	r3, #64	; 0x40
 8005e28:	d104      	bne.n	8005e34 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e020      	b.n	8005e76 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005e34:	f7fb fc42 	bl	80016bc <HAL_GetTick>
 8005e38:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005e3a:	e00e      	b.n	8005e5a <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005e3c:	f7fb fc3e 	bl	80016bc <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d907      	bls.n	8005e5a <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e00d      	b.n	8005e76 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d0e9      	beq.n	8005e3c <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b08a      	sub	sp, #40	; 0x28
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e075      	b.n	8005f7c <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fb f80a 	bl	8000ebc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2203      	movs	r2, #3
 8005eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f867 	bl	8005f84 <HAL_SD_InitCard>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e05d      	b.n	8005f7c <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005ec0:	f107 0308 	add.w	r3, r7, #8
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fbe4 	bl	8006694 <HAL_SD_GetCardStatus>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e052      	b.n	8005f7c <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005ed6:	7e3b      	ldrb	r3, [r7, #24]
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005edc:	7e7b      	ldrb	r3, [r7, #25]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d10a      	bne.n	8005f00 <HAL_SD_Init+0x82>
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d102      	bne.n	8005ef6 <HAL_SD_Init+0x78>
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d004      	beq.n	8005f00 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005efc:	659a      	str	r2, [r3, #88]	; 0x58
 8005efe:	e00b      	b.n	8005f18 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d104      	bne.n	8005f12 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f0e:	659a      	str	r2, [r3, #88]	; 0x58
 8005f10:	e002      	b.n	8005f18 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fc9a 	bl	8006858 <HAL_SD_ConfigWideBusOperation>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e026      	b.n	8005f7c <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005f2e:	f7fb fbc5 	bl	80016bc <HAL_GetTick>
 8005f32:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005f34:	e011      	b.n	8005f5a <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005f36:	f7fb fbc1 	bl	80016bc <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d109      	bne.n	8005f5a <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f4c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e010      	b.n	8005f7c <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fd8c 	bl	8006a78 <HAL_SD_GetCardState>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d1e7      	bne.n	8005f36 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3728      	adds	r7, #40	; 0x28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005f84:	b590      	push	{r4, r7, lr}
 8005f86:	b08d      	sub	sp, #52	; 0x34
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005f90:	2300      	movs	r3, #0
 8005f92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005f9c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005fa0:	f7fe fccc 	bl	800493c <HAL_RCCEx_GetPeriphCLKFreq>
 8005fa4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d109      	bne.n	8005fc0 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005fba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e06a      	b.n	8006096 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	0a1b      	lsrs	r3, r3, #8
 8005fc4:	4a36      	ldr	r2, [pc, #216]	; (80060a0 <HAL_SD_InitCard+0x11c>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	091b      	lsrs	r3, r3, #4
 8005fcc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681c      	ldr	r4, [r3, #0]
 8005fd2:	466a      	mov	r2, sp
 8005fd4:	f107 0318 	add.w	r3, r7, #24
 8005fd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005fdc:	e882 0003 	stmia.w	r2, {r0, r1}
 8005fe0:	f107 030c 	add.w	r3, r7, #12
 8005fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f002 ff84 	bl	8008ef4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f002 ffb6 	bl	8008f62 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006002:	4a28      	ldr	r2, [pc, #160]	; (80060a4 <HAL_SD_InitCard+0x120>)
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	fbb2 f3f3 	udiv	r3, r2, r3
 800600a:	3301      	adds	r3, #1
 800600c:	4618      	mov	r0, r3
 800600e:	f7fb fb61 	bl	80016d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fe0c 	bl	8006c30 <SD_PowerON>
 8006018:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e02e      	b.n	8006096 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fd3d 	bl	8006ab8 <SD_InitCard>
 800603e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e01b      	b.n	8006096 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006066:	4618      	mov	r0, r3
 8006068:	f003 f810 	bl	800908c <SDMMC_CmdBlockLength>
 800606c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00f      	beq.n	8006094 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a0b      	ldr	r2, [pc, #44]	; (80060a8 <HAL_SD_InitCard+0x124>)
 800607a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	372c      	adds	r7, #44	; 0x2c
 800609a:	46bd      	mov	sp, r7
 800609c:	bd90      	pop	{r4, r7, pc}
 800609e:	bf00      	nop
 80060a0:	014f8b59 	.word	0x014f8b59
 80060a4:	00012110 	.word	0x00012110
 80060a8:	1fe00fff 	.word	0x1fe00fff

080060ac <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08c      	sub	sp, #48	; 0x30
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d107      	bne.n	80060d4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e08d      	b.n	80061f0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	f040 8086 	bne.w	80061ee <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80060e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	441a      	add	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d907      	bls.n	8006106 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e074      	b.n	80061f0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2203      	movs	r2, #3
 800610a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	025a      	lsls	r2, r3, #9
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	2b01      	cmp	r3, #1
 800612a:	d002      	beq.n	8006132 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	025b      	lsls	r3, r3, #9
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006132:	f04f 33ff 	mov.w	r3, #4294967295
 8006136:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	025b      	lsls	r3, r3, #9
 800613c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800613e:	2390      	movs	r3, #144	; 0x90
 8006140:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006142:	2302      	movs	r3, #2
 8006144:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006146:	2300      	movs	r3, #0
 8006148:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800614a:	2300      	movs	r3, #0
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f107 0210 	add.w	r2, r7, #16
 8006156:	4611      	mov	r1, r2
 8006158:	4618      	mov	r0, r3
 800615a:	f002 ff6b 	bl	8009034 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800616c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2201      	movs	r2, #1
 800617c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d90a      	bls.n	800619a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2282      	movs	r2, #130	; 0x82
 8006188:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006190:	4618      	mov	r0, r3
 8006192:	f002 ffc1 	bl	8009118 <SDMMC_CmdReadMultiBlock>
 8006196:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006198:	e009      	b.n	80061ae <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2281      	movs	r2, #129	; 0x81
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061a6:	4618      	mov	r0, r3
 80061a8:	f002 ff93 	bl	80090d2 <SDMMC_CmdReadSingleBlock>
 80061ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d012      	beq.n	80061da <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a0f      	ldr	r2, [pc, #60]	; (80061f8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	431a      	orrs	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e00a      	b.n	80061f0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80061e8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e000      	b.n	80061f0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80061ee:	2302      	movs	r3, #2
  }
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3730      	adds	r7, #48	; 0x30
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	1fe00fff 	.word	0x1fe00fff

080061fc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08c      	sub	sp, #48	; 0x30
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d107      	bne.n	8006224 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006218:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e08d      	b.n	8006340 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	f040 8086 	bne.w	800633e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	441a      	add	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006242:	429a      	cmp	r2, r3
 8006244:	d907      	bls.n	8006256 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e074      	b.n	8006340 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2203      	movs	r2, #3
 800625a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2200      	movs	r2, #0
 8006264:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	025a      	lsls	r2, r3, #9
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	2b01      	cmp	r3, #1
 800627a:	d002      	beq.n	8006282 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	025b      	lsls	r3, r3, #9
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006282:	f04f 33ff 	mov.w	r3, #4294967295
 8006286:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	025b      	lsls	r3, r3, #9
 800628c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800628e:	2390      	movs	r3, #144	; 0x90
 8006290:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006292:	2300      	movs	r3, #0
 8006294:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006296:	2300      	movs	r3, #0
 8006298:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800629a:	2300      	movs	r3, #0
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f107 0210 	add.w	r2, r7, #16
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f002 fec3 	bl	8009034 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062bc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2201      	movs	r2, #1
 80062cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d90a      	bls.n	80062ea <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	22a0      	movs	r2, #160	; 0xa0
 80062d8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062e0:	4618      	mov	r0, r3
 80062e2:	f002 ff5f 	bl	80091a4 <SDMMC_CmdWriteMultiBlock>
 80062e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80062e8:	e009      	b.n	80062fe <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2290      	movs	r2, #144	; 0x90
 80062ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062f6:	4618      	mov	r0, r3
 80062f8:	f002 ff31 	bl	800915e <SDMMC_CmdWriteSingleBlock>
 80062fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80062fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006300:	2b00      	cmp	r3, #0
 8006302:	d012      	beq.n	800632a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a0f      	ldr	r2, [pc, #60]	; (8006348 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800630a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	431a      	orrs	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e00a      	b.n	8006340 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006338:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	e000      	b.n	8006340 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800633e:	2302      	movs	r3, #2
  }
}
 8006340:	4618      	mov	r0, r3
 8006342:	3730      	adds	r7, #48	; 0x30
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	1fe00fff 	.word	0x1fe00fff

0800634c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635a:	0f9b      	lsrs	r3, r3, #30
 800635c:	b2da      	uxtb	r2, r3
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006366:	0e9b      	lsrs	r3, r3, #26
 8006368:	b2db      	uxtb	r3, r3
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	b2da      	uxtb	r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006378:	0e1b      	lsrs	r3, r3, #24
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	b2da      	uxtb	r2, r3
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638a:	0c1b      	lsrs	r3, r3, #16
 800638c:	b2da      	uxtb	r2, r3
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006396:	0a1b      	lsrs	r3, r3, #8
 8006398:	b2da      	uxtb	r2, r3
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ac:	0d1b      	lsrs	r3, r3, #20
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b8:	0c1b      	lsrs	r3, r3, #16
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ca:	0bdb      	lsrs	r3, r3, #15
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063dc:	0b9b      	lsrs	r3, r3, #14
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ee:	0b5b      	lsrs	r3, r3, #13
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006400:	0b1b      	lsrs	r3, r3, #12
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	b2da      	uxtb	r2, r3
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2200      	movs	r2, #0
 8006412:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	2b00      	cmp	r3, #0
 800641a:	d163      	bne.n	80064e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006420:	009a      	lsls	r2, r3, #2
 8006422:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006426:	4013      	ands	r3, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800642c:	0f92      	lsrs	r2, r2, #30
 800642e:	431a      	orrs	r2, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006438:	0edb      	lsrs	r3, r3, #27
 800643a:	b2db      	uxtb	r3, r3
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	b2da      	uxtb	r2, r3
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800644a:	0e1b      	lsrs	r3, r3, #24
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	b2da      	uxtb	r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800645c:	0d5b      	lsrs	r3, r3, #21
 800645e:	b2db      	uxtb	r3, r3
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	b2da      	uxtb	r2, r3
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800646e:	0c9b      	lsrs	r3, r3, #18
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	b2da      	uxtb	r2, r3
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006480:	0bdb      	lsrs	r3, r3, #15
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	b2da      	uxtb	r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	7e1b      	ldrb	r3, [r3, #24]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	3302      	adds	r3, #2
 80064a4:	2201      	movs	r2, #1
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064ae:	fb02 f203 	mul.w	r2, r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	7a1b      	ldrb	r3, [r3, #8]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	2201      	movs	r2, #1
 80064c2:	409a      	lsls	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80064d0:	0a52      	lsrs	r2, r2, #9
 80064d2:	fb02 f203 	mul.w	r2, r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54
 80064e2:	e031      	b.n	8006548 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d11d      	bne.n	8006528 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f0:	041b      	lsls	r3, r3, #16
 80064f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064fa:	0c1b      	lsrs	r3, r3, #16
 80064fc:	431a      	orrs	r2, r3
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	3301      	adds	r3, #1
 8006508:	029a      	lsls	r2, r3, #10
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800651c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	655a      	str	r2, [r3, #84]	; 0x54
 8006526:	e00f      	b.n	8006548 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a58      	ldr	r2, [pc, #352]	; (8006690 <HAL_SD_GetCardCSD+0x344>)
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006534:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e09d      	b.n	8006684 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800654c:	0b9b      	lsrs	r3, r3, #14
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	b2da      	uxtb	r2, r3
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800655e:	09db      	lsrs	r3, r3, #7
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006566:	b2da      	uxtb	r2, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006570:	b2db      	uxtb	r3, r3
 8006572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006576:	b2da      	uxtb	r2, r3
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006580:	0fdb      	lsrs	r3, r3, #31
 8006582:	b2da      	uxtb	r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800658c:	0f5b      	lsrs	r3, r3, #29
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f003 0303 	and.w	r3, r3, #3
 8006594:	b2da      	uxtb	r2, r3
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800659e:	0e9b      	lsrs	r3, r3, #26
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b0:	0d9b      	lsrs	r3, r3, #22
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 030f 	and.w	r3, r3, #15
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065c2:	0d5b      	lsrs	r3, r3, #21
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065de:	0c1b      	lsrs	r3, r3, #16
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f2:	0bdb      	lsrs	r3, r3, #15
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006606:	0b9b      	lsrs	r3, r3, #14
 8006608:	b2db      	uxtb	r3, r3
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	b2da      	uxtb	r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800661a:	0b5b      	lsrs	r3, r3, #13
 800661c:	b2db      	uxtb	r3, r3
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	b2da      	uxtb	r2, r3
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800662e:	0b1b      	lsrs	r3, r3, #12
 8006630:	b2db      	uxtb	r3, r3
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	b2da      	uxtb	r2, r3
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006642:	0a9b      	lsrs	r3, r3, #10
 8006644:	b2db      	uxtb	r3, r3
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	b2da      	uxtb	r2, r3
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	b2db      	uxtb	r3, r3
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	b2da      	uxtb	r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	b2db      	uxtb	r3, r3
 800666e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006672:	b2da      	uxtb	r2, r3
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	1fe00fff 	.word	0x1fe00fff

08006694 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b094      	sub	sp, #80	; 0x50
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80066a4:	f107 0308 	add.w	r3, r7, #8
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fb4a 	bl	8006d44 <SD_SendSDStatus>
 80066b0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80066b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d011      	beq.n	80066dc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a4f      	ldr	r2, [pc, #316]	; (80067fc <HAL_SD_GetCardStatus+0x168>)
 80066be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80066da:	e070      	b.n	80067be <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	099b      	lsrs	r3, r3, #6
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	095b      	lsrs	r3, r3, #5
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	0a1b      	lsrs	r3, r3, #8
 8006700:	b29b      	uxth	r3, r3
 8006702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006706:	b29a      	uxth	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	0e1b      	lsrs	r3, r3, #24
 800670c:	b29b      	uxth	r3, r3
 800670e:	4313      	orrs	r3, r2
 8006710:	b29a      	uxth	r2, r3
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	061a      	lsls	r2, r3, #24
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006722:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	0a1b      	lsrs	r3, r3, #8
 8006728:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800672c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	0e1b      	lsrs	r3, r3, #24
 8006732:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	0a1b      	lsrs	r3, r3, #8
 8006744:	b2da      	uxtb	r2, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	0d1b      	lsrs	r3, r3, #20
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	b2da      	uxtb	r2, r3
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	0c1b      	lsrs	r3, r3, #16
 800675e:	b29b      	uxth	r3, r3
 8006760:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006764:	b29a      	uxth	r2, r3
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	b29b      	uxth	r3, r3
 800676a:	b2db      	uxtb	r3, r3
 800676c:	b29b      	uxth	r3, r3
 800676e:	4313      	orrs	r3, r2
 8006770:	b29a      	uxth	r2, r3
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	0a9b      	lsrs	r3, r3, #10
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006780:	b2da      	uxtb	r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	0a1b      	lsrs	r3, r3, #8
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	b2da      	uxtb	r2, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	091b      	lsrs	r3, r3, #4
 800679a:	b2db      	uxtb	r3, r3
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	0e1b      	lsrs	r3, r3, #24
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067c6:	4618      	mov	r0, r3
 80067c8:	f002 fc60 	bl	800908c <SDMMC_CmdBlockLength>
 80067cc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80067ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00d      	beq.n	80067f0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a08      	ldr	r2, [pc, #32]	; (80067fc <HAL_SD_GetCardStatus+0x168>)
 80067da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80067f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3750      	adds	r7, #80	; 0x50
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	1fe00fff 	.word	0x1fe00fff

08006800 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006858:	b590      	push	{r4, r7, lr}
 800685a:	b08d      	sub	sp, #52	; 0x34
 800685c:	af02      	add	r7, sp, #8
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2203      	movs	r2, #3
 800686c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	2b03      	cmp	r3, #3
 8006876:	d02e      	beq.n	80068d6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687e:	d106      	bne.n	800688e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	635a      	str	r2, [r3, #52]	; 0x34
 800688c:	e029      	b.n	80068e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006894:	d10a      	bne.n	80068ac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fb4c 	bl	8006f34 <SD_WideBus_Enable>
 800689c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	635a      	str	r2, [r3, #52]	; 0x34
 80068aa:	e01a      	b.n	80068e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10a      	bne.n	80068c8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fb89 	bl	8006fca <SD_WideBus_Disable>
 80068b8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	635a      	str	r2, [r3, #52]	; 0x34
 80068c6:	e00c      	b.n	80068e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	635a      	str	r2, [r3, #52]	; 0x34
 80068d4:	e005      	b.n	80068e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d007      	beq.n	80068fa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a5e      	ldr	r2, [pc, #376]	; (8006a68 <HAL_SD_ConfigWideBusOperation+0x210>)
 80068f0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068f8:	e094      	b.n	8006a24 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80068fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80068fe:	f7fe f81d 	bl	800493c <HAL_RCCEx_GetPeriphCLKFreq>
 8006902:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 8083 	beq.w	8006a12 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	695a      	ldr	r2, [r3, #20]
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4950      	ldr	r1, [pc, #320]	; (8006a6c <HAL_SD_ConfigWideBusOperation+0x214>)
 800692a:	fba1 1303 	umull	r1, r3, r1, r3
 800692e:	0e1b      	lsrs	r3, r3, #24
 8006930:	429a      	cmp	r2, r3
 8006932:	d303      	bcc.n	800693c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	e05a      	b.n	80069f2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006944:	d103      	bne.n	800694e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	61bb      	str	r3, [r7, #24]
 800694c:	e051      	b.n	80069f2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006956:	d126      	bne.n	80069a6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10e      	bne.n	800697e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	4a43      	ldr	r2, [pc, #268]	; (8006a70 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d906      	bls.n	8006976 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4a40      	ldr	r2, [pc, #256]	; (8006a6c <HAL_SD_ConfigWideBusOperation+0x214>)
 800696c:	fba2 2303 	umull	r2, r3, r2, r3
 8006970:	0e5b      	lsrs	r3, r3, #25
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	e03d      	b.n	80069f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	e039      	b.n	80069f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	fbb2 f3f3 	udiv	r3, r2, r3
 800698a:	4a39      	ldr	r2, [pc, #228]	; (8006a70 <HAL_SD_ConfigWideBusOperation+0x218>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d906      	bls.n	800699e <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	4a36      	ldr	r2, [pc, #216]	; (8006a6c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006994:	fba2 2303 	umull	r2, r3, r2, r3
 8006998:	0e5b      	lsrs	r3, r3, #25
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	e029      	b.n	80069f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	e025      	b.n	80069f2 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10e      	bne.n	80069cc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4a30      	ldr	r2, [pc, #192]	; (8006a74 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d906      	bls.n	80069c4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4a2c      	ldr	r2, [pc, #176]	; (8006a6c <HAL_SD_ConfigWideBusOperation+0x214>)
 80069ba:	fba2 2303 	umull	r2, r3, r2, r3
 80069be:	0e1b      	lsrs	r3, r3, #24
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	e016      	b.n	80069f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	e012      	b.n	80069f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d8:	4a26      	ldr	r2, [pc, #152]	; (8006a74 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d906      	bls.n	80069ec <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4a22      	ldr	r2, [pc, #136]	; (8006a6c <HAL_SD_ConfigWideBusOperation+0x214>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	0e1b      	lsrs	r3, r3, #24
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	e002      	b.n	80069f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681c      	ldr	r4, [r3, #0]
 80069f6:	466a      	mov	r2, sp
 80069f8:	f107 0314 	add.w	r3, r7, #20
 80069fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006a00:	e882 0003 	stmia.w	r2, {r0, r1}
 8006a04:	f107 0308 	add.w	r3, r7, #8
 8006a08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f002 fa72 	bl	8008ef4 <SDMMC_Init>
 8006a10:	e008      	b.n	8006a24 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f002 fb2d 	bl	800908c <SDMMC_CmdBlockLength>
 8006a32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00c      	beq.n	8006a54 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a0a      	ldr	r2, [pc, #40]	; (8006a68 <HAL_SD_ConfigWideBusOperation+0x210>)
 8006a40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	372c      	adds	r7, #44	; 0x2c
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd90      	pop	{r4, r7, pc}
 8006a68:	1fe00fff 	.word	0x1fe00fff
 8006a6c:	55e63b89 	.word	0x55e63b89
 8006a70:	02faf080 	.word	0x02faf080
 8006a74:	017d7840 	.word	0x017d7840

08006a78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006a84:	f107 030c 	add.w	r3, r7, #12
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa2a 	bl	8006ee4 <SD_SendStatus>
 8006a90:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	0a5b      	lsrs	r3, r3, #9
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006aae:	693b      	ldr	r3, [r7, #16]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b090      	sub	sp, #64	; 0x40
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f002 fa5b 	bl	8008f84 <SDMMC_GetPowerState>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ad4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006ad8:	e0a5      	b.n	8006c26 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d02e      	beq.n	8006b40 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f002 fc68 	bl	80093bc <SDMMC_CmdSendCID>
 8006aec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <SD_InitCard+0x40>
    {
      return errorstate;
 8006af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af6:	e096      	b.n	8006c26 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2100      	movs	r1, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f002 fa85 	bl	800900e <SDMMC_GetResponse>
 8006b04:	4602      	mov	r2, r0
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2104      	movs	r1, #4
 8006b10:	4618      	mov	r0, r3
 8006b12:	f002 fa7c 	bl	800900e <SDMMC_GetResponse>
 8006b16:	4602      	mov	r2, r0
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2108      	movs	r1, #8
 8006b22:	4618      	mov	r0, r3
 8006b24:	f002 fa73 	bl	800900e <SDMMC_GetResponse>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	210c      	movs	r1, #12
 8006b34:	4618      	mov	r0, r3
 8006b36:	f002 fa6a 	bl	800900e <SDMMC_GetResponse>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d00d      	beq.n	8006b64 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f107 020e 	add.w	r2, r7, #14
 8006b50:	4611      	mov	r1, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f002 fc71 	bl	800943a <SDMMC_CmdSetRelAdd>
 8006b58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <SD_InitCard+0xac>
    {
      return errorstate;
 8006b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b62:	e060      	b.n	8006c26 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	2b03      	cmp	r3, #3
 8006b6a:	d036      	beq.n	8006bda <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006b6c:	89fb      	ldrh	r3, [r7, #14]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7c:	041b      	lsls	r3, r3, #16
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4610      	mov	r0, r2
 8006b82:	f002 fc3a 	bl	80093fa <SDMMC_CmdSendCSD>
 8006b86:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <SD_InitCard+0xda>
    {
      return errorstate;
 8006b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b90:	e049      	b.n	8006c26 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f002 fa38 	bl	800900e <SDMMC_GetResponse>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2104      	movs	r1, #4
 8006baa:	4618      	mov	r0, r3
 8006bac:	f002 fa2f 	bl	800900e <SDMMC_GetResponse>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2108      	movs	r1, #8
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f002 fa26 	bl	800900e <SDMMC_GetResponse>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	210c      	movs	r1, #12
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f002 fa1d 	bl	800900e <SDMMC_GetResponse>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2104      	movs	r1, #4
 8006be0:	4618      	mov	r0, r3
 8006be2:	f002 fa14 	bl	800900e <SDMMC_GetResponse>
 8006be6:	4603      	mov	r3, r0
 8006be8:	0d1a      	lsrs	r2, r3, #20
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006bee:	f107 0310 	add.w	r3, r7, #16
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff fba9 	bl	800634c <HAL_SD_GetCardCSD>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c04:	e00f      	b.n	8006c26 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	041b      	lsls	r3, r3, #16
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f002 fae9 	bl	80091ea <SDMMC_CmdSelDesel>
 8006c18:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <SD_InitCard+0x16c>
  {
    return errorstate;
 8006c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c22:	e000      	b.n	8006c26 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3740      	adds	r7, #64	; 0x40
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
	...

08006c30 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f002 faf1 	bl	8009230 <SDMMC_CmdGoIdleState>
 8006c4e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	e06e      	b.n	8006d38 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f002 fb04 	bl	800926c <SDMMC_CmdOperCond>
 8006c64:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00d      	beq.n	8006c88 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f002 fada 	bl	8009230 <SDMMC_CmdGoIdleState>
 8006c7c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	e057      	b.n	8006d38 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d137      	bne.n	8006d06 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f002 fb05 	bl	80092ac <SDMMC_CmdAppCommand>
 8006ca2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d02d      	beq.n	8006d06 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006caa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006cae:	e043      	b.n	8006d38 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f002 faf8 	bl	80092ac <SDMMC_CmdAppCommand>
 8006cbc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <SD_PowerON+0x98>
    {
      return errorstate;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	e037      	b.n	8006d38 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	491c      	ldr	r1, [pc, #112]	; (8006d40 <SD_PowerON+0x110>)
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f002 fb0f 	bl	80092f2 <SDMMC_CmdAppOperCommand>
 8006cd4:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ce0:	e02a      	b.n	8006d38 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f002 f990 	bl	800900e <SDMMC_GetResponse>
 8006cee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	0fdb      	lsrs	r3, r3, #31
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <SD_PowerON+0xcc>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <SD_PowerON+0xce>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	613b      	str	r3, [r7, #16]

    count++;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d802      	bhi.n	8006d16 <SD_PowerON+0xe6>
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0cc      	beq.n	8006cb0 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d902      	bls.n	8006d26 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d24:	e008      	b.n	8006d38 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	c1100000 	.word	0xc1100000

08006d44 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08c      	sub	sp, #48	; 0x30
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d4e:	f7fa fcb5 	bl	80016bc <HAL_GetTick>
 8006d52:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f002 f955 	bl	800900e <SDMMC_GetResponse>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d6e:	d102      	bne.n	8006d76 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d74:	e0b0      	b.n	8006ed8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2140      	movs	r1, #64	; 0x40
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f002 f985 	bl	800908c <SDMMC_CmdBlockLength>
 8006d82:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	e0a0      	b.n	8006ed8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9e:	041b      	lsls	r3, r3, #16
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f002 fa82 	bl	80092ac <SDMMC_CmdAppCommand>
 8006da8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	e08d      	b.n	8006ed8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006dc2:	2340      	movs	r3, #64	; 0x40
 8006dc4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006dc6:	2360      	movs	r3, #96	; 0x60
 8006dc8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f107 0208 	add.w	r2, r7, #8
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f002 f927 	bl	8009034 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f002 fb6a 	bl	80094c4 <SDMMC_CmdStatusRegister>
 8006df0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d02b      	beq.n	8006e50 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	e069      	b.n	8006ed8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d013      	beq.n	8006e3a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006e12:	2300      	movs	r3, #0
 8006e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e16:	e00d      	b.n	8006e34 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f002 f893 	bl	8008f48 <SDMMC_ReadFIFO>
 8006e22:	4602      	mov	r2, r0
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	601a      	str	r2, [r3, #0]
        pData++;
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	3301      	adds	r3, #1
 8006e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e36:	2b07      	cmp	r3, #7
 8006e38:	d9ee      	bls.n	8006e18 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006e3a:	f7fa fc3f 	bl	80016bc <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d102      	bne.n	8006e50 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006e4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e4e:	e043      	b.n	8006ed8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e56:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0d2      	beq.n	8006e04 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e64:	f003 0308 	and.w	r3, r3, #8
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006e6c:	2308      	movs	r3, #8
 8006e6e:	e033      	b.n	8006ed8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e02a      	b.n	8006ed8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e88:	f003 0320 	and.w	r3, r3, #32
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d017      	beq.n	8006ec0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006e90:	2320      	movs	r3, #32
 8006e92:	e021      	b.n	8006ed8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f002 f855 	bl	8008f48 <SDMMC_ReadFIFO>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	601a      	str	r2, [r3, #0]
    pData++;
 8006ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006eaa:	f7fa fc07 	bl	80016bc <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d102      	bne.n	8006ec0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006eba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ebe:	e00b      	b.n	8006ed8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e2      	bne.n	8006e94 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a03      	ldr	r2, [pc, #12]	; (8006ee0 <SD_SendSDStatus+0x19c>)
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3730      	adds	r7, #48	; 0x30
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	18000f3a 	.word	0x18000f3a

08006ee4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006ef4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ef8:	e018      	b.n	8006f2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f02:	041b      	lsls	r3, r3, #16
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f002 fab9 	bl	800947e <SDMMC_CmdSendStatus>
 8006f0c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	e009      	b.n	8006f2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f002 f875 	bl	800900e <SDMMC_GetResponse>
 8006f24:	4602      	mov	r2, r0
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	2300      	movs	r3, #0
 8006f42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f002 f85f 	bl	800900e <SDMMC_GetResponse>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f5a:	d102      	bne.n	8006f62 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f60:	e02f      	b.n	8006fc2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f62:	f107 030c 	add.w	r3, r7, #12
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f879 	bl	8007060 <SD_FindSCR>
 8006f6e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	e023      	b.n	8006fc2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d01c      	beq.n	8006fbe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8c:	041b      	lsls	r3, r3, #16
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4610      	mov	r0, r2
 8006f92:	f002 f98b 	bl	80092ac <SDMMC_CmdAppCommand>
 8006f96:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	e00f      	b.n	8006fc2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2102      	movs	r1, #2
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f002 f9c2 	bl	8009332 <SDMMC_CmdBusWidth>
 8006fae:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	e003      	b.n	8006fc2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	e001      	b.n	8006fc2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006fbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b086      	sub	sp, #24
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f002 f814 	bl	800900e <SDMMC_GetResponse>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ff0:	d102      	bne.n	8006ff8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ff2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ff6:	e02f      	b.n	8007058 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006ff8:	f107 030c 	add.w	r3, r7, #12
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f82e 	bl	8007060 <SD_FindSCR>
 8007004:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	e023      	b.n	8007058 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d01c      	beq.n	8007054 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007022:	041b      	lsls	r3, r3, #16
 8007024:	4619      	mov	r1, r3
 8007026:	4610      	mov	r0, r2
 8007028:	f002 f940 	bl	80092ac <SDMMC_CmdAppCommand>
 800702c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	e00f      	b.n	8007058 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2100      	movs	r1, #0
 800703e:	4618      	mov	r0, r3
 8007040:	f002 f977 	bl	8009332 <SDMMC_CmdBusWidth>
 8007044:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	e003      	b.n	8007058 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007050:	2300      	movs	r3, #0
 8007052:	e001      	b.n	8007058 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007054:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08e      	sub	sp, #56	; 0x38
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800706a:	f7fa fb27 	bl	80016bc <HAL_GetTick>
 800706e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007074:	2300      	movs	r3, #0
 8007076:	60bb      	str	r3, [r7, #8]
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2108      	movs	r1, #8
 8007086:	4618      	mov	r0, r3
 8007088:	f002 f800 	bl	800908c <SDMMC_CmdBlockLength>
 800708c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	e0ad      	b.n	80071f4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a0:	041b      	lsls	r3, r3, #16
 80070a2:	4619      	mov	r1, r3
 80070a4:	4610      	mov	r0, r2
 80070a6:	f002 f901 	bl	80092ac <SDMMC_CmdAppCommand>
 80070aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	e09e      	b.n	80071f4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070b6:	f04f 33ff 	mov.w	r3, #4294967295
 80070ba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80070bc:	2308      	movs	r3, #8
 80070be:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80070c0:	2330      	movs	r3, #48	; 0x30
 80070c2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80070c4:	2302      	movs	r3, #2
 80070c6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f107 0210 	add.w	r2, r7, #16
 80070d8:	4611      	mov	r1, r2
 80070da:	4618      	mov	r0, r3
 80070dc:	f001 ffaa 	bl	8009034 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f002 f947 	bl	8009378 <SDMMC_CmdSendSCR>
 80070ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d027      	beq.n	8007142 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	e07e      	b.n	80071f4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d113      	bne.n	800712c <SD_FindSCR+0xcc>
 8007104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007106:	2b00      	cmp	r3, #0
 8007108:	d110      	bne.n	800712c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f001 ff1a 	bl	8008f48 <SDMMC_ReadFIFO>
 8007114:	4603      	mov	r3, r0
 8007116:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f001 ff13 	bl	8008f48 <SDMMC_ReadFIFO>
 8007122:	4603      	mov	r3, r0
 8007124:	60fb      	str	r3, [r7, #12]
      index++;
 8007126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007128:	3301      	adds	r3, #1
 800712a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800712c:	f7fa fac6 	bl	80016bc <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713a:	d102      	bne.n	8007142 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800713c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007140:	e058      	b.n	80071f4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007148:	f240 532a 	movw	r3, #1322	; 0x52a
 800714c:	4013      	ands	r3, r2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0d1      	beq.n	80070f6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007158:	f003 0308 	and.w	r3, r3, #8
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2208      	movs	r2, #8
 8007166:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007168:	2308      	movs	r3, #8
 800716a:	e043      	b.n	80071f4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2202      	movs	r2, #2
 8007180:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007182:	2302      	movs	r3, #2
 8007184:	e036      	b.n	80071f4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2220      	movs	r2, #32
 800719a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800719c:	2320      	movs	r3, #32
 800719e:	e029      	b.n	80071f4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a15      	ldr	r2, [pc, #84]	; (80071fc <SD_FindSCR+0x19c>)
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	061a      	lsls	r2, r3, #24
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	0a1b      	lsrs	r3, r3, #8
 80071ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80071be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	0e1b      	lsrs	r3, r3, #24
 80071c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	601a      	str	r2, [r3, #0]
    scr++;
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	3304      	adds	r3, #4
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	061a      	lsls	r2, r3, #24
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	021b      	lsls	r3, r3, #8
 80071d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	0a1b      	lsrs	r3, r3, #8
 80071e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80071e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	0e1b      	lsrs	r3, r3, #24
 80071ec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3738      	adds	r7, #56	; 0x38
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	18000f3a 	.word	0x18000f3a

08007200 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e02b      	b.n	800726c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d106      	bne.n	800722e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7fa f8ad 	bl	8001388 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2202      	movs	r2, #2
 8007232:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3304      	adds	r3, #4
 800723e:	4619      	mov	r1, r3
 8007240:	4610      	mov	r0, r2
 8007242:	f001 fd91 	bl	8008d68 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	461a      	mov	r2, r3
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	f001 fde5 	bl	8008e20 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007256:	4b07      	ldr	r3, [pc, #28]	; (8007274 <HAL_SDRAM_Init+0x74>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a06      	ldr	r2, [pc, #24]	; (8007274 <HAL_SDRAM_Init+0x74>)
 800725c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007260:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	52004000 	.word	0x52004000

08007278 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e0eb      	b.n	8007466 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a75      	ldr	r2, [pc, #468]	; (8007470 <HAL_SPI_Init+0x1f8>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00f      	beq.n	80072be <HAL_SPI_Init+0x46>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a74      	ldr	r2, [pc, #464]	; (8007474 <HAL_SPI_Init+0x1fc>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00a      	beq.n	80072be <HAL_SPI_Init+0x46>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a72      	ldr	r2, [pc, #456]	; (8007478 <HAL_SPI_Init+0x200>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d005      	beq.n	80072be <HAL_SPI_Init+0x46>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	2b0f      	cmp	r3, #15
 80072b8:	d901      	bls.n	80072be <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e0d3      	b.n	8007466 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f8dc 	bl	800747c <SPI_GetPacketSize>
 80072c4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a69      	ldr	r2, [pc, #420]	; (8007470 <HAL_SPI_Init+0x1f8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00c      	beq.n	80072ea <HAL_SPI_Init+0x72>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a67      	ldr	r2, [pc, #412]	; (8007474 <HAL_SPI_Init+0x1fc>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d007      	beq.n	80072ea <HAL_SPI_Init+0x72>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a66      	ldr	r2, [pc, #408]	; (8007478 <HAL_SPI_Init+0x200>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d002      	beq.n	80072ea <HAL_SPI_Init+0x72>
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	d811      	bhi.n	800730e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072ee:	4a60      	ldr	r2, [pc, #384]	; (8007470 <HAL_SPI_Init+0x1f8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d009      	beq.n	8007308 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a5e      	ldr	r2, [pc, #376]	; (8007474 <HAL_SPI_Init+0x1fc>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d004      	beq.n	8007308 <HAL_SPI_Init+0x90>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a5d      	ldr	r2, [pc, #372]	; (8007478 <HAL_SPI_Init+0x200>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d104      	bne.n	8007312 <HAL_SPI_Init+0x9a>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b10      	cmp	r3, #16
 800730c:	d901      	bls.n	8007312 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e0a9      	b.n	8007466 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7f9 fe54 	bl	8000fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 0201 	bic.w	r2, r2, #1
 8007342:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800734c:	d119      	bne.n	8007382 <HAL_SPI_Init+0x10a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007356:	d103      	bne.n	8007360 <HAL_SPI_Init+0xe8>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	2b00      	cmp	r3, #0
 800735e:	d008      	beq.n	8007372 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10c      	bne.n	8007382 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007370:	d107      	bne.n	8007382 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007380:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	69da      	ldr	r2, [r3, #28]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738a:	431a      	orrs	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007394:	ea42 0103 	orr.w	r1, r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e2:	ea42 0103 	orr.w	r1, r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d113      	bne.n	8007422 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800740c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007420:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0201 	bic.w	r2, r2, #1
 8007430:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	40013000 	.word	0x40013000
 8007474:	40003800 	.word	0x40003800
 8007478:	40003c00 	.word	0x40003c00

0800747c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	3301      	adds	r3, #1
 8007494:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	3307      	adds	r3, #7
 800749a:	08db      	lsrs	r3, r3, #3
 800749c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	fb02 f303 	mul.w	r3, r2, r3
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
	...

080074b4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e03e      	b.n	8007548 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d106      	bne.n	80074e4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7f9 ff48 	bl	8001374 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3308      	adds	r3, #8
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f001 fb22 	bl	8008b38 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	461a      	mov	r2, r3
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	f001 fbaa 	bl	8008c58 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6858      	ldr	r0, [r3, #4]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	f001 fbf1 	bl	8008cf8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	6892      	ldr	r2, [r2, #8]
 800751e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	6892      	ldr	r2, [r2, #8]
 800752a:	f041 0101 	orr.w	r1, r1, #1
 800752e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007532:	4b07      	ldr	r3, [pc, #28]	; (8007550 <HAL_SRAM_Init+0x9c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a06      	ldr	r2, [pc, #24]	; (8007550 <HAL_SRAM_Init+0x9c>)
 8007538:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800753c:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	52004000 	.word	0x52004000

08007554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e049      	b.n	80075fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f841 	bl	8007602 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3304      	adds	r3, #4
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f000 f9f8 	bl	8007988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
	...

08007618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b01      	cmp	r3, #1
 800762a:	d001      	beq.n	8007630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e04f      	b.n	80076d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2202      	movs	r2, #2
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0201 	orr.w	r2, r2, #1
 8007646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a23      	ldr	r2, [pc, #140]	; (80076dc <HAL_TIM_Base_Start_IT+0xc4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d01d      	beq.n	800768e <HAL_TIM_Base_Start_IT+0x76>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765a:	d018      	beq.n	800768e <HAL_TIM_Base_Start_IT+0x76>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1f      	ldr	r2, [pc, #124]	; (80076e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d013      	beq.n	800768e <HAL_TIM_Base_Start_IT+0x76>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1e      	ldr	r2, [pc, #120]	; (80076e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00e      	beq.n	800768e <HAL_TIM_Base_Start_IT+0x76>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a1c      	ldr	r2, [pc, #112]	; (80076e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d009      	beq.n	800768e <HAL_TIM_Base_Start_IT+0x76>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a1b      	ldr	r2, [pc, #108]	; (80076ec <HAL_TIM_Base_Start_IT+0xd4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d004      	beq.n	800768e <HAL_TIM_Base_Start_IT+0x76>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a19      	ldr	r2, [pc, #100]	; (80076f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d115      	bne.n	80076ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	4b17      	ldr	r3, [pc, #92]	; (80076f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007696:	4013      	ands	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b06      	cmp	r3, #6
 800769e:	d015      	beq.n	80076cc <HAL_TIM_Base_Start_IT+0xb4>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a6:	d011      	beq.n	80076cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0201 	orr.w	r2, r2, #1
 80076b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b8:	e008      	b.n	80076cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f042 0201 	orr.w	r2, r2, #1
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	e000      	b.n	80076ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	40010000 	.word	0x40010000
 80076e0:	40000400 	.word	0x40000400
 80076e4:	40000800 	.word	0x40000800
 80076e8:	40000c00 	.word	0x40000c00
 80076ec:	40010400 	.word	0x40010400
 80076f0:	40001800 	.word	0x40001800
 80076f4:	00010007 	.word	0x00010007

080076f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b02      	cmp	r3, #2
 800770c:	d122      	bne.n	8007754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b02      	cmp	r3, #2
 800771a:	d11b      	bne.n	8007754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f06f 0202 	mvn.w	r2, #2
 8007724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f905 	bl	800794a <HAL_TIM_IC_CaptureCallback>
 8007740:	e005      	b.n	800774e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f8f7 	bl	8007936 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f908 	bl	800795e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 0304 	and.w	r3, r3, #4
 800775e:	2b04      	cmp	r3, #4
 8007760:	d122      	bne.n	80077a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b04      	cmp	r3, #4
 800776e:	d11b      	bne.n	80077a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f06f 0204 	mvn.w	r2, #4
 8007778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2202      	movs	r2, #2
 800777e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f8db 	bl	800794a <HAL_TIM_IC_CaptureCallback>
 8007794:	e005      	b.n	80077a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f8cd 	bl	8007936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f8de 	bl	800795e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d122      	bne.n	80077fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0308 	and.w	r3, r3, #8
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d11b      	bne.n	80077fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0208 	mvn.w	r2, #8
 80077cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2204      	movs	r2, #4
 80077d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f8b1 	bl	800794a <HAL_TIM_IC_CaptureCallback>
 80077e8:	e005      	b.n	80077f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f8a3 	bl	8007936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f8b4 	bl	800795e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0310 	and.w	r3, r3, #16
 8007806:	2b10      	cmp	r3, #16
 8007808:	d122      	bne.n	8007850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	2b10      	cmp	r3, #16
 8007816:	d11b      	bne.n	8007850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0210 	mvn.w	r2, #16
 8007820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2208      	movs	r2, #8
 8007826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f887 	bl	800794a <HAL_TIM_IC_CaptureCallback>
 800783c:	e005      	b.n	800784a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f879 	bl	8007936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f88a 	bl	800795e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b01      	cmp	r3, #1
 800785c:	d10e      	bne.n	800787c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b01      	cmp	r3, #1
 800786a:	d107      	bne.n	800787c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0201 	mvn.w	r2, #1
 8007874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7f9 fa70 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007886:	2b80      	cmp	r3, #128	; 0x80
 8007888:	d10e      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007894:	2b80      	cmp	r3, #128	; 0x80
 8007896:	d107      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f914 	bl	8007ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b6:	d10e      	bne.n	80078d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c2:	2b80      	cmp	r3, #128	; 0x80
 80078c4:	d107      	bne.n	80078d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80078ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f907 	bl	8007ae4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b40      	cmp	r3, #64	; 0x40
 80078e2:	d10e      	bne.n	8007902 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ee:	2b40      	cmp	r3, #64	; 0x40
 80078f0:	d107      	bne.n	8007902 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f838 	bl	8007972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	f003 0320 	and.w	r3, r3, #32
 800790c:	2b20      	cmp	r3, #32
 800790e:	d10e      	bne.n	800792e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b20      	cmp	r3, #32
 800791c:	d107      	bne.n	800792e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f06f 0220 	mvn.w	r2, #32
 8007926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f8c7 	bl	8007abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
	...

08007988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a40      	ldr	r2, [pc, #256]	; (8007a9c <TIM_Base_SetConfig+0x114>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d013      	beq.n	80079c8 <TIM_Base_SetConfig+0x40>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a6:	d00f      	beq.n	80079c8 <TIM_Base_SetConfig+0x40>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a3d      	ldr	r2, [pc, #244]	; (8007aa0 <TIM_Base_SetConfig+0x118>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00b      	beq.n	80079c8 <TIM_Base_SetConfig+0x40>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a3c      	ldr	r2, [pc, #240]	; (8007aa4 <TIM_Base_SetConfig+0x11c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d007      	beq.n	80079c8 <TIM_Base_SetConfig+0x40>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a3b      	ldr	r2, [pc, #236]	; (8007aa8 <TIM_Base_SetConfig+0x120>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d003      	beq.n	80079c8 <TIM_Base_SetConfig+0x40>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a3a      	ldr	r2, [pc, #232]	; (8007aac <TIM_Base_SetConfig+0x124>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d108      	bne.n	80079da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a2f      	ldr	r2, [pc, #188]	; (8007a9c <TIM_Base_SetConfig+0x114>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d01f      	beq.n	8007a22 <TIM_Base_SetConfig+0x9a>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e8:	d01b      	beq.n	8007a22 <TIM_Base_SetConfig+0x9a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a2c      	ldr	r2, [pc, #176]	; (8007aa0 <TIM_Base_SetConfig+0x118>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d017      	beq.n	8007a22 <TIM_Base_SetConfig+0x9a>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a2b      	ldr	r2, [pc, #172]	; (8007aa4 <TIM_Base_SetConfig+0x11c>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d013      	beq.n	8007a22 <TIM_Base_SetConfig+0x9a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a2a      	ldr	r2, [pc, #168]	; (8007aa8 <TIM_Base_SetConfig+0x120>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00f      	beq.n	8007a22 <TIM_Base_SetConfig+0x9a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a29      	ldr	r2, [pc, #164]	; (8007aac <TIM_Base_SetConfig+0x124>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00b      	beq.n	8007a22 <TIM_Base_SetConfig+0x9a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a28      	ldr	r2, [pc, #160]	; (8007ab0 <TIM_Base_SetConfig+0x128>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d007      	beq.n	8007a22 <TIM_Base_SetConfig+0x9a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a27      	ldr	r2, [pc, #156]	; (8007ab4 <TIM_Base_SetConfig+0x12c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d003      	beq.n	8007a22 <TIM_Base_SetConfig+0x9a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a26      	ldr	r2, [pc, #152]	; (8007ab8 <TIM_Base_SetConfig+0x130>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d108      	bne.n	8007a34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	689a      	ldr	r2, [r3, #8]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a10      	ldr	r2, [pc, #64]	; (8007a9c <TIM_Base_SetConfig+0x114>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00f      	beq.n	8007a80 <TIM_Base_SetConfig+0xf8>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a12      	ldr	r2, [pc, #72]	; (8007aac <TIM_Base_SetConfig+0x124>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d00b      	beq.n	8007a80 <TIM_Base_SetConfig+0xf8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a11      	ldr	r2, [pc, #68]	; (8007ab0 <TIM_Base_SetConfig+0x128>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d007      	beq.n	8007a80 <TIM_Base_SetConfig+0xf8>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a10      	ldr	r2, [pc, #64]	; (8007ab4 <TIM_Base_SetConfig+0x12c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d003      	beq.n	8007a80 <TIM_Base_SetConfig+0xf8>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a0f      	ldr	r2, [pc, #60]	; (8007ab8 <TIM_Base_SetConfig+0x130>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d103      	bne.n	8007a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	691a      	ldr	r2, [r3, #16]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	615a      	str	r2, [r3, #20]
}
 8007a8e:	bf00      	nop
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	40010000 	.word	0x40010000
 8007aa0:	40000400 	.word	0x40000400
 8007aa4:	40000800 	.word	0x40000800
 8007aa8:	40000c00 	.word	0x40000c00
 8007aac:	40010400 	.word	0x40010400
 8007ab0:	40014000 	.word	0x40014000
 8007ab4:	40014400 	.word	0x40014400
 8007ab8:	40014800 	.word	0x40014800

08007abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e042      	b.n	8007b90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d106      	bne.n	8007b22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7f9 fae5 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2224      	movs	r2, #36	; 0x24
 8007b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0201 	bic.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f82c 	bl	8007b98 <UART_SetConfig>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e022      	b.n	8007b90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fd80 	bl	8008658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0201 	orr.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fe07 	bl	800879c <UART_CheckIdleState>
 8007b8e:	4603      	mov	r3, r0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b98:	b5b0      	push	{r4, r5, r7, lr}
 8007b9a:	b08e      	sub	sp, #56	; 0x38
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	4bbf      	ldr	r3, [pc, #764]	; (8007ec4 <UART_SetConfig+0x32c>)
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6812      	ldr	r2, [r2, #0]
 8007bcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4ab5      	ldr	r2, [pc, #724]	; (8007ec8 <UART_SetConfig+0x330>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d004      	beq.n	8007c02 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689a      	ldr	r2, [r3, #8]
 8007c08:	4bb0      	ldr	r3, [pc, #704]	; (8007ecc <UART_SetConfig+0x334>)
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	6812      	ldr	r2, [r2, #0]
 8007c10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c12:	430b      	orrs	r3, r1
 8007c14:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1c:	f023 010f 	bic.w	r1, r3, #15
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4aa7      	ldr	r2, [pc, #668]	; (8007ed0 <UART_SetConfig+0x338>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d176      	bne.n	8007d24 <UART_SetConfig+0x18c>
 8007c36:	4ba7      	ldr	r3, [pc, #668]	; (8007ed4 <UART_SetConfig+0x33c>)
 8007c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c3e:	2b28      	cmp	r3, #40	; 0x28
 8007c40:	d86c      	bhi.n	8007d1c <UART_SetConfig+0x184>
 8007c42:	a201      	add	r2, pc, #4	; (adr r2, 8007c48 <UART_SetConfig+0xb0>)
 8007c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c48:	08007ced 	.word	0x08007ced
 8007c4c:	08007d1d 	.word	0x08007d1d
 8007c50:	08007d1d 	.word	0x08007d1d
 8007c54:	08007d1d 	.word	0x08007d1d
 8007c58:	08007d1d 	.word	0x08007d1d
 8007c5c:	08007d1d 	.word	0x08007d1d
 8007c60:	08007d1d 	.word	0x08007d1d
 8007c64:	08007d1d 	.word	0x08007d1d
 8007c68:	08007cf5 	.word	0x08007cf5
 8007c6c:	08007d1d 	.word	0x08007d1d
 8007c70:	08007d1d 	.word	0x08007d1d
 8007c74:	08007d1d 	.word	0x08007d1d
 8007c78:	08007d1d 	.word	0x08007d1d
 8007c7c:	08007d1d 	.word	0x08007d1d
 8007c80:	08007d1d 	.word	0x08007d1d
 8007c84:	08007d1d 	.word	0x08007d1d
 8007c88:	08007cfd 	.word	0x08007cfd
 8007c8c:	08007d1d 	.word	0x08007d1d
 8007c90:	08007d1d 	.word	0x08007d1d
 8007c94:	08007d1d 	.word	0x08007d1d
 8007c98:	08007d1d 	.word	0x08007d1d
 8007c9c:	08007d1d 	.word	0x08007d1d
 8007ca0:	08007d1d 	.word	0x08007d1d
 8007ca4:	08007d1d 	.word	0x08007d1d
 8007ca8:	08007d05 	.word	0x08007d05
 8007cac:	08007d1d 	.word	0x08007d1d
 8007cb0:	08007d1d 	.word	0x08007d1d
 8007cb4:	08007d1d 	.word	0x08007d1d
 8007cb8:	08007d1d 	.word	0x08007d1d
 8007cbc:	08007d1d 	.word	0x08007d1d
 8007cc0:	08007d1d 	.word	0x08007d1d
 8007cc4:	08007d1d 	.word	0x08007d1d
 8007cc8:	08007d0d 	.word	0x08007d0d
 8007ccc:	08007d1d 	.word	0x08007d1d
 8007cd0:	08007d1d 	.word	0x08007d1d
 8007cd4:	08007d1d 	.word	0x08007d1d
 8007cd8:	08007d1d 	.word	0x08007d1d
 8007cdc:	08007d1d 	.word	0x08007d1d
 8007ce0:	08007d1d 	.word	0x08007d1d
 8007ce4:	08007d1d 	.word	0x08007d1d
 8007ce8:	08007d15 	.word	0x08007d15
 8007cec:	2301      	movs	r3, #1
 8007cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cf2:	e222      	b.n	800813a <UART_SetConfig+0x5a2>
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cfa:	e21e      	b.n	800813a <UART_SetConfig+0x5a2>
 8007cfc:	2308      	movs	r3, #8
 8007cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d02:	e21a      	b.n	800813a <UART_SetConfig+0x5a2>
 8007d04:	2310      	movs	r3, #16
 8007d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d0a:	e216      	b.n	800813a <UART_SetConfig+0x5a2>
 8007d0c:	2320      	movs	r3, #32
 8007d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d12:	e212      	b.n	800813a <UART_SetConfig+0x5a2>
 8007d14:	2340      	movs	r3, #64	; 0x40
 8007d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d1a:	e20e      	b.n	800813a <UART_SetConfig+0x5a2>
 8007d1c:	2380      	movs	r3, #128	; 0x80
 8007d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d22:	e20a      	b.n	800813a <UART_SetConfig+0x5a2>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a6b      	ldr	r2, [pc, #428]	; (8007ed8 <UART_SetConfig+0x340>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d130      	bne.n	8007d90 <UART_SetConfig+0x1f8>
 8007d2e:	4b69      	ldr	r3, [pc, #420]	; (8007ed4 <UART_SetConfig+0x33c>)
 8007d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	2b05      	cmp	r3, #5
 8007d38:	d826      	bhi.n	8007d88 <UART_SetConfig+0x1f0>
 8007d3a:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <UART_SetConfig+0x1a8>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d59 	.word	0x08007d59
 8007d44:	08007d61 	.word	0x08007d61
 8007d48:	08007d69 	.word	0x08007d69
 8007d4c:	08007d71 	.word	0x08007d71
 8007d50:	08007d79 	.word	0x08007d79
 8007d54:	08007d81 	.word	0x08007d81
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d5e:	e1ec      	b.n	800813a <UART_SetConfig+0x5a2>
 8007d60:	2304      	movs	r3, #4
 8007d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d66:	e1e8      	b.n	800813a <UART_SetConfig+0x5a2>
 8007d68:	2308      	movs	r3, #8
 8007d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d6e:	e1e4      	b.n	800813a <UART_SetConfig+0x5a2>
 8007d70:	2310      	movs	r3, #16
 8007d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d76:	e1e0      	b.n	800813a <UART_SetConfig+0x5a2>
 8007d78:	2320      	movs	r3, #32
 8007d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d7e:	e1dc      	b.n	800813a <UART_SetConfig+0x5a2>
 8007d80:	2340      	movs	r3, #64	; 0x40
 8007d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d86:	e1d8      	b.n	800813a <UART_SetConfig+0x5a2>
 8007d88:	2380      	movs	r3, #128	; 0x80
 8007d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d8e:	e1d4      	b.n	800813a <UART_SetConfig+0x5a2>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a51      	ldr	r2, [pc, #324]	; (8007edc <UART_SetConfig+0x344>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d130      	bne.n	8007dfc <UART_SetConfig+0x264>
 8007d9a:	4b4e      	ldr	r3, [pc, #312]	; (8007ed4 <UART_SetConfig+0x33c>)
 8007d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	d826      	bhi.n	8007df4 <UART_SetConfig+0x25c>
 8007da6:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <UART_SetConfig+0x214>)
 8007da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dac:	08007dc5 	.word	0x08007dc5
 8007db0:	08007dcd 	.word	0x08007dcd
 8007db4:	08007dd5 	.word	0x08007dd5
 8007db8:	08007ddd 	.word	0x08007ddd
 8007dbc:	08007de5 	.word	0x08007de5
 8007dc0:	08007ded 	.word	0x08007ded
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dca:	e1b6      	b.n	800813a <UART_SetConfig+0x5a2>
 8007dcc:	2304      	movs	r3, #4
 8007dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd2:	e1b2      	b.n	800813a <UART_SetConfig+0x5a2>
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dda:	e1ae      	b.n	800813a <UART_SetConfig+0x5a2>
 8007ddc:	2310      	movs	r3, #16
 8007dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de2:	e1aa      	b.n	800813a <UART_SetConfig+0x5a2>
 8007de4:	2320      	movs	r3, #32
 8007de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dea:	e1a6      	b.n	800813a <UART_SetConfig+0x5a2>
 8007dec:	2340      	movs	r3, #64	; 0x40
 8007dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007df2:	e1a2      	b.n	800813a <UART_SetConfig+0x5a2>
 8007df4:	2380      	movs	r3, #128	; 0x80
 8007df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dfa:	e19e      	b.n	800813a <UART_SetConfig+0x5a2>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a37      	ldr	r2, [pc, #220]	; (8007ee0 <UART_SetConfig+0x348>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d130      	bne.n	8007e68 <UART_SetConfig+0x2d0>
 8007e06:	4b33      	ldr	r3, [pc, #204]	; (8007ed4 <UART_SetConfig+0x33c>)
 8007e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0a:	f003 0307 	and.w	r3, r3, #7
 8007e0e:	2b05      	cmp	r3, #5
 8007e10:	d826      	bhi.n	8007e60 <UART_SetConfig+0x2c8>
 8007e12:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <UART_SetConfig+0x280>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e31 	.word	0x08007e31
 8007e1c:	08007e39 	.word	0x08007e39
 8007e20:	08007e41 	.word	0x08007e41
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e51 	.word	0x08007e51
 8007e2c:	08007e59 	.word	0x08007e59
 8007e30:	2300      	movs	r3, #0
 8007e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e36:	e180      	b.n	800813a <UART_SetConfig+0x5a2>
 8007e38:	2304      	movs	r3, #4
 8007e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3e:	e17c      	b.n	800813a <UART_SetConfig+0x5a2>
 8007e40:	2308      	movs	r3, #8
 8007e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e46:	e178      	b.n	800813a <UART_SetConfig+0x5a2>
 8007e48:	2310      	movs	r3, #16
 8007e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4e:	e174      	b.n	800813a <UART_SetConfig+0x5a2>
 8007e50:	2320      	movs	r3, #32
 8007e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e56:	e170      	b.n	800813a <UART_SetConfig+0x5a2>
 8007e58:	2340      	movs	r3, #64	; 0x40
 8007e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e5e:	e16c      	b.n	800813a <UART_SetConfig+0x5a2>
 8007e60:	2380      	movs	r3, #128	; 0x80
 8007e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e66:	e168      	b.n	800813a <UART_SetConfig+0x5a2>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <UART_SetConfig+0x34c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d142      	bne.n	8007ef8 <UART_SetConfig+0x360>
 8007e72:	4b18      	ldr	r3, [pc, #96]	; (8007ed4 <UART_SetConfig+0x33c>)
 8007e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	2b05      	cmp	r3, #5
 8007e7c:	d838      	bhi.n	8007ef0 <UART_SetConfig+0x358>
 8007e7e:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <UART_SetConfig+0x2ec>)
 8007e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e84:	08007e9d 	.word	0x08007e9d
 8007e88:	08007ea5 	.word	0x08007ea5
 8007e8c:	08007ead 	.word	0x08007ead
 8007e90:	08007eb5 	.word	0x08007eb5
 8007e94:	08007ebd 	.word	0x08007ebd
 8007e98:	08007ee9 	.word	0x08007ee9
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea2:	e14a      	b.n	800813a <UART_SetConfig+0x5a2>
 8007ea4:	2304      	movs	r3, #4
 8007ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eaa:	e146      	b.n	800813a <UART_SetConfig+0x5a2>
 8007eac:	2308      	movs	r3, #8
 8007eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb2:	e142      	b.n	800813a <UART_SetConfig+0x5a2>
 8007eb4:	2310      	movs	r3, #16
 8007eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eba:	e13e      	b.n	800813a <UART_SetConfig+0x5a2>
 8007ebc:	2320      	movs	r3, #32
 8007ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ec2:	e13a      	b.n	800813a <UART_SetConfig+0x5a2>
 8007ec4:	cfff69f3 	.word	0xcfff69f3
 8007ec8:	58000c00 	.word	0x58000c00
 8007ecc:	11fff4ff 	.word	0x11fff4ff
 8007ed0:	40011000 	.word	0x40011000
 8007ed4:	58024400 	.word	0x58024400
 8007ed8:	40004400 	.word	0x40004400
 8007edc:	40004800 	.word	0x40004800
 8007ee0:	40004c00 	.word	0x40004c00
 8007ee4:	40005000 	.word	0x40005000
 8007ee8:	2340      	movs	r3, #64	; 0x40
 8007eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eee:	e124      	b.n	800813a <UART_SetConfig+0x5a2>
 8007ef0:	2380      	movs	r3, #128	; 0x80
 8007ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ef6:	e120      	b.n	800813a <UART_SetConfig+0x5a2>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4acc      	ldr	r2, [pc, #816]	; (8008230 <UART_SetConfig+0x698>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d176      	bne.n	8007ff0 <UART_SetConfig+0x458>
 8007f02:	4bcc      	ldr	r3, [pc, #816]	; (8008234 <UART_SetConfig+0x69c>)
 8007f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f0a:	2b28      	cmp	r3, #40	; 0x28
 8007f0c:	d86c      	bhi.n	8007fe8 <UART_SetConfig+0x450>
 8007f0e:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <UART_SetConfig+0x37c>)
 8007f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f14:	08007fb9 	.word	0x08007fb9
 8007f18:	08007fe9 	.word	0x08007fe9
 8007f1c:	08007fe9 	.word	0x08007fe9
 8007f20:	08007fe9 	.word	0x08007fe9
 8007f24:	08007fe9 	.word	0x08007fe9
 8007f28:	08007fe9 	.word	0x08007fe9
 8007f2c:	08007fe9 	.word	0x08007fe9
 8007f30:	08007fe9 	.word	0x08007fe9
 8007f34:	08007fc1 	.word	0x08007fc1
 8007f38:	08007fe9 	.word	0x08007fe9
 8007f3c:	08007fe9 	.word	0x08007fe9
 8007f40:	08007fe9 	.word	0x08007fe9
 8007f44:	08007fe9 	.word	0x08007fe9
 8007f48:	08007fe9 	.word	0x08007fe9
 8007f4c:	08007fe9 	.word	0x08007fe9
 8007f50:	08007fe9 	.word	0x08007fe9
 8007f54:	08007fc9 	.word	0x08007fc9
 8007f58:	08007fe9 	.word	0x08007fe9
 8007f5c:	08007fe9 	.word	0x08007fe9
 8007f60:	08007fe9 	.word	0x08007fe9
 8007f64:	08007fe9 	.word	0x08007fe9
 8007f68:	08007fe9 	.word	0x08007fe9
 8007f6c:	08007fe9 	.word	0x08007fe9
 8007f70:	08007fe9 	.word	0x08007fe9
 8007f74:	08007fd1 	.word	0x08007fd1
 8007f78:	08007fe9 	.word	0x08007fe9
 8007f7c:	08007fe9 	.word	0x08007fe9
 8007f80:	08007fe9 	.word	0x08007fe9
 8007f84:	08007fe9 	.word	0x08007fe9
 8007f88:	08007fe9 	.word	0x08007fe9
 8007f8c:	08007fe9 	.word	0x08007fe9
 8007f90:	08007fe9 	.word	0x08007fe9
 8007f94:	08007fd9 	.word	0x08007fd9
 8007f98:	08007fe9 	.word	0x08007fe9
 8007f9c:	08007fe9 	.word	0x08007fe9
 8007fa0:	08007fe9 	.word	0x08007fe9
 8007fa4:	08007fe9 	.word	0x08007fe9
 8007fa8:	08007fe9 	.word	0x08007fe9
 8007fac:	08007fe9 	.word	0x08007fe9
 8007fb0:	08007fe9 	.word	0x08007fe9
 8007fb4:	08007fe1 	.word	0x08007fe1
 8007fb8:	2301      	movs	r3, #1
 8007fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fbe:	e0bc      	b.n	800813a <UART_SetConfig+0x5a2>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fc6:	e0b8      	b.n	800813a <UART_SetConfig+0x5a2>
 8007fc8:	2308      	movs	r3, #8
 8007fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fce:	e0b4      	b.n	800813a <UART_SetConfig+0x5a2>
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fd6:	e0b0      	b.n	800813a <UART_SetConfig+0x5a2>
 8007fd8:	2320      	movs	r3, #32
 8007fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fde:	e0ac      	b.n	800813a <UART_SetConfig+0x5a2>
 8007fe0:	2340      	movs	r3, #64	; 0x40
 8007fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fe6:	e0a8      	b.n	800813a <UART_SetConfig+0x5a2>
 8007fe8:	2380      	movs	r3, #128	; 0x80
 8007fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fee:	e0a4      	b.n	800813a <UART_SetConfig+0x5a2>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a90      	ldr	r2, [pc, #576]	; (8008238 <UART_SetConfig+0x6a0>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d130      	bne.n	800805c <UART_SetConfig+0x4c4>
 8007ffa:	4b8e      	ldr	r3, [pc, #568]	; (8008234 <UART_SetConfig+0x69c>)
 8007ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	2b05      	cmp	r3, #5
 8008004:	d826      	bhi.n	8008054 <UART_SetConfig+0x4bc>
 8008006:	a201      	add	r2, pc, #4	; (adr r2, 800800c <UART_SetConfig+0x474>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	08008025 	.word	0x08008025
 8008010:	0800802d 	.word	0x0800802d
 8008014:	08008035 	.word	0x08008035
 8008018:	0800803d 	.word	0x0800803d
 800801c:	08008045 	.word	0x08008045
 8008020:	0800804d 	.word	0x0800804d
 8008024:	2300      	movs	r3, #0
 8008026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800802a:	e086      	b.n	800813a <UART_SetConfig+0x5a2>
 800802c:	2304      	movs	r3, #4
 800802e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008032:	e082      	b.n	800813a <UART_SetConfig+0x5a2>
 8008034:	2308      	movs	r3, #8
 8008036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800803a:	e07e      	b.n	800813a <UART_SetConfig+0x5a2>
 800803c:	2310      	movs	r3, #16
 800803e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008042:	e07a      	b.n	800813a <UART_SetConfig+0x5a2>
 8008044:	2320      	movs	r3, #32
 8008046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800804a:	e076      	b.n	800813a <UART_SetConfig+0x5a2>
 800804c:	2340      	movs	r3, #64	; 0x40
 800804e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008052:	e072      	b.n	800813a <UART_SetConfig+0x5a2>
 8008054:	2380      	movs	r3, #128	; 0x80
 8008056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800805a:	e06e      	b.n	800813a <UART_SetConfig+0x5a2>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a76      	ldr	r2, [pc, #472]	; (800823c <UART_SetConfig+0x6a4>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d130      	bne.n	80080c8 <UART_SetConfig+0x530>
 8008066:	4b73      	ldr	r3, [pc, #460]	; (8008234 <UART_SetConfig+0x69c>)
 8008068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806a:	f003 0307 	and.w	r3, r3, #7
 800806e:	2b05      	cmp	r3, #5
 8008070:	d826      	bhi.n	80080c0 <UART_SetConfig+0x528>
 8008072:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <UART_SetConfig+0x4e0>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	08008091 	.word	0x08008091
 800807c:	08008099 	.word	0x08008099
 8008080:	080080a1 	.word	0x080080a1
 8008084:	080080a9 	.word	0x080080a9
 8008088:	080080b1 	.word	0x080080b1
 800808c:	080080b9 	.word	0x080080b9
 8008090:	2300      	movs	r3, #0
 8008092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008096:	e050      	b.n	800813a <UART_SetConfig+0x5a2>
 8008098:	2304      	movs	r3, #4
 800809a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800809e:	e04c      	b.n	800813a <UART_SetConfig+0x5a2>
 80080a0:	2308      	movs	r3, #8
 80080a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a6:	e048      	b.n	800813a <UART_SetConfig+0x5a2>
 80080a8:	2310      	movs	r3, #16
 80080aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ae:	e044      	b.n	800813a <UART_SetConfig+0x5a2>
 80080b0:	2320      	movs	r3, #32
 80080b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080b6:	e040      	b.n	800813a <UART_SetConfig+0x5a2>
 80080b8:	2340      	movs	r3, #64	; 0x40
 80080ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080be:	e03c      	b.n	800813a <UART_SetConfig+0x5a2>
 80080c0:	2380      	movs	r3, #128	; 0x80
 80080c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080c6:	e038      	b.n	800813a <UART_SetConfig+0x5a2>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a5c      	ldr	r2, [pc, #368]	; (8008240 <UART_SetConfig+0x6a8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d130      	bne.n	8008134 <UART_SetConfig+0x59c>
 80080d2:	4b58      	ldr	r3, [pc, #352]	; (8008234 <UART_SetConfig+0x69c>)
 80080d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	2b05      	cmp	r3, #5
 80080dc:	d826      	bhi.n	800812c <UART_SetConfig+0x594>
 80080de:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <UART_SetConfig+0x54c>)
 80080e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e4:	080080fd 	.word	0x080080fd
 80080e8:	08008105 	.word	0x08008105
 80080ec:	0800810d 	.word	0x0800810d
 80080f0:	08008115 	.word	0x08008115
 80080f4:	0800811d 	.word	0x0800811d
 80080f8:	08008125 	.word	0x08008125
 80080fc:	2302      	movs	r3, #2
 80080fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008102:	e01a      	b.n	800813a <UART_SetConfig+0x5a2>
 8008104:	2304      	movs	r3, #4
 8008106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810a:	e016      	b.n	800813a <UART_SetConfig+0x5a2>
 800810c:	2308      	movs	r3, #8
 800810e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008112:	e012      	b.n	800813a <UART_SetConfig+0x5a2>
 8008114:	2310      	movs	r3, #16
 8008116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800811a:	e00e      	b.n	800813a <UART_SetConfig+0x5a2>
 800811c:	2320      	movs	r3, #32
 800811e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008122:	e00a      	b.n	800813a <UART_SetConfig+0x5a2>
 8008124:	2340      	movs	r3, #64	; 0x40
 8008126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800812a:	e006      	b.n	800813a <UART_SetConfig+0x5a2>
 800812c:	2380      	movs	r3, #128	; 0x80
 800812e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008132:	e002      	b.n	800813a <UART_SetConfig+0x5a2>
 8008134:	2380      	movs	r3, #128	; 0x80
 8008136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a40      	ldr	r2, [pc, #256]	; (8008240 <UART_SetConfig+0x6a8>)
 8008140:	4293      	cmp	r3, r2
 8008142:	f040 80ef 	bne.w	8008324 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008146:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800814a:	2b20      	cmp	r3, #32
 800814c:	dc46      	bgt.n	80081dc <UART_SetConfig+0x644>
 800814e:	2b02      	cmp	r3, #2
 8008150:	f2c0 8081 	blt.w	8008256 <UART_SetConfig+0x6be>
 8008154:	3b02      	subs	r3, #2
 8008156:	2b1e      	cmp	r3, #30
 8008158:	d87d      	bhi.n	8008256 <UART_SetConfig+0x6be>
 800815a:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <UART_SetConfig+0x5c8>)
 800815c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008160:	080081e3 	.word	0x080081e3
 8008164:	08008257 	.word	0x08008257
 8008168:	080081eb 	.word	0x080081eb
 800816c:	08008257 	.word	0x08008257
 8008170:	08008257 	.word	0x08008257
 8008174:	08008257 	.word	0x08008257
 8008178:	080081fb 	.word	0x080081fb
 800817c:	08008257 	.word	0x08008257
 8008180:	08008257 	.word	0x08008257
 8008184:	08008257 	.word	0x08008257
 8008188:	08008257 	.word	0x08008257
 800818c:	08008257 	.word	0x08008257
 8008190:	08008257 	.word	0x08008257
 8008194:	08008257 	.word	0x08008257
 8008198:	0800820b 	.word	0x0800820b
 800819c:	08008257 	.word	0x08008257
 80081a0:	08008257 	.word	0x08008257
 80081a4:	08008257 	.word	0x08008257
 80081a8:	08008257 	.word	0x08008257
 80081ac:	08008257 	.word	0x08008257
 80081b0:	08008257 	.word	0x08008257
 80081b4:	08008257 	.word	0x08008257
 80081b8:	08008257 	.word	0x08008257
 80081bc:	08008257 	.word	0x08008257
 80081c0:	08008257 	.word	0x08008257
 80081c4:	08008257 	.word	0x08008257
 80081c8:	08008257 	.word	0x08008257
 80081cc:	08008257 	.word	0x08008257
 80081d0:	08008257 	.word	0x08008257
 80081d4:	08008257 	.word	0x08008257
 80081d8:	08008249 	.word	0x08008249
 80081dc:	2b40      	cmp	r3, #64	; 0x40
 80081de:	d036      	beq.n	800824e <UART_SetConfig+0x6b6>
 80081e0:	e039      	b.n	8008256 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80081e2:	f7fd f87d 	bl	80052e0 <HAL_RCCEx_GetD3PCLK1Freq>
 80081e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80081e8:	e03b      	b.n	8008262 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ea:	f107 0314 	add.w	r3, r7, #20
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fd f88c 	bl	800530c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081f8:	e033      	b.n	8008262 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081fa:	f107 0308 	add.w	r3, r7, #8
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fd f9d8 	bl	80055b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008208:	e02b      	b.n	8008262 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800820a:	4b0a      	ldr	r3, [pc, #40]	; (8008234 <UART_SetConfig+0x69c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0320 	and.w	r3, r3, #32
 8008212:	2b00      	cmp	r3, #0
 8008214:	d009      	beq.n	800822a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008216:	4b07      	ldr	r3, [pc, #28]	; (8008234 <UART_SetConfig+0x69c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	08db      	lsrs	r3, r3, #3
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	4a08      	ldr	r2, [pc, #32]	; (8008244 <UART_SetConfig+0x6ac>)
 8008222:	fa22 f303 	lsr.w	r3, r2, r3
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008228:	e01b      	b.n	8008262 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800822a:	4b06      	ldr	r3, [pc, #24]	; (8008244 <UART_SetConfig+0x6ac>)
 800822c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800822e:	e018      	b.n	8008262 <UART_SetConfig+0x6ca>
 8008230:	40011400 	.word	0x40011400
 8008234:	58024400 	.word	0x58024400
 8008238:	40007800 	.word	0x40007800
 800823c:	40007c00 	.word	0x40007c00
 8008240:	58000c00 	.word	0x58000c00
 8008244:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008248:	4bc4      	ldr	r3, [pc, #784]	; (800855c <UART_SetConfig+0x9c4>)
 800824a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800824c:	e009      	b.n	8008262 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800824e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008254:	e005      	b.n	8008262 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008260:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 81da 	beq.w	800861e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	4abc      	ldr	r2, [pc, #752]	; (8008560 <UART_SetConfig+0x9c8>)
 8008270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008274:	461a      	mov	r2, r3
 8008276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008278:	fbb3 f3f2 	udiv	r3, r3, r2
 800827c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	4613      	mov	r3, r2
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	4413      	add	r3, r2
 8008288:	6a3a      	ldr	r2, [r7, #32]
 800828a:	429a      	cmp	r2, r3
 800828c:	d305      	bcc.n	800829a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008294:	6a3a      	ldr	r2, [r7, #32]
 8008296:	429a      	cmp	r2, r3
 8008298:	d903      	bls.n	80082a2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80082a0:	e1bd      	b.n	800861e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a4:	4618      	mov	r0, r3
 80082a6:	f04f 0100 	mov.w	r1, #0
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	4aac      	ldr	r2, [pc, #688]	; (8008560 <UART_SetConfig+0x9c8>)
 80082b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	f04f 0300 	mov.w	r3, #0
 80082ba:	f7f8 f811 	bl	80002e0 <__aeabi_uldivmod>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4610      	mov	r0, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	f04f 0200 	mov.w	r2, #0
 80082ca:	f04f 0300 	mov.w	r3, #0
 80082ce:	020b      	lsls	r3, r1, #8
 80082d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082d4:	0202      	lsls	r2, r0, #8
 80082d6:	6879      	ldr	r1, [r7, #4]
 80082d8:	6849      	ldr	r1, [r1, #4]
 80082da:	0849      	lsrs	r1, r1, #1
 80082dc:	4608      	mov	r0, r1
 80082de:	f04f 0100 	mov.w	r1, #0
 80082e2:	1814      	adds	r4, r2, r0
 80082e4:	eb43 0501 	adc.w	r5, r3, r1
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	461a      	mov	r2, r3
 80082ee:	f04f 0300 	mov.w	r3, #0
 80082f2:	4620      	mov	r0, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7f7 fff3 	bl	80002e0 <__aeabi_uldivmod>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4613      	mov	r3, r2
 8008300:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008308:	d308      	bcc.n	800831c <UART_SetConfig+0x784>
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008310:	d204      	bcs.n	800831c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008318:	60da      	str	r2, [r3, #12]
 800831a:	e180      	b.n	800861e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008322:	e17c      	b.n	800861e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800832c:	f040 80bf 	bne.w	80084ae <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008330:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008334:	2b20      	cmp	r3, #32
 8008336:	dc49      	bgt.n	80083cc <UART_SetConfig+0x834>
 8008338:	2b00      	cmp	r3, #0
 800833a:	db7c      	blt.n	8008436 <UART_SetConfig+0x89e>
 800833c:	2b20      	cmp	r3, #32
 800833e:	d87a      	bhi.n	8008436 <UART_SetConfig+0x89e>
 8008340:	a201      	add	r2, pc, #4	; (adr r2, 8008348 <UART_SetConfig+0x7b0>)
 8008342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008346:	bf00      	nop
 8008348:	080083d3 	.word	0x080083d3
 800834c:	080083db 	.word	0x080083db
 8008350:	08008437 	.word	0x08008437
 8008354:	08008437 	.word	0x08008437
 8008358:	080083e3 	.word	0x080083e3
 800835c:	08008437 	.word	0x08008437
 8008360:	08008437 	.word	0x08008437
 8008364:	08008437 	.word	0x08008437
 8008368:	080083f3 	.word	0x080083f3
 800836c:	08008437 	.word	0x08008437
 8008370:	08008437 	.word	0x08008437
 8008374:	08008437 	.word	0x08008437
 8008378:	08008437 	.word	0x08008437
 800837c:	08008437 	.word	0x08008437
 8008380:	08008437 	.word	0x08008437
 8008384:	08008437 	.word	0x08008437
 8008388:	08008403 	.word	0x08008403
 800838c:	08008437 	.word	0x08008437
 8008390:	08008437 	.word	0x08008437
 8008394:	08008437 	.word	0x08008437
 8008398:	08008437 	.word	0x08008437
 800839c:	08008437 	.word	0x08008437
 80083a0:	08008437 	.word	0x08008437
 80083a4:	08008437 	.word	0x08008437
 80083a8:	08008437 	.word	0x08008437
 80083ac:	08008437 	.word	0x08008437
 80083b0:	08008437 	.word	0x08008437
 80083b4:	08008437 	.word	0x08008437
 80083b8:	08008437 	.word	0x08008437
 80083bc:	08008437 	.word	0x08008437
 80083c0:	08008437 	.word	0x08008437
 80083c4:	08008437 	.word	0x08008437
 80083c8:	08008429 	.word	0x08008429
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	d02e      	beq.n	800842e <UART_SetConfig+0x896>
 80083d0:	e031      	b.n	8008436 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083d2:	f7fb fb05 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 80083d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083d8:	e033      	b.n	8008442 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083da:	f7fb fb17 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
 80083de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083e0:	e02f      	b.n	8008442 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083e2:	f107 0314 	add.w	r3, r7, #20
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fc ff90 	bl	800530c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083f0:	e027      	b.n	8008442 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f2:	f107 0308 	add.w	r3, r7, #8
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fd f8dc 	bl	80055b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008400:	e01f      	b.n	8008442 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008402:	4b58      	ldr	r3, [pc, #352]	; (8008564 <UART_SetConfig+0x9cc>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0320 	and.w	r3, r3, #32
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800840e:	4b55      	ldr	r3, [pc, #340]	; (8008564 <UART_SetConfig+0x9cc>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	08db      	lsrs	r3, r3, #3
 8008414:	f003 0303 	and.w	r3, r3, #3
 8008418:	4a53      	ldr	r2, [pc, #332]	; (8008568 <UART_SetConfig+0x9d0>)
 800841a:	fa22 f303 	lsr.w	r3, r2, r3
 800841e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008420:	e00f      	b.n	8008442 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008422:	4b51      	ldr	r3, [pc, #324]	; (8008568 <UART_SetConfig+0x9d0>)
 8008424:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008426:	e00c      	b.n	8008442 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008428:	4b4c      	ldr	r3, [pc, #304]	; (800855c <UART_SetConfig+0x9c4>)
 800842a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800842c:	e009      	b.n	8008442 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800842e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008434:	e005      	b.n	8008442 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008440:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 80ea 	beq.w	800861e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	4a44      	ldr	r2, [pc, #272]	; (8008560 <UART_SetConfig+0x9c8>)
 8008450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008454:	461a      	mov	r2, r3
 8008456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008458:	fbb3 f3f2 	udiv	r3, r3, r2
 800845c:	005a      	lsls	r2, r3, #1
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	085b      	lsrs	r3, r3, #1
 8008464:	441a      	add	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	fbb2 f3f3 	udiv	r3, r2, r3
 800846e:	b29b      	uxth	r3, r3
 8008470:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008474:	2b0f      	cmp	r3, #15
 8008476:	d916      	bls.n	80084a6 <UART_SetConfig+0x90e>
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800847e:	d212      	bcs.n	80084a6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	b29b      	uxth	r3, r3
 8008484:	f023 030f 	bic.w	r3, r3, #15
 8008488:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	085b      	lsrs	r3, r3, #1
 800848e:	b29b      	uxth	r3, r3
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	b29a      	uxth	r2, r3
 8008496:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008498:	4313      	orrs	r3, r2
 800849a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084a2:	60da      	str	r2, [r3, #12]
 80084a4:	e0bb      	b.n	800861e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80084ac:	e0b7      	b.n	800861e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084b2:	2b20      	cmp	r3, #32
 80084b4:	dc4a      	bgt.n	800854c <UART_SetConfig+0x9b4>
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f2c0 8086 	blt.w	80085c8 <UART_SetConfig+0xa30>
 80084bc:	2b20      	cmp	r3, #32
 80084be:	f200 8083 	bhi.w	80085c8 <UART_SetConfig+0xa30>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <UART_SetConfig+0x930>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	08008553 	.word	0x08008553
 80084cc:	0800856d 	.word	0x0800856d
 80084d0:	080085c9 	.word	0x080085c9
 80084d4:	080085c9 	.word	0x080085c9
 80084d8:	08008575 	.word	0x08008575
 80084dc:	080085c9 	.word	0x080085c9
 80084e0:	080085c9 	.word	0x080085c9
 80084e4:	080085c9 	.word	0x080085c9
 80084e8:	08008585 	.word	0x08008585
 80084ec:	080085c9 	.word	0x080085c9
 80084f0:	080085c9 	.word	0x080085c9
 80084f4:	080085c9 	.word	0x080085c9
 80084f8:	080085c9 	.word	0x080085c9
 80084fc:	080085c9 	.word	0x080085c9
 8008500:	080085c9 	.word	0x080085c9
 8008504:	080085c9 	.word	0x080085c9
 8008508:	08008595 	.word	0x08008595
 800850c:	080085c9 	.word	0x080085c9
 8008510:	080085c9 	.word	0x080085c9
 8008514:	080085c9 	.word	0x080085c9
 8008518:	080085c9 	.word	0x080085c9
 800851c:	080085c9 	.word	0x080085c9
 8008520:	080085c9 	.word	0x080085c9
 8008524:	080085c9 	.word	0x080085c9
 8008528:	080085c9 	.word	0x080085c9
 800852c:	080085c9 	.word	0x080085c9
 8008530:	080085c9 	.word	0x080085c9
 8008534:	080085c9 	.word	0x080085c9
 8008538:	080085c9 	.word	0x080085c9
 800853c:	080085c9 	.word	0x080085c9
 8008540:	080085c9 	.word	0x080085c9
 8008544:	080085c9 	.word	0x080085c9
 8008548:	080085bb 	.word	0x080085bb
 800854c:	2b40      	cmp	r3, #64	; 0x40
 800854e:	d037      	beq.n	80085c0 <UART_SetConfig+0xa28>
 8008550:	e03a      	b.n	80085c8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008552:	f7fb fa45 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8008556:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008558:	e03c      	b.n	80085d4 <UART_SetConfig+0xa3c>
 800855a:	bf00      	nop
 800855c:	003d0900 	.word	0x003d0900
 8008560:	0800d098 	.word	0x0800d098
 8008564:	58024400 	.word	0x58024400
 8008568:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800856c:	f7fb fa4e 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
 8008570:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008572:	e02f      	b.n	80085d4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008574:	f107 0314 	add.w	r3, r7, #20
 8008578:	4618      	mov	r0, r3
 800857a:	f7fc fec7 	bl	800530c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008582:	e027      	b.n	80085d4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008584:	f107 0308 	add.w	r3, r7, #8
 8008588:	4618      	mov	r0, r3
 800858a:	f7fd f813 	bl	80055b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008592:	e01f      	b.n	80085d4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008594:	4b2c      	ldr	r3, [pc, #176]	; (8008648 <UART_SetConfig+0xab0>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0320 	and.w	r3, r3, #32
 800859c:	2b00      	cmp	r3, #0
 800859e:	d009      	beq.n	80085b4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085a0:	4b29      	ldr	r3, [pc, #164]	; (8008648 <UART_SetConfig+0xab0>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	08db      	lsrs	r3, r3, #3
 80085a6:	f003 0303 	and.w	r3, r3, #3
 80085aa:	4a28      	ldr	r2, [pc, #160]	; (800864c <UART_SetConfig+0xab4>)
 80085ac:	fa22 f303 	lsr.w	r3, r2, r3
 80085b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085b2:	e00f      	b.n	80085d4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80085b4:	4b25      	ldr	r3, [pc, #148]	; (800864c <UART_SetConfig+0xab4>)
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085b8:	e00c      	b.n	80085d4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085ba:	4b25      	ldr	r3, [pc, #148]	; (8008650 <UART_SetConfig+0xab8>)
 80085bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085be:	e009      	b.n	80085d4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085c6:	e005      	b.n	80085d4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80085d2:	bf00      	nop
    }

    if (pclk != 0U)
 80085d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d021      	beq.n	800861e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	4a1d      	ldr	r2, [pc, #116]	; (8008654 <UART_SetConfig+0xabc>)
 80085e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085e4:	461a      	mov	r2, r3
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	085b      	lsrs	r3, r3, #1
 80085f2:	441a      	add	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	2b0f      	cmp	r3, #15
 8008604:	d908      	bls.n	8008618 <UART_SetConfig+0xa80>
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800860c:	d204      	bcs.n	8008618 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008614:	60da      	str	r2, [r3, #12]
 8008616:	e002      	b.n	800861e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800863a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800863e:	4618      	mov	r0, r3
 8008640:	3738      	adds	r7, #56	; 0x38
 8008642:	46bd      	mov	sp, r7
 8008644:	bdb0      	pop	{r4, r5, r7, pc}
 8008646:	bf00      	nop
 8008648:	58024400 	.word	0x58024400
 800864c:	03d09000 	.word	0x03d09000
 8008650:	003d0900 	.word	0x003d0900
 8008654:	0800d098 	.word	0x0800d098

08008658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00a      	beq.n	8008682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a8:	f003 0304 	and.w	r3, r3, #4
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00a      	beq.n	80086c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	f003 0308 	and.w	r3, r3, #8
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	f003 0310 	and.w	r3, r3, #16
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00a      	beq.n	800870a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	f003 0320 	and.w	r3, r3, #32
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00a      	beq.n	800872c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	430a      	orrs	r2, r1
 800872a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	d01a      	beq.n	800876e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008756:	d10a      	bne.n	800876e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	605a      	str	r2, [r3, #4]
  }
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af02      	add	r7, sp, #8
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087ac:	f7f8 ff86 	bl	80016bc <HAL_GetTick>
 80087b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0308 	and.w	r3, r3, #8
 80087bc:	2b08      	cmp	r3, #8
 80087be:	d10e      	bne.n	80087de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f82f 	bl	8008832 <UART_WaitOnFlagUntilTimeout>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e025      	b.n	800882a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d10e      	bne.n	800880a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f819 	bl	8008832 <UART_WaitOnFlagUntilTimeout>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e00f      	b.n	800882a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2220      	movs	r2, #32
 8008816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	60b9      	str	r1, [r7, #8]
 800883c:	603b      	str	r3, [r7, #0]
 800883e:	4613      	mov	r3, r2
 8008840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008842:	e062      	b.n	800890a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884a:	d05e      	beq.n	800890a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800884c:	f7f8 ff36 	bl	80016bc <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	69ba      	ldr	r2, [r7, #24]
 8008858:	429a      	cmp	r2, r3
 800885a:	d302      	bcc.n	8008862 <UART_WaitOnFlagUntilTimeout+0x30>
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d11d      	bne.n	800889e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008870:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 0201 	bic.w	r2, r2, #1
 8008880:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2220      	movs	r2, #32
 8008886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2220      	movs	r2, #32
 800888e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e045      	b.n	800892a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d02e      	beq.n	800890a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ba:	d126      	bne.n	800890a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80088d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0201 	bic.w	r2, r2, #1
 80088e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e00f      	b.n	800892a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69da      	ldr	r2, [r3, #28]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	4013      	ands	r3, r2
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	429a      	cmp	r2, r3
 8008918:	bf0c      	ite	eq
 800891a:	2301      	moveq	r3, #1
 800891c:	2300      	movne	r3, #0
 800891e:	b2db      	uxtb	r3, r3
 8008920:	461a      	mov	r2, r3
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	429a      	cmp	r2, r3
 8008926:	d08d      	beq.n	8008844 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_UARTEx_DisableFifoMode+0x16>
 8008944:	2302      	movs	r3, #2
 8008946:	e027      	b.n	8008998 <HAL_UARTEx_DisableFifoMode+0x66>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2224      	movs	r2, #36	; 0x24
 8008954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 0201 	bic.w	r2, r2, #1
 800896e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008976:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2220      	movs	r2, #32
 800898a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089b8:	2302      	movs	r3, #2
 80089ba:	e02d      	b.n	8008a18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2224      	movs	r2, #36	; 0x24
 80089c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0201 	bic.w	r2, r2, #1
 80089e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f84f 	bl	8008a9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d101      	bne.n	8008a38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a34:	2302      	movs	r3, #2
 8008a36:	e02d      	b.n	8008a94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2224      	movs	r2, #36	; 0x24
 8008a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f022 0201 	bic.w	r2, r2, #1
 8008a5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f811 	bl	8008a9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2220      	movs	r2, #32
 8008a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d108      	bne.n	8008abe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008abc:	e031      	b.n	8008b22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008abe:	2310      	movs	r3, #16
 8008ac0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ac2:	2310      	movs	r3, #16
 8008ac4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	0e5b      	lsrs	r3, r3, #25
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	f003 0307 	and.w	r3, r3, #7
 8008ad4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	0f5b      	lsrs	r3, r3, #29
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	f003 0307 	and.w	r3, r3, #7
 8008ae4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
 8008ae8:	7b3a      	ldrb	r2, [r7, #12]
 8008aea:	4911      	ldr	r1, [pc, #68]	; (8008b30 <UARTEx_SetNbDataToProcess+0x94>)
 8008aec:	5c8a      	ldrb	r2, [r1, r2]
 8008aee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008af2:	7b3a      	ldrb	r2, [r7, #12]
 8008af4:	490f      	ldr	r1, [pc, #60]	; (8008b34 <UARTEx_SetNbDataToProcess+0x98>)
 8008af6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008af8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	7b7a      	ldrb	r2, [r7, #13]
 8008b08:	4909      	ldr	r1, [pc, #36]	; (8008b30 <UARTEx_SetNbDataToProcess+0x94>)
 8008b0a:	5c8a      	ldrb	r2, [r1, r2]
 8008b0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b10:	7b7a      	ldrb	r2, [r7, #13]
 8008b12:	4908      	ldr	r1, [pc, #32]	; (8008b34 <UARTEx_SetNbDataToProcess+0x98>)
 8008b14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b16:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b22:	bf00      	nop
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	0800d0b0 	.word	0x0800d0b0
 8008b34:	0800d0b8 	.word	0x0800d0b8

08008b38 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	6812      	ldr	r2, [r2, #0]
 8008b50:	f023 0101 	bic.w	r1, r3, #1
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d102      	bne.n	8008b68 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008b62:	2340      	movs	r3, #64	; 0x40
 8008b64:	617b      	str	r3, [r7, #20]
 8008b66:	e001      	b.n	8008b6c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008b78:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008b7e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008b84:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008b8a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008b90:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8008b96:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008b9c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8008ba2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8008ba8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8008bd0:	4b20      	ldr	r3, [pc, #128]	; (8008c54 <FMC_NORSRAM_Init+0x11c>)
 8008bd2:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bda:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008be2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008bea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	43db      	mvns	r3, r3
 8008bfa:	ea02 0103 	and.w	r1, r2, r3
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	4319      	orrs	r1, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c14:	d10c      	bne.n	8008c30 <FMC_NORSRAM_Init+0xf8>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d008      	beq.n	8008c30 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d006      	beq.n	8008c46 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	371c      	adds	r7, #28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	0008fb7f 	.word	0x0008fb7f

08008c58 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	011b      	lsls	r3, r3, #4
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	021b      	lsls	r3, r3, #8
 8008c84:	431a      	orrs	r2, r3
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	041b      	lsls	r3, r3, #16
 8008c8c:	431a      	orrs	r2, r3
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	051b      	lsls	r3, r3, #20
 8008c96:	431a      	orrs	r2, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	3b02      	subs	r3, #2
 8008c9e:	061b      	lsls	r3, r3, #24
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	3201      	adds	r2, #1
 8008cac:	4319      	orrs	r1, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cc0:	d113      	bne.n	8008cea <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008cca:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	051b      	lsls	r3, r3, #20
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	371c      	adds	r7, #28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d0c:	d11d      	bne.n	8008d4a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d16:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008d18:	4013      	ands	r3, r2
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	6811      	ldr	r1, [r2, #0]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	6852      	ldr	r2, [r2, #4]
 8008d22:	0112      	lsls	r2, r2, #4
 8008d24:	4311      	orrs	r1, r2
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	6892      	ldr	r2, [r2, #8]
 8008d2a:	0212      	lsls	r2, r2, #8
 8008d2c:	4311      	orrs	r1, r2
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	6992      	ldr	r2, [r2, #24]
 8008d32:	4311      	orrs	r1, r2
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	68d2      	ldr	r2, [r2, #12]
 8008d38:	0412      	lsls	r2, r2, #16
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	ea43 0102 	orr.w	r1, r3, r2
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008d48:	e005      	b.n	8008d56 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	cff00000 	.word	0xcff00000

08008d68 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d121      	bne.n	8008dbe <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4b27      	ldr	r3, [pc, #156]	; (8008e1c <FMC_SDRAM_Init+0xb4>)
 8008d80:	4013      	ands	r3, r2
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	6851      	ldr	r1, [r2, #4]
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	6892      	ldr	r2, [r2, #8]
 8008d8a:	4311      	orrs	r1, r2
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	68d2      	ldr	r2, [r2, #12]
 8008d90:	4311      	orrs	r1, r2
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	6912      	ldr	r2, [r2, #16]
 8008d96:	4311      	orrs	r1, r2
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	6952      	ldr	r2, [r2, #20]
 8008d9c:	4311      	orrs	r1, r2
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	6992      	ldr	r2, [r2, #24]
 8008da2:	4311      	orrs	r1, r2
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	69d2      	ldr	r2, [r2, #28]
 8008da8:	4311      	orrs	r1, r2
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	6a12      	ldr	r2, [r2, #32]
 8008dae:	4311      	orrs	r1, r2
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008db4:	430a      	orrs	r2, r1
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	e026      	b.n	8008e0c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	69d9      	ldr	r1, [r3, #28]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	4319      	orrs	r1, r3
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	430b      	orrs	r3, r1
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	4b0e      	ldr	r3, [pc, #56]	; (8008e1c <FMC_SDRAM_Init+0xb4>)
 8008de2:	4013      	ands	r3, r2
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	6851      	ldr	r1, [r2, #4]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	6892      	ldr	r2, [r2, #8]
 8008dec:	4311      	orrs	r1, r2
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	68d2      	ldr	r2, [r2, #12]
 8008df2:	4311      	orrs	r1, r2
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	6912      	ldr	r2, [r2, #16]
 8008df8:	4311      	orrs	r1, r2
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	6952      	ldr	r2, [r2, #20]
 8008dfe:	4311      	orrs	r1, r2
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	6992      	ldr	r2, [r2, #24]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	431a      	orrs	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	ffff8000 	.word	0xffff8000

08008e20 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d128      	bne.n	8008e84 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	1e59      	subs	r1, r3, #1
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	3b01      	subs	r3, #1
 8008e46:	011b      	lsls	r3, r3, #4
 8008e48:	4319      	orrs	r1, r3
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	021b      	lsls	r3, r3, #8
 8008e52:	4319      	orrs	r1, r3
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	031b      	lsls	r3, r3, #12
 8008e5c:	4319      	orrs	r1, r3
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	041b      	lsls	r3, r3, #16
 8008e66:	4319      	orrs	r1, r3
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	051b      	lsls	r3, r3, #20
 8008e70:	4319      	orrs	r1, r3
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	061b      	lsls	r3, r3, #24
 8008e7a:	430b      	orrs	r3, r1
 8008e7c:	431a      	orrs	r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	609a      	str	r2, [r3, #8]
 8008e82:	e02d      	b.n	8008ee0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	4b19      	ldr	r3, [pc, #100]	; (8008ef0 <FMC_SDRAM_Timing_Init+0xd0>)
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	68d2      	ldr	r2, [r2, #12]
 8008e90:	3a01      	subs	r2, #1
 8008e92:	0311      	lsls	r1, r2, #12
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	6952      	ldr	r2, [r2, #20]
 8008e98:	3a01      	subs	r2, #1
 8008e9a:	0512      	lsls	r2, r2, #20
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	1e59      	subs	r1, r3, #1
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	011b      	lsls	r3, r3, #4
 8008eba:	4319      	orrs	r1, r3
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	021b      	lsls	r3, r3, #8
 8008ec4:	4319      	orrs	r1, r3
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	041b      	lsls	r3, r3, #16
 8008ece:	4319      	orrs	r1, r3
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	061b      	lsls	r3, r3, #24
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	431a      	orrs	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	ff0f0fff 	.word	0xff0f0fff

08008ef4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	b480      	push	{r7}
 8008ef8:	b085      	sub	sp, #20
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	f107 001c 	add.w	r0, r7, #28
 8008f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008f0a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008f0e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008f12:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008f16:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008f1a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	4b07      	ldr	r3, [pc, #28]	; (8008f44 <SDMMC_Init+0x50>)
 8008f28:	4013      	ands	r3, r2
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	b004      	add	sp, #16
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	ffc02c00 	.word	0xffc02c00

08008f48 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b083      	sub	sp, #12
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f043 0203 	orr.w	r2, r3, #3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 0303 	and.w	r3, r3, #3
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008fbe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008fc4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008fca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	4b06      	ldr	r3, [pc, #24]	; (8008ff0 <SDMMC_SendCommand+0x50>)
 8008fd8:	4013      	ands	r3, r2
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	fffee0c0 	.word	0xfffee0c0

08008ff4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	b2db      	uxtb	r3, r3
}
 8009002:	4618      	mov	r0, r3
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800900e:	b480      	push	{r7}
 8009010:	b085      	sub	sp, #20
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3314      	adds	r3, #20
 800901c:	461a      	mov	r2, r3
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	4413      	add	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800905a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009060:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009066:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009072:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	431a      	orrs	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800907e:	2300      	movs	r3, #0

}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800909a:	2310      	movs	r3, #16
 800909c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800909e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090ae:	f107 0308 	add.w	r3, r7, #8
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff ff73 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80090ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80090be:	2110      	movs	r1, #16
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fa21 	bl	8009508 <SDMMC_GetCmdResp1>
 80090c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090c8:	69fb      	ldr	r3, [r7, #28]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3720      	adds	r7, #32
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b088      	sub	sp, #32
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80090e0:	2311      	movs	r3, #17
 80090e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090f4:	f107 0308 	add.w	r3, r7, #8
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff ff50 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009100:	f241 3288 	movw	r2, #5000	; 0x1388
 8009104:	2111      	movs	r1, #17
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f9fe 	bl	8009508 <SDMMC_GetCmdResp1>
 800910c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800910e:	69fb      	ldr	r3, [r7, #28]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009126:	2312      	movs	r3, #18
 8009128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800912a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800912e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009130:	2300      	movs	r3, #0
 8009132:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009138:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800913a:	f107 0308 	add.w	r3, r7, #8
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff ff2d 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009146:	f241 3288 	movw	r2, #5000	; 0x1388
 800914a:	2112      	movs	r1, #18
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f9db 	bl	8009508 <SDMMC_GetCmdResp1>
 8009152:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009154:	69fb      	ldr	r3, [r7, #28]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3720      	adds	r7, #32
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b088      	sub	sp, #32
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800916c:	2318      	movs	r3, #24
 800916e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009176:	2300      	movs	r3, #0
 8009178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800917a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800917e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009180:	f107 0308 	add.w	r3, r7, #8
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff ff0a 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800918c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009190:	2118      	movs	r1, #24
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f9b8 	bl	8009508 <SDMMC_GetCmdResp1>
 8009198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800919a:	69fb      	ldr	r3, [r7, #28]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3720      	adds	r7, #32
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80091b2:	2319      	movs	r3, #25
 80091b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091bc:	2300      	movs	r3, #0
 80091be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091c6:	f107 0308 	add.w	r3, r7, #8
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7ff fee7 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80091d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d6:	2119      	movs	r1, #25
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f995 	bl	8009508 <SDMMC_GetCmdResp1>
 80091de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091e0:	69fb      	ldr	r3, [r7, #28]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3720      	adds	r7, #32
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b088      	sub	sp, #32
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80091f8:	2307      	movs	r3, #7
 80091fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009202:	2300      	movs	r3, #0
 8009204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800920a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800920c:	f107 0308 	add.w	r3, r7, #8
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7ff fec4 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009218:	f241 3288 	movw	r2, #5000	; 0x1388
 800921c:	2107      	movs	r1, #7
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f972 	bl	8009508 <SDMMC_GetCmdResp1>
 8009224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009226:	69fb      	ldr	r3, [r7, #28]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3720      	adds	r7, #32
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009238:	2300      	movs	r3, #0
 800923a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800923c:	2300      	movs	r3, #0
 800923e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009240:	2300      	movs	r3, #0
 8009242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009244:	2300      	movs	r3, #0
 8009246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800924c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800924e:	f107 0308 	add.w	r3, r7, #8
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7ff fea3 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fb96 	bl	800998c <SDMMC_GetCmdError>
 8009260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009262:	69fb      	ldr	r3, [r7, #28]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3720      	adds	r7, #32
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b088      	sub	sp, #32
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009274:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800927a:	2308      	movs	r3, #8
 800927c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800927e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009284:	2300      	movs	r3, #0
 8009286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800928c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800928e:	f107 0308 	add.w	r3, r7, #8
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff fe83 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fb28 	bl	80098f0 <SDMMC_GetCmdResp7>
 80092a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092a2:	69fb      	ldr	r3, [r7, #28]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3720      	adds	r7, #32
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80092ba:	2337      	movs	r3, #55	; 0x37
 80092bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092c4:	2300      	movs	r3, #0
 80092c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092ce:	f107 0308 	add.w	r3, r7, #8
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff fe63 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80092da:	f241 3288 	movw	r2, #5000	; 0x1388
 80092de:	2137      	movs	r1, #55	; 0x37
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f911 	bl	8009508 <SDMMC_GetCmdResp1>
 80092e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092e8:	69fb      	ldr	r3, [r7, #28]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3720      	adds	r7, #32
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b088      	sub	sp, #32
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009300:	2329      	movs	r3, #41	; 0x29
 8009302:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009308:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800930a:	2300      	movs	r3, #0
 800930c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800930e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009312:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009314:	f107 0308 	add.w	r3, r7, #8
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff fe40 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fa2d 	bl	8009780 <SDMMC_GetCmdResp3>
 8009326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009328:	69fb      	ldr	r3, [r7, #28]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3720      	adds	r7, #32
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b088      	sub	sp, #32
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009340:	2306      	movs	r3, #6
 8009342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800934a:	2300      	movs	r3, #0
 800934c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800934e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009352:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009354:	f107 0308 	add.w	r3, r7, #8
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff fe20 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009360:	f241 3288 	movw	r2, #5000	; 0x1388
 8009364:	2106      	movs	r1, #6
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f8ce 	bl	8009508 <SDMMC_GetCmdResp1>
 800936c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800936e:	69fb      	ldr	r3, [r7, #28]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3720      	adds	r7, #32
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009380:	2300      	movs	r3, #0
 8009382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009384:	2333      	movs	r3, #51	; 0x33
 8009386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800938c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009396:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009398:	f107 0308 	add.w	r3, r7, #8
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7ff fdfe 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80093a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a8:	2133      	movs	r1, #51	; 0x33
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f8ac 	bl	8009508 <SDMMC_GetCmdResp1>
 80093b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093b2:	69fb      	ldr	r3, [r7, #28]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3720      	adds	r7, #32
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80093c8:	2302      	movs	r3, #2
 80093ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80093cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80093d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093d2:	2300      	movs	r3, #0
 80093d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093dc:	f107 0308 	add.w	r3, r7, #8
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff fddc 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f97f 	bl	80096ec <SDMMC_GetCmdResp2>
 80093ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093f0:	69fb      	ldr	r3, [r7, #28]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3720      	adds	r7, #32
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b088      	sub	sp, #32
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009408:	2309      	movs	r3, #9
 800940a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800940c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009412:	2300      	movs	r3, #0
 8009414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800941a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800941c:	f107 0308 	add.w	r3, r7, #8
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7ff fdbc 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f95f 	bl	80096ec <SDMMC_GetCmdResp2>
 800942e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009430:	69fb      	ldr	r3, [r7, #28]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3720      	adds	r7, #32
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b088      	sub	sp, #32
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009448:	2303      	movs	r3, #3
 800944a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800944c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009452:	2300      	movs	r3, #0
 8009454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800945a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800945c:	f107 0308 	add.w	r3, r7, #8
 8009460:	4619      	mov	r1, r3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff fd9c 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	2103      	movs	r1, #3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f9c7 	bl	8009800 <SDMMC_GetCmdResp6>
 8009472:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009474:	69fb      	ldr	r3, [r7, #28]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b088      	sub	sp, #32
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800948c:	230d      	movs	r3, #13
 800948e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009496:	2300      	movs	r3, #0
 8009498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800949a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800949e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094a0:	f107 0308 	add.w	r3, r7, #8
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7ff fd7a 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80094ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b0:	210d      	movs	r1, #13
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f828 	bl	8009508 <SDMMC_GetCmdResp1>
 80094b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ba:	69fb      	ldr	r3, [r7, #28]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3720      	adds	r7, #32
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80094d0:	230d      	movs	r3, #13
 80094d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094da:	2300      	movs	r3, #0
 80094dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094e4:	f107 0308 	add.w	r3, r7, #8
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7ff fd58 	bl	8008fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80094f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094f4:	210d      	movs	r1, #13
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f806 	bl	8009508 <SDMMC_GetCmdResp1>
 80094fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094fe:	69fb      	ldr	r3, [r7, #28]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b088      	sub	sp, #32
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	460b      	mov	r3, r1
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009516:	4b70      	ldr	r3, [pc, #448]	; (80096d8 <SDMMC_GetCmdResp1+0x1d0>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a70      	ldr	r2, [pc, #448]	; (80096dc <SDMMC_GetCmdResp1+0x1d4>)
 800951c:	fba2 2303 	umull	r2, r3, r2, r3
 8009520:	0a5a      	lsrs	r2, r3, #9
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	fb02 f303 	mul.w	r3, r2, r3
 8009528:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	1e5a      	subs	r2, r3, #1
 800952e:	61fa      	str	r2, [r7, #28]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d102      	bne.n	800953a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009534:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009538:	e0c9      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	4b67      	ldr	r3, [pc, #412]	; (80096e0 <SDMMC_GetCmdResp1+0x1d8>)
 8009544:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0ef      	beq.n	800952a <SDMMC_GetCmdResp1+0x22>
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1ea      	bne.n	800952a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2204      	movs	r2, #4
 8009564:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009566:	2304      	movs	r3, #4
 8009568:	e0b1      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d004      	beq.n	8009580 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2201      	movs	r2, #1
 800957a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800957c:	2301      	movs	r3, #1
 800957e:	e0a6      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4a58      	ldr	r2, [pc, #352]	; (80096e4 <SDMMC_GetCmdResp1+0x1dc>)
 8009584:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f7ff fd34 	bl	8008ff4 <SDMMC_GetCommandResponse>
 800958c:	4603      	mov	r3, r0
 800958e:	461a      	mov	r2, r3
 8009590:	7afb      	ldrb	r3, [r7, #11]
 8009592:	4293      	cmp	r3, r2
 8009594:	d001      	beq.n	800959a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009596:	2301      	movs	r3, #1
 8009598:	e099      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800959a:	2100      	movs	r1, #0
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f7ff fd36 	bl	800900e <SDMMC_GetResponse>
 80095a2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	4b50      	ldr	r3, [pc, #320]	; (80096e8 <SDMMC_GetCmdResp1+0x1e0>)
 80095a8:	4013      	ands	r3, r2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e08d      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	da02      	bge.n	80095be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80095b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095bc:	e087      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80095c8:	2340      	movs	r3, #64	; 0x40
 80095ca:	e080      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80095d6:	2380      	movs	r3, #128	; 0x80
 80095d8:	e079      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d002      	beq.n	80095ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80095e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095e8:	e071      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80095f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095f8:	e069      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009608:	e061      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009614:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009618:	e059      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009628:	e051      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009638:	e049      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009644:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009648:	e041      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009658:	e039      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009668:	e031      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009674:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009678:	e029      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009684:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009688:	e021      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009694:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009698:	e019      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80096a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096a8:	e011      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80096b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096b8:	e009      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f003 0308 	and.w	r3, r3, #8
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80096c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80096c8:	e001      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3720      	adds	r7, #32
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	24000000 	.word	0x24000000
 80096dc:	10624dd3 	.word	0x10624dd3
 80096e0:	00200045 	.word	0x00200045
 80096e4:	002000c5 	.word	0x002000c5
 80096e8:	fdffe008 	.word	0xfdffe008

080096ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80096f4:	4b1f      	ldr	r3, [pc, #124]	; (8009774 <SDMMC_GetCmdResp2+0x88>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a1f      	ldr	r2, [pc, #124]	; (8009778 <SDMMC_GetCmdResp2+0x8c>)
 80096fa:	fba2 2303 	umull	r2, r3, r2, r3
 80096fe:	0a5b      	lsrs	r3, r3, #9
 8009700:	f241 3288 	movw	r2, #5000	; 0x1388
 8009704:	fb02 f303 	mul.w	r3, r2, r3
 8009708:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	1e5a      	subs	r2, r3, #1
 800970e:	60fa      	str	r2, [r7, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d102      	bne.n	800971a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009714:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009718:	e026      	b.n	8009768 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009726:	2b00      	cmp	r3, #0
 8009728:	d0ef      	beq.n	800970a <SDMMC_GetCmdResp2+0x1e>
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1ea      	bne.n	800970a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009738:	f003 0304 	and.w	r3, r3, #4
 800973c:	2b00      	cmp	r3, #0
 800973e:	d004      	beq.n	800974a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2204      	movs	r2, #4
 8009744:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009746:	2304      	movs	r3, #4
 8009748:	e00e      	b.n	8009768 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	d004      	beq.n	8009760 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800975c:	2301      	movs	r3, #1
 800975e:	e003      	b.n	8009768 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a06      	ldr	r2, [pc, #24]	; (800977c <SDMMC_GetCmdResp2+0x90>)
 8009764:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	24000000 	.word	0x24000000
 8009778:	10624dd3 	.word	0x10624dd3
 800977c:	002000c5 	.word	0x002000c5

08009780 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009788:	4b1a      	ldr	r3, [pc, #104]	; (80097f4 <SDMMC_GetCmdResp3+0x74>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a1a      	ldr	r2, [pc, #104]	; (80097f8 <SDMMC_GetCmdResp3+0x78>)
 800978e:	fba2 2303 	umull	r2, r3, r2, r3
 8009792:	0a5b      	lsrs	r3, r3, #9
 8009794:	f241 3288 	movw	r2, #5000	; 0x1388
 8009798:	fb02 f303 	mul.w	r3, r2, r3
 800979c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	1e5a      	subs	r2, r3, #1
 80097a2:	60fa      	str	r2, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d102      	bne.n	80097ae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097ac:	e01b      	b.n	80097e6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0ef      	beq.n	800979e <SDMMC_GetCmdResp3+0x1e>
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1ea      	bne.n	800979e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d004      	beq.n	80097de <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2204      	movs	r2, #4
 80097d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097da:	2304      	movs	r3, #4
 80097dc:	e003      	b.n	80097e6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a06      	ldr	r2, [pc, #24]	; (80097fc <SDMMC_GetCmdResp3+0x7c>)
 80097e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	24000000 	.word	0x24000000
 80097f8:	10624dd3 	.word	0x10624dd3
 80097fc:	002000c5 	.word	0x002000c5

08009800 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b088      	sub	sp, #32
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	460b      	mov	r3, r1
 800980a:	607a      	str	r2, [r7, #4]
 800980c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800980e:	4b35      	ldr	r3, [pc, #212]	; (80098e4 <SDMMC_GetCmdResp6+0xe4>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a35      	ldr	r2, [pc, #212]	; (80098e8 <SDMMC_GetCmdResp6+0xe8>)
 8009814:	fba2 2303 	umull	r2, r3, r2, r3
 8009818:	0a5b      	lsrs	r3, r3, #9
 800981a:	f241 3288 	movw	r2, #5000	; 0x1388
 800981e:	fb02 f303 	mul.w	r3, r2, r3
 8009822:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	1e5a      	subs	r2, r3, #1
 8009828:	61fa      	str	r2, [r7, #28]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d102      	bne.n	8009834 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800982e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009832:	e052      	b.n	80098da <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009838:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009840:	2b00      	cmp	r3, #0
 8009842:	d0ef      	beq.n	8009824 <SDMMC_GetCmdResp6+0x24>
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1ea      	bne.n	8009824 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009852:	f003 0304 	and.w	r3, r3, #4
 8009856:	2b00      	cmp	r3, #0
 8009858:	d004      	beq.n	8009864 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2204      	movs	r2, #4
 800985e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009860:	2304      	movs	r3, #4
 8009862:	e03a      	b.n	80098da <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d004      	beq.n	800987a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2201      	movs	r2, #1
 8009874:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009876:	2301      	movs	r3, #1
 8009878:	e02f      	b.n	80098da <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7ff fbba 	bl	8008ff4 <SDMMC_GetCommandResponse>
 8009880:	4603      	mov	r3, r0
 8009882:	461a      	mov	r2, r3
 8009884:	7afb      	ldrb	r3, [r7, #11]
 8009886:	4293      	cmp	r3, r2
 8009888:	d001      	beq.n	800988e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800988a:	2301      	movs	r3, #1
 800988c:	e025      	b.n	80098da <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4a16      	ldr	r2, [pc, #88]	; (80098ec <SDMMC_GetCmdResp6+0xec>)
 8009892:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009894:	2100      	movs	r1, #0
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f7ff fbb9 	bl	800900e <SDMMC_GetResponse>
 800989c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d106      	bne.n	80098b6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	0c1b      	lsrs	r3, r3, #16
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80098b2:	2300      	movs	r3, #0
 80098b4:	e011      	b.n	80098da <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80098c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098c4:	e009      	b.n	80098da <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098d4:	e001      	b.n	80098da <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3720      	adds	r7, #32
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	24000000 	.word	0x24000000
 80098e8:	10624dd3 	.word	0x10624dd3
 80098ec:	002000c5 	.word	0x002000c5

080098f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80098f8:	4b22      	ldr	r3, [pc, #136]	; (8009984 <SDMMC_GetCmdResp7+0x94>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a22      	ldr	r2, [pc, #136]	; (8009988 <SDMMC_GetCmdResp7+0x98>)
 80098fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009902:	0a5b      	lsrs	r3, r3, #9
 8009904:	f241 3288 	movw	r2, #5000	; 0x1388
 8009908:	fb02 f303 	mul.w	r3, r2, r3
 800990c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	1e5a      	subs	r2, r3, #1
 8009912:	60fa      	str	r2, [r7, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d102      	bne.n	800991e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009918:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800991c:	e02c      	b.n	8009978 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009922:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800992a:	2b00      	cmp	r3, #0
 800992c:	d0ef      	beq.n	800990e <SDMMC_GetCmdResp7+0x1e>
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1ea      	bne.n	800990e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993c:	f003 0304 	and.w	r3, r3, #4
 8009940:	2b00      	cmp	r3, #0
 8009942:	d004      	beq.n	800994e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2204      	movs	r2, #4
 8009948:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800994a:	2304      	movs	r3, #4
 800994c:	e014      	b.n	8009978 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	d004      	beq.n	8009964 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009960:	2301      	movs	r3, #1
 8009962:	e009      	b.n	8009978 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2240      	movs	r2, #64	; 0x40
 8009974:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009976:	2300      	movs	r3, #0

}
 8009978:	4618      	mov	r0, r3
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	24000000 	.word	0x24000000
 8009988:	10624dd3 	.word	0x10624dd3

0800998c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009994:	4b11      	ldr	r3, [pc, #68]	; (80099dc <SDMMC_GetCmdError+0x50>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a11      	ldr	r2, [pc, #68]	; (80099e0 <SDMMC_GetCmdError+0x54>)
 800999a:	fba2 2303 	umull	r2, r3, r2, r3
 800999e:	0a5b      	lsrs	r3, r3, #9
 80099a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a4:	fb02 f303 	mul.w	r3, r2, r3
 80099a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	1e5a      	subs	r2, r3, #1
 80099ae:	60fa      	str	r2, [r7, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d102      	bne.n	80099ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099b8:	e009      	b.n	80099ce <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0f1      	beq.n	80099aa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a06      	ldr	r2, [pc, #24]	; (80099e4 <SDMMC_GetCmdError+0x58>)
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	24000000 	.word	0x24000000
 80099e0:	10624dd3 	.word	0x10624dd3
 80099e4:	002000c5 	.word	0x002000c5

080099e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80099ec:	4904      	ldr	r1, [pc, #16]	; (8009a00 <MX_FATFS_Init+0x18>)
 80099ee:	4805      	ldr	r0, [pc, #20]	; (8009a04 <MX_FATFS_Init+0x1c>)
 80099f0:	f000 fa6e 	bl	8009ed0 <FATFS_LinkDriver>
 80099f4:	4603      	mov	r3, r0
 80099f6:	461a      	mov	r2, r3
 80099f8:	4b03      	ldr	r3, [pc, #12]	; (8009a08 <MX_FATFS_Init+0x20>)
 80099fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80099fc:	bf00      	nop
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	24004d88 	.word	0x24004d88
 8009a04:	0800d0c0 	.word	0x0800d0c0
 8009a08:	24004d84 	.word	0x24004d84

08009a0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009a16:	f000 f871 	bl	8009afc <BSP_SD_IsDetected>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d001      	beq.n	8009a24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009a20:	2302      	movs	r3, #2
 8009a22:	e012      	b.n	8009a4a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009a24:	480b      	ldr	r0, [pc, #44]	; (8009a54 <BSP_SD_Init+0x48>)
 8009a26:	f7fc fa2a 	bl	8005e7e <HAL_SD_Init>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d109      	bne.n	8009a48 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009a38:	4806      	ldr	r0, [pc, #24]	; (8009a54 <BSP_SD_Init+0x48>)
 8009a3a:	f7fc ff0d 	bl	8006858 <HAL_SD_ConfigWideBusOperation>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009a48:	79fb      	ldrb	r3, [r7, #7]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	24004b24 	.word	0x24004b24

08009a58 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	68f9      	ldr	r1, [r7, #12]
 8009a6e:	4806      	ldr	r0, [pc, #24]	; (8009a88 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009a70:	f7fc fb1c 	bl	80060ac <HAL_SD_ReadBlocks_DMA>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	24004b24 	.word	0x24004b24

08009a8c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	68f9      	ldr	r1, [r7, #12]
 8009aa2:	4806      	ldr	r0, [pc, #24]	; (8009abc <BSP_SD_WriteBlocks_DMA+0x30>)
 8009aa4:	f7fc fbaa 	bl	80061fc <HAL_SD_WriteBlocks_DMA>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	24004b24 	.word	0x24004b24

08009ac0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009ac4:	4805      	ldr	r0, [pc, #20]	; (8009adc <BSP_SD_GetCardState+0x1c>)
 8009ac6:	f7fc ffd7 	bl	8006a78 <HAL_SD_GetCardState>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	bf14      	ite	ne
 8009ad0:	2301      	movne	r3, #1
 8009ad2:	2300      	moveq	r3, #0
 8009ad4:	b2db      	uxtb	r3, r3
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	24004b24 	.word	0x24004b24

08009ae0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	4803      	ldr	r0, [pc, #12]	; (8009af8 <BSP_SD_GetCardInfo+0x18>)
 8009aec:	f7fc fe88 	bl	8006800 <HAL_SD_GetCardInfo>
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	24004b24 	.word	0x24004b24

08009afc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009b02:	2301      	movs	r3, #1
 8009b04:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009b06:	f000 f80b 	bl	8009b20 <BSP_PlatformIsDetected>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009b10:	2300      	movs	r3, #0
 8009b12:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009b14:	79fb      	ldrb	r3, [r7, #7]
 8009b16:	b2db      	uxtb	r3, r3
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009b26:	2301      	movs	r3, #1
 8009b28:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b2e:	4806      	ldr	r0, [pc, #24]	; (8009b48 <BSP_PlatformIsDetected+0x28>)
 8009b30:	f7f8 ff7a 	bl	8002a28 <HAL_GPIO_ReadPin>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	58020000 	.word	0x58020000

08009b4c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8009b54:	f000 fa7c 	bl	800a050 <osKernelGetTickCount>
 8009b58:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8009b5a:	e006      	b.n	8009b6a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b5c:	f7ff ffb0 	bl	8009ac0 <BSP_SD_GetCardState>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009b66:	2300      	movs	r3, #0
 8009b68:	e009      	b.n	8009b7e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8009b6a:	f000 fa71 	bl	800a050 <osKernelGetTickCount>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d8f0      	bhi.n	8009b5c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009b92:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <SD_CheckStatus+0x38>)
 8009b94:	2201      	movs	r2, #1
 8009b96:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b98:	f7ff ff92 	bl	8009ac0 <BSP_SD_GetCardState>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d107      	bne.n	8009bb2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009ba2:	4b07      	ldr	r3, [pc, #28]	; (8009bc0 <SD_CheckStatus+0x38>)
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	f023 0301 	bic.w	r3, r3, #1
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	4b04      	ldr	r3, [pc, #16]	; (8009bc0 <SD_CheckStatus+0x38>)
 8009bb0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009bb2:	4b03      	ldr	r3, [pc, #12]	; (8009bc0 <SD_CheckStatus+0x38>)
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	b2db      	uxtb	r3, r3
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	2400000d 	.word	0x2400000d

08009bc4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	4603      	mov	r3, r0
 8009bcc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009bce:	4b1c      	ldr	r3, [pc, #112]	; (8009c40 <SD_initialize+0x7c>)
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8009bd4:	f000 f9f4 	bl	8009fc0 <osKernelGetState>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d129      	bne.n	8009c32 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8009bde:	f7ff ff15 	bl	8009a0c <BSP_SD_Init>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d107      	bne.n	8009bf8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7ff ffcc 	bl	8009b88 <SD_CheckStatus>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	4b12      	ldr	r3, [pc, #72]	; (8009c40 <SD_initialize+0x7c>)
 8009bf6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009bf8:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <SD_initialize+0x7c>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d017      	beq.n	8009c32 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8009c02:	4b10      	ldr	r3, [pc, #64]	; (8009c44 <SD_initialize+0x80>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d107      	bne.n	8009c1a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2102      	movs	r1, #2
 8009c0e:	200a      	movs	r0, #10
 8009c10:	f000 fae0 	bl	800a1d4 <osMessageQueueNew>
 8009c14:	4603      	mov	r3, r0
 8009c16:	4a0b      	ldr	r2, [pc, #44]	; (8009c44 <SD_initialize+0x80>)
 8009c18:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8009c1a:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <SD_initialize+0x80>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d107      	bne.n	8009c32 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8009c22:	4b07      	ldr	r3, [pc, #28]	; (8009c40 <SD_initialize+0x7c>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	f043 0301 	orr.w	r3, r3, #1
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	4b04      	ldr	r3, [pc, #16]	; (8009c40 <SD_initialize+0x7c>)
 8009c30:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8009c32:	4b03      	ldr	r3, [pc, #12]	; (8009c40 <SD_initialize+0x7c>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	b2db      	uxtb	r3, r3
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	2400000d 	.word	0x2400000d
 8009c44:	24000098 	.word	0x24000098

08009c48 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff ff97 	bl	8009b88 <SD_CheckStatus>
 8009c5a:	4603      	mov	r3, r0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b088      	sub	sp, #32
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60b9      	str	r1, [r7, #8]
 8009c6c:	607a      	str	r2, [r7, #4]
 8009c6e:	603b      	str	r3, [r7, #0]
 8009c70:	4603      	mov	r3, r0
 8009c72:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009c78:	f247 5030 	movw	r0, #30000	; 0x7530
 8009c7c:	f7ff ff66 	bl	8009b4c <SD_CheckStatusWithTimeout>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	da01      	bge.n	8009c8a <SD_read+0x26>
  {
    return res;
 8009c86:	7ffb      	ldrb	r3, [r7, #31]
 8009c88:	e02f      	b.n	8009cea <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	6879      	ldr	r1, [r7, #4]
 8009c8e:	68b8      	ldr	r0, [r7, #8]
 8009c90:	f7ff fee2 	bl	8009a58 <BSP_SD_ReadBlocks_DMA>
 8009c94:	4603      	mov	r3, r0
 8009c96:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8009c98:	7fbb      	ldrb	r3, [r7, #30]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d124      	bne.n	8009ce8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009c9e:	4b15      	ldr	r3, [pc, #84]	; (8009cf4 <SD_read+0x90>)
 8009ca0:	6818      	ldr	r0, [r3, #0]
 8009ca2:	f107 0112 	add.w	r1, r7, #18
 8009ca6:	f247 5330 	movw	r3, #30000	; 0x7530
 8009caa:	2200      	movs	r2, #0
 8009cac:	f000 fb06 	bl	800a2bc <osMessageQueueGet>
 8009cb0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d117      	bne.n	8009ce8 <SD_read+0x84>
 8009cb8:	8a7b      	ldrh	r3, [r7, #18]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d114      	bne.n	8009ce8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8009cbe:	f000 f9c7 	bl	800a050 <osKernelGetTickCount>
 8009cc2:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009cc4:	e007      	b.n	8009cd6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009cc6:	f7ff fefb 	bl	8009ac0 <BSP_SD_GetCardState>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d102      	bne.n	8009cd6 <SD_read+0x72>
              {
                res = RES_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009cd4:	e008      	b.n	8009ce8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009cd6:	f000 f9bb 	bl	800a050 <osKernelGetTickCount>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	f247 522f 	movw	r2, #29999	; 0x752f
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d9ee      	bls.n	8009cc6 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8009ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3720      	adds	r7, #32
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	24000098 	.word	0x24000098

08009cf8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60b9      	str	r1, [r7, #8]
 8009d00:	607a      	str	r2, [r7, #4]
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	4603      	mov	r3, r0
 8009d06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009d0c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009d10:	f7ff ff1c 	bl	8009b4c <SD_CheckStatusWithTimeout>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	da01      	bge.n	8009d1e <SD_write+0x26>
  {
    return res;
 8009d1a:	7ffb      	ldrb	r3, [r7, #31]
 8009d1c:	e02d      	b.n	8009d7a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009d1e:	683a      	ldr	r2, [r7, #0]
 8009d20:	6879      	ldr	r1, [r7, #4]
 8009d22:	68b8      	ldr	r0, [r7, #8]
 8009d24:	f7ff feb2 	bl	8009a8c <BSP_SD_WriteBlocks_DMA>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d124      	bne.n	8009d78 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009d2e:	4b15      	ldr	r3, [pc, #84]	; (8009d84 <SD_write+0x8c>)
 8009d30:	6818      	ldr	r0, [r3, #0]
 8009d32:	f107 0112 	add.w	r1, r7, #18
 8009d36:	f247 5330 	movw	r3, #30000	; 0x7530
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f000 fabe 	bl	800a2bc <osMessageQueueGet>
 8009d40:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d117      	bne.n	8009d78 <SD_write+0x80>
 8009d48:	8a7b      	ldrh	r3, [r7, #18]
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d114      	bne.n	8009d78 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8009d4e:	f000 f97f 	bl	800a050 <osKernelGetTickCount>
 8009d52:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009d54:	e007      	b.n	8009d66 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d56:	f7ff feb3 	bl	8009ac0 <BSP_SD_GetCardState>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d102      	bne.n	8009d66 <SD_write+0x6e>
          {
            res = RES_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	77fb      	strb	r3, [r7, #31]
            break;
 8009d64:	e008      	b.n	8009d78 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009d66:	f000 f973 	bl	800a050 <osKernelGetTickCount>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d9ee      	bls.n	8009d56 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8009d78:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3720      	adds	r7, #32
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	24000098 	.word	0x24000098

08009d88 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08c      	sub	sp, #48	; 0x30
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	603a      	str	r2, [r7, #0]
 8009d92:	71fb      	strb	r3, [r7, #7]
 8009d94:	460b      	mov	r3, r1
 8009d96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d9e:	4b25      	ldr	r3, [pc, #148]	; (8009e34 <SD_ioctl+0xac>)
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <SD_ioctl+0x28>
 8009dac:	2303      	movs	r3, #3
 8009dae:	e03c      	b.n	8009e2a <SD_ioctl+0xa2>

  switch (cmd)
 8009db0:	79bb      	ldrb	r3, [r7, #6]
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d834      	bhi.n	8009e20 <SD_ioctl+0x98>
 8009db6:	a201      	add	r2, pc, #4	; (adr r2, 8009dbc <SD_ioctl+0x34>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009dcd 	.word	0x08009dcd
 8009dc0:	08009dd5 	.word	0x08009dd5
 8009dc4:	08009ded 	.word	0x08009ded
 8009dc8:	08009e07 	.word	0x08009e07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009dd2:	e028      	b.n	8009e26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009dd4:	f107 0308 	add.w	r3, r7, #8
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fe81 	bl	8009ae0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009dde:	6a3a      	ldr	r2, [r7, #32]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009dea:	e01c      	b.n	8009e26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009dec:	f107 0308 	add.w	r3, r7, #8
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fe75 	bl	8009ae0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e04:	e00f      	b.n	8009e26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009e06:	f107 0308 	add.w	r3, r7, #8
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7ff fe68 	bl	8009ae0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	0a5a      	lsrs	r2, r3, #9
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e1e:	e002      	b.n	8009e26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009e20:	2304      	movs	r3, #4
 8009e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3730      	adds	r7, #48	; 0x30
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	2400000d 	.word	0x2400000d

08009e38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b087      	sub	sp, #28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	4613      	mov	r3, r2
 8009e44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009e46:	2301      	movs	r3, #1
 8009e48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009e4e:	4b1f      	ldr	r3, [pc, #124]	; (8009ecc <FATFS_LinkDriverEx+0x94>)
 8009e50:	7a5b      	ldrb	r3, [r3, #9]
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d131      	bne.n	8009ebc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009e58:	4b1c      	ldr	r3, [pc, #112]	; (8009ecc <FATFS_LinkDriverEx+0x94>)
 8009e5a:	7a5b      	ldrb	r3, [r3, #9]
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	461a      	mov	r2, r3
 8009e60:	4b1a      	ldr	r3, [pc, #104]	; (8009ecc <FATFS_LinkDriverEx+0x94>)
 8009e62:	2100      	movs	r1, #0
 8009e64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009e66:	4b19      	ldr	r3, [pc, #100]	; (8009ecc <FATFS_LinkDriverEx+0x94>)
 8009e68:	7a5b      	ldrb	r3, [r3, #9]
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	4a17      	ldr	r2, [pc, #92]	; (8009ecc <FATFS_LinkDriverEx+0x94>)
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009e76:	4b15      	ldr	r3, [pc, #84]	; (8009ecc <FATFS_LinkDriverEx+0x94>)
 8009e78:	7a5b      	ldrb	r3, [r3, #9]
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	4b13      	ldr	r3, [pc, #76]	; (8009ecc <FATFS_LinkDriverEx+0x94>)
 8009e80:	4413      	add	r3, r2
 8009e82:	79fa      	ldrb	r2, [r7, #7]
 8009e84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009e86:	4b11      	ldr	r3, [pc, #68]	; (8009ecc <FATFS_LinkDriverEx+0x94>)
 8009e88:	7a5b      	ldrb	r3, [r3, #9]
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	b2d1      	uxtb	r1, r2
 8009e90:	4a0e      	ldr	r2, [pc, #56]	; (8009ecc <FATFS_LinkDriverEx+0x94>)
 8009e92:	7251      	strb	r1, [r2, #9]
 8009e94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009e96:	7dbb      	ldrb	r3, [r7, #22]
 8009e98:	3330      	adds	r3, #48	; 0x30
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	223a      	movs	r2, #58	; 0x3a
 8009ea6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	3302      	adds	r3, #2
 8009eac:	222f      	movs	r2, #47	; 0x2f
 8009eae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	3303      	adds	r3, #3
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	2400009c 	.word	0x2400009c

08009ed0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009eda:	2200      	movs	r2, #0
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff ffaa 	bl	8009e38 <FATFS_LinkDriverEx>
 8009ee4:	4603      	mov	r3, r0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <__NVIC_SetPriority>:
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	6039      	str	r1, [r7, #0]
 8009efa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	db0a      	blt.n	8009f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	490c      	ldr	r1, [pc, #48]	; (8009f3c <__NVIC_SetPriority+0x4c>)
 8009f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f0e:	0112      	lsls	r2, r2, #4
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	440b      	add	r3, r1
 8009f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009f18:	e00a      	b.n	8009f30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	4908      	ldr	r1, [pc, #32]	; (8009f40 <__NVIC_SetPriority+0x50>)
 8009f20:	88fb      	ldrh	r3, [r7, #6]
 8009f22:	f003 030f 	and.w	r3, r3, #15
 8009f26:	3b04      	subs	r3, #4
 8009f28:	0112      	lsls	r2, r2, #4
 8009f2a:	b2d2      	uxtb	r2, r2
 8009f2c:	440b      	add	r3, r1
 8009f2e:	761a      	strb	r2, [r3, #24]
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	e000e100 	.word	0xe000e100
 8009f40:	e000ed00 	.word	0xe000ed00

08009f44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009f44:	b580      	push	{r7, lr}
 8009f46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009f48:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <SysTick_Handler+0x1c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009f4c:	f001 fefc 	bl	800bd48 <xTaskGetSchedulerState>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d001      	beq.n	8009f5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009f56:	f002 fce7 	bl	800c928 <xPortSysTickHandler>
  }
}
 8009f5a:	bf00      	nop
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	e000e010 	.word	0xe000e010

08009f64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009f64:	b580      	push	{r7, lr}
 8009f66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009f68:	2100      	movs	r1, #0
 8009f6a:	f06f 0004 	mvn.w	r0, #4
 8009f6e:	f7ff ffbf 	bl	8009ef0 <__NVIC_SetPriority>
#endif
}
 8009f72:	bf00      	nop
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f7e:	f3ef 8305 	mrs	r3, IPSR
 8009f82:	603b      	str	r3, [r7, #0]
  return(result);
 8009f84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d003      	beq.n	8009f92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009f8a:	f06f 0305 	mvn.w	r3, #5
 8009f8e:	607b      	str	r3, [r7, #4]
 8009f90:	e00c      	b.n	8009fac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009f92:	4b0a      	ldr	r3, [pc, #40]	; (8009fbc <osKernelInitialize+0x44>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d105      	bne.n	8009fa6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009f9a:	4b08      	ldr	r3, [pc, #32]	; (8009fbc <osKernelInitialize+0x44>)
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	607b      	str	r3, [r7, #4]
 8009fa4:	e002      	b.n	8009fac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8009faa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009fac:	687b      	ldr	r3, [r7, #4]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	240000a8 	.word	0x240000a8

08009fc0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009fc6:	f001 febf 	bl	800bd48 <xTaskGetSchedulerState>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d004      	beq.n	8009fda <osKernelGetState+0x1a>
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d105      	bne.n	8009fe0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	607b      	str	r3, [r7, #4]
      break;
 8009fd8:	e00c      	b.n	8009ff4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	607b      	str	r3, [r7, #4]
      break;
 8009fde:	e009      	b.n	8009ff4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009fe0:	4b07      	ldr	r3, [pc, #28]	; (800a000 <osKernelGetState+0x40>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d102      	bne.n	8009fee <osKernelGetState+0x2e>
        state = osKernelReady;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009fec:	e001      	b.n	8009ff2 <osKernelGetState+0x32>
        state = osKernelInactive;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	607b      	str	r3, [r7, #4]
      break;
 8009ff2:	bf00      	nop
  }

  return (state);
 8009ff4:	687b      	ldr	r3, [r7, #4]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	240000a8 	.word	0x240000a8

0800a004 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a00a:	f3ef 8305 	mrs	r3, IPSR
 800a00e:	603b      	str	r3, [r7, #0]
  return(result);
 800a010:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a016:	f06f 0305 	mvn.w	r3, #5
 800a01a:	607b      	str	r3, [r7, #4]
 800a01c:	e010      	b.n	800a040 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a01e:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <osKernelStart+0x48>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d109      	bne.n	800a03a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a026:	f7ff ff9d 	bl	8009f64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a02a:	4b08      	ldr	r3, [pc, #32]	; (800a04c <osKernelStart+0x48>)
 800a02c:	2202      	movs	r2, #2
 800a02e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a030:	f001 fa1c 	bl	800b46c <vTaskStartScheduler>
      stat = osOK;
 800a034:	2300      	movs	r3, #0
 800a036:	607b      	str	r3, [r7, #4]
 800a038:	e002      	b.n	800a040 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295
 800a03e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a040:	687b      	ldr	r3, [r7, #4]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	240000a8 	.word	0x240000a8

0800a050 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a056:	f3ef 8305 	mrs	r3, IPSR
 800a05a:	603b      	str	r3, [r7, #0]
  return(result);
 800a05c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a062:	f001 fb2f 	bl	800b6c4 <xTaskGetTickCountFromISR>
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	e002      	b.n	800a070 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a06a:	f001 fb1b 	bl	800b6a4 <xTaskGetTickCount>
 800a06e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a070:	687b      	ldr	r3, [r7, #4]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b08e      	sub	sp, #56	; 0x38
 800a07e:	af04      	add	r7, sp, #16
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a086:	2300      	movs	r3, #0
 800a088:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a08a:	f3ef 8305 	mrs	r3, IPSR
 800a08e:	617b      	str	r3, [r7, #20]
  return(result);
 800a090:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a092:	2b00      	cmp	r3, #0
 800a094:	d17e      	bne.n	800a194 <osThreadNew+0x11a>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d07b      	beq.n	800a194 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a09c:	2380      	movs	r3, #128	; 0x80
 800a09e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a0a0:	2318      	movs	r3, #24
 800a0a2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d045      	beq.n	800a140 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <osThreadNew+0x48>
        name = attr->name;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d008      	beq.n	800a0e8 <osThreadNew+0x6e>
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	2b38      	cmp	r3, #56	; 0x38
 800a0da:	d805      	bhi.n	800a0e8 <osThreadNew+0x6e>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f003 0301 	and.w	r3, r3, #1
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <osThreadNew+0x72>
        return (NULL);
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	e054      	b.n	800a196 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d003      	beq.n	800a0fc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	695b      	ldr	r3, [r3, #20]
 800a0f8:	089b      	lsrs	r3, r3, #2
 800a0fa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00e      	beq.n	800a122 <osThreadNew+0xa8>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	2bbb      	cmp	r3, #187	; 0xbb
 800a10a:	d90a      	bls.n	800a122 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a110:	2b00      	cmp	r3, #0
 800a112:	d006      	beq.n	800a122 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <osThreadNew+0xa8>
        mem = 1;
 800a11c:	2301      	movs	r3, #1
 800a11e:	61bb      	str	r3, [r7, #24]
 800a120:	e010      	b.n	800a144 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10c      	bne.n	800a144 <osThreadNew+0xca>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d108      	bne.n	800a144 <osThreadNew+0xca>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d104      	bne.n	800a144 <osThreadNew+0xca>
          mem = 0;
 800a13a:	2300      	movs	r3, #0
 800a13c:	61bb      	str	r3, [r7, #24]
 800a13e:	e001      	b.n	800a144 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d110      	bne.n	800a16c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a152:	9202      	str	r2, [sp, #8]
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	6a3a      	ldr	r2, [r7, #32]
 800a15e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 ff97 	bl	800b094 <xTaskCreateStatic>
 800a166:	4603      	mov	r3, r0
 800a168:	613b      	str	r3, [r7, #16]
 800a16a:	e013      	b.n	800a194 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d110      	bne.n	800a194 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	b29a      	uxth	r2, r3
 800a176:	f107 0310 	add.w	r3, r7, #16
 800a17a:	9301      	str	r3, [sp, #4]
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 ffe2 	bl	800b14e <xTaskCreate>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d001      	beq.n	800a194 <osThreadNew+0x11a>
            hTask = NULL;
 800a190:	2300      	movs	r3, #0
 800a192:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a194:	693b      	ldr	r3, [r7, #16]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3728      	adds	r7, #40	; 0x28
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1a6:	f3ef 8305 	mrs	r3, IPSR
 800a1aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <osDelay+0x1c>
    stat = osErrorISR;
 800a1b2:	f06f 0305 	mvn.w	r3, #5
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	e007      	b.n	800a1ca <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <osDelay+0x2c>
      vTaskDelay(ticks);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f001 f91d 	bl	800b404 <vTaskDelay>
    }
  }

  return (stat);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b08a      	sub	sp, #40	; 0x28
 800a1d8:	af02      	add	r7, sp, #8
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1e4:	f3ef 8305 	mrs	r3, IPSR
 800a1e8:	613b      	str	r3, [r7, #16]
  return(result);
 800a1ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d15f      	bne.n	800a2b0 <osMessageQueueNew+0xdc>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d05c      	beq.n	800a2b0 <osMessageQueueNew+0xdc>
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d059      	beq.n	800a2b0 <osMessageQueueNew+0xdc>
    mem = -1;
 800a1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a200:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d029      	beq.n	800a25c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d012      	beq.n	800a236 <osMessageQueueNew+0x62>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	2b4f      	cmp	r3, #79	; 0x4f
 800a216:	d90e      	bls.n	800a236 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00a      	beq.n	800a236 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	695a      	ldr	r2, [r3, #20]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	68b9      	ldr	r1, [r7, #8]
 800a228:	fb01 f303 	mul.w	r3, r1, r3
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d302      	bcc.n	800a236 <osMessageQueueNew+0x62>
        mem = 1;
 800a230:	2301      	movs	r3, #1
 800a232:	61bb      	str	r3, [r7, #24]
 800a234:	e014      	b.n	800a260 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d110      	bne.n	800a260 <osMessageQueueNew+0x8c>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10c      	bne.n	800a260 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d108      	bne.n	800a260 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d104      	bne.n	800a260 <osMessageQueueNew+0x8c>
          mem = 0;
 800a256:	2300      	movs	r3, #0
 800a258:	61bb      	str	r3, [r7, #24]
 800a25a:	e001      	b.n	800a260 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d10b      	bne.n	800a27e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	691a      	ldr	r2, [r3, #16]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	2100      	movs	r1, #0
 800a270:	9100      	str	r1, [sp, #0]
 800a272:	68b9      	ldr	r1, [r7, #8]
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 f9cf 	bl	800a618 <xQueueGenericCreateStatic>
 800a27a:	61f8      	str	r0, [r7, #28]
 800a27c:	e008      	b.n	800a290 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d105      	bne.n	800a290 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a284:	2200      	movs	r2, #0
 800a286:	68b9      	ldr	r1, [r7, #8]
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 fa3d 	bl	800a708 <xQueueGenericCreate>
 800a28e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00c      	beq.n	800a2b0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	617b      	str	r3, [r7, #20]
 800a2a2:	e001      	b.n	800a2a8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a2a8:	6979      	ldr	r1, [r7, #20]
 800a2aa:	69f8      	ldr	r0, [r7, #28]
 800a2ac:	f000 fe94 	bl	800afd8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a2b0:	69fb      	ldr	r3, [r7, #28]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3720      	adds	r7, #32
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
	...

0800a2bc <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b088      	sub	sp, #32
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2d2:	f3ef 8305 	mrs	r3, IPSR
 800a2d6:	617b      	str	r3, [r7, #20]
  return(result);
 800a2d8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d028      	beq.n	800a330 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d005      	beq.n	800a2f0 <osMessageQueueGet+0x34>
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <osMessageQueueGet+0x34>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d003      	beq.n	800a2f8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a2f0:	f06f 0303 	mvn.w	r3, #3
 800a2f4:	61fb      	str	r3, [r7, #28]
 800a2f6:	e037      	b.n	800a368 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a2fc:	f107 0310 	add.w	r3, r7, #16
 800a300:	461a      	mov	r2, r3
 800a302:	68b9      	ldr	r1, [r7, #8]
 800a304:	69b8      	ldr	r0, [r7, #24]
 800a306:	f000 fcd7 	bl	800acb8 <xQueueReceiveFromISR>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d003      	beq.n	800a318 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a310:	f06f 0302 	mvn.w	r3, #2
 800a314:	61fb      	str	r3, [r7, #28]
 800a316:	e027      	b.n	800a368 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d024      	beq.n	800a368 <osMessageQueueGet+0xac>
 800a31e:	4b15      	ldr	r3, [pc, #84]	; (800a374 <osMessageQueueGet+0xb8>)
 800a320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	e01b      	b.n	800a368 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d002      	beq.n	800a33c <osMessageQueueGet+0x80>
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d103      	bne.n	800a344 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a33c:	f06f 0303 	mvn.w	r3, #3
 800a340:	61fb      	str	r3, [r7, #28]
 800a342:	e011      	b.n	800a368 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	68b9      	ldr	r1, [r7, #8]
 800a348:	69b8      	ldr	r0, [r7, #24]
 800a34a:	f000 fbd5 	bl	800aaf8 <xQueueReceive>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b01      	cmp	r3, #1
 800a352:	d009      	beq.n	800a368 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d003      	beq.n	800a362 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a35a:	f06f 0301 	mvn.w	r3, #1
 800a35e:	61fb      	str	r3, [r7, #28]
 800a360:	e002      	b.n	800a368 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a362:	f06f 0302 	mvn.w	r3, #2
 800a366:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a368:	69fb      	ldr	r3, [r7, #28]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3720      	adds	r7, #32
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	e000ed04 	.word	0xe000ed04

0800a378 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	4a07      	ldr	r2, [pc, #28]	; (800a3a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a388:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	4a06      	ldr	r2, [pc, #24]	; (800a3a8 <vApplicationGetIdleTaskMemory+0x30>)
 800a38e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2280      	movs	r2, #128	; 0x80
 800a394:	601a      	str	r2, [r3, #0]
}
 800a396:	bf00      	nop
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	240000ac 	.word	0x240000ac
 800a3a8:	24000168 	.word	0x24000168

0800a3ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4a07      	ldr	r2, [pc, #28]	; (800a3d8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a3bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	4a06      	ldr	r2, [pc, #24]	; (800a3dc <vApplicationGetTimerTaskMemory+0x30>)
 800a3c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3ca:	601a      	str	r2, [r3, #0]
}
 800a3cc:	bf00      	nop
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	24000368 	.word	0x24000368
 800a3dc:	24000424 	.word	0x24000424

0800a3e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f103 0208 	add.w	r2, r3, #8
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f103 0208 	add.w	r2, r3, #8
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f103 0208 	add.w	r2, r3, #8
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a42e:	bf00      	nop
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a43a:	b480      	push	{r7}
 800a43c:	b085      	sub	sp, #20
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	689a      	ldr	r2, [r3, #8]
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	1c5a      	adds	r2, r3, #1
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	601a      	str	r2, [r3, #0]
}
 800a476:	bf00      	nop
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a482:	b480      	push	{r7}
 800a484:	b085      	sub	sp, #20
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a498:	d103      	bne.n	800a4a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	e00c      	b.n	800a4bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3308      	adds	r3, #8
 800a4a6:	60fb      	str	r3, [r7, #12]
 800a4a8:	e002      	b.n	800a4b0 <vListInsert+0x2e>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	60fb      	str	r3, [r7, #12]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d2f6      	bcs.n	800a4aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	683a      	ldr	r2, [r7, #0]
 800a4ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	601a      	str	r2, [r3, #0]
}
 800a4e8:	bf00      	nop
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	6892      	ldr	r2, [r2, #8]
 800a50a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	6852      	ldr	r2, [r2, #4]
 800a514:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d103      	bne.n	800a528 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	689a      	ldr	r2, [r3, #8]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	1e5a      	subs	r2, r3, #1
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10a      	bne.n	800a572 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a56e:	bf00      	nop
 800a570:	e7fe      	b.n	800a570 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a572:	f002 f947 	bl	800c804 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57e:	68f9      	ldr	r1, [r7, #12]
 800a580:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a582:	fb01 f303 	mul.w	r3, r1, r3
 800a586:	441a      	add	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	68f9      	ldr	r1, [r7, #12]
 800a5a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5a8:	fb01 f303 	mul.w	r3, r1, r3
 800a5ac:	441a      	add	r2, r3
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	22ff      	movs	r2, #255	; 0xff
 800a5b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	22ff      	movs	r2, #255	; 0xff
 800a5be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d114      	bne.n	800a5f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d01a      	beq.n	800a606 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	3310      	adds	r3, #16
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 f9f5 	bl	800b9c4 <xTaskRemoveFromEventList>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d012      	beq.n	800a606 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5e0:	4b0c      	ldr	r3, [pc, #48]	; (800a614 <xQueueGenericReset+0xcc>)
 800a5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5e6:	601a      	str	r2, [r3, #0]
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	e009      	b.n	800a606 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3310      	adds	r3, #16
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff fef2 	bl	800a3e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	3324      	adds	r3, #36	; 0x24
 800a600:	4618      	mov	r0, r3
 800a602:	f7ff feed 	bl	800a3e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a606:	f002 f92d 	bl	800c864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a60a:	2301      	movs	r3, #1
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	e000ed04 	.word	0xe000ed04

0800a618 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08e      	sub	sp, #56	; 0x38
 800a61c:	af02      	add	r7, sp, #8
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10a      	bne.n	800a642 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a63e:	bf00      	nop
 800a640:	e7fe      	b.n	800a640 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10a      	bne.n	800a65e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a65a:	bf00      	nop
 800a65c:	e7fe      	b.n	800a65c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <xQueueGenericCreateStatic+0x52>
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <xQueueGenericCreateStatic+0x56>
 800a66a:	2301      	movs	r3, #1
 800a66c:	e000      	b.n	800a670 <xQueueGenericCreateStatic+0x58>
 800a66e:	2300      	movs	r3, #0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10a      	bne.n	800a68a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	623b      	str	r3, [r7, #32]
}
 800a686:	bf00      	nop
 800a688:	e7fe      	b.n	800a688 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d102      	bne.n	800a696 <xQueueGenericCreateStatic+0x7e>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <xQueueGenericCreateStatic+0x82>
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <xQueueGenericCreateStatic+0x84>
 800a69a:	2300      	movs	r3, #0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10a      	bne.n	800a6b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	61fb      	str	r3, [r7, #28]
}
 800a6b2:	bf00      	nop
 800a6b4:	e7fe      	b.n	800a6b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a6b6:	2350      	movs	r3, #80	; 0x50
 800a6b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	2b50      	cmp	r3, #80	; 0x50
 800a6be:	d00a      	beq.n	800a6d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	61bb      	str	r3, [r7, #24]
}
 800a6d2:	bf00      	nop
 800a6d4:	e7fe      	b.n	800a6d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a6d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00d      	beq.n	800a6fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	68b9      	ldr	r1, [r7, #8]
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f000 f83f 	bl	800a77c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a700:	4618      	mov	r0, r3
 800a702:	3730      	adds	r7, #48	; 0x30
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08a      	sub	sp, #40	; 0x28
 800a70c:	af02      	add	r7, sp, #8
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	4613      	mov	r3, r2
 800a714:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10a      	bne.n	800a732 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	613b      	str	r3, [r7, #16]
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	fb02 f303 	mul.w	r3, r2, r3
 800a73a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	3350      	adds	r3, #80	; 0x50
 800a740:	4618      	mov	r0, r3
 800a742:	f002 f981 	bl	800ca48 <pvPortMalloc>
 800a746:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d011      	beq.n	800a772 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	3350      	adds	r3, #80	; 0x50
 800a756:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a760:	79fa      	ldrb	r2, [r7, #7]
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	4613      	mov	r3, r2
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	68b9      	ldr	r1, [r7, #8]
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 f805 	bl	800a77c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a772:	69bb      	ldr	r3, [r7, #24]
	}
 800a774:	4618      	mov	r0, r3
 800a776:	3720      	adds	r7, #32
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
 800a788:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d103      	bne.n	800a798 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	69ba      	ldr	r2, [r7, #24]
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	e002      	b.n	800a79e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a7aa:	2101      	movs	r1, #1
 800a7ac:	69b8      	ldr	r0, [r7, #24]
 800a7ae:	f7ff fecb 	bl	800a548 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	78fa      	ldrb	r2, [r7, #3]
 800a7b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a7ba:	bf00      	nop
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
	...

0800a7c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08e      	sub	sp, #56	; 0x38
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
 800a7d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10a      	bne.n	800a7f6 <xQueueGenericSend+0x32>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d103      	bne.n	800a804 <xQueueGenericSend+0x40>
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a800:	2b00      	cmp	r3, #0
 800a802:	d101      	bne.n	800a808 <xQueueGenericSend+0x44>
 800a804:	2301      	movs	r3, #1
 800a806:	e000      	b.n	800a80a <xQueueGenericSend+0x46>
 800a808:	2300      	movs	r3, #0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10a      	bne.n	800a824 <xQueueGenericSend+0x60>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b02      	cmp	r3, #2
 800a828:	d103      	bne.n	800a832 <xQueueGenericSend+0x6e>
 800a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d101      	bne.n	800a836 <xQueueGenericSend+0x72>
 800a832:	2301      	movs	r3, #1
 800a834:	e000      	b.n	800a838 <xQueueGenericSend+0x74>
 800a836:	2300      	movs	r3, #0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10a      	bne.n	800a852 <xQueueGenericSend+0x8e>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	623b      	str	r3, [r7, #32]
}
 800a84e:	bf00      	nop
 800a850:	e7fe      	b.n	800a850 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a852:	f001 fa79 	bl	800bd48 <xTaskGetSchedulerState>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d102      	bne.n	800a862 <xQueueGenericSend+0x9e>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <xQueueGenericSend+0xa2>
 800a862:	2301      	movs	r3, #1
 800a864:	e000      	b.n	800a868 <xQueueGenericSend+0xa4>
 800a866:	2300      	movs	r3, #0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10a      	bne.n	800a882 <xQueueGenericSend+0xbe>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	61fb      	str	r3, [r7, #28]
}
 800a87e:	bf00      	nop
 800a880:	e7fe      	b.n	800a880 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a882:	f001 ffbf 	bl	800c804 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88e:	429a      	cmp	r2, r3
 800a890:	d302      	bcc.n	800a898 <xQueueGenericSend+0xd4>
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2b02      	cmp	r3, #2
 800a896:	d129      	bne.n	800a8ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a898:	683a      	ldr	r2, [r7, #0]
 800a89a:	68b9      	ldr	r1, [r7, #8]
 800a89c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a89e:	f000 fa8b 	bl	800adb8 <prvCopyDataToQueue>
 800a8a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d010      	beq.n	800a8ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	3324      	adds	r3, #36	; 0x24
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f001 f887 	bl	800b9c4 <xTaskRemoveFromEventList>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d013      	beq.n	800a8e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8bc:	4b3f      	ldr	r3, [pc, #252]	; (800a9bc <xQueueGenericSend+0x1f8>)
 800a8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	e00a      	b.n	800a8e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d007      	beq.n	800a8e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a8d4:	4b39      	ldr	r3, [pc, #228]	; (800a9bc <xQueueGenericSend+0x1f8>)
 800a8d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a8e4:	f001 ffbe 	bl	800c864 <vPortExitCritical>
				return pdPASS;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e063      	b.n	800a9b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d103      	bne.n	800a8fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8f2:	f001 ffb7 	bl	800c864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e05c      	b.n	800a9b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d106      	bne.n	800a90e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a900:	f107 0314 	add.w	r3, r7, #20
 800a904:	4618      	mov	r0, r3
 800a906:	f001 f8c1 	bl	800ba8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a90a:	2301      	movs	r3, #1
 800a90c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a90e:	f001 ffa9 	bl	800c864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a912:	f000 fe1b 	bl	800b54c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a916:	f001 ff75 	bl	800c804 <vPortEnterCritical>
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a920:	b25b      	sxtb	r3, r3
 800a922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a926:	d103      	bne.n	800a930 <xQueueGenericSend+0x16c>
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a936:	b25b      	sxtb	r3, r3
 800a938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93c:	d103      	bne.n	800a946 <xQueueGenericSend+0x182>
 800a93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a946:	f001 ff8d 	bl	800c864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a94a:	1d3a      	adds	r2, r7, #4
 800a94c:	f107 0314 	add.w	r3, r7, #20
 800a950:	4611      	mov	r1, r2
 800a952:	4618      	mov	r0, r3
 800a954:	f001 f8b0 	bl	800bab8 <xTaskCheckForTimeOut>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d124      	bne.n	800a9a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a95e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a960:	f000 fb22 	bl	800afa8 <prvIsQueueFull>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d018      	beq.n	800a99c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	3310      	adds	r3, #16
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	4611      	mov	r1, r2
 800a972:	4618      	mov	r0, r3
 800a974:	f000 ffd6 	bl	800b924 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a97a:	f000 faad 	bl	800aed8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a97e:	f000 fdf3 	bl	800b568 <xTaskResumeAll>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	f47f af7c 	bne.w	800a882 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a98a:	4b0c      	ldr	r3, [pc, #48]	; (800a9bc <xQueueGenericSend+0x1f8>)
 800a98c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a990:	601a      	str	r2, [r3, #0]
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	e772      	b.n	800a882 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a99c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a99e:	f000 fa9b 	bl	800aed8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9a2:	f000 fde1 	bl	800b568 <xTaskResumeAll>
 800a9a6:	e76c      	b.n	800a882 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9aa:	f000 fa95 	bl	800aed8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9ae:	f000 fddb 	bl	800b568 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3738      	adds	r7, #56	; 0x38
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	e000ed04 	.word	0xe000ed04

0800a9c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b090      	sub	sp, #64	; 0x40
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10a      	bne.n	800a9ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9ea:	bf00      	nop
 800a9ec:	e7fe      	b.n	800a9ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d103      	bne.n	800a9fc <xQueueGenericSendFromISR+0x3c>
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d101      	bne.n	800aa00 <xQueueGenericSendFromISR+0x40>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e000      	b.n	800aa02 <xQueueGenericSendFromISR+0x42>
 800aa00:	2300      	movs	r3, #0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10a      	bne.n	800aa1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa18:	bf00      	nop
 800aa1a:	e7fe      	b.n	800aa1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d103      	bne.n	800aa2a <xQueueGenericSendFromISR+0x6a>
 800aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d101      	bne.n	800aa2e <xQueueGenericSendFromISR+0x6e>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e000      	b.n	800aa30 <xQueueGenericSendFromISR+0x70>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10a      	bne.n	800aa4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	623b      	str	r3, [r7, #32]
}
 800aa46:	bf00      	nop
 800aa48:	e7fe      	b.n	800aa48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa4a:	f001 ffbd 	bl	800c9c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa4e:	f3ef 8211 	mrs	r2, BASEPRI
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	61fa      	str	r2, [r7, #28]
 800aa64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d302      	bcc.n	800aa7c <xQueueGenericSendFromISR+0xbc>
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d12f      	bne.n	800aadc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	68b9      	ldr	r1, [r7, #8]
 800aa90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa92:	f000 f991 	bl	800adb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aa9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9e:	d112      	bne.n	800aac6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d016      	beq.n	800aad6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaaa:	3324      	adds	r3, #36	; 0x24
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 ff89 	bl	800b9c4 <xTaskRemoveFromEventList>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00e      	beq.n	800aad6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00b      	beq.n	800aad6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2201      	movs	r2, #1
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	e007      	b.n	800aad6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aac6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aaca:	3301      	adds	r3, #1
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	b25a      	sxtb	r2, r3
 800aad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aad6:	2301      	movs	r3, #1
 800aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aada:	e001      	b.n	800aae0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aadc:	2300      	movs	r3, #0
 800aade:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aaea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aaec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3740      	adds	r7, #64	; 0x40
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
	...

0800aaf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b08c      	sub	sp, #48	; 0x30
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab04:	2300      	movs	r3, #0
 800ab06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10a      	bne.n	800ab28 <xQueueReceive+0x30>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	623b      	str	r3, [r7, #32]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d103      	bne.n	800ab36 <xQueueReceive+0x3e>
 800ab2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <xQueueReceive+0x42>
 800ab36:	2301      	movs	r3, #1
 800ab38:	e000      	b.n	800ab3c <xQueueReceive+0x44>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10a      	bne.n	800ab56 <xQueueReceive+0x5e>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	61fb      	str	r3, [r7, #28]
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab56:	f001 f8f7 	bl	800bd48 <xTaskGetSchedulerState>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d102      	bne.n	800ab66 <xQueueReceive+0x6e>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d101      	bne.n	800ab6a <xQueueReceive+0x72>
 800ab66:	2301      	movs	r3, #1
 800ab68:	e000      	b.n	800ab6c <xQueueReceive+0x74>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <xQueueReceive+0x8e>
	__asm volatile
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	61bb      	str	r3, [r7, #24]
}
 800ab82:	bf00      	nop
 800ab84:	e7fe      	b.n	800ab84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab86:	f001 fe3d 	bl	800c804 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d01f      	beq.n	800abd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab9a:	f000 f977 	bl	800ae8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	1e5a      	subs	r2, r3, #1
 800aba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00f      	beq.n	800abce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb0:	3310      	adds	r3, #16
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 ff06 	bl	800b9c4 <xTaskRemoveFromEventList>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d007      	beq.n	800abce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800abbe:	4b3d      	ldr	r3, [pc, #244]	; (800acb4 <xQueueReceive+0x1bc>)
 800abc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800abce:	f001 fe49 	bl	800c864 <vPortExitCritical>
				return pdPASS;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e069      	b.n	800acaa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d103      	bne.n	800abe4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abdc:	f001 fe42 	bl	800c864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800abe0:	2300      	movs	r3, #0
 800abe2:	e062      	b.n	800acaa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d106      	bne.n	800abf8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abea:	f107 0310 	add.w	r3, r7, #16
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 ff4c 	bl	800ba8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abf4:	2301      	movs	r3, #1
 800abf6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abf8:	f001 fe34 	bl	800c864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abfc:	f000 fca6 	bl	800b54c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac00:	f001 fe00 	bl	800c804 <vPortEnterCritical>
 800ac04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac0a:	b25b      	sxtb	r3, r3
 800ac0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac10:	d103      	bne.n	800ac1a <xQueueReceive+0x122>
 800ac12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac20:	b25b      	sxtb	r3, r3
 800ac22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac26:	d103      	bne.n	800ac30 <xQueueReceive+0x138>
 800ac28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac30:	f001 fe18 	bl	800c864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac34:	1d3a      	adds	r2, r7, #4
 800ac36:	f107 0310 	add.w	r3, r7, #16
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 ff3b 	bl	800bab8 <xTaskCheckForTimeOut>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d123      	bne.n	800ac90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac4a:	f000 f997 	bl	800af7c <prvIsQueueEmpty>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d017      	beq.n	800ac84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac56:	3324      	adds	r3, #36	; 0x24
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 fe61 	bl	800b924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac64:	f000 f938 	bl	800aed8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac68:	f000 fc7e 	bl	800b568 <xTaskResumeAll>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d189      	bne.n	800ab86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ac72:	4b10      	ldr	r3, [pc, #64]	; (800acb4 <xQueueReceive+0x1bc>)
 800ac74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	e780      	b.n	800ab86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac86:	f000 f927 	bl	800aed8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac8a:	f000 fc6d 	bl	800b568 <xTaskResumeAll>
 800ac8e:	e77a      	b.n	800ab86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac92:	f000 f921 	bl	800aed8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac96:	f000 fc67 	bl	800b568 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac9c:	f000 f96e 	bl	800af7c <prvIsQueueEmpty>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f43f af6f 	beq.w	800ab86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aca8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3730      	adds	r7, #48	; 0x30
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	e000ed04 	.word	0xe000ed04

0800acb8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b08e      	sub	sp, #56	; 0x38
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acca:	2b00      	cmp	r3, #0
 800accc:	d10a      	bne.n	800ace4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800acce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	623b      	str	r3, [r7, #32]
}
 800ace0:	bf00      	nop
 800ace2:	e7fe      	b.n	800ace2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d103      	bne.n	800acf2 <xQueueReceiveFromISR+0x3a>
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <xQueueReceiveFromISR+0x3e>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e000      	b.n	800acf8 <xQueueReceiveFromISR+0x40>
 800acf6:	2300      	movs	r3, #0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	61fb      	str	r3, [r7, #28]
}
 800ad0e:	bf00      	nop
 800ad10:	e7fe      	b.n	800ad10 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad12:	f001 fe59 	bl	800c9c8 <vPortValidateInterruptPriority>
	__asm volatile
 800ad16:	f3ef 8211 	mrs	r2, BASEPRI
 800ad1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	61ba      	str	r2, [r7, #24]
 800ad2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ad2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d02f      	beq.n	800ad9e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad48:	68b9      	ldr	r1, [r7, #8]
 800ad4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad4c:	f000 f89e 	bl	800ae8c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	1e5a      	subs	r2, r3, #1
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ad58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad60:	d112      	bne.n	800ad88 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d016      	beq.n	800ad98 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	3310      	adds	r3, #16
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 fe28 	bl	800b9c4 <xTaskRemoveFromEventList>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00e      	beq.n	800ad98 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00b      	beq.n	800ad98 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	601a      	str	r2, [r3, #0]
 800ad86:	e007      	b.n	800ad98 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ad88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	b25a      	sxtb	r2, r3
 800ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad9c:	e001      	b.n	800ada2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	637b      	str	r3, [r7, #52]	; 0x34
 800ada2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f383 8811 	msr	BASEPRI, r3
}
 800adac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800adae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3738      	adds	r7, #56	; 0x38
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800adc4:	2300      	movs	r3, #0
 800adc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10d      	bne.n	800adf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d14d      	bne.n	800ae7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 ffce 	bl	800bd84 <xTaskPriorityDisinherit>
 800ade8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2200      	movs	r2, #0
 800adee:	609a      	str	r2, [r3, #8]
 800adf0:	e043      	b.n	800ae7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d119      	bne.n	800ae2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6858      	ldr	r0, [r3, #4]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae00:	461a      	mov	r2, r3
 800ae02:	68b9      	ldr	r1, [r7, #8]
 800ae04:	f002 f830 	bl	800ce68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae10:	441a      	add	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	685a      	ldr	r2, [r3, #4]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d32b      	bcc.n	800ae7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	605a      	str	r2, [r3, #4]
 800ae2a:	e026      	b.n	800ae7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	68d8      	ldr	r0, [r3, #12]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae34:	461a      	mov	r2, r3
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	f002 f816 	bl	800ce68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	68da      	ldr	r2, [r3, #12]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae44:	425b      	negs	r3, r3
 800ae46:	441a      	add	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	68da      	ldr	r2, [r3, #12]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d207      	bcs.n	800ae68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	689a      	ldr	r2, [r3, #8]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae60:	425b      	negs	r3, r3
 800ae62:	441a      	add	r2, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d105      	bne.n	800ae7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	3b01      	subs	r3, #1
 800ae78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	1c5a      	adds	r2, r3, #1
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae82:	697b      	ldr	r3, [r7, #20]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3718      	adds	r7, #24
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d018      	beq.n	800aed0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68da      	ldr	r2, [r3, #12]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea6:	441a      	add	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68da      	ldr	r2, [r3, #12]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d303      	bcc.n	800aec0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68d9      	ldr	r1, [r3, #12]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec8:	461a      	mov	r2, r3
 800aeca:	6838      	ldr	r0, [r7, #0]
 800aecc:	f001 ffcc 	bl	800ce68 <memcpy>
	}
}
 800aed0:	bf00      	nop
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aee0:	f001 fc90 	bl	800c804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aeec:	e011      	b.n	800af12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d012      	beq.n	800af1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	3324      	adds	r3, #36	; 0x24
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 fd62 	bl	800b9c4 <xTaskRemoveFromEventList>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af06:	f000 fe39 	bl	800bb7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af16:	2b00      	cmp	r3, #0
 800af18:	dce9      	bgt.n	800aeee <prvUnlockQueue+0x16>
 800af1a:	e000      	b.n	800af1e <prvUnlockQueue+0x46>
					break;
 800af1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	22ff      	movs	r2, #255	; 0xff
 800af22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af26:	f001 fc9d 	bl	800c864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af2a:	f001 fc6b 	bl	800c804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af36:	e011      	b.n	800af5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d012      	beq.n	800af66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	3310      	adds	r3, #16
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fd3d 	bl	800b9c4 <xTaskRemoveFromEventList>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af50:	f000 fe14 	bl	800bb7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	3b01      	subs	r3, #1
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af60:	2b00      	cmp	r3, #0
 800af62:	dce9      	bgt.n	800af38 <prvUnlockQueue+0x60>
 800af64:	e000      	b.n	800af68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	22ff      	movs	r2, #255	; 0xff
 800af6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af70:	f001 fc78 	bl	800c864 <vPortExitCritical>
}
 800af74:	bf00      	nop
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af84:	f001 fc3e 	bl	800c804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d102      	bne.n	800af96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af90:	2301      	movs	r3, #1
 800af92:	60fb      	str	r3, [r7, #12]
 800af94:	e001      	b.n	800af9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af96:	2300      	movs	r3, #0
 800af98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af9a:	f001 fc63 	bl	800c864 <vPortExitCritical>

	return xReturn;
 800af9e:	68fb      	ldr	r3, [r7, #12]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afb0:	f001 fc28 	bl	800c804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d102      	bne.n	800afc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800afc0:	2301      	movs	r3, #1
 800afc2:	60fb      	str	r3, [r7, #12]
 800afc4:	e001      	b.n	800afca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afca:	f001 fc4b 	bl	800c864 <vPortExitCritical>

	return xReturn;
 800afce:	68fb      	ldr	r3, [r7, #12]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afe2:	2300      	movs	r3, #0
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	e014      	b.n	800b012 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800afe8:	4a0f      	ldr	r2, [pc, #60]	; (800b028 <vQueueAddToRegistry+0x50>)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10b      	bne.n	800b00c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aff4:	490c      	ldr	r1, [pc, #48]	; (800b028 <vQueueAddToRegistry+0x50>)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800affe:	4a0a      	ldr	r2, [pc, #40]	; (800b028 <vQueueAddToRegistry+0x50>)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	00db      	lsls	r3, r3, #3
 800b004:	4413      	add	r3, r2
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b00a:	e006      	b.n	800b01a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	3301      	adds	r3, #1
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2b07      	cmp	r3, #7
 800b016:	d9e7      	bls.n	800afe8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b018:	bf00      	nop
 800b01a:	bf00      	nop
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	240051f0 	.word	0x240051f0

0800b02c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b03c:	f001 fbe2 	bl	800c804 <vPortEnterCritical>
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b046:	b25b      	sxtb	r3, r3
 800b048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04c:	d103      	bne.n	800b056 <vQueueWaitForMessageRestricted+0x2a>
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b05c:	b25b      	sxtb	r3, r3
 800b05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b062:	d103      	bne.n	800b06c <vQueueWaitForMessageRestricted+0x40>
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	2200      	movs	r2, #0
 800b068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b06c:	f001 fbfa 	bl	800c864 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b074:	2b00      	cmp	r3, #0
 800b076:	d106      	bne.n	800b086 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	3324      	adds	r3, #36	; 0x24
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	68b9      	ldr	r1, [r7, #8]
 800b080:	4618      	mov	r0, r3
 800b082:	f000 fc73 	bl	800b96c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b086:	6978      	ldr	r0, [r7, #20]
 800b088:	f7ff ff26 	bl	800aed8 <prvUnlockQueue>
	}
 800b08c:	bf00      	nop
 800b08e:	3718      	adds	r7, #24
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b094:	b580      	push	{r7, lr}
 800b096:	b08e      	sub	sp, #56	; 0x38
 800b098:	af04      	add	r7, sp, #16
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
 800b0a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <xTaskCreateStatic+0x2a>
	__asm volatile
 800b0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	623b      	str	r3, [r7, #32]
}
 800b0ba:	bf00      	nop
 800b0bc:	e7fe      	b.n	800b0bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10a      	bne.n	800b0da <xTaskCreateStatic+0x46>
	__asm volatile
 800b0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	61fb      	str	r3, [r7, #28]
}
 800b0d6:	bf00      	nop
 800b0d8:	e7fe      	b.n	800b0d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b0da:	23bc      	movs	r3, #188	; 0xbc
 800b0dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	2bbc      	cmp	r3, #188	; 0xbc
 800b0e2:	d00a      	beq.n	800b0fa <xTaskCreateStatic+0x66>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	61bb      	str	r3, [r7, #24]
}
 800b0f6:	bf00      	nop
 800b0f8:	e7fe      	b.n	800b0f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b0fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d01e      	beq.n	800b140 <xTaskCreateStatic+0xac>
 800b102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b104:	2b00      	cmp	r3, #0
 800b106:	d01b      	beq.n	800b140 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b110:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	2202      	movs	r2, #2
 800b116:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b11a:	2300      	movs	r3, #0
 800b11c:	9303      	str	r3, [sp, #12]
 800b11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b120:	9302      	str	r3, [sp, #8]
 800b122:	f107 0314 	add.w	r3, r7, #20
 800b126:	9301      	str	r3, [sp, #4]
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	9300      	str	r3, [sp, #0]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	68b9      	ldr	r1, [r7, #8]
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f000 f850 	bl	800b1d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b13a:	f000 f8f3 	bl	800b324 <prvAddNewTaskToReadyList>
 800b13e:	e001      	b.n	800b144 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b140:	2300      	movs	r3, #0
 800b142:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b144:	697b      	ldr	r3, [r7, #20]
	}
 800b146:	4618      	mov	r0, r3
 800b148:	3728      	adds	r7, #40	; 0x28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b08c      	sub	sp, #48	; 0x30
 800b152:	af04      	add	r7, sp, #16
 800b154:	60f8      	str	r0, [r7, #12]
 800b156:	60b9      	str	r1, [r7, #8]
 800b158:	603b      	str	r3, [r7, #0]
 800b15a:	4613      	mov	r3, r2
 800b15c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b15e:	88fb      	ldrh	r3, [r7, #6]
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4618      	mov	r0, r3
 800b164:	f001 fc70 	bl	800ca48 <pvPortMalloc>
 800b168:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00e      	beq.n	800b18e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b170:	20bc      	movs	r0, #188	; 0xbc
 800b172:	f001 fc69 	bl	800ca48 <pvPortMalloc>
 800b176:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d003      	beq.n	800b186 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	631a      	str	r2, [r3, #48]	; 0x30
 800b184:	e005      	b.n	800b192 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b186:	6978      	ldr	r0, [r7, #20]
 800b188:	f001 fd2a 	bl	800cbe0 <vPortFree>
 800b18c:	e001      	b.n	800b192 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b18e:	2300      	movs	r3, #0
 800b190:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d017      	beq.n	800b1c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b1a0:	88fa      	ldrh	r2, [r7, #6]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	9303      	str	r3, [sp, #12]
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	9302      	str	r3, [sp, #8]
 800b1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	68b9      	ldr	r1, [r7, #8]
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 f80e 	bl	800b1d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1bc:	69f8      	ldr	r0, [r7, #28]
 800b1be:	f000 f8b1 	bl	800b324 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	61bb      	str	r3, [r7, #24]
 800b1c6:	e002      	b.n	800b1ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1ce:	69bb      	ldr	r3, [r7, #24]
	}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3720      	adds	r7, #32
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
 800b1e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	21a5      	movs	r1, #165	; 0xa5
 800b1f2:	f001 fe47 	bl	800ce84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1fa:	6879      	ldr	r1, [r7, #4]
 800b1fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b200:	440b      	add	r3, r1
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4413      	add	r3, r2
 800b206:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	f023 0307 	bic.w	r3, r3, #7
 800b20e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	f003 0307 	and.w	r3, r3, #7
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	617b      	str	r3, [r7, #20]
}
 800b22c:	bf00      	nop
 800b22e:	e7fe      	b.n	800b22e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d01f      	beq.n	800b276 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b236:	2300      	movs	r3, #0
 800b238:	61fb      	str	r3, [r7, #28]
 800b23a:	e012      	b.n	800b262 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	4413      	add	r3, r2
 800b242:	7819      	ldrb	r1, [r3, #0]
 800b244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	4413      	add	r3, r2
 800b24a:	3334      	adds	r3, #52	; 0x34
 800b24c:	460a      	mov	r2, r1
 800b24e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	4413      	add	r3, r2
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d006      	beq.n	800b26a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	3301      	adds	r3, #1
 800b260:	61fb      	str	r3, [r7, #28]
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	2b0f      	cmp	r3, #15
 800b266:	d9e9      	bls.n	800b23c <prvInitialiseNewTask+0x64>
 800b268:	e000      	b.n	800b26c <prvInitialiseNewTask+0x94>
			{
				break;
 800b26a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b274:	e003      	b.n	800b27e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b280:	2b37      	cmp	r3, #55	; 0x37
 800b282:	d901      	bls.n	800b288 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b284:	2337      	movs	r3, #55	; 0x37
 800b286:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b28c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b292:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	2200      	movs	r2, #0
 800b298:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29c:	3304      	adds	r3, #4
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7ff f8be 	bl	800a420 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a6:	3318      	adds	r3, #24
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7ff f8b9 	bl	800a420 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	3354      	adds	r3, #84	; 0x54
 800b2d8:	2260      	movs	r2, #96	; 0x60
 800b2da:	2100      	movs	r1, #0
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f001 fdd1 	bl	800ce84 <memset>
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e4:	4a0c      	ldr	r2, [pc, #48]	; (800b318 <prvInitialiseNewTask+0x140>)
 800b2e6:	659a      	str	r2, [r3, #88]	; 0x58
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	4a0c      	ldr	r2, [pc, #48]	; (800b31c <prvInitialiseNewTask+0x144>)
 800b2ec:	65da      	str	r2, [r3, #92]	; 0x5c
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f0:	4a0b      	ldr	r2, [pc, #44]	; (800b320 <prvInitialiseNewTask+0x148>)
 800b2f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	68f9      	ldr	r1, [r7, #12]
 800b2f8:	69b8      	ldr	r0, [r7, #24]
 800b2fa:	f001 f953 	bl	800c5a4 <pxPortInitialiseStack>
 800b2fe:	4602      	mov	r2, r0
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b306:	2b00      	cmp	r3, #0
 800b308:	d002      	beq.n	800b310 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b30e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b310:	bf00      	nop
 800b312:	3720      	adds	r7, #32
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	0800d0f4 	.word	0x0800d0f4
 800b31c:	0800d114 	.word	0x0800d114
 800b320:	0800d0d4 	.word	0x0800d0d4

0800b324 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b32c:	f001 fa6a 	bl	800c804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b330:	4b2d      	ldr	r3, [pc, #180]	; (800b3e8 <prvAddNewTaskToReadyList+0xc4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3301      	adds	r3, #1
 800b336:	4a2c      	ldr	r2, [pc, #176]	; (800b3e8 <prvAddNewTaskToReadyList+0xc4>)
 800b338:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b33a:	4b2c      	ldr	r3, [pc, #176]	; (800b3ec <prvAddNewTaskToReadyList+0xc8>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d109      	bne.n	800b356 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b342:	4a2a      	ldr	r2, [pc, #168]	; (800b3ec <prvAddNewTaskToReadyList+0xc8>)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b348:	4b27      	ldr	r3, [pc, #156]	; (800b3e8 <prvAddNewTaskToReadyList+0xc4>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d110      	bne.n	800b372 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b350:	f000 fc38 	bl	800bbc4 <prvInitialiseTaskLists>
 800b354:	e00d      	b.n	800b372 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b356:	4b26      	ldr	r3, [pc, #152]	; (800b3f0 <prvAddNewTaskToReadyList+0xcc>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d109      	bne.n	800b372 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b35e:	4b23      	ldr	r3, [pc, #140]	; (800b3ec <prvAddNewTaskToReadyList+0xc8>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b368:	429a      	cmp	r2, r3
 800b36a:	d802      	bhi.n	800b372 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b36c:	4a1f      	ldr	r2, [pc, #124]	; (800b3ec <prvAddNewTaskToReadyList+0xc8>)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b372:	4b20      	ldr	r3, [pc, #128]	; (800b3f4 <prvAddNewTaskToReadyList+0xd0>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	3301      	adds	r3, #1
 800b378:	4a1e      	ldr	r2, [pc, #120]	; (800b3f4 <prvAddNewTaskToReadyList+0xd0>)
 800b37a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b37c:	4b1d      	ldr	r3, [pc, #116]	; (800b3f4 <prvAddNewTaskToReadyList+0xd0>)
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b388:	4b1b      	ldr	r3, [pc, #108]	; (800b3f8 <prvAddNewTaskToReadyList+0xd4>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d903      	bls.n	800b398 <prvAddNewTaskToReadyList+0x74>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b394:	4a18      	ldr	r2, [pc, #96]	; (800b3f8 <prvAddNewTaskToReadyList+0xd4>)
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39c:	4613      	mov	r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4a15      	ldr	r2, [pc, #84]	; (800b3fc <prvAddNewTaskToReadyList+0xd8>)
 800b3a6:	441a      	add	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	f7ff f843 	bl	800a43a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b3b4:	f001 fa56 	bl	800c864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b3b8:	4b0d      	ldr	r3, [pc, #52]	; (800b3f0 <prvAddNewTaskToReadyList+0xcc>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00e      	beq.n	800b3de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b3c0:	4b0a      	ldr	r3, [pc, #40]	; (800b3ec <prvAddNewTaskToReadyList+0xc8>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d207      	bcs.n	800b3de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b3ce:	4b0c      	ldr	r3, [pc, #48]	; (800b400 <prvAddNewTaskToReadyList+0xdc>)
 800b3d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3de:	bf00      	nop
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	24000cf8 	.word	0x24000cf8
 800b3ec:	24000824 	.word	0x24000824
 800b3f0:	24000d04 	.word	0x24000d04
 800b3f4:	24000d14 	.word	0x24000d14
 800b3f8:	24000d00 	.word	0x24000d00
 800b3fc:	24000828 	.word	0x24000828
 800b400:	e000ed04 	.word	0xe000ed04

0800b404 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b40c:	2300      	movs	r3, #0
 800b40e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d017      	beq.n	800b446 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b416:	4b13      	ldr	r3, [pc, #76]	; (800b464 <vTaskDelay+0x60>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00a      	beq.n	800b434 <vTaskDelay+0x30>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	60bb      	str	r3, [r7, #8]
}
 800b430:	bf00      	nop
 800b432:	e7fe      	b.n	800b432 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b434:	f000 f88a 	bl	800b54c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b438:	2100      	movs	r1, #0
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fd10 	bl	800be60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b440:	f000 f892 	bl	800b568 <xTaskResumeAll>
 800b444:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d107      	bne.n	800b45c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b44c:	4b06      	ldr	r3, [pc, #24]	; (800b468 <vTaskDelay+0x64>)
 800b44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b45c:	bf00      	nop
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	24000d20 	.word	0x24000d20
 800b468:	e000ed04 	.word	0xe000ed04

0800b46c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b08a      	sub	sp, #40	; 0x28
 800b470:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b472:	2300      	movs	r3, #0
 800b474:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b476:	2300      	movs	r3, #0
 800b478:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b47a:	463a      	mov	r2, r7
 800b47c:	1d39      	adds	r1, r7, #4
 800b47e:	f107 0308 	add.w	r3, r7, #8
 800b482:	4618      	mov	r0, r3
 800b484:	f7fe ff78 	bl	800a378 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	9202      	str	r2, [sp, #8]
 800b490:	9301      	str	r3, [sp, #4]
 800b492:	2300      	movs	r3, #0
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	2300      	movs	r3, #0
 800b498:	460a      	mov	r2, r1
 800b49a:	4924      	ldr	r1, [pc, #144]	; (800b52c <vTaskStartScheduler+0xc0>)
 800b49c:	4824      	ldr	r0, [pc, #144]	; (800b530 <vTaskStartScheduler+0xc4>)
 800b49e:	f7ff fdf9 	bl	800b094 <xTaskCreateStatic>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	4a23      	ldr	r2, [pc, #140]	; (800b534 <vTaskStartScheduler+0xc8>)
 800b4a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4a8:	4b22      	ldr	r3, [pc, #136]	; (800b534 <vTaskStartScheduler+0xc8>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	617b      	str	r3, [r7, #20]
 800b4b4:	e001      	b.n	800b4ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d102      	bne.n	800b4c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b4c0:	f000 fd22 	bl	800bf08 <xTimerCreateTimerTask>
 800b4c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d11b      	bne.n	800b504 <vTaskStartScheduler+0x98>
	__asm volatile
 800b4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	613b      	str	r3, [r7, #16]
}
 800b4de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4e0:	4b15      	ldr	r3, [pc, #84]	; (800b538 <vTaskStartScheduler+0xcc>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	3354      	adds	r3, #84	; 0x54
 800b4e6:	4a15      	ldr	r2, [pc, #84]	; (800b53c <vTaskStartScheduler+0xd0>)
 800b4e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b4ea:	4b15      	ldr	r3, [pc, #84]	; (800b540 <vTaskStartScheduler+0xd4>)
 800b4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4f2:	4b14      	ldr	r3, [pc, #80]	; (800b544 <vTaskStartScheduler+0xd8>)
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4f8:	4b13      	ldr	r3, [pc, #76]	; (800b548 <vTaskStartScheduler+0xdc>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4fe:	f001 f8df 	bl	800c6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b502:	e00e      	b.n	800b522 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b50a:	d10a      	bne.n	800b522 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	60fb      	str	r3, [r7, #12]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <vTaskStartScheduler+0xb4>
}
 800b522:	bf00      	nop
 800b524:	3718      	adds	r7, #24
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	0800d044 	.word	0x0800d044
 800b530:	0800bb95 	.word	0x0800bb95
 800b534:	24000d1c 	.word	0x24000d1c
 800b538:	24000824 	.word	0x24000824
 800b53c:	24000014 	.word	0x24000014
 800b540:	24000d18 	.word	0x24000d18
 800b544:	24000d04 	.word	0x24000d04
 800b548:	24000cfc 	.word	0x24000cfc

0800b54c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b54c:	b480      	push	{r7}
 800b54e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b550:	4b04      	ldr	r3, [pc, #16]	; (800b564 <vTaskSuspendAll+0x18>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3301      	adds	r3, #1
 800b556:	4a03      	ldr	r2, [pc, #12]	; (800b564 <vTaskSuspendAll+0x18>)
 800b558:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b55a:	bf00      	nop
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	24000d20 	.word	0x24000d20

0800b568 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b572:	2300      	movs	r3, #0
 800b574:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b576:	4b42      	ldr	r3, [pc, #264]	; (800b680 <xTaskResumeAll+0x118>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d10a      	bne.n	800b594 <xTaskResumeAll+0x2c>
	__asm volatile
 800b57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b582:	f383 8811 	msr	BASEPRI, r3
 800b586:	f3bf 8f6f 	isb	sy
 800b58a:	f3bf 8f4f 	dsb	sy
 800b58e:	603b      	str	r3, [r7, #0]
}
 800b590:	bf00      	nop
 800b592:	e7fe      	b.n	800b592 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b594:	f001 f936 	bl	800c804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b598:	4b39      	ldr	r3, [pc, #228]	; (800b680 <xTaskResumeAll+0x118>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	4a38      	ldr	r2, [pc, #224]	; (800b680 <xTaskResumeAll+0x118>)
 800b5a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5a2:	4b37      	ldr	r3, [pc, #220]	; (800b680 <xTaskResumeAll+0x118>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d162      	bne.n	800b670 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5aa:	4b36      	ldr	r3, [pc, #216]	; (800b684 <xTaskResumeAll+0x11c>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d05e      	beq.n	800b670 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5b2:	e02f      	b.n	800b614 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5b4:	4b34      	ldr	r3, [pc, #208]	; (800b688 <xTaskResumeAll+0x120>)
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	3318      	adds	r3, #24
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fe ff97 	bl	800a4f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe ff92 	bl	800a4f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d4:	4b2d      	ldr	r3, [pc, #180]	; (800b68c <xTaskResumeAll+0x124>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d903      	bls.n	800b5e4 <xTaskResumeAll+0x7c>
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	4a2a      	ldr	r2, [pc, #168]	; (800b68c <xTaskResumeAll+0x124>)
 800b5e2:	6013      	str	r3, [r2, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4a27      	ldr	r2, [pc, #156]	; (800b690 <xTaskResumeAll+0x128>)
 800b5f2:	441a      	add	r2, r3
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	f7fe ff1d 	bl	800a43a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b604:	4b23      	ldr	r3, [pc, #140]	; (800b694 <xTaskResumeAll+0x12c>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d302      	bcc.n	800b614 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b60e:	4b22      	ldr	r3, [pc, #136]	; (800b698 <xTaskResumeAll+0x130>)
 800b610:	2201      	movs	r2, #1
 800b612:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b614:	4b1c      	ldr	r3, [pc, #112]	; (800b688 <xTaskResumeAll+0x120>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1cb      	bne.n	800b5b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b622:	f000 fb71 	bl	800bd08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b626:	4b1d      	ldr	r3, [pc, #116]	; (800b69c <xTaskResumeAll+0x134>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d010      	beq.n	800b654 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b632:	f000 f859 	bl	800b6e8 <xTaskIncrementTick>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b63c:	4b16      	ldr	r3, [pc, #88]	; (800b698 <xTaskResumeAll+0x130>)
 800b63e:	2201      	movs	r2, #1
 800b640:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	3b01      	subs	r3, #1
 800b646:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1f1      	bne.n	800b632 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b64e:	4b13      	ldr	r3, [pc, #76]	; (800b69c <xTaskResumeAll+0x134>)
 800b650:	2200      	movs	r2, #0
 800b652:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b654:	4b10      	ldr	r3, [pc, #64]	; (800b698 <xTaskResumeAll+0x130>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d009      	beq.n	800b670 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b65c:	2301      	movs	r3, #1
 800b65e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b660:	4b0f      	ldr	r3, [pc, #60]	; (800b6a0 <xTaskResumeAll+0x138>)
 800b662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b666:	601a      	str	r2, [r3, #0]
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b670:	f001 f8f8 	bl	800c864 <vPortExitCritical>

	return xAlreadyYielded;
 800b674:	68bb      	ldr	r3, [r7, #8]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	24000d20 	.word	0x24000d20
 800b684:	24000cf8 	.word	0x24000cf8
 800b688:	24000cb8 	.word	0x24000cb8
 800b68c:	24000d00 	.word	0x24000d00
 800b690:	24000828 	.word	0x24000828
 800b694:	24000824 	.word	0x24000824
 800b698:	24000d0c 	.word	0x24000d0c
 800b69c:	24000d08 	.word	0x24000d08
 800b6a0:	e000ed04 	.word	0xe000ed04

0800b6a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6aa:	4b05      	ldr	r3, [pc, #20]	; (800b6c0 <xTaskGetTickCount+0x1c>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6b0:	687b      	ldr	r3, [r7, #4]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	24000cfc 	.word	0x24000cfc

0800b6c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6ca:	f001 f97d 	bl	800c9c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b6d2:	4b04      	ldr	r3, [pc, #16]	; (800b6e4 <xTaskGetTickCountFromISR+0x20>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6d8:	683b      	ldr	r3, [r7, #0]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	24000cfc 	.word	0x24000cfc

0800b6e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6f2:	4b4f      	ldr	r3, [pc, #316]	; (800b830 <xTaskIncrementTick+0x148>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f040 808f 	bne.w	800b81a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b6fc:	4b4d      	ldr	r3, [pc, #308]	; (800b834 <xTaskIncrementTick+0x14c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	3301      	adds	r3, #1
 800b702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b704:	4a4b      	ldr	r2, [pc, #300]	; (800b834 <xTaskIncrementTick+0x14c>)
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d120      	bne.n	800b752 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b710:	4b49      	ldr	r3, [pc, #292]	; (800b838 <xTaskIncrementTick+0x150>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00a      	beq.n	800b730 <xTaskIncrementTick+0x48>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	603b      	str	r3, [r7, #0]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <xTaskIncrementTick+0x46>
 800b730:	4b41      	ldr	r3, [pc, #260]	; (800b838 <xTaskIncrementTick+0x150>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	4b41      	ldr	r3, [pc, #260]	; (800b83c <xTaskIncrementTick+0x154>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a3f      	ldr	r2, [pc, #252]	; (800b838 <xTaskIncrementTick+0x150>)
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	4a3f      	ldr	r2, [pc, #252]	; (800b83c <xTaskIncrementTick+0x154>)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6013      	str	r3, [r2, #0]
 800b744:	4b3e      	ldr	r3, [pc, #248]	; (800b840 <xTaskIncrementTick+0x158>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3301      	adds	r3, #1
 800b74a:	4a3d      	ldr	r2, [pc, #244]	; (800b840 <xTaskIncrementTick+0x158>)
 800b74c:	6013      	str	r3, [r2, #0]
 800b74e:	f000 fadb 	bl	800bd08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b752:	4b3c      	ldr	r3, [pc, #240]	; (800b844 <xTaskIncrementTick+0x15c>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d349      	bcc.n	800b7f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b75c:	4b36      	ldr	r3, [pc, #216]	; (800b838 <xTaskIncrementTick+0x150>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d104      	bne.n	800b770 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b766:	4b37      	ldr	r3, [pc, #220]	; (800b844 <xTaskIncrementTick+0x15c>)
 800b768:	f04f 32ff 	mov.w	r2, #4294967295
 800b76c:	601a      	str	r2, [r3, #0]
					break;
 800b76e:	e03f      	b.n	800b7f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b770:	4b31      	ldr	r3, [pc, #196]	; (800b838 <xTaskIncrementTick+0x150>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	429a      	cmp	r2, r3
 800b786:	d203      	bcs.n	800b790 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b788:	4a2e      	ldr	r2, [pc, #184]	; (800b844 <xTaskIncrementTick+0x15c>)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b78e:	e02f      	b.n	800b7f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	3304      	adds	r3, #4
 800b794:	4618      	mov	r0, r3
 800b796:	f7fe fead 	bl	800a4f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d004      	beq.n	800b7ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	3318      	adds	r3, #24
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fe fea4 	bl	800a4f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b0:	4b25      	ldr	r3, [pc, #148]	; (800b848 <xTaskIncrementTick+0x160>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d903      	bls.n	800b7c0 <xTaskIncrementTick+0xd8>
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7bc:	4a22      	ldr	r2, [pc, #136]	; (800b848 <xTaskIncrementTick+0x160>)
 800b7be:	6013      	str	r3, [r2, #0]
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4413      	add	r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	4a1f      	ldr	r2, [pc, #124]	; (800b84c <xTaskIncrementTick+0x164>)
 800b7ce:	441a      	add	r2, r3
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	f7fe fe2f 	bl	800a43a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e0:	4b1b      	ldr	r3, [pc, #108]	; (800b850 <xTaskIncrementTick+0x168>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d3b8      	bcc.n	800b75c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7ee:	e7b5      	b.n	800b75c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7f0:	4b17      	ldr	r3, [pc, #92]	; (800b850 <xTaskIncrementTick+0x168>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f6:	4915      	ldr	r1, [pc, #84]	; (800b84c <xTaskIncrementTick+0x164>)
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4413      	add	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	440b      	add	r3, r1
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d901      	bls.n	800b80c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b808:	2301      	movs	r3, #1
 800b80a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b80c:	4b11      	ldr	r3, [pc, #68]	; (800b854 <xTaskIncrementTick+0x16c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d007      	beq.n	800b824 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b814:	2301      	movs	r3, #1
 800b816:	617b      	str	r3, [r7, #20]
 800b818:	e004      	b.n	800b824 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b81a:	4b0f      	ldr	r3, [pc, #60]	; (800b858 <xTaskIncrementTick+0x170>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	3301      	adds	r3, #1
 800b820:	4a0d      	ldr	r2, [pc, #52]	; (800b858 <xTaskIncrementTick+0x170>)
 800b822:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b824:	697b      	ldr	r3, [r7, #20]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	24000d20 	.word	0x24000d20
 800b834:	24000cfc 	.word	0x24000cfc
 800b838:	24000cb0 	.word	0x24000cb0
 800b83c:	24000cb4 	.word	0x24000cb4
 800b840:	24000d10 	.word	0x24000d10
 800b844:	24000d18 	.word	0x24000d18
 800b848:	24000d00 	.word	0x24000d00
 800b84c:	24000828 	.word	0x24000828
 800b850:	24000824 	.word	0x24000824
 800b854:	24000d0c 	.word	0x24000d0c
 800b858:	24000d08 	.word	0x24000d08

0800b85c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b85c:	b480      	push	{r7}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b862:	4b2a      	ldr	r3, [pc, #168]	; (800b90c <vTaskSwitchContext+0xb0>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b86a:	4b29      	ldr	r3, [pc, #164]	; (800b910 <vTaskSwitchContext+0xb4>)
 800b86c:	2201      	movs	r2, #1
 800b86e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b870:	e046      	b.n	800b900 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b872:	4b27      	ldr	r3, [pc, #156]	; (800b910 <vTaskSwitchContext+0xb4>)
 800b874:	2200      	movs	r2, #0
 800b876:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b878:	4b26      	ldr	r3, [pc, #152]	; (800b914 <vTaskSwitchContext+0xb8>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	60fb      	str	r3, [r7, #12]
 800b87e:	e010      	b.n	800b8a2 <vTaskSwitchContext+0x46>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d10a      	bne.n	800b89c <vTaskSwitchContext+0x40>
	__asm volatile
 800b886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88a:	f383 8811 	msr	BASEPRI, r3
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	607b      	str	r3, [r7, #4]
}
 800b898:	bf00      	nop
 800b89a:	e7fe      	b.n	800b89a <vTaskSwitchContext+0x3e>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	60fb      	str	r3, [r7, #12]
 800b8a2:	491d      	ldr	r1, [pc, #116]	; (800b918 <vTaskSwitchContext+0xbc>)
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	440b      	add	r3, r1
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d0e4      	beq.n	800b880 <vTaskSwitchContext+0x24>
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	4413      	add	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4a15      	ldr	r2, [pc, #84]	; (800b918 <vTaskSwitchContext+0xbc>)
 800b8c2:	4413      	add	r3, r2
 800b8c4:	60bb      	str	r3, [r7, #8]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	685a      	ldr	r2, [r3, #4]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	605a      	str	r2, [r3, #4]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	685a      	ldr	r2, [r3, #4]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	3308      	adds	r3, #8
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d104      	bne.n	800b8e6 <vTaskSwitchContext+0x8a>
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	605a      	str	r2, [r3, #4]
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	4a0b      	ldr	r2, [pc, #44]	; (800b91c <vTaskSwitchContext+0xc0>)
 800b8ee:	6013      	str	r3, [r2, #0]
 800b8f0:	4a08      	ldr	r2, [pc, #32]	; (800b914 <vTaskSwitchContext+0xb8>)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b8f6:	4b09      	ldr	r3, [pc, #36]	; (800b91c <vTaskSwitchContext+0xc0>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	3354      	adds	r3, #84	; 0x54
 800b8fc:	4a08      	ldr	r2, [pc, #32]	; (800b920 <vTaskSwitchContext+0xc4>)
 800b8fe:	6013      	str	r3, [r2, #0]
}
 800b900:	bf00      	nop
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr
 800b90c:	24000d20 	.word	0x24000d20
 800b910:	24000d0c 	.word	0x24000d0c
 800b914:	24000d00 	.word	0x24000d00
 800b918:	24000828 	.word	0x24000828
 800b91c:	24000824 	.word	0x24000824
 800b920:	24000014 	.word	0x24000014

0800b924 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10a      	bne.n	800b94a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	60fb      	str	r3, [r7, #12]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b94a:	4b07      	ldr	r3, [pc, #28]	; (800b968 <vTaskPlaceOnEventList+0x44>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3318      	adds	r3, #24
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7fe fd95 	bl	800a482 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b958:	2101      	movs	r1, #1
 800b95a:	6838      	ldr	r0, [r7, #0]
 800b95c:	f000 fa80 	bl	800be60 <prvAddCurrentTaskToDelayedList>
}
 800b960:	bf00      	nop
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	24000824 	.word	0x24000824

0800b96c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10a      	bne.n	800b994 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	617b      	str	r3, [r7, #20]
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b994:	4b0a      	ldr	r3, [pc, #40]	; (800b9c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	3318      	adds	r3, #24
 800b99a:	4619      	mov	r1, r3
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f7fe fd4c 	bl	800a43a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	68b8      	ldr	r0, [r7, #8]
 800b9b2:	f000 fa55 	bl	800be60 <prvAddCurrentTaskToDelayedList>
	}
 800b9b6:	bf00      	nop
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	24000824 	.word	0x24000824

0800b9c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10a      	bne.n	800b9f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	60fb      	str	r3, [r7, #12]
}
 800b9ec:	bf00      	nop
 800b9ee:	e7fe      	b.n	800b9ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	3318      	adds	r3, #24
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fe fd7d 	bl	800a4f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9fa:	4b1e      	ldr	r3, [pc, #120]	; (800ba74 <xTaskRemoveFromEventList+0xb0>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d11d      	bne.n	800ba3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	3304      	adds	r3, #4
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fe fd74 	bl	800a4f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba10:	4b19      	ldr	r3, [pc, #100]	; (800ba78 <xTaskRemoveFromEventList+0xb4>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d903      	bls.n	800ba20 <xTaskRemoveFromEventList+0x5c>
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1c:	4a16      	ldr	r2, [pc, #88]	; (800ba78 <xTaskRemoveFromEventList+0xb4>)
 800ba1e:	6013      	str	r3, [r2, #0]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba24:	4613      	mov	r3, r2
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	4413      	add	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4a13      	ldr	r2, [pc, #76]	; (800ba7c <xTaskRemoveFromEventList+0xb8>)
 800ba2e:	441a      	add	r2, r3
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	3304      	adds	r3, #4
 800ba34:	4619      	mov	r1, r3
 800ba36:	4610      	mov	r0, r2
 800ba38:	f7fe fcff 	bl	800a43a <vListInsertEnd>
 800ba3c:	e005      	b.n	800ba4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	3318      	adds	r3, #24
 800ba42:	4619      	mov	r1, r3
 800ba44:	480e      	ldr	r0, [pc, #56]	; (800ba80 <xTaskRemoveFromEventList+0xbc>)
 800ba46:	f7fe fcf8 	bl	800a43a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4e:	4b0d      	ldr	r3, [pc, #52]	; (800ba84 <xTaskRemoveFromEventList+0xc0>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d905      	bls.n	800ba64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba5c:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <xTaskRemoveFromEventList+0xc4>)
 800ba5e:	2201      	movs	r2, #1
 800ba60:	601a      	str	r2, [r3, #0]
 800ba62:	e001      	b.n	800ba68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ba64:	2300      	movs	r3, #0
 800ba66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba68:	697b      	ldr	r3, [r7, #20]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	24000d20 	.word	0x24000d20
 800ba78:	24000d00 	.word	0x24000d00
 800ba7c:	24000828 	.word	0x24000828
 800ba80:	24000cb8 	.word	0x24000cb8
 800ba84:	24000824 	.word	0x24000824
 800ba88:	24000d0c 	.word	0x24000d0c

0800ba8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba94:	4b06      	ldr	r3, [pc, #24]	; (800bab0 <vTaskInternalSetTimeOutState+0x24>)
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba9c:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <vTaskInternalSetTimeOutState+0x28>)
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	605a      	str	r2, [r3, #4]
}
 800baa4:	bf00      	nop
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	24000d10 	.word	0x24000d10
 800bab4:	24000cfc 	.word	0x24000cfc

0800bab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b088      	sub	sp, #32
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	613b      	str	r3, [r7, #16]
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10a      	bne.n	800bafa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	60fb      	str	r3, [r7, #12]
}
 800baf6:	bf00      	nop
 800baf8:	e7fe      	b.n	800baf8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bafa:	f000 fe83 	bl	800c804 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bafe:	4b1d      	ldr	r3, [pc, #116]	; (800bb74 <xTaskCheckForTimeOut+0xbc>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	69ba      	ldr	r2, [r7, #24]
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb16:	d102      	bne.n	800bb1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	61fb      	str	r3, [r7, #28]
 800bb1c:	e023      	b.n	800bb66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	4b15      	ldr	r3, [pc, #84]	; (800bb78 <xTaskCheckForTimeOut+0xc0>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d007      	beq.n	800bb3a <xTaskCheckForTimeOut+0x82>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d302      	bcc.n	800bb3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb34:	2301      	movs	r3, #1
 800bb36:	61fb      	str	r3, [r7, #28]
 800bb38:	e015      	b.n	800bb66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d20b      	bcs.n	800bb5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	1ad2      	subs	r2, r2, r3
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f7ff ff9b 	bl	800ba8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb56:	2300      	movs	r3, #0
 800bb58:	61fb      	str	r3, [r7, #28]
 800bb5a:	e004      	b.n	800bb66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb62:	2301      	movs	r3, #1
 800bb64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb66:	f000 fe7d 	bl	800c864 <vPortExitCritical>

	return xReturn;
 800bb6a:	69fb      	ldr	r3, [r7, #28]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3720      	adds	r7, #32
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	24000cfc 	.word	0x24000cfc
 800bb78:	24000d10 	.word	0x24000d10

0800bb7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb80:	4b03      	ldr	r3, [pc, #12]	; (800bb90 <vTaskMissedYield+0x14>)
 800bb82:	2201      	movs	r2, #1
 800bb84:	601a      	str	r2, [r3, #0]
}
 800bb86:	bf00      	nop
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	24000d0c 	.word	0x24000d0c

0800bb94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb9c:	f000 f852 	bl	800bc44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bba0:	4b06      	ldr	r3, [pc, #24]	; (800bbbc <prvIdleTask+0x28>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d9f9      	bls.n	800bb9c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bba8:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <prvIdleTask+0x2c>)
 800bbaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbae:	601a      	str	r2, [r3, #0]
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbb8:	e7f0      	b.n	800bb9c <prvIdleTask+0x8>
 800bbba:	bf00      	nop
 800bbbc:	24000828 	.word	0x24000828
 800bbc0:	e000ed04 	.word	0xe000ed04

0800bbc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbca:	2300      	movs	r3, #0
 800bbcc:	607b      	str	r3, [r7, #4]
 800bbce:	e00c      	b.n	800bbea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4413      	add	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4a12      	ldr	r2, [pc, #72]	; (800bc24 <prvInitialiseTaskLists+0x60>)
 800bbdc:	4413      	add	r3, r2
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fe fbfe 	bl	800a3e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	607b      	str	r3, [r7, #4]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b37      	cmp	r3, #55	; 0x37
 800bbee:	d9ef      	bls.n	800bbd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbf0:	480d      	ldr	r0, [pc, #52]	; (800bc28 <prvInitialiseTaskLists+0x64>)
 800bbf2:	f7fe fbf5 	bl	800a3e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbf6:	480d      	ldr	r0, [pc, #52]	; (800bc2c <prvInitialiseTaskLists+0x68>)
 800bbf8:	f7fe fbf2 	bl	800a3e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbfc:	480c      	ldr	r0, [pc, #48]	; (800bc30 <prvInitialiseTaskLists+0x6c>)
 800bbfe:	f7fe fbef 	bl	800a3e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc02:	480c      	ldr	r0, [pc, #48]	; (800bc34 <prvInitialiseTaskLists+0x70>)
 800bc04:	f7fe fbec 	bl	800a3e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc08:	480b      	ldr	r0, [pc, #44]	; (800bc38 <prvInitialiseTaskLists+0x74>)
 800bc0a:	f7fe fbe9 	bl	800a3e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc0e:	4b0b      	ldr	r3, [pc, #44]	; (800bc3c <prvInitialiseTaskLists+0x78>)
 800bc10:	4a05      	ldr	r2, [pc, #20]	; (800bc28 <prvInitialiseTaskLists+0x64>)
 800bc12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc14:	4b0a      	ldr	r3, [pc, #40]	; (800bc40 <prvInitialiseTaskLists+0x7c>)
 800bc16:	4a05      	ldr	r2, [pc, #20]	; (800bc2c <prvInitialiseTaskLists+0x68>)
 800bc18:	601a      	str	r2, [r3, #0]
}
 800bc1a:	bf00      	nop
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	24000828 	.word	0x24000828
 800bc28:	24000c88 	.word	0x24000c88
 800bc2c:	24000c9c 	.word	0x24000c9c
 800bc30:	24000cb8 	.word	0x24000cb8
 800bc34:	24000ccc 	.word	0x24000ccc
 800bc38:	24000ce4 	.word	0x24000ce4
 800bc3c:	24000cb0 	.word	0x24000cb0
 800bc40:	24000cb4 	.word	0x24000cb4

0800bc44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc4a:	e019      	b.n	800bc80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc4c:	f000 fdda 	bl	800c804 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc50:	4b10      	ldr	r3, [pc, #64]	; (800bc94 <prvCheckTasksWaitingTermination+0x50>)
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fe fc49 	bl	800a4f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc62:	4b0d      	ldr	r3, [pc, #52]	; (800bc98 <prvCheckTasksWaitingTermination+0x54>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	3b01      	subs	r3, #1
 800bc68:	4a0b      	ldr	r2, [pc, #44]	; (800bc98 <prvCheckTasksWaitingTermination+0x54>)
 800bc6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc6c:	4b0b      	ldr	r3, [pc, #44]	; (800bc9c <prvCheckTasksWaitingTermination+0x58>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	3b01      	subs	r3, #1
 800bc72:	4a0a      	ldr	r2, [pc, #40]	; (800bc9c <prvCheckTasksWaitingTermination+0x58>)
 800bc74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc76:	f000 fdf5 	bl	800c864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f810 	bl	800bca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc80:	4b06      	ldr	r3, [pc, #24]	; (800bc9c <prvCheckTasksWaitingTermination+0x58>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1e1      	bne.n	800bc4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc88:	bf00      	nop
 800bc8a:	bf00      	nop
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	24000ccc 	.word	0x24000ccc
 800bc98:	24000cf8 	.word	0x24000cf8
 800bc9c:	24000ce0 	.word	0x24000ce0

0800bca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	3354      	adds	r3, #84	; 0x54
 800bcac:	4618      	mov	r0, r3
 800bcae:	f001 f8ff 	bl	800ceb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d108      	bne.n	800bcce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f000 ff8d 	bl	800cbe0 <vPortFree>
				vPortFree( pxTCB );
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 ff8a 	bl	800cbe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bccc:	e018      	b.n	800bd00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d103      	bne.n	800bce0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 ff81 	bl	800cbe0 <vPortFree>
	}
 800bcde:	e00f      	b.n	800bd00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d00a      	beq.n	800bd00 <prvDeleteTCB+0x60>
	__asm volatile
 800bcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcee:	f383 8811 	msr	BASEPRI, r3
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	f3bf 8f4f 	dsb	sy
 800bcfa:	60fb      	str	r3, [r7, #12]
}
 800bcfc:	bf00      	nop
 800bcfe:	e7fe      	b.n	800bcfe <prvDeleteTCB+0x5e>
	}
 800bd00:	bf00      	nop
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd0e:	4b0c      	ldr	r3, [pc, #48]	; (800bd40 <prvResetNextTaskUnblockTime+0x38>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d104      	bne.n	800bd22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd18:	4b0a      	ldr	r3, [pc, #40]	; (800bd44 <prvResetNextTaskUnblockTime+0x3c>)
 800bd1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd20:	e008      	b.n	800bd34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd22:	4b07      	ldr	r3, [pc, #28]	; (800bd40 <prvResetNextTaskUnblockTime+0x38>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	4a04      	ldr	r2, [pc, #16]	; (800bd44 <prvResetNextTaskUnblockTime+0x3c>)
 800bd32:	6013      	str	r3, [r2, #0]
}
 800bd34:	bf00      	nop
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr
 800bd40:	24000cb0 	.word	0x24000cb0
 800bd44:	24000d18 	.word	0x24000d18

0800bd48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd4e:	4b0b      	ldr	r3, [pc, #44]	; (800bd7c <xTaskGetSchedulerState+0x34>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d102      	bne.n	800bd5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd56:	2301      	movs	r3, #1
 800bd58:	607b      	str	r3, [r7, #4]
 800bd5a:	e008      	b.n	800bd6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd5c:	4b08      	ldr	r3, [pc, #32]	; (800bd80 <xTaskGetSchedulerState+0x38>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d102      	bne.n	800bd6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd64:	2302      	movs	r3, #2
 800bd66:	607b      	str	r3, [r7, #4]
 800bd68:	e001      	b.n	800bd6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd6e:	687b      	ldr	r3, [r7, #4]
	}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	24000d04 	.word	0x24000d04
 800bd80:	24000d20 	.word	0x24000d20

0800bd84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b086      	sub	sp, #24
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd90:	2300      	movs	r3, #0
 800bd92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d056      	beq.n	800be48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd9a:	4b2e      	ldr	r3, [pc, #184]	; (800be54 <xTaskPriorityDisinherit+0xd0>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	693a      	ldr	r2, [r7, #16]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d00a      	beq.n	800bdba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	60fb      	str	r3, [r7, #12]
}
 800bdb6:	bf00      	nop
 800bdb8:	e7fe      	b.n	800bdb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10a      	bne.n	800bdd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	60bb      	str	r3, [r7, #8]
}
 800bdd4:	bf00      	nop
 800bdd6:	e7fe      	b.n	800bdd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bddc:	1e5a      	subs	r2, r3, #1
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d02c      	beq.n	800be48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d128      	bne.n	800be48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fe fb7a 	bl	800a4f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be18:	4b0f      	ldr	r3, [pc, #60]	; (800be58 <xTaskPriorityDisinherit+0xd4>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d903      	bls.n	800be28 <xTaskPriorityDisinherit+0xa4>
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be24:	4a0c      	ldr	r2, [pc, #48]	; (800be58 <xTaskPriorityDisinherit+0xd4>)
 800be26:	6013      	str	r3, [r2, #0]
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be2c:	4613      	mov	r3, r2
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	4413      	add	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4a09      	ldr	r2, [pc, #36]	; (800be5c <xTaskPriorityDisinherit+0xd8>)
 800be36:	441a      	add	r2, r3
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	3304      	adds	r3, #4
 800be3c:	4619      	mov	r1, r3
 800be3e:	4610      	mov	r0, r2
 800be40:	f7fe fafb 	bl	800a43a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be44:	2301      	movs	r3, #1
 800be46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be48:	697b      	ldr	r3, [r7, #20]
	}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	24000824 	.word	0x24000824
 800be58:	24000d00 	.word	0x24000d00
 800be5c:	24000828 	.word	0x24000828

0800be60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be6a:	4b21      	ldr	r3, [pc, #132]	; (800bef0 <prvAddCurrentTaskToDelayedList+0x90>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be70:	4b20      	ldr	r3, [pc, #128]	; (800bef4 <prvAddCurrentTaskToDelayedList+0x94>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3304      	adds	r3, #4
 800be76:	4618      	mov	r0, r3
 800be78:	f7fe fb3c 	bl	800a4f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be82:	d10a      	bne.n	800be9a <prvAddCurrentTaskToDelayedList+0x3a>
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d007      	beq.n	800be9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be8a:	4b1a      	ldr	r3, [pc, #104]	; (800bef4 <prvAddCurrentTaskToDelayedList+0x94>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	3304      	adds	r3, #4
 800be90:	4619      	mov	r1, r3
 800be92:	4819      	ldr	r0, [pc, #100]	; (800bef8 <prvAddCurrentTaskToDelayedList+0x98>)
 800be94:	f7fe fad1 	bl	800a43a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be98:	e026      	b.n	800bee8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4413      	add	r3, r2
 800bea0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bea2:	4b14      	ldr	r3, [pc, #80]	; (800bef4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d209      	bcs.n	800bec6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beb2:	4b12      	ldr	r3, [pc, #72]	; (800befc <prvAddCurrentTaskToDelayedList+0x9c>)
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	4b0f      	ldr	r3, [pc, #60]	; (800bef4 <prvAddCurrentTaskToDelayedList+0x94>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3304      	adds	r3, #4
 800bebc:	4619      	mov	r1, r3
 800bebe:	4610      	mov	r0, r2
 800bec0:	f7fe fadf 	bl	800a482 <vListInsert>
}
 800bec4:	e010      	b.n	800bee8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bec6:	4b0e      	ldr	r3, [pc, #56]	; (800bf00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	4b0a      	ldr	r3, [pc, #40]	; (800bef4 <prvAddCurrentTaskToDelayedList+0x94>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	3304      	adds	r3, #4
 800bed0:	4619      	mov	r1, r3
 800bed2:	4610      	mov	r0, r2
 800bed4:	f7fe fad5 	bl	800a482 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bed8:	4b0a      	ldr	r3, [pc, #40]	; (800bf04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	429a      	cmp	r2, r3
 800bee0:	d202      	bcs.n	800bee8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bee2:	4a08      	ldr	r2, [pc, #32]	; (800bf04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	6013      	str	r3, [r2, #0]
}
 800bee8:	bf00      	nop
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	24000cfc 	.word	0x24000cfc
 800bef4:	24000824 	.word	0x24000824
 800bef8:	24000ce4 	.word	0x24000ce4
 800befc:	24000cb4 	.word	0x24000cb4
 800bf00:	24000cb0 	.word	0x24000cb0
 800bf04:	24000d18 	.word	0x24000d18

0800bf08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08a      	sub	sp, #40	; 0x28
 800bf0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf12:	f000 fb07 	bl	800c524 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf16:	4b1c      	ldr	r3, [pc, #112]	; (800bf88 <xTimerCreateTimerTask+0x80>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d021      	beq.n	800bf62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf26:	1d3a      	adds	r2, r7, #4
 800bf28:	f107 0108 	add.w	r1, r7, #8
 800bf2c:	f107 030c 	add.w	r3, r7, #12
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fe fa3b 	bl	800a3ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf36:	6879      	ldr	r1, [r7, #4]
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	9202      	str	r2, [sp, #8]
 800bf3e:	9301      	str	r3, [sp, #4]
 800bf40:	2302      	movs	r3, #2
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	2300      	movs	r3, #0
 800bf46:	460a      	mov	r2, r1
 800bf48:	4910      	ldr	r1, [pc, #64]	; (800bf8c <xTimerCreateTimerTask+0x84>)
 800bf4a:	4811      	ldr	r0, [pc, #68]	; (800bf90 <xTimerCreateTimerTask+0x88>)
 800bf4c:	f7ff f8a2 	bl	800b094 <xTaskCreateStatic>
 800bf50:	4603      	mov	r3, r0
 800bf52:	4a10      	ldr	r2, [pc, #64]	; (800bf94 <xTimerCreateTimerTask+0x8c>)
 800bf54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bf56:	4b0f      	ldr	r3, [pc, #60]	; (800bf94 <xTimerCreateTimerTask+0x8c>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d001      	beq.n	800bf62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10a      	bne.n	800bf7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bf68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6c:	f383 8811 	msr	BASEPRI, r3
 800bf70:	f3bf 8f6f 	isb	sy
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	613b      	str	r3, [r7, #16]
}
 800bf7a:	bf00      	nop
 800bf7c:	e7fe      	b.n	800bf7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bf7e:	697b      	ldr	r3, [r7, #20]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3718      	adds	r7, #24
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	24000d54 	.word	0x24000d54
 800bf8c:	0800d04c 	.word	0x0800d04c
 800bf90:	0800c0cd 	.word	0x0800c0cd
 800bf94:	24000d58 	.word	0x24000d58

0800bf98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b08a      	sub	sp, #40	; 0x28
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
 800bfa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10a      	bne.n	800bfc6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	623b      	str	r3, [r7, #32]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bfc6:	4b1a      	ldr	r3, [pc, #104]	; (800c030 <xTimerGenericCommand+0x98>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d02a      	beq.n	800c024 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2b05      	cmp	r3, #5
 800bfde:	dc18      	bgt.n	800c012 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bfe0:	f7ff feb2 	bl	800bd48 <xTaskGetSchedulerState>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d109      	bne.n	800bffe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bfea:	4b11      	ldr	r3, [pc, #68]	; (800c030 <xTimerGenericCommand+0x98>)
 800bfec:	6818      	ldr	r0, [r3, #0]
 800bfee:	f107 0110 	add.w	r1, r7, #16
 800bff2:	2300      	movs	r3, #0
 800bff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bff6:	f7fe fbe5 	bl	800a7c4 <xQueueGenericSend>
 800bffa:	6278      	str	r0, [r7, #36]	; 0x24
 800bffc:	e012      	b.n	800c024 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bffe:	4b0c      	ldr	r3, [pc, #48]	; (800c030 <xTimerGenericCommand+0x98>)
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	f107 0110 	add.w	r1, r7, #16
 800c006:	2300      	movs	r3, #0
 800c008:	2200      	movs	r2, #0
 800c00a:	f7fe fbdb 	bl	800a7c4 <xQueueGenericSend>
 800c00e:	6278      	str	r0, [r7, #36]	; 0x24
 800c010:	e008      	b.n	800c024 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c012:	4b07      	ldr	r3, [pc, #28]	; (800c030 <xTimerGenericCommand+0x98>)
 800c014:	6818      	ldr	r0, [r3, #0]
 800c016:	f107 0110 	add.w	r1, r7, #16
 800c01a:	2300      	movs	r3, #0
 800c01c:	683a      	ldr	r2, [r7, #0]
 800c01e:	f7fe fccf 	bl	800a9c0 <xQueueGenericSendFromISR>
 800c022:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c026:	4618      	mov	r0, r3
 800c028:	3728      	adds	r7, #40	; 0x28
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	24000d54 	.word	0x24000d54

0800c034 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b088      	sub	sp, #32
 800c038:	af02      	add	r7, sp, #8
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c03e:	4b22      	ldr	r3, [pc, #136]	; (800c0c8 <prvProcessExpiredTimer+0x94>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	3304      	adds	r3, #4
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fe fa51 	bl	800a4f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c058:	f003 0304 	and.w	r3, r3, #4
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d022      	beq.n	800c0a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	699a      	ldr	r2, [r3, #24]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	18d1      	adds	r1, r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	6978      	ldr	r0, [r7, #20]
 800c06e:	f000 f8d1 	bl	800c214 <prvInsertTimerInActiveList>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d01f      	beq.n	800c0b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c078:	2300      	movs	r3, #0
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	2300      	movs	r3, #0
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	2100      	movs	r1, #0
 800c082:	6978      	ldr	r0, [r7, #20]
 800c084:	f7ff ff88 	bl	800bf98 <xTimerGenericCommand>
 800c088:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d113      	bne.n	800c0b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	60fb      	str	r3, [r7, #12]
}
 800c0a2:	bf00      	nop
 800c0a4:	e7fe      	b.n	800c0a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0ac:	f023 0301 	bic.w	r3, r3, #1
 800c0b0:	b2da      	uxtb	r2, r3
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	6a1b      	ldr	r3, [r3, #32]
 800c0bc:	6978      	ldr	r0, [r7, #20]
 800c0be:	4798      	blx	r3
}
 800c0c0:	bf00      	nop
 800c0c2:	3718      	adds	r7, #24
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	24000d4c 	.word	0x24000d4c

0800c0cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0d4:	f107 0308 	add.w	r3, r7, #8
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 f857 	bl	800c18c <prvGetNextExpireTime>
 800c0de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f000 f803 	bl	800c0f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c0ea:	f000 f8d5 	bl	800c298 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0ee:	e7f1      	b.n	800c0d4 <prvTimerTask+0x8>

0800c0f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c0fa:	f7ff fa27 	bl	800b54c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0fe:	f107 0308 	add.w	r3, r7, #8
 800c102:	4618      	mov	r0, r3
 800c104:	f000 f866 	bl	800c1d4 <prvSampleTimeNow>
 800c108:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d130      	bne.n	800c172 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10a      	bne.n	800c12c <prvProcessTimerOrBlockTask+0x3c>
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d806      	bhi.n	800c12c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c11e:	f7ff fa23 	bl	800b568 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c122:	68f9      	ldr	r1, [r7, #12]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f7ff ff85 	bl	800c034 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c12a:	e024      	b.n	800c176 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d008      	beq.n	800c144 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c132:	4b13      	ldr	r3, [pc, #76]	; (800c180 <prvProcessTimerOrBlockTask+0x90>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d101      	bne.n	800c140 <prvProcessTimerOrBlockTask+0x50>
 800c13c:	2301      	movs	r3, #1
 800c13e:	e000      	b.n	800c142 <prvProcessTimerOrBlockTask+0x52>
 800c140:	2300      	movs	r3, #0
 800c142:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c144:	4b0f      	ldr	r3, [pc, #60]	; (800c184 <prvProcessTimerOrBlockTask+0x94>)
 800c146:	6818      	ldr	r0, [r3, #0]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	4619      	mov	r1, r3
 800c152:	f7fe ff6b 	bl	800b02c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c156:	f7ff fa07 	bl	800b568 <xTaskResumeAll>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10a      	bne.n	800c176 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c160:	4b09      	ldr	r3, [pc, #36]	; (800c188 <prvProcessTimerOrBlockTask+0x98>)
 800c162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c166:	601a      	str	r2, [r3, #0]
 800c168:	f3bf 8f4f 	dsb	sy
 800c16c:	f3bf 8f6f 	isb	sy
}
 800c170:	e001      	b.n	800c176 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c172:	f7ff f9f9 	bl	800b568 <xTaskResumeAll>
}
 800c176:	bf00      	nop
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	24000d50 	.word	0x24000d50
 800c184:	24000d54 	.word	0x24000d54
 800c188:	e000ed04 	.word	0xe000ed04

0800c18c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c194:	4b0e      	ldr	r3, [pc, #56]	; (800c1d0 <prvGetNextExpireTime+0x44>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d101      	bne.n	800c1a2 <prvGetNextExpireTime+0x16>
 800c19e:	2201      	movs	r2, #1
 800c1a0:	e000      	b.n	800c1a4 <prvGetNextExpireTime+0x18>
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d105      	bne.n	800c1bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1b0:	4b07      	ldr	r3, [pc, #28]	; (800c1d0 <prvGetNextExpireTime+0x44>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	60fb      	str	r3, [r7, #12]
 800c1ba:	e001      	b.n	800c1c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	24000d4c 	.word	0x24000d4c

0800c1d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c1dc:	f7ff fa62 	bl	800b6a4 <xTaskGetTickCount>
 800c1e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c1e2:	4b0b      	ldr	r3, [pc, #44]	; (800c210 <prvSampleTimeNow+0x3c>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	68fa      	ldr	r2, [r7, #12]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d205      	bcs.n	800c1f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c1ec:	f000 f936 	bl	800c45c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	601a      	str	r2, [r3, #0]
 800c1f6:	e002      	b.n	800c1fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c1fe:	4a04      	ldr	r2, [pc, #16]	; (800c210 <prvSampleTimeNow+0x3c>)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c204:	68fb      	ldr	r3, [r7, #12]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	24000d5c 	.word	0x24000d5c

0800c214 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
 800c220:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c222:	2300      	movs	r3, #0
 800c224:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	68ba      	ldr	r2, [r7, #8]
 800c22a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	68fa      	ldr	r2, [r7, #12]
 800c230:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	429a      	cmp	r2, r3
 800c238:	d812      	bhi.n	800c260 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	1ad2      	subs	r2, r2, r3
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	429a      	cmp	r2, r3
 800c246:	d302      	bcc.n	800c24e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c248:	2301      	movs	r3, #1
 800c24a:	617b      	str	r3, [r7, #20]
 800c24c:	e01b      	b.n	800c286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c24e:	4b10      	ldr	r3, [pc, #64]	; (800c290 <prvInsertTimerInActiveList+0x7c>)
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	3304      	adds	r3, #4
 800c256:	4619      	mov	r1, r3
 800c258:	4610      	mov	r0, r2
 800c25a:	f7fe f912 	bl	800a482 <vListInsert>
 800c25e:	e012      	b.n	800c286 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	429a      	cmp	r2, r3
 800c266:	d206      	bcs.n	800c276 <prvInsertTimerInActiveList+0x62>
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d302      	bcc.n	800c276 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c270:	2301      	movs	r3, #1
 800c272:	617b      	str	r3, [r7, #20]
 800c274:	e007      	b.n	800c286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c276:	4b07      	ldr	r3, [pc, #28]	; (800c294 <prvInsertTimerInActiveList+0x80>)
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3304      	adds	r3, #4
 800c27e:	4619      	mov	r1, r3
 800c280:	4610      	mov	r0, r2
 800c282:	f7fe f8fe 	bl	800a482 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c286:	697b      	ldr	r3, [r7, #20]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3718      	adds	r7, #24
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	24000d50 	.word	0x24000d50
 800c294:	24000d4c 	.word	0x24000d4c

0800c298 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b08e      	sub	sp, #56	; 0x38
 800c29c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c29e:	e0ca      	b.n	800c436 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	da18      	bge.n	800c2d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c2a6:	1d3b      	adds	r3, r7, #4
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10a      	bne.n	800c2c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	61fb      	str	r3, [r7, #28]
}
 800c2c4:	bf00      	nop
 800c2c6:	e7fe      	b.n	800c2c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ce:	6850      	ldr	r0, [r2, #4]
 800c2d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2d2:	6892      	ldr	r2, [r2, #8]
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f2c0 80aa 	blt.w	800c434 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e6:	695b      	ldr	r3, [r3, #20]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d004      	beq.n	800c2f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7fe f8ff 	bl	800a4f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2f6:	463b      	mov	r3, r7
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff ff6b 	bl	800c1d4 <prvSampleTimeNow>
 800c2fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b09      	cmp	r3, #9
 800c304:	f200 8097 	bhi.w	800c436 <prvProcessReceivedCommands+0x19e>
 800c308:	a201      	add	r2, pc, #4	; (adr r2, 800c310 <prvProcessReceivedCommands+0x78>)
 800c30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30e:	bf00      	nop
 800c310:	0800c339 	.word	0x0800c339
 800c314:	0800c339 	.word	0x0800c339
 800c318:	0800c339 	.word	0x0800c339
 800c31c:	0800c3ad 	.word	0x0800c3ad
 800c320:	0800c3c1 	.word	0x0800c3c1
 800c324:	0800c40b 	.word	0x0800c40b
 800c328:	0800c339 	.word	0x0800c339
 800c32c:	0800c339 	.word	0x0800c339
 800c330:	0800c3ad 	.word	0x0800c3ad
 800c334:	0800c3c1 	.word	0x0800c3c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c33e:	f043 0301 	orr.w	r3, r3, #1
 800c342:	b2da      	uxtb	r2, r3
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	18d1      	adds	r1, r2, r3
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c358:	f7ff ff5c 	bl	800c214 <prvInsertTimerInActiveList>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d069      	beq.n	800c436 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c364:	6a1b      	ldr	r3, [r3, #32]
 800c366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c368:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c370:	f003 0304 	and.w	r3, r3, #4
 800c374:	2b00      	cmp	r3, #0
 800c376:	d05e      	beq.n	800c436 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37c:	699b      	ldr	r3, [r3, #24]
 800c37e:	441a      	add	r2, r3
 800c380:	2300      	movs	r3, #0
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	2300      	movs	r3, #0
 800c386:	2100      	movs	r1, #0
 800c388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c38a:	f7ff fe05 	bl	800bf98 <xTimerGenericCommand>
 800c38e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c390:	6a3b      	ldr	r3, [r7, #32]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d14f      	bne.n	800c436 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	61bb      	str	r3, [r7, #24]
}
 800c3a8:	bf00      	nop
 800c3aa:	e7fe      	b.n	800c3aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3b2:	f023 0301 	bic.w	r3, r3, #1
 800c3b6:	b2da      	uxtb	r2, r3
 800c3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c3be:	e03a      	b.n	800c436 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3c6:	f043 0301 	orr.w	r3, r3, #1
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3da:	699b      	ldr	r3, [r3, #24]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10a      	bne.n	800c3f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	617b      	str	r3, [r7, #20]
}
 800c3f2:	bf00      	nop
 800c3f4:	e7fe      	b.n	800c3f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f8:	699a      	ldr	r2, [r3, #24]
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fc:	18d1      	adds	r1, r2, r3
 800c3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c404:	f7ff ff06 	bl	800c214 <prvInsertTimerInActiveList>
					break;
 800c408:	e015      	b.n	800c436 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c410:	f003 0302 	and.w	r3, r3, #2
 800c414:	2b00      	cmp	r3, #0
 800c416:	d103      	bne.n	800c420 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c41a:	f000 fbe1 	bl	800cbe0 <vPortFree>
 800c41e:	e00a      	b.n	800c436 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c426:	f023 0301 	bic.w	r3, r3, #1
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c432:	e000      	b.n	800c436 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c434:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c436:	4b08      	ldr	r3, [pc, #32]	; (800c458 <prvProcessReceivedCommands+0x1c0>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	1d39      	adds	r1, r7, #4
 800c43c:	2200      	movs	r2, #0
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fe fb5a 	bl	800aaf8 <xQueueReceive>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	f47f af2a 	bne.w	800c2a0 <prvProcessReceivedCommands+0x8>
	}
}
 800c44c:	bf00      	nop
 800c44e:	bf00      	nop
 800c450:	3730      	adds	r7, #48	; 0x30
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	24000d54 	.word	0x24000d54

0800c45c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b088      	sub	sp, #32
 800c460:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c462:	e048      	b.n	800c4f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c464:	4b2d      	ldr	r3, [pc, #180]	; (800c51c <prvSwitchTimerLists+0xc0>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c46e:	4b2b      	ldr	r3, [pc, #172]	; (800c51c <prvSwitchTimerLists+0xc0>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	3304      	adds	r3, #4
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7fe f839 	bl	800a4f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6a1b      	ldr	r3, [r3, #32]
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c490:	f003 0304 	and.w	r3, r3, #4
 800c494:	2b00      	cmp	r3, #0
 800c496:	d02e      	beq.n	800c4f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	699b      	ldr	r3, [r3, #24]
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	4413      	add	r3, r2
 800c4a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d90e      	bls.n	800c4c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4b6:	4b19      	ldr	r3, [pc, #100]	; (800c51c <prvSwitchTimerLists+0xc0>)
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	3304      	adds	r3, #4
 800c4be:	4619      	mov	r1, r3
 800c4c0:	4610      	mov	r0, r2
 800c4c2:	f7fd ffde 	bl	800a482 <vListInsert>
 800c4c6:	e016      	b.n	800c4f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	693a      	ldr	r2, [r7, #16]
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f7ff fd60 	bl	800bf98 <xTimerGenericCommand>
 800c4d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10a      	bne.n	800c4f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	603b      	str	r3, [r7, #0]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4f6:	4b09      	ldr	r3, [pc, #36]	; (800c51c <prvSwitchTimerLists+0xc0>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d1b1      	bne.n	800c464 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c500:	4b06      	ldr	r3, [pc, #24]	; (800c51c <prvSwitchTimerLists+0xc0>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c506:	4b06      	ldr	r3, [pc, #24]	; (800c520 <prvSwitchTimerLists+0xc4>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a04      	ldr	r2, [pc, #16]	; (800c51c <prvSwitchTimerLists+0xc0>)
 800c50c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c50e:	4a04      	ldr	r2, [pc, #16]	; (800c520 <prvSwitchTimerLists+0xc4>)
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	6013      	str	r3, [r2, #0]
}
 800c514:	bf00      	nop
 800c516:	3718      	adds	r7, #24
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	24000d4c 	.word	0x24000d4c
 800c520:	24000d50 	.word	0x24000d50

0800c524 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c52a:	f000 f96b 	bl	800c804 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c52e:	4b15      	ldr	r3, [pc, #84]	; (800c584 <prvCheckForValidListAndQueue+0x60>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d120      	bne.n	800c578 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c536:	4814      	ldr	r0, [pc, #80]	; (800c588 <prvCheckForValidListAndQueue+0x64>)
 800c538:	f7fd ff52 	bl	800a3e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c53c:	4813      	ldr	r0, [pc, #76]	; (800c58c <prvCheckForValidListAndQueue+0x68>)
 800c53e:	f7fd ff4f 	bl	800a3e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c542:	4b13      	ldr	r3, [pc, #76]	; (800c590 <prvCheckForValidListAndQueue+0x6c>)
 800c544:	4a10      	ldr	r2, [pc, #64]	; (800c588 <prvCheckForValidListAndQueue+0x64>)
 800c546:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c548:	4b12      	ldr	r3, [pc, #72]	; (800c594 <prvCheckForValidListAndQueue+0x70>)
 800c54a:	4a10      	ldr	r2, [pc, #64]	; (800c58c <prvCheckForValidListAndQueue+0x68>)
 800c54c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c54e:	2300      	movs	r3, #0
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	4b11      	ldr	r3, [pc, #68]	; (800c598 <prvCheckForValidListAndQueue+0x74>)
 800c554:	4a11      	ldr	r2, [pc, #68]	; (800c59c <prvCheckForValidListAndQueue+0x78>)
 800c556:	2110      	movs	r1, #16
 800c558:	200a      	movs	r0, #10
 800c55a:	f7fe f85d 	bl	800a618 <xQueueGenericCreateStatic>
 800c55e:	4603      	mov	r3, r0
 800c560:	4a08      	ldr	r2, [pc, #32]	; (800c584 <prvCheckForValidListAndQueue+0x60>)
 800c562:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c564:	4b07      	ldr	r3, [pc, #28]	; (800c584 <prvCheckForValidListAndQueue+0x60>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d005      	beq.n	800c578 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c56c:	4b05      	ldr	r3, [pc, #20]	; (800c584 <prvCheckForValidListAndQueue+0x60>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	490b      	ldr	r1, [pc, #44]	; (800c5a0 <prvCheckForValidListAndQueue+0x7c>)
 800c572:	4618      	mov	r0, r3
 800c574:	f7fe fd30 	bl	800afd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c578:	f000 f974 	bl	800c864 <vPortExitCritical>
}
 800c57c:	bf00      	nop
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	24000d54 	.word	0x24000d54
 800c588:	24000d24 	.word	0x24000d24
 800c58c:	24000d38 	.word	0x24000d38
 800c590:	24000d4c 	.word	0x24000d4c
 800c594:	24000d50 	.word	0x24000d50
 800c598:	24000e00 	.word	0x24000e00
 800c59c:	24000d60 	.word	0x24000d60
 800c5a0:	0800d054 	.word	0x0800d054

0800c5a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	3b04      	subs	r3, #4
 800c5b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c5bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	3b04      	subs	r3, #4
 800c5c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	f023 0201 	bic.w	r2, r3, #1
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	3b04      	subs	r3, #4
 800c5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c5d4:	4a0c      	ldr	r2, [pc, #48]	; (800c608 <pxPortInitialiseStack+0x64>)
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	3b14      	subs	r3, #20
 800c5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	3b04      	subs	r3, #4
 800c5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f06f 0202 	mvn.w	r2, #2
 800c5f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	3b20      	subs	r3, #32
 800c5f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	0800c60d 	.word	0x0800c60d

0800c60c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c612:	2300      	movs	r3, #0
 800c614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c616:	4b12      	ldr	r3, [pc, #72]	; (800c660 <prvTaskExitError+0x54>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c61e:	d00a      	beq.n	800c636 <prvTaskExitError+0x2a>
	__asm volatile
 800c620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c624:	f383 8811 	msr	BASEPRI, r3
 800c628:	f3bf 8f6f 	isb	sy
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	60fb      	str	r3, [r7, #12]
}
 800c632:	bf00      	nop
 800c634:	e7fe      	b.n	800c634 <prvTaskExitError+0x28>
	__asm volatile
 800c636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63a:	f383 8811 	msr	BASEPRI, r3
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f3bf 8f4f 	dsb	sy
 800c646:	60bb      	str	r3, [r7, #8]
}
 800c648:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c64a:	bf00      	nop
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d0fc      	beq.n	800c64c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c652:	bf00      	nop
 800c654:	bf00      	nop
 800c656:	3714      	adds	r7, #20
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr
 800c660:	24000010 	.word	0x24000010
	...

0800c670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c670:	4b07      	ldr	r3, [pc, #28]	; (800c690 <pxCurrentTCBConst2>)
 800c672:	6819      	ldr	r1, [r3, #0]
 800c674:	6808      	ldr	r0, [r1, #0]
 800c676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67a:	f380 8809 	msr	PSP, r0
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f04f 0000 	mov.w	r0, #0
 800c686:	f380 8811 	msr	BASEPRI, r0
 800c68a:	4770      	bx	lr
 800c68c:	f3af 8000 	nop.w

0800c690 <pxCurrentTCBConst2>:
 800c690:	24000824 	.word	0x24000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c694:	bf00      	nop
 800c696:	bf00      	nop

0800c698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c698:	4808      	ldr	r0, [pc, #32]	; (800c6bc <prvPortStartFirstTask+0x24>)
 800c69a:	6800      	ldr	r0, [r0, #0]
 800c69c:	6800      	ldr	r0, [r0, #0]
 800c69e:	f380 8808 	msr	MSP, r0
 800c6a2:	f04f 0000 	mov.w	r0, #0
 800c6a6:	f380 8814 	msr	CONTROL, r0
 800c6aa:	b662      	cpsie	i
 800c6ac:	b661      	cpsie	f
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	df00      	svc	0
 800c6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c6ba:	bf00      	nop
 800c6bc:	e000ed08 	.word	0xe000ed08

0800c6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b086      	sub	sp, #24
 800c6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c6c6:	4b46      	ldr	r3, [pc, #280]	; (800c7e0 <xPortStartScheduler+0x120>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a46      	ldr	r2, [pc, #280]	; (800c7e4 <xPortStartScheduler+0x124>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d10a      	bne.n	800c6e6 <xPortStartScheduler+0x26>
	__asm volatile
 800c6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	613b      	str	r3, [r7, #16]
}
 800c6e2:	bf00      	nop
 800c6e4:	e7fe      	b.n	800c6e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c6e6:	4b3e      	ldr	r3, [pc, #248]	; (800c7e0 <xPortStartScheduler+0x120>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a3f      	ldr	r2, [pc, #252]	; (800c7e8 <xPortStartScheduler+0x128>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d10a      	bne.n	800c706 <xPortStartScheduler+0x46>
	__asm volatile
 800c6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f4:	f383 8811 	msr	BASEPRI, r3
 800c6f8:	f3bf 8f6f 	isb	sy
 800c6fc:	f3bf 8f4f 	dsb	sy
 800c700:	60fb      	str	r3, [r7, #12]
}
 800c702:	bf00      	nop
 800c704:	e7fe      	b.n	800c704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c706:	4b39      	ldr	r3, [pc, #228]	; (800c7ec <xPortStartScheduler+0x12c>)
 800c708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	22ff      	movs	r2, #255	; 0xff
 800c716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	b2db      	uxtb	r3, r3
 800c724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c728:	b2da      	uxtb	r2, r3
 800c72a:	4b31      	ldr	r3, [pc, #196]	; (800c7f0 <xPortStartScheduler+0x130>)
 800c72c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c72e:	4b31      	ldr	r3, [pc, #196]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c730:	2207      	movs	r2, #7
 800c732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c734:	e009      	b.n	800c74a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c736:	4b2f      	ldr	r3, [pc, #188]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	3b01      	subs	r3, #1
 800c73c:	4a2d      	ldr	r2, [pc, #180]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c73e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c740:	78fb      	ldrb	r3, [r7, #3]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	b2db      	uxtb	r3, r3
 800c748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c74a:	78fb      	ldrb	r3, [r7, #3]
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c752:	2b80      	cmp	r3, #128	; 0x80
 800c754:	d0ef      	beq.n	800c736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c756:	4b27      	ldr	r3, [pc, #156]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f1c3 0307 	rsb	r3, r3, #7
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d00a      	beq.n	800c778 <xPortStartScheduler+0xb8>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	60bb      	str	r3, [r7, #8]
}
 800c774:	bf00      	nop
 800c776:	e7fe      	b.n	800c776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c778:	4b1e      	ldr	r3, [pc, #120]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	021b      	lsls	r3, r3, #8
 800c77e:	4a1d      	ldr	r2, [pc, #116]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c782:	4b1c      	ldr	r3, [pc, #112]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c78a:	4a1a      	ldr	r2, [pc, #104]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c78c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	b2da      	uxtb	r2, r3
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c796:	4b18      	ldr	r3, [pc, #96]	; (800c7f8 <xPortStartScheduler+0x138>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a17      	ldr	r2, [pc, #92]	; (800c7f8 <xPortStartScheduler+0x138>)
 800c79c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c7a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c7a2:	4b15      	ldr	r3, [pc, #84]	; (800c7f8 <xPortStartScheduler+0x138>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a14      	ldr	r2, [pc, #80]	; (800c7f8 <xPortStartScheduler+0x138>)
 800c7a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c7ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c7ae:	f000 f8dd 	bl	800c96c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c7b2:	4b12      	ldr	r3, [pc, #72]	; (800c7fc <xPortStartScheduler+0x13c>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c7b8:	f000 f8fc 	bl	800c9b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c7bc:	4b10      	ldr	r3, [pc, #64]	; (800c800 <xPortStartScheduler+0x140>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a0f      	ldr	r2, [pc, #60]	; (800c800 <xPortStartScheduler+0x140>)
 800c7c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c7c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c7c8:	f7ff ff66 	bl	800c698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c7cc:	f7ff f846 	bl	800b85c <vTaskSwitchContext>
	prvTaskExitError();
 800c7d0:	f7ff ff1c 	bl	800c60c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3718      	adds	r7, #24
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	e000ed00 	.word	0xe000ed00
 800c7e4:	410fc271 	.word	0x410fc271
 800c7e8:	410fc270 	.word	0x410fc270
 800c7ec:	e000e400 	.word	0xe000e400
 800c7f0:	24000e50 	.word	0x24000e50
 800c7f4:	24000e54 	.word	0x24000e54
 800c7f8:	e000ed20 	.word	0xe000ed20
 800c7fc:	24000010 	.word	0x24000010
 800c800:	e000ef34 	.word	0xe000ef34

0800c804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
	__asm volatile
 800c80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	607b      	str	r3, [r7, #4]
}
 800c81c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c81e:	4b0f      	ldr	r3, [pc, #60]	; (800c85c <vPortEnterCritical+0x58>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	3301      	adds	r3, #1
 800c824:	4a0d      	ldr	r2, [pc, #52]	; (800c85c <vPortEnterCritical+0x58>)
 800c826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c828:	4b0c      	ldr	r3, [pc, #48]	; (800c85c <vPortEnterCritical+0x58>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d10f      	bne.n	800c850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c830:	4b0b      	ldr	r3, [pc, #44]	; (800c860 <vPortEnterCritical+0x5c>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	b2db      	uxtb	r3, r3
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00a      	beq.n	800c850 <vPortEnterCritical+0x4c>
	__asm volatile
 800c83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83e:	f383 8811 	msr	BASEPRI, r3
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	603b      	str	r3, [r7, #0]
}
 800c84c:	bf00      	nop
 800c84e:	e7fe      	b.n	800c84e <vPortEnterCritical+0x4a>
	}
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	24000010 	.word	0x24000010
 800c860:	e000ed04 	.word	0xe000ed04

0800c864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c86a:	4b12      	ldr	r3, [pc, #72]	; (800c8b4 <vPortExitCritical+0x50>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d10a      	bne.n	800c888 <vPortExitCritical+0x24>
	__asm volatile
 800c872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c876:	f383 8811 	msr	BASEPRI, r3
 800c87a:	f3bf 8f6f 	isb	sy
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	607b      	str	r3, [r7, #4]
}
 800c884:	bf00      	nop
 800c886:	e7fe      	b.n	800c886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c888:	4b0a      	ldr	r3, [pc, #40]	; (800c8b4 <vPortExitCritical+0x50>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	3b01      	subs	r3, #1
 800c88e:	4a09      	ldr	r2, [pc, #36]	; (800c8b4 <vPortExitCritical+0x50>)
 800c890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c892:	4b08      	ldr	r3, [pc, #32]	; (800c8b4 <vPortExitCritical+0x50>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d105      	bne.n	800c8a6 <vPortExitCritical+0x42>
 800c89a:	2300      	movs	r3, #0
 800c89c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	f383 8811 	msr	BASEPRI, r3
}
 800c8a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c8a6:	bf00      	nop
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	24000010 	.word	0x24000010
	...

0800c8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c8c0:	f3ef 8009 	mrs	r0, PSP
 800c8c4:	f3bf 8f6f 	isb	sy
 800c8c8:	4b15      	ldr	r3, [pc, #84]	; (800c920 <pxCurrentTCBConst>)
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	f01e 0f10 	tst.w	lr, #16
 800c8d0:	bf08      	it	eq
 800c8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8da:	6010      	str	r0, [r2, #0]
 800c8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c8e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c8e4:	f380 8811 	msr	BASEPRI, r0
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f7fe ffb4 	bl	800b85c <vTaskSwitchContext>
 800c8f4:	f04f 0000 	mov.w	r0, #0
 800c8f8:	f380 8811 	msr	BASEPRI, r0
 800c8fc:	bc09      	pop	{r0, r3}
 800c8fe:	6819      	ldr	r1, [r3, #0]
 800c900:	6808      	ldr	r0, [r1, #0]
 800c902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c906:	f01e 0f10 	tst.w	lr, #16
 800c90a:	bf08      	it	eq
 800c90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c910:	f380 8809 	msr	PSP, r0
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	f3af 8000 	nop.w

0800c920 <pxCurrentTCBConst>:
 800c920:	24000824 	.word	0x24000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop

0800c928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	607b      	str	r3, [r7, #4]
}
 800c940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c942:	f7fe fed1 	bl	800b6e8 <xTaskIncrementTick>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d003      	beq.n	800c954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c94c:	4b06      	ldr	r3, [pc, #24]	; (800c968 <xPortSysTickHandler+0x40>)
 800c94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	2300      	movs	r3, #0
 800c956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	f383 8811 	msr	BASEPRI, r3
}
 800c95e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c960:	bf00      	nop
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	e000ed04 	.word	0xe000ed04

0800c96c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c96c:	b480      	push	{r7}
 800c96e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c970:	4b0b      	ldr	r3, [pc, #44]	; (800c9a0 <vPortSetupTimerInterrupt+0x34>)
 800c972:	2200      	movs	r2, #0
 800c974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c976:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <vPortSetupTimerInterrupt+0x38>)
 800c978:	2200      	movs	r2, #0
 800c97a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c97c:	4b0a      	ldr	r3, [pc, #40]	; (800c9a8 <vPortSetupTimerInterrupt+0x3c>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a0a      	ldr	r2, [pc, #40]	; (800c9ac <vPortSetupTimerInterrupt+0x40>)
 800c982:	fba2 2303 	umull	r2, r3, r2, r3
 800c986:	099b      	lsrs	r3, r3, #6
 800c988:	4a09      	ldr	r2, [pc, #36]	; (800c9b0 <vPortSetupTimerInterrupt+0x44>)
 800c98a:	3b01      	subs	r3, #1
 800c98c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c98e:	4b04      	ldr	r3, [pc, #16]	; (800c9a0 <vPortSetupTimerInterrupt+0x34>)
 800c990:	2207      	movs	r2, #7
 800c992:	601a      	str	r2, [r3, #0]
}
 800c994:	bf00      	nop
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop
 800c9a0:	e000e010 	.word	0xe000e010
 800c9a4:	e000e018 	.word	0xe000e018
 800c9a8:	24000000 	.word	0x24000000
 800c9ac:	10624dd3 	.word	0x10624dd3
 800c9b0:	e000e014 	.word	0xe000e014

0800c9b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c9b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c9c4 <vPortEnableVFP+0x10>
 800c9b8:	6801      	ldr	r1, [r0, #0]
 800c9ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c9be:	6001      	str	r1, [r0, #0]
 800c9c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c9c2:	bf00      	nop
 800c9c4:	e000ed88 	.word	0xe000ed88

0800c9c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c9ce:	f3ef 8305 	mrs	r3, IPSR
 800c9d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2b0f      	cmp	r3, #15
 800c9d8:	d914      	bls.n	800ca04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c9da:	4a17      	ldr	r2, [pc, #92]	; (800ca38 <vPortValidateInterruptPriority+0x70>)
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	4413      	add	r3, r2
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c9e4:	4b15      	ldr	r3, [pc, #84]	; (800ca3c <vPortValidateInterruptPriority+0x74>)
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	7afa      	ldrb	r2, [r7, #11]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d20a      	bcs.n	800ca04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	607b      	str	r3, [r7, #4]
}
 800ca00:	bf00      	nop
 800ca02:	e7fe      	b.n	800ca02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca04:	4b0e      	ldr	r3, [pc, #56]	; (800ca40 <vPortValidateInterruptPriority+0x78>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca0c:	4b0d      	ldr	r3, [pc, #52]	; (800ca44 <vPortValidateInterruptPriority+0x7c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d90a      	bls.n	800ca2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	603b      	str	r3, [r7, #0]
}
 800ca26:	bf00      	nop
 800ca28:	e7fe      	b.n	800ca28 <vPortValidateInterruptPriority+0x60>
	}
 800ca2a:	bf00      	nop
 800ca2c:	3714      	adds	r7, #20
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	e000e3f0 	.word	0xe000e3f0
 800ca3c:	24000e50 	.word	0x24000e50
 800ca40:	e000ed0c 	.word	0xe000ed0c
 800ca44:	24000e54 	.word	0x24000e54

0800ca48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b08a      	sub	sp, #40	; 0x28
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca50:	2300      	movs	r3, #0
 800ca52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca54:	f7fe fd7a 	bl	800b54c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca58:	4b5b      	ldr	r3, [pc, #364]	; (800cbc8 <pvPortMalloc+0x180>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d101      	bne.n	800ca64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca60:	f000 f920 	bl	800cca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca64:	4b59      	ldr	r3, [pc, #356]	; (800cbcc <pvPortMalloc+0x184>)
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f040 8093 	bne.w	800cb98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d01d      	beq.n	800cab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ca78:	2208      	movs	r2, #8
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f003 0307 	and.w	r3, r3, #7
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d014      	beq.n	800cab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f023 0307 	bic.w	r3, r3, #7
 800ca90:	3308      	adds	r3, #8
 800ca92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f003 0307 	and.w	r3, r3, #7
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00a      	beq.n	800cab4 <pvPortMalloc+0x6c>
	__asm volatile
 800ca9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa2:	f383 8811 	msr	BASEPRI, r3
 800caa6:	f3bf 8f6f 	isb	sy
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	617b      	str	r3, [r7, #20]
}
 800cab0:	bf00      	nop
 800cab2:	e7fe      	b.n	800cab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d06e      	beq.n	800cb98 <pvPortMalloc+0x150>
 800caba:	4b45      	ldr	r3, [pc, #276]	; (800cbd0 <pvPortMalloc+0x188>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d869      	bhi.n	800cb98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cac4:	4b43      	ldr	r3, [pc, #268]	; (800cbd4 <pvPortMalloc+0x18c>)
 800cac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cac8:	4b42      	ldr	r3, [pc, #264]	; (800cbd4 <pvPortMalloc+0x18c>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cace:	e004      	b.n	800cada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d903      	bls.n	800caec <pvPortMalloc+0xa4>
 800cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1f1      	bne.n	800cad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800caec:	4b36      	ldr	r3, [pc, #216]	; (800cbc8 <pvPortMalloc+0x180>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d050      	beq.n	800cb98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800caf6:	6a3b      	ldr	r3, [r7, #32]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2208      	movs	r2, #8
 800cafc:	4413      	add	r3, r2
 800cafe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	6a3b      	ldr	r3, [r7, #32]
 800cb06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	1ad2      	subs	r2, r2, r3
 800cb10:	2308      	movs	r3, #8
 800cb12:	005b      	lsls	r3, r3, #1
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d91f      	bls.n	800cb58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	f003 0307 	and.w	r3, r3, #7
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00a      	beq.n	800cb40 <pvPortMalloc+0xf8>
	__asm volatile
 800cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
 800cb3a:	613b      	str	r3, [r7, #16]
}
 800cb3c:	bf00      	nop
 800cb3e:	e7fe      	b.n	800cb3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	685a      	ldr	r2, [r3, #4]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	1ad2      	subs	r2, r2, r3
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb52:	69b8      	ldr	r0, [r7, #24]
 800cb54:	f000 f908 	bl	800cd68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb58:	4b1d      	ldr	r3, [pc, #116]	; (800cbd0 <pvPortMalloc+0x188>)
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	4a1b      	ldr	r2, [pc, #108]	; (800cbd0 <pvPortMalloc+0x188>)
 800cb64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb66:	4b1a      	ldr	r3, [pc, #104]	; (800cbd0 <pvPortMalloc+0x188>)
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	4b1b      	ldr	r3, [pc, #108]	; (800cbd8 <pvPortMalloc+0x190>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d203      	bcs.n	800cb7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb72:	4b17      	ldr	r3, [pc, #92]	; (800cbd0 <pvPortMalloc+0x188>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a18      	ldr	r2, [pc, #96]	; (800cbd8 <pvPortMalloc+0x190>)
 800cb78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	685a      	ldr	r2, [r3, #4]
 800cb7e:	4b13      	ldr	r3, [pc, #76]	; (800cbcc <pvPortMalloc+0x184>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	431a      	orrs	r2, r3
 800cb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb8e:	4b13      	ldr	r3, [pc, #76]	; (800cbdc <pvPortMalloc+0x194>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	3301      	adds	r3, #1
 800cb94:	4a11      	ldr	r2, [pc, #68]	; (800cbdc <pvPortMalloc+0x194>)
 800cb96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb98:	f7fe fce6 	bl	800b568 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	f003 0307 	and.w	r3, r3, #7
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00a      	beq.n	800cbbc <pvPortMalloc+0x174>
	__asm volatile
 800cba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbaa:	f383 8811 	msr	BASEPRI, r3
 800cbae:	f3bf 8f6f 	isb	sy
 800cbb2:	f3bf 8f4f 	dsb	sy
 800cbb6:	60fb      	str	r3, [r7, #12]
}
 800cbb8:	bf00      	nop
 800cbba:	e7fe      	b.n	800cbba <pvPortMalloc+0x172>
	return pvReturn;
 800cbbc:	69fb      	ldr	r3, [r7, #28]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3728      	adds	r7, #40	; 0x28
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	24004a60 	.word	0x24004a60
 800cbcc:	24004a74 	.word	0x24004a74
 800cbd0:	24004a64 	.word	0x24004a64
 800cbd4:	24004a58 	.word	0x24004a58
 800cbd8:	24004a68 	.word	0x24004a68
 800cbdc:	24004a6c 	.word	0x24004a6c

0800cbe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d04d      	beq.n	800cc8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbf2:	2308      	movs	r3, #8
 800cbf4:	425b      	negs	r3, r3
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	685a      	ldr	r2, [r3, #4]
 800cc04:	4b24      	ldr	r3, [pc, #144]	; (800cc98 <vPortFree+0xb8>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4013      	ands	r3, r2
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d10a      	bne.n	800cc24 <vPortFree+0x44>
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc12:	f383 8811 	msr	BASEPRI, r3
 800cc16:	f3bf 8f6f 	isb	sy
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	60fb      	str	r3, [r7, #12]
}
 800cc20:	bf00      	nop
 800cc22:	e7fe      	b.n	800cc22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00a      	beq.n	800cc42 <vPortFree+0x62>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	60bb      	str	r3, [r7, #8]
}
 800cc3e:	bf00      	nop
 800cc40:	e7fe      	b.n	800cc40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	685a      	ldr	r2, [r3, #4]
 800cc46:	4b14      	ldr	r3, [pc, #80]	; (800cc98 <vPortFree+0xb8>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4013      	ands	r3, r2
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d01e      	beq.n	800cc8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d11a      	bne.n	800cc8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	685a      	ldr	r2, [r3, #4]
 800cc5c:	4b0e      	ldr	r3, [pc, #56]	; (800cc98 <vPortFree+0xb8>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	43db      	mvns	r3, r3
 800cc62:	401a      	ands	r2, r3
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc68:	f7fe fc70 	bl	800b54c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	685a      	ldr	r2, [r3, #4]
 800cc70:	4b0a      	ldr	r3, [pc, #40]	; (800cc9c <vPortFree+0xbc>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4413      	add	r3, r2
 800cc76:	4a09      	ldr	r2, [pc, #36]	; (800cc9c <vPortFree+0xbc>)
 800cc78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc7a:	6938      	ldr	r0, [r7, #16]
 800cc7c:	f000 f874 	bl	800cd68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc80:	4b07      	ldr	r3, [pc, #28]	; (800cca0 <vPortFree+0xc0>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	3301      	adds	r3, #1
 800cc86:	4a06      	ldr	r2, [pc, #24]	; (800cca0 <vPortFree+0xc0>)
 800cc88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc8a:	f7fe fc6d 	bl	800b568 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc8e:	bf00      	nop
 800cc90:	3718      	adds	r7, #24
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	24004a74 	.word	0x24004a74
 800cc9c:	24004a64 	.word	0x24004a64
 800cca0:	24004a70 	.word	0x24004a70

0800cca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ccaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ccae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ccb0:	4b27      	ldr	r3, [pc, #156]	; (800cd50 <prvHeapInit+0xac>)
 800ccb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f003 0307 	and.w	r3, r3, #7
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00c      	beq.n	800ccd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	3307      	adds	r3, #7
 800ccc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f023 0307 	bic.w	r3, r3, #7
 800ccca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cccc:	68ba      	ldr	r2, [r7, #8]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	4a1f      	ldr	r2, [pc, #124]	; (800cd50 <prvHeapInit+0xac>)
 800ccd4:	4413      	add	r3, r2
 800ccd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ccdc:	4a1d      	ldr	r2, [pc, #116]	; (800cd54 <prvHeapInit+0xb0>)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cce2:	4b1c      	ldr	r3, [pc, #112]	; (800cd54 <prvHeapInit+0xb0>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	68ba      	ldr	r2, [r7, #8]
 800ccec:	4413      	add	r3, r2
 800ccee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ccf0:	2208      	movs	r2, #8
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	1a9b      	subs	r3, r3, r2
 800ccf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f023 0307 	bic.w	r3, r3, #7
 800ccfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	4a15      	ldr	r2, [pc, #84]	; (800cd58 <prvHeapInit+0xb4>)
 800cd04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd06:	4b14      	ldr	r3, [pc, #80]	; (800cd58 <prvHeapInit+0xb4>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd0e:	4b12      	ldr	r3, [pc, #72]	; (800cd58 <prvHeapInit+0xb4>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2200      	movs	r2, #0
 800cd14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	1ad2      	subs	r2, r2, r3
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd24:	4b0c      	ldr	r3, [pc, #48]	; (800cd58 <prvHeapInit+0xb4>)
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	4a0a      	ldr	r2, [pc, #40]	; (800cd5c <prvHeapInit+0xb8>)
 800cd32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	4a09      	ldr	r2, [pc, #36]	; (800cd60 <prvHeapInit+0xbc>)
 800cd3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd3c:	4b09      	ldr	r3, [pc, #36]	; (800cd64 <prvHeapInit+0xc0>)
 800cd3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd42:	601a      	str	r2, [r3, #0]
}
 800cd44:	bf00      	nop
 800cd46:	3714      	adds	r7, #20
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr
 800cd50:	24000e58 	.word	0x24000e58
 800cd54:	24004a58 	.word	0x24004a58
 800cd58:	24004a60 	.word	0x24004a60
 800cd5c:	24004a68 	.word	0x24004a68
 800cd60:	24004a64 	.word	0x24004a64
 800cd64:	24004a74 	.word	0x24004a74

0800cd68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd70:	4b28      	ldr	r3, [pc, #160]	; (800ce14 <prvInsertBlockIntoFreeList+0xac>)
 800cd72:	60fb      	str	r3, [r7, #12]
 800cd74:	e002      	b.n	800cd7c <prvInsertBlockIntoFreeList+0x14>
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	60fb      	str	r3, [r7, #12]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d8f7      	bhi.n	800cd76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	68ba      	ldr	r2, [r7, #8]
 800cd90:	4413      	add	r3, r2
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d108      	bne.n	800cdaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	441a      	add	r2, r3
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	441a      	add	r2, r3
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d118      	bne.n	800cdf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	4b15      	ldr	r3, [pc, #84]	; (800ce18 <prvInsertBlockIntoFreeList+0xb0>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d00d      	beq.n	800cde6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	685a      	ldr	r2, [r3, #4]
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	441a      	add	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	601a      	str	r2, [r3, #0]
 800cde4:	e008      	b.n	800cdf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cde6:	4b0c      	ldr	r3, [pc, #48]	; (800ce18 <prvInsertBlockIntoFreeList+0xb0>)
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	601a      	str	r2, [r3, #0]
 800cdee:	e003      	b.n	800cdf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d002      	beq.n	800ce06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce06:	bf00      	nop
 800ce08:	3714      	adds	r7, #20
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	24004a58 	.word	0x24004a58
 800ce18:	24004a60 	.word	0x24004a60

0800ce1c <__libc_init_array>:
 800ce1c:	b570      	push	{r4, r5, r6, lr}
 800ce1e:	4d0d      	ldr	r5, [pc, #52]	; (800ce54 <__libc_init_array+0x38>)
 800ce20:	4c0d      	ldr	r4, [pc, #52]	; (800ce58 <__libc_init_array+0x3c>)
 800ce22:	1b64      	subs	r4, r4, r5
 800ce24:	10a4      	asrs	r4, r4, #2
 800ce26:	2600      	movs	r6, #0
 800ce28:	42a6      	cmp	r6, r4
 800ce2a:	d109      	bne.n	800ce40 <__libc_init_array+0x24>
 800ce2c:	4d0b      	ldr	r5, [pc, #44]	; (800ce5c <__libc_init_array+0x40>)
 800ce2e:	4c0c      	ldr	r4, [pc, #48]	; (800ce60 <__libc_init_array+0x44>)
 800ce30:	f000 f8f6 	bl	800d020 <_init>
 800ce34:	1b64      	subs	r4, r4, r5
 800ce36:	10a4      	asrs	r4, r4, #2
 800ce38:	2600      	movs	r6, #0
 800ce3a:	42a6      	cmp	r6, r4
 800ce3c:	d105      	bne.n	800ce4a <__libc_init_array+0x2e>
 800ce3e:	bd70      	pop	{r4, r5, r6, pc}
 800ce40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce44:	4798      	blx	r3
 800ce46:	3601      	adds	r6, #1
 800ce48:	e7ee      	b.n	800ce28 <__libc_init_array+0xc>
 800ce4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce4e:	4798      	blx	r3
 800ce50:	3601      	adds	r6, #1
 800ce52:	e7f2      	b.n	800ce3a <__libc_init_array+0x1e>
 800ce54:	0800d13c 	.word	0x0800d13c
 800ce58:	0800d13c 	.word	0x0800d13c
 800ce5c:	0800d13c 	.word	0x0800d13c
 800ce60:	0800d140 	.word	0x0800d140

0800ce64 <__retarget_lock_acquire_recursive>:
 800ce64:	4770      	bx	lr

0800ce66 <__retarget_lock_release_recursive>:
 800ce66:	4770      	bx	lr

0800ce68 <memcpy>:
 800ce68:	440a      	add	r2, r1
 800ce6a:	4291      	cmp	r1, r2
 800ce6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce70:	d100      	bne.n	800ce74 <memcpy+0xc>
 800ce72:	4770      	bx	lr
 800ce74:	b510      	push	{r4, lr}
 800ce76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce7e:	4291      	cmp	r1, r2
 800ce80:	d1f9      	bne.n	800ce76 <memcpy+0xe>
 800ce82:	bd10      	pop	{r4, pc}

0800ce84 <memset>:
 800ce84:	4402      	add	r2, r0
 800ce86:	4603      	mov	r3, r0
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d100      	bne.n	800ce8e <memset+0xa>
 800ce8c:	4770      	bx	lr
 800ce8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ce92:	e7f9      	b.n	800ce88 <memset+0x4>

0800ce94 <cleanup_glue>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	460c      	mov	r4, r1
 800ce98:	6809      	ldr	r1, [r1, #0]
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	b109      	cbz	r1, 800cea2 <cleanup_glue+0xe>
 800ce9e:	f7ff fff9 	bl	800ce94 <cleanup_glue>
 800cea2:	4621      	mov	r1, r4
 800cea4:	4628      	mov	r0, r5
 800cea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceaa:	f000 b869 	b.w	800cf80 <_free_r>
	...

0800ceb0 <_reclaim_reent>:
 800ceb0:	4b2c      	ldr	r3, [pc, #176]	; (800cf64 <_reclaim_reent+0xb4>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4283      	cmp	r3, r0
 800ceb6:	b570      	push	{r4, r5, r6, lr}
 800ceb8:	4604      	mov	r4, r0
 800ceba:	d051      	beq.n	800cf60 <_reclaim_reent+0xb0>
 800cebc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cebe:	b143      	cbz	r3, 800ced2 <_reclaim_reent+0x22>
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d14a      	bne.n	800cf5c <_reclaim_reent+0xac>
 800cec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cec8:	6819      	ldr	r1, [r3, #0]
 800ceca:	b111      	cbz	r1, 800ced2 <_reclaim_reent+0x22>
 800cecc:	4620      	mov	r0, r4
 800cece:	f000 f857 	bl	800cf80 <_free_r>
 800ced2:	6961      	ldr	r1, [r4, #20]
 800ced4:	b111      	cbz	r1, 800cedc <_reclaim_reent+0x2c>
 800ced6:	4620      	mov	r0, r4
 800ced8:	f000 f852 	bl	800cf80 <_free_r>
 800cedc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cede:	b111      	cbz	r1, 800cee6 <_reclaim_reent+0x36>
 800cee0:	4620      	mov	r0, r4
 800cee2:	f000 f84d 	bl	800cf80 <_free_r>
 800cee6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cee8:	b111      	cbz	r1, 800cef0 <_reclaim_reent+0x40>
 800ceea:	4620      	mov	r0, r4
 800ceec:	f000 f848 	bl	800cf80 <_free_r>
 800cef0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cef2:	b111      	cbz	r1, 800cefa <_reclaim_reent+0x4a>
 800cef4:	4620      	mov	r0, r4
 800cef6:	f000 f843 	bl	800cf80 <_free_r>
 800cefa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cefc:	b111      	cbz	r1, 800cf04 <_reclaim_reent+0x54>
 800cefe:	4620      	mov	r0, r4
 800cf00:	f000 f83e 	bl	800cf80 <_free_r>
 800cf04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cf06:	b111      	cbz	r1, 800cf0e <_reclaim_reent+0x5e>
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f000 f839 	bl	800cf80 <_free_r>
 800cf0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cf10:	b111      	cbz	r1, 800cf18 <_reclaim_reent+0x68>
 800cf12:	4620      	mov	r0, r4
 800cf14:	f000 f834 	bl	800cf80 <_free_r>
 800cf18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf1a:	b111      	cbz	r1, 800cf22 <_reclaim_reent+0x72>
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	f000 f82f 	bl	800cf80 <_free_r>
 800cf22:	69a3      	ldr	r3, [r4, #24]
 800cf24:	b1e3      	cbz	r3, 800cf60 <_reclaim_reent+0xb0>
 800cf26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf28:	4620      	mov	r0, r4
 800cf2a:	4798      	blx	r3
 800cf2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cf2e:	b1b9      	cbz	r1, 800cf60 <_reclaim_reent+0xb0>
 800cf30:	4620      	mov	r0, r4
 800cf32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf36:	f7ff bfad 	b.w	800ce94 <cleanup_glue>
 800cf3a:	5949      	ldr	r1, [r1, r5]
 800cf3c:	b941      	cbnz	r1, 800cf50 <_reclaim_reent+0xa0>
 800cf3e:	3504      	adds	r5, #4
 800cf40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf42:	2d80      	cmp	r5, #128	; 0x80
 800cf44:	68d9      	ldr	r1, [r3, #12]
 800cf46:	d1f8      	bne.n	800cf3a <_reclaim_reent+0x8a>
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f000 f819 	bl	800cf80 <_free_r>
 800cf4e:	e7ba      	b.n	800cec6 <_reclaim_reent+0x16>
 800cf50:	680e      	ldr	r6, [r1, #0]
 800cf52:	4620      	mov	r0, r4
 800cf54:	f000 f814 	bl	800cf80 <_free_r>
 800cf58:	4631      	mov	r1, r6
 800cf5a:	e7ef      	b.n	800cf3c <_reclaim_reent+0x8c>
 800cf5c:	2500      	movs	r5, #0
 800cf5e:	e7ef      	b.n	800cf40 <_reclaim_reent+0x90>
 800cf60:	bd70      	pop	{r4, r5, r6, pc}
 800cf62:	bf00      	nop
 800cf64:	24000014 	.word	0x24000014

0800cf68 <__malloc_lock>:
 800cf68:	4801      	ldr	r0, [pc, #4]	; (800cf70 <__malloc_lock+0x8>)
 800cf6a:	f7ff bf7b 	b.w	800ce64 <__retarget_lock_acquire_recursive>
 800cf6e:	bf00      	nop
 800cf70:	24005234 	.word	0x24005234

0800cf74 <__malloc_unlock>:
 800cf74:	4801      	ldr	r0, [pc, #4]	; (800cf7c <__malloc_unlock+0x8>)
 800cf76:	f7ff bf76 	b.w	800ce66 <__retarget_lock_release_recursive>
 800cf7a:	bf00      	nop
 800cf7c:	24005234 	.word	0x24005234

0800cf80 <_free_r>:
 800cf80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf82:	2900      	cmp	r1, #0
 800cf84:	d048      	beq.n	800d018 <_free_r+0x98>
 800cf86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf8a:	9001      	str	r0, [sp, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f1a1 0404 	sub.w	r4, r1, #4
 800cf92:	bfb8      	it	lt
 800cf94:	18e4      	addlt	r4, r4, r3
 800cf96:	f7ff ffe7 	bl	800cf68 <__malloc_lock>
 800cf9a:	4a20      	ldr	r2, [pc, #128]	; (800d01c <_free_r+0x9c>)
 800cf9c:	9801      	ldr	r0, [sp, #4]
 800cf9e:	6813      	ldr	r3, [r2, #0]
 800cfa0:	4615      	mov	r5, r2
 800cfa2:	b933      	cbnz	r3, 800cfb2 <_free_r+0x32>
 800cfa4:	6063      	str	r3, [r4, #4]
 800cfa6:	6014      	str	r4, [r2, #0]
 800cfa8:	b003      	add	sp, #12
 800cfaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfae:	f7ff bfe1 	b.w	800cf74 <__malloc_unlock>
 800cfb2:	42a3      	cmp	r3, r4
 800cfb4:	d90b      	bls.n	800cfce <_free_r+0x4e>
 800cfb6:	6821      	ldr	r1, [r4, #0]
 800cfb8:	1862      	adds	r2, r4, r1
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	bf04      	itt	eq
 800cfbe:	681a      	ldreq	r2, [r3, #0]
 800cfc0:	685b      	ldreq	r3, [r3, #4]
 800cfc2:	6063      	str	r3, [r4, #4]
 800cfc4:	bf04      	itt	eq
 800cfc6:	1852      	addeq	r2, r2, r1
 800cfc8:	6022      	streq	r2, [r4, #0]
 800cfca:	602c      	str	r4, [r5, #0]
 800cfcc:	e7ec      	b.n	800cfa8 <_free_r+0x28>
 800cfce:	461a      	mov	r2, r3
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	b10b      	cbz	r3, 800cfd8 <_free_r+0x58>
 800cfd4:	42a3      	cmp	r3, r4
 800cfd6:	d9fa      	bls.n	800cfce <_free_r+0x4e>
 800cfd8:	6811      	ldr	r1, [r2, #0]
 800cfda:	1855      	adds	r5, r2, r1
 800cfdc:	42a5      	cmp	r5, r4
 800cfde:	d10b      	bne.n	800cff8 <_free_r+0x78>
 800cfe0:	6824      	ldr	r4, [r4, #0]
 800cfe2:	4421      	add	r1, r4
 800cfe4:	1854      	adds	r4, r2, r1
 800cfe6:	42a3      	cmp	r3, r4
 800cfe8:	6011      	str	r1, [r2, #0]
 800cfea:	d1dd      	bne.n	800cfa8 <_free_r+0x28>
 800cfec:	681c      	ldr	r4, [r3, #0]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	6053      	str	r3, [r2, #4]
 800cff2:	4421      	add	r1, r4
 800cff4:	6011      	str	r1, [r2, #0]
 800cff6:	e7d7      	b.n	800cfa8 <_free_r+0x28>
 800cff8:	d902      	bls.n	800d000 <_free_r+0x80>
 800cffa:	230c      	movs	r3, #12
 800cffc:	6003      	str	r3, [r0, #0]
 800cffe:	e7d3      	b.n	800cfa8 <_free_r+0x28>
 800d000:	6825      	ldr	r5, [r4, #0]
 800d002:	1961      	adds	r1, r4, r5
 800d004:	428b      	cmp	r3, r1
 800d006:	bf04      	itt	eq
 800d008:	6819      	ldreq	r1, [r3, #0]
 800d00a:	685b      	ldreq	r3, [r3, #4]
 800d00c:	6063      	str	r3, [r4, #4]
 800d00e:	bf04      	itt	eq
 800d010:	1949      	addeq	r1, r1, r5
 800d012:	6021      	streq	r1, [r4, #0]
 800d014:	6054      	str	r4, [r2, #4]
 800d016:	e7c7      	b.n	800cfa8 <_free_r+0x28>
 800d018:	b003      	add	sp, #12
 800d01a:	bd30      	pop	{r4, r5, pc}
 800d01c:	24004a78 	.word	0x24004a78

0800d020 <_init>:
 800d020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d022:	bf00      	nop
 800d024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d026:	bc08      	pop	{r3}
 800d028:	469e      	mov	lr, r3
 800d02a:	4770      	bx	lr

0800d02c <_fini>:
 800d02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02e:	bf00      	nop
 800d030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d032:	bc08      	pop	{r3}
 800d034:	469e      	mov	lr, r3
 800d036:	4770      	bx	lr
