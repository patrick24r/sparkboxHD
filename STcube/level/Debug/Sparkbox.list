
Sparkbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfb0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800e250  0800e250  0001e250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e384  0800e384  0001e384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800e38c  0800e38c  0001e38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e394  0800e394  0001e394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005164  24000078  0800e410  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240051dc  0800e410  000251dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0007b291  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a22f  00000000  00000000  0009b337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b60  00000000  00000000  000a5568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002848  00000000  00000000  000a80c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046655  00000000  00000000  000aa910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ced6  00000000  00000000  000f0f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019c138  00000000  00000000  0012de3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002c9f73  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bb48  00000000  00000000  002c9fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e238 	.word	0x0800e238

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800e238 	.word	0x0800e238

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_ZN8SparkboxC1Ev>:
#include "Sparkbox.h"

Sparkbox::Sparkbox()
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
{
	audio = new SparkboxAudioManager();
 80005e0:	2060      	movs	r0, #96	; 0x60
 80005e2:	f00d fca5 	bl	800df30 <_Znwj>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461c      	mov	r4, r3
 80005ea:	4620      	mov	r0, r4
 80005ec:	f000 f888 	bl	8000700 <_ZN20SparkboxAudioManagerC1Ev>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	601c      	str	r4, [r3, #0]
}
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000624:	d205      	bcs.n	8000632 <_ZSt16__deque_buf_sizej+0x1c>
 8000626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000630:	e000      	b.n	8000634 <_ZSt16__deque_buf_sizej+0x1e>
 8000632:	2301      	movs	r3, #1
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <_ZN20SparkboxAudioManager18AudioStreamTrackerC1Em>:
	};

	class AudioStreamTracker
	{
	public:
		AudioStreamTracker(uint32_t bufferSizeBytes)
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
		{
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2200      	movs	r2, #0
 800064e:	709a      	strb	r2, [r3, #2]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	70da      	strb	r2, [r3, #3]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2201      	movs	r2, #1
 800065a:	819a      	strh	r2, [r3, #12]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	81da      	strh	r2, [r3, #14]
			internalBuffer = (uint8_t*)malloc(sizeof(uint8_t) * bufferSizeBytes);
 8000662:	6838      	ldr	r0, [r7, #0]
 8000664:	f00d fcb6 	bl	800dfd4 <malloc>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	619a      	str	r2, [r3, #24]
		}
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <_ZN20SparkboxAudioManager18AudioStreamTrackerD1Ev>:
		~AudioStreamTracker()
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
		{
			free(internalBuffer);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4618      	mov	r0, r3
 8000688:	f00d fcac 	bl	800dfe4 <free>
		}
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f893 	bl	80007cc <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE12_Vector_implC1Ev>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffeb 	bl	8000696 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EEC1Ev>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <_ZNSt12_Vector_baseIN20SparkboxAudioManager17ImportedAudioFileESaIS1_EEC1Ev>:
      _Vector_base() = default;
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f889 	bl	80007ec <_ZNSt12_Vector_baseIN20SparkboxAudioManager17ImportedAudioFileESaIS1_EE12_Vector_implC1Ev>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <_ZNSt6vectorIN20SparkboxAudioManager17ImportedAudioFileESaIS1_EEC1Ev>:
      vector() = default;
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffeb 	bl	80006ca <_ZNSt12_Vector_baseIN20SparkboxAudioManager17ImportedAudioFileESaIS1_EEC1Ev>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <_ZN20SparkboxAudioManagerC1Ev>:
void cb_audioTimerIT(void)
{
}


SparkboxAudioManager::SparkboxAudioManager(void)
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b08b      	sub	sp, #44	; 0x2c
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2204      	movs	r2, #4
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800072c:	611a      	str	r2, [r3, #16]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000734:	615a      	str	r2, [r3, #20]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3320      	adds	r3, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ffb5 	bl	80006b0 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EEC1Ev>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	332c      	adds	r3, #44	; 0x2c
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ffca 	bl	80006e4 <_ZNSt6vectorIN20SparkboxAudioManager17ImportedAudioFileESaIS1_EEC1Ev>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3338      	adds	r3, #56	; 0x38
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f859 	bl	800080c <_ZNSt5queueIN20SparkboxAudioManager15AudioDmaRequestESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
{
	// Initialize the internal audio buffers and trackers
	for (uint i = 0; i < MaxAudioStreams; i++) {
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000764:	429a      	cmp	r2, r3
 8000766:	d219      	bcs.n	800079c <_ZN20SparkboxAudioManagerC1Ev+0x9c>
		audioPlayerTrackers.push_back(AudioStreamTracker(InternalSingleBufferBytes));
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f103 0420 	add.w	r4, r3, #32
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff61 	bl	8000640 <_ZN20SparkboxAudioManager18AudioStreamTrackerC1Em>
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4619      	mov	r1, r3
 8000784:	4620      	mov	r0, r4
 8000786:	f000 f84e 	bl	8000826 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE9push_backEOS1_>
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff73 	bl	800067a <_ZN20SparkboxAudioManager18AudioStreamTrackerD1Ev>
	for (uint i = 0; i < MaxAudioStreams; i++) {
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	3301      	adds	r3, #1
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
 800079a:	e7e0      	b.n	800075e <_ZN20SparkboxAudioManagerC1Ev+0x5e>
	}

	// Initialize relevant peripherals
	MX_FMC_Init();
 800079c:	f001 f858 	bl	8001850 <MX_FMC_Init>
	MX_DAC1_Init();
 80007a0:	f000 ff7e 	bl	80016a0 <MX_DAC1_Init>
	MX_DMA_Init();
 80007a4:	f001 f806 	bl	80017b4 <MX_DMA_Init>
	MX_TIM6_Init();
 80007a8:	f001 ff44 	bl	8002634 <MX_TIM6_Init>

	// Start the audio output by repeatedly sending whatever is in the activeSamples variable
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80007ac:	2100      	movs	r1, #0
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <_ZN20SparkboxAudioManagerC1Ev+0xc8>)
 80007b0:	f002 fa18 	bl	8002be4 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80007b4:	2110      	movs	r1, #16
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <_ZN20SparkboxAudioManagerC1Ev+0xc8>)
 80007b8:	f002 fa14 	bl	8002be4 <HAL_DAC_Start>
}
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4618      	mov	r0, r3
 80007c0:	372c      	adds	r7, #44	; 0x2c
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	240049d0 	.word	0x240049d0

080007cc <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f000 f858 	bl	800088a <_ZNSaIN20SparkboxAudioManager18AudioStreamTrackerEEC1Ev>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f860 	bl	80008a2 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <_ZNSt12_Vector_baseIN20SparkboxAudioManager17ImportedAudioFileESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f894 	bl	8000922 <_ZNSaIN20SparkboxAudioManager17ImportedAudioFileEEC1Ev>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f89c 	bl	800093a <_ZNSt12_Vector_baseIN20SparkboxAudioManager17ImportedAudioFileESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <_ZNSt5queueIN20SparkboxAudioManager15AudioDmaRequestESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	: c() { }
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f8a3 	bl	8000962 <_ZNSt5dequeIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EEC1Ev>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000830:	6838      	ldr	r0, [r7, #0]
 8000832:	f000 f8a3 	bl	800097c <_ZSt4moveIRN20SparkboxAudioManager18AudioStreamTrackerEEONSt16remove_referenceIT_E4typeEOS4_>
 8000836:	4603      	mov	r3, r0
 8000838:	4619      	mov	r1, r3
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f000 f8a9 	bl	8000992 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f8c9 	bl	80009f0 <_ZN9__gnu_cxx17__normal_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4618      	mov	r0, r3
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	1d1a      	adds	r2, r3, #4
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4611      	mov	r1, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f8b8 	bl	80009f0 <_ZN9__gnu_cxx17__normal_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4618      	mov	r0, r3
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <_ZNSaIN20SparkboxAudioManager18AudioStreamTrackerEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f000 f8c7 	bl	8000a26 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEEC1Ev>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
	{ }
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b084      	sub	sp, #16
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
	if (__p)
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d005      	beq.n	80008e8 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f8aa 	bl	8000a3c <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager18AudioStreamTrackerEEE10deallocateERS2_PS1_j>
      }
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_ZSt8_DestroyIPN20SparkboxAudioManager18AudioStreamTrackerES1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	60f8      	str	r0, [r7, #12]
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000912:	68b9      	ldr	r1, [r7, #8]
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	f000 f8a0 	bl	8000a5a <_ZSt8_DestroyIPN20SparkboxAudioManager18AudioStreamTrackerEEvT_S3_>
    }
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <_ZNSaIN20SparkboxAudioManager17ImportedAudioFileEEC1Ev>:
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 f8a2 	bl	8000a74 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager17ImportedAudioFileEEC1Ev>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_ZNSt12_Vector_baseIN20SparkboxAudioManager17ImportedAudioFileESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
	{ }
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_ZNSt5dequeIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %deque with no elements.
       */
      deque() : _Base() { }
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f88c 	bl	8000a8a <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EEC1Ev>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <_ZSt4moveIRN20SparkboxAudioManager18AudioStreamTrackerEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000992:	b5b0      	push	{r4, r5, r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d012      	beq.n	80009ce <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80009a8:	687c      	ldr	r4, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	685d      	ldr	r5, [r3, #4]
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	f000 f87c 	bl	8000aac <_ZSt7forwardIN20SparkboxAudioManager18AudioStreamTrackerEEOT_RNSt16remove_referenceIS2_E4typeE>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4629      	mov	r1, r5
 80009ba:	4620      	mov	r0, r4
 80009bc:	f000 f881 	bl	8000ac2 <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager18AudioStreamTrackerEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f103 021c 	add.w	r2, r3, #28
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80009cc:	e00c      	b.n	80009e8 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ff4a 	bl	8000868 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE3endEv>
 80009d4:	4604      	mov	r4, r0
 80009d6:	6838      	ldr	r0, [r7, #0]
 80009d8:	f000 f868 	bl	8000aac <_ZSt7forwardIN20SparkboxAudioManager18AudioStreamTrackerEEOT_RNSt16remove_referenceIS2_E4typeE>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	4621      	mov	r1, r4
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 f896 	bl	8000b14 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bdb0      	pop	{r4, r5, r7, pc}

080009f0 <_ZN9__gnu_cxx17__normal_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <_ZNK9__gnu_cxx17__normal_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager18AudioStreamTrackerEEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	68b9      	ldr	r1, [r7, #8]
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f000 f929 	bl	8000ca4 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE10deallocateEPS2_j>
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_ZSt8_DestroyIPN20SparkboxAudioManager18AudioStreamTrackerEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000a64:	6839      	ldr	r1, [r7, #0]
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f000 f929 	bl	8000cbe <_ZNSt12_Destroy_auxILb0EE9__destroyIPN20SparkboxAudioManager18AudioStreamTrackerEEEvT_S5_>
    }
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager17ImportedAudioFileEEC1Ev>:
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EEC1Ev>:
      _Deque_base()
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f92a 	bl	8000cee <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f942 	bl	8000d26 <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE17_M_initialize_mapEj>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_ZSt7forwardIN20SparkboxAudioManager18AudioStreamTrackerEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager18AudioStreamTrackerEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b084      	sub	sp, #16
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ffec 	bl	8000aac <_ZSt7forwardIN20SparkboxAudioManager18AudioStreamTrackerEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 f9a3 	bl	8000e26 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE9constructIS2_JS2_EEEvPT_DpOT0_>
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f805 	bl	8000afe <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000af4:	4603      	mov	r3, r0
      }
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000b06:	2301      	movs	r3, #1
      }
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000b14:	b5b0      	push	{r4, r5, r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8000b20:	4a5e      	ldr	r2, [pc, #376]	; (8000c9c <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x188>)
 8000b22:	2101      	movs	r1, #1
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f000 f999 	bl	8000e5c <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE12_M_check_lenEjPKc>
 8000b2a:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000b38:	68f8      	ldr	r0, [r7, #12]
 8000b3a:	f7ff fe85 	bl	8000848 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE5beginEv>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	f107 0214 	add.w	r2, r7, #20
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 f9cd 	bl	8000eec <_ZN9__gnu_cxxmiIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8000b52:	4603      	mov	r3, r0
 8000b54:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f9e0 	bl	8000f20 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE11_M_allocateEj>
 8000b60:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000b66:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000b68:	69fa      	ldr	r2, [r7, #28]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	1a9b      	subs	r3, r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	189d      	adds	r5, r3, r2
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff97 	bl	8000aac <_ZSt7forwardIN20SparkboxAudioManager18AudioStreamTrackerEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	4629      	mov	r1, r5
 8000b84:	4620      	mov	r0, r4
 8000b86:	f7ff ff9c 	bl	8000ac2 <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager18AudioStreamTrackerEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000b8e:	f7ff ffab 	bl	8000ae8 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE15_S_use_relocateEv>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d027      	beq.n	8000be8 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff37 	bl	8000a10 <_ZNK9__gnu_cxx17__normal_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEE4baseEv>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fea1 	bl	80008f0 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE19_M_get_Tp_allocatorEv>
 8000bae:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4621      	mov	r1, r4
 8000bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bb6:	f000 f9c7 	bl	8000f48 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8000bba:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bbe:	331c      	adds	r3, #28
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff22 	bl	8000a10 <_ZNK9__gnu_cxx17__normal_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEE4baseEv>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fe8c 	bl	80008f0 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE19_M_get_Tp_allocatorEv>
 8000bd8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bdc:	6a39      	ldr	r1, [r7, #32]
 8000bde:	4620      	mov	r0, r4
 8000be0:	f000 f9b2 	bl	8000f48 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8000be4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000be6:	e026      	b.n	8000c36 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff0f 	bl	8000a10 <_ZNK9__gnu_cxx17__normal_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEE4baseEv>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fe79 	bl	80008f0 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE19_M_get_Tp_allocatorEv>
 8000bfe:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4621      	mov	r1, r4
 8000c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c06:	f000 f9b3 	bl	8000f70 <_ZSt34__uninitialized_move_if_noexcept_aIPN20SparkboxAudioManager18AudioStreamTrackerES2_SaIS1_EET0_T_S5_S4_RT1_>
 8000c0a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	331c      	adds	r3, #28
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fefa 	bl	8000a10 <_ZNK9__gnu_cxx17__normal_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEE4baseEv>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe64 	bl	80008f0 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE19_M_get_Tp_allocatorEv>
 8000c28:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8000c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c2c:	6a39      	ldr	r1, [r7, #32]
 8000c2e:	4620      	mov	r0, r4
 8000c30:	f000 f99e 	bl	8000f70 <_ZSt34__uninitialized_move_if_noexcept_aIPN20SparkboxAudioManager18AudioStreamTrackerES2_SaIS1_EET0_T_S5_S4_RT1_>
 8000c34:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8000c36:	f7ff ff57 	bl	8000ae8 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE15_S_use_relocateEv>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f083 0301 	eor.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d009      	beq.n	8000c5a <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fe51 	bl	80008f0 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE19_M_get_Tp_allocatorEv>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	6a39      	ldr	r1, [r7, #32]
 8000c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c56:	f7ff fe56 	bl	8000906 <_ZSt8_DestroyIPN20SparkboxAudioManager18AudioStreamTrackerES1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8000c5a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	109b      	asrs	r3, r3, #2
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x18c>)
 8000c68:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c70:	f7ff fe2b 	bl	80008ca <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c7e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	1a9b      	subs	r3, r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	441a      	add	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	609a      	str	r2, [r3, #8]
    }
 8000c94:	bf00      	nop
 8000c96:	3730      	adds	r7, #48	; 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c9c:	0800e29c 	.word	0x0800e29c
 8000ca0:	b6db6db7 	.word	0xb6db6db7

08000ca4 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8000cb0:	68b8      	ldr	r0, [r7, #8]
 8000cb2:	f00d f93b 	bl	800df2c <_ZdlPv>
      }
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_ZNSt12_Destroy_auxILb0EE9__destroyIPN20SparkboxAudioManager18AudioStreamTrackerEEEvT_S5_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d00a      	beq.n	8000ce6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN20SparkboxAudioManager18AudioStreamTrackerEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 f99e 	bl	8001012 <_ZSt11__addressofIN20SparkboxAudioManager18AudioStreamTrackerEEPT_RS2_>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f9a5 	bl	8001028 <_ZSt8_DestroyIN20SparkboxAudioManager18AudioStreamTrackerEEvPT_>
	  for (; __first != __last; ++__first)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	331c      	adds	r3, #28
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	e7f0      	b.n	8000cc8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN20SparkboxAudioManager18AudioStreamTrackerEEEvT_S5_+0xa>
	}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl()
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 f9a1 	bl	800103e <_ZNSaIN20SparkboxAudioManager15AudioDmaRequestEEC1Ev>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f9a2 	bl	8001056 <_ZNSt15_Deque_iteratorIN20SparkboxAudioManager15AudioDmaRequestERS1_PS1_EC1Ev>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3318      	adds	r3, #24
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f99d 	bl	8001056 <_ZNSt15_Deque_iteratorIN20SparkboxAudioManager15AudioDmaRequestERS1_PS1_EC1Ev>
	{ }
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8000d26:	b590      	push	{r4, r7, lr}
 8000d28:	b089      	sub	sp, #36	; 0x24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 8000d30:	2010      	movs	r0, #16
 8000d32:	f7ff fc70 	bl	8000616 <_ZSt16__deque_buf_sizej>
 8000d36:	4602      	mov	r2, r0
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d3e:	3301      	adds	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000d42:	2308      	movs	r3, #8
 8000d44:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3302      	adds	r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	f107 0210 	add.w	r2, r7, #16
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f994 	bl	8001084 <_ZSt3maxIjERKT_S2_S2_>
 8000d5c:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 f99e 	bl	80010ac <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE15_M_allocate_mapEj>
 8000d70:	4602      	mov	r2, r0
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6859      	ldr	r1, [r3, #4]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	1acb      	subs	r3, r1, r3
 8000d82:	085b      	lsrs	r3, r3, #1
 8000d84:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000d86:	4413      	add	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4413      	add	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	69b9      	ldr	r1, [r7, #24]
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f000 f9a4 	bl	80010e6 <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3308      	adds	r3, #8
 8000da2:	69b9      	ldr	r1, [r7, #24]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f909 	bl	8000fbc <_ZNSt15_Deque_iteratorIN20SparkboxAudioManager15AudioDmaRequestERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f103 0218 	add.w	r2, r3, #24
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	3b04      	subs	r3, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4610      	mov	r0, r2
 8000db8:	f000 f900 	bl	8000fbc <_ZNSt15_Deque_iteratorIN20SparkboxAudioManager15AudioDmaRequestERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8000dc8:	2010      	movs	r0, #16
 8000dca:	f7ff fc24 	bl	8000616 <_ZSt16__deque_buf_sizej>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000dd6:	fb02 f201 	mul.w	r2, r2, r1
 8000dda:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	619a      	str	r2, [r3, #24]
    }
 8000de4:	bf00      	nop
 8000de6:	3724      	adds	r7, #36	; 0x24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}

08000dec <_ZNKSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8000df6:	6838      	ldr	r0, [r7, #0]
 8000df8:	f000 f98f 	bl	800111a <_ZNKSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE19_M_get_Tp_allocatorEv>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4619      	mov	r1, r3
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 f995 	bl	8001130 <_ZNSaIPN20SparkboxAudioManager15AudioDmaRequestEEC1IS0_EERKSaIT_E>
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_ZNSaIPN20SparkboxAudioManager15AudioDmaRequestEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f997 	bl	800114a <_ZN9__gnu_cxx13new_allocatorIPN20SparkboxAudioManager15AudioDmaRequestEED1Ev>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE9constructIS2_JS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000e26:	b5b0      	push	{r4, r5, r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fe3a 	bl	8000aac <_ZSt7forwardIN20SparkboxAudioManager18AudioStreamTrackerEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e38:	4605      	mov	r5, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201c      	movs	r0, #28
 8000e40:	f7ff fbdd 	bl	80005fe <_ZnwjPv>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461c      	mov	r4, r3
 8000e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bdb0      	pop	{r4, r5, r7, pc}

08000e5c <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f000 f979 	bl	8001160 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE8max_sizeEv>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f000 f987 	bl	8001184 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE4sizeEv>
 8000e76:	4603      	mov	r3, r0
 8000e78:	1ae2      	subs	r2, r4, r3
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	bf34      	ite	cc
 8000e80:	2301      	movcc	r3, #1
 8000e82:	2300      	movcs	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f00d f864 	bl	800df58 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f000 f977 	bl	8001184 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE4sizeEv>
 8000e96:	4604      	mov	r4, r0
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f000 f973 	bl	8001184 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE4sizeEv>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	f107 0208 	add.w	r2, r7, #8
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f8e9 	bl	8001084 <_ZSt3maxIjERKT_S2_S2_>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4423      	add	r3, r4
 8000eb8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f000 f962 	bl	8001184 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE4sizeEv>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d306      	bcc.n	8000ed6 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f000 f949 	bl	8001160 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE8max_sizeEv>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d904      	bls.n	8000ee0 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE12_M_check_lenEjPKc+0x84>
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f000 f942 	bl	8001160 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE8max_sizeEv>
 8000edc:	4603      	mov	r3, r0
 8000ede:	e000      	b.n	8000ee2 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE12_M_check_lenEjPKc+0x86>
 8000ee0:	697b      	ldr	r3, [r7, #20]
      }
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd90      	pop	{r4, r7, pc}
	...

08000eec <_ZN9__gnu_cxxmiIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff fd8a 	bl	8000a10 <_ZNK9__gnu_cxx17__normal_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEE4baseEv>
 8000efc:	4603      	mov	r3, r0
 8000efe:	681c      	ldr	r4, [r3, #0]
 8000f00:	6838      	ldr	r0, [r7, #0]
 8000f02:	f7ff fd85 	bl	8000a10 <_ZNK9__gnu_cxx17__normal_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEE4baseEv>
 8000f06:	4603      	mov	r3, r0
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	1ae3      	subs	r3, r4, r3
 8000f0c:	109b      	asrs	r3, r3, #2
 8000f0e:	4a03      	ldr	r2, [pc, #12]	; (8000f1c <_ZN9__gnu_cxxmiIPN20SparkboxAudioManager18AudioStreamTrackerESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 8000f10:	fb02 f303 	mul.w	r3, r2, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	b6db6db7 	.word	0xb6db6db7

08000f20 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE11_M_allocateEj+0x1e>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6839      	ldr	r1, [r7, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 f93b 	bl	80011b0 <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager18AudioStreamTrackerEEE8allocateERS2_j>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	e000      	b.n	8000f40 <_ZNSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE11_M_allocateEj+0x20>
 8000f3e:	2300      	movs	r3, #0
      }
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8000f56:	f88d 4000 	strb.w	r4, [sp]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f000 f934 	bl	80011ce <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8000f66:	4603      	mov	r3, r0
      }
 8000f68:	4618      	mov	r0, r3
 8000f6a:	371c      	adds	r7, #28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}

08000f70 <_ZSt34__uninitialized_move_if_noexcept_aIPN20SparkboxAudioManager18AudioStreamTrackerES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f000 f937 	bl	80011f2 <_ZSt32__make_move_if_noexcept_iteratorIN20SparkboxAudioManager18AudioStreamTrackerESt13move_iteratorIPS1_EET0_PT_>
 8000f84:	4604      	mov	r4, r0
 8000f86:	68b8      	ldr	r0, [r7, #8]
 8000f88:	f000 f933 	bl	80011f2 <_ZSt32__make_move_if_noexcept_iteratorIN20SparkboxAudioManager18AudioStreamTrackerESt13move_iteratorIPS1_EET0_PT_>
 8000f8c:	4601      	mov	r1, r0
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4620      	mov	r0, r4
 8000f94:	f000 f93c 	bl	8001210 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8000f98:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd90      	pop	{r4, r7, pc}

08000fa2 <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager18AudioStreamTrackerEEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f93f 	bl	8001232 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE7destroyIS2_EEvPT_>
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZNSt15_Deque_iteratorIN20SparkboxAudioManager15AudioDmaRequestERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685c      	ldr	r4, [r3, #4]
 8000fd8:	f000 f937 	bl	800124a <_ZNSt15_Deque_iteratorIN20SparkboxAudioManager15AudioDmaRequestERS1_PS1_E14_S_buffer_sizeEv>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	18e2      	adds	r2, r4, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
      }
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd90      	pop	{r4, r7, pc}

08000fee <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8000fee:	b590      	push	{r4, r7, lr}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8000ff6:	687c      	ldr	r4, [r7, #4]
 8000ff8:	2010      	movs	r0, #16
 8000ffa:	f7ff fb0c 	bl	8000616 <_ZSt16__deque_buf_sizej>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4619      	mov	r1, r3
 8001002:	4620      	mov	r0, r4
 8001004:	f000 f929 	bl	800125a <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager15AudioDmaRequestEEE8allocateERS2_j>
 8001008:	4603      	mov	r3, r0
      }
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bd90      	pop	{r4, r7, pc}

08001012 <_ZSt11__addressofIN20SparkboxAudioManager18AudioStreamTrackerEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_ZSt8_DestroyIN20SparkboxAudioManager18AudioStreamTrackerEEvPT_>:
    _Destroy(_Tp* __pointer)
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fb22 	bl	800067a <_ZN20SparkboxAudioManager18AudioStreamTrackerD1Ev>
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_ZNSaIN20SparkboxAudioManager15AudioDmaRequestEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f916 	bl	8001278 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager15AudioDmaRequestEEC1Ev>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_ZNSt15_Deque_iteratorIN20SparkboxAudioManager15AudioDmaRequestERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d201      	bcs.n	800109e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	e000      	b.n	80010a0 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800109e:	687b      	ldr	r3, [r7, #4]
    }
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fe95 	bl	8000dec <_ZNKSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	6839      	ldr	r1, [r7, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 f8e0 	bl	800128e <_ZNSt16allocator_traitsISaIPN20SparkboxAudioManager15AudioDmaRequestEEE8allocateERS3_j>
 80010ce:	4604      	mov	r4, r0
 80010d0:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fe99 	bl	8000e0e <_ZNSaIPN20SparkboxAudioManager15AudioDmaRequestEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80010dc:	4623      	mov	r3, r4
      }
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}

080010e6 <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d209      	bcs.n	8001112 <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff ff75 	bl	8000fee <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE16_M_allocate_nodeEv>
 8001104:	4602      	mov	r2, r0
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3304      	adds	r3, #4
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e7f1      	b.n	80010f6 <_ZNSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_ZNKSt11_Deque_baseIN20SparkboxAudioManager15AudioDmaRequestESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_ZNSaIPN20SparkboxAudioManager15AudioDmaRequestEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f8b6 	bl	80012ac <_ZN9__gnu_cxx13new_allocatorIPN20SparkboxAudioManager15AudioDmaRequestEEC1Ev>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZN9__gnu_cxx13new_allocatorIPN20SparkboxAudioManager15AudioDmaRequestEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f8c6 	bl	80012fc <_ZNKSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE19_M_get_Tp_allocatorEv>
 8001170:	4603      	mov	r3, r0
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f8a6 	bl	80012c4 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE11_S_max_sizeERKS2_>
 8001178:	4603      	mov	r3, r0
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	109b      	asrs	r3, r3, #2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <_ZNKSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE4sizeEv+0x28>)
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	b6db6db7 	.word	0xb6db6db7

080011b0 <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager18AudioStreamTrackerEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80011ba:	2200      	movs	r2, #0
 80011bc:	6839      	ldr	r1, [r7, #0]
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f8a7 	bl	8001312 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE8allocateEjPKv>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f000 f8b6 	bl	8001354 <_ZSt12__relocate_aIPN20SparkboxAudioManager18AudioStreamTrackerES2_SaIS1_EET0_T_S5_S4_RT1_>
 80011e8:	4603      	mov	r3, r0
      }
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <_ZSt32__make_move_if_noexcept_iteratorIN20SparkboxAudioManager18AudioStreamTrackerESt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f8c4 	bl	800138e <_ZNSt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEEC1ES2_>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f8c2 	bl	80013ac <_ZSt18uninitialized_copyISt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEES3_ET0_T_S6_S5_>
 8001228:	4603      	mov	r3, r0
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f7ff fa1c 	bl	800067a <_ZN20SparkboxAudioManager18AudioStreamTrackerD1Ev>
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <_ZNSt15_Deque_iteratorIN20SparkboxAudioManager15AudioDmaRequestERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800124e:	2010      	movs	r0, #16
 8001250:	f7ff f9e1 	bl	8000616 <_ZSt16__deque_buf_sizej>
 8001254:	4603      	mov	r3, r0
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}

0800125a <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager15AudioDmaRequestEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001264:	2200      	movs	r2, #0
 8001266:	6839      	ldr	r1, [r7, #0]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f8c5 	bl	80013f8 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager15AudioDmaRequestEE8allocateEjPKv>
 800126e:	4603      	mov	r3, r0
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager15AudioDmaRequestEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <_ZNSt16allocator_traitsISaIPN20SparkboxAudioManager15AudioDmaRequestEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001298:	2200      	movs	r2, #0
 800129a:	6839      	ldr	r1, [r7, #0]
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f8c9 	bl	8001434 <_ZN9__gnu_cxx13new_allocatorIPN20SparkboxAudioManager15AudioDmaRequestEE8allocateEjPKv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_ZN9__gnu_cxx13new_allocatorIPN20SparkboxAudioManager15AudioDmaRequestEEC1Ev>:
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <_ZNSt6vectorIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 80012ce:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f8cd 	bl	8001470 <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager18AudioStreamTrackerEEE8max_sizeERKS2_>
 80012d6:	4603      	mov	r3, r0
 80012d8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80012da:	f107 0208 	add.w	r2, r7, #8
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f873 	bl	80013d0 <_ZSt3minIjERKT_S2_S2_>
 80012ea:	4603      	mov	r3, r0
 80012ec:	681b      	ldr	r3, [r3, #0]
      }
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	04924924 	.word	0x04924924

080012fc <_ZNKSt12_Vector_baseIN20SparkboxAudioManager18AudioStreamTrackerESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 f8b2 	bl	8001488 <_ZNK9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE8max_sizeEv>
 8001324:	4602      	mov	r2, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	4293      	cmp	r3, r2
 800132a:	bf8c      	ite	hi
 800132c:	2301      	movhi	r3, #1
 800132e:	2300      	movls	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001336:	f00c fe0c 	bl	800df52 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4618      	mov	r0, r3
 8001346:	f00c fdf3 	bl	800df30 <_Znwj>
 800134a:	4603      	mov	r3, r0
      }
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_ZSt12__relocate_aIPN20SparkboxAudioManager18AudioStreamTrackerES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 f89e 	bl	80014a4 <_ZSt12__niter_baseIPN20SparkboxAudioManager18AudioStreamTrackerEET_S3_>
 8001368:	4604      	mov	r4, r0
 800136a:	68b8      	ldr	r0, [r7, #8]
 800136c:	f000 f89a 	bl	80014a4 <_ZSt12__niter_baseIPN20SparkboxAudioManager18AudioStreamTrackerEET_S3_>
 8001370:	4605      	mov	r5, r0
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f896 	bl	80014a4 <_ZSt12__niter_baseIPN20SparkboxAudioManager18AudioStreamTrackerEET_S3_>
 8001378:	4602      	mov	r2, r0
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4629      	mov	r1, r5
 800137e:	4620      	mov	r0, r4
 8001380:	f000 f89b 	bl	80014ba <_ZSt14__relocate_a_1IPN20SparkboxAudioManager18AudioStreamTrackerES2_SaIS1_EET0_T_S5_S4_RT1_>
 8001384:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bdb0      	pop	{r4, r5, r7, pc}

0800138e <_ZNSt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEEC1ES2_>:
      move_iterator(iterator_type __i)
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_ZSt18uninitialized_copyISt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80013b8:	2301      	movs	r3, #1
 80013ba:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f8a0 	bl	8001506 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEES5_EET0_T_S8_S7_>
 80013c6:	4603      	mov	r3, r0
    }
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d201      	bcs.n	80013ea <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	e000      	b.n	80013ec <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80013ea:	687b      	ldr	r3, [r7, #4]
    }
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager15AudioDmaRequestEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 f8ad 	bl	8001564 <_ZNK9__gnu_cxx13new_allocatorIN20SparkboxAudioManager15AudioDmaRequestEE8max_sizeEv>
 800140a:	4602      	mov	r2, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4293      	cmp	r3, r2
 8001410:	bf8c      	ite	hi
 8001412:	2301      	movhi	r3, #1
 8001414:	2300      	movls	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <_ZN9__gnu_cxx13new_allocatorIN20SparkboxAudioManager15AudioDmaRequestEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800141c:	f00c fd99 	bl	800df52 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	4618      	mov	r0, r3
 8001426:	f00c fd83 	bl	800df30 <_Znwj>
 800142a:	4603      	mov	r3, r0
      }
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_ZN9__gnu_cxx13new_allocatorIPN20SparkboxAudioManager15AudioDmaRequestEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f000 f89b 	bl	800157c <_ZNK9__gnu_cxx13new_allocatorIPN20SparkboxAudioManager15AudioDmaRequestEE8max_sizeEv>
 8001446:	4602      	mov	r2, r0
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4293      	cmp	r3, r2
 800144c:	bf8c      	ite	hi
 800144e:	2301      	movhi	r3, #1
 8001450:	2300      	movls	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <_ZN9__gnu_cxx13new_allocatorIPN20SparkboxAudioManager15AudioDmaRequestEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001458:	f00c fd7b 	bl	800df52 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4618      	mov	r0, r3
 8001462:	f00c fd65 	bl	800df30 <_Znwj>
 8001466:	4603      	mov	r3, r0
      }
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager18AudioStreamTrackerEEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f805 	bl	8001488 <_ZNK9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE8max_sizeEv>
 800147e:	4603      	mov	r3, r0
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_ZNK9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <_ZNK9__gnu_cxx13new_allocatorIN20SparkboxAudioManager18AudioStreamTrackerEE8max_sizeEv+0x18>)
      }
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	04924924 	.word	0x04924924

080014a4 <_ZSt12__niter_baseIPN20SparkboxAudioManager18AudioStreamTrackerEET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_ZSt14__relocate_a_1IPN20SparkboxAudioManager18AudioStreamTrackerES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80014ba:	b590      	push	{r4, r7, lr}
 80014bc:	b087      	sub	sp, #28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d013      	beq.n	80014fc <_ZSt14__relocate_a_1IPN20SparkboxAudioManager18AudioStreamTrackerES2_SaIS1_EET0_T_S5_S4_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 80014d4:	6978      	ldr	r0, [r7, #20]
 80014d6:	f7ff fd9c 	bl	8001012 <_ZSt11__addressofIN20SparkboxAudioManager18AudioStreamTrackerEEPT_RS2_>
 80014da:	4604      	mov	r4, r0
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff fd98 	bl	8001012 <_ZSt11__addressofIN20SparkboxAudioManager18AudioStreamTrackerEEPT_RS2_>
 80014e2:	4603      	mov	r3, r0
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	4620      	mov	r0, r4
 80014ea:	f000 f853 	bl	8001594 <_ZSt19__relocate_object_aIN20SparkboxAudioManager18AudioStreamTrackerES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	331c      	adds	r3, #28
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	331c      	adds	r3, #28
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e7e7      	b.n	80014cc <_ZSt14__relocate_a_1IPN20SparkboxAudioManager18AudioStreamTrackerES2_SaIS1_EET0_T_S5_S4_RT1_+0x12>
      return __cur;
 80014fc:	697b      	ldr	r3, [r7, #20]
    }
 80014fe:	4618      	mov	r0, r3
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}

08001506 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001506:	b590      	push	{r4, r7, lr}
 8001508:	b087      	sub	sp, #28
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8001516:	f107 0208 	add.w	r2, r7, #8
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f000 f852 	bl	80015ca <_ZStneIPN20SparkboxAudioManager18AudioStreamTrackerEEbRKSt13move_iteratorIT_ES7_>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d016      	beq.n	800155a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEES5_EET0_T_S8_S7_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800152c:	6978      	ldr	r0, [r7, #20]
 800152e:	f7ff fd70 	bl	8001012 <_ZSt11__addressofIN20SparkboxAudioManager18AudioStreamTrackerEEPT_RS2_>
 8001532:	4604      	mov	r4, r0
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4618      	mov	r0, r3
 800153a:	f000 f868 	bl	800160e <_ZNKSt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEEdeEv>
 800153e:	4603      	mov	r3, r0
 8001540:	4619      	mov	r1, r3
 8001542:	4620      	mov	r0, r4
 8001544:	f000 f86f 	bl	8001626 <_ZSt10_ConstructIN20SparkboxAudioManager18AudioStreamTrackerEJS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f84d 	bl	80015ec <_ZNSt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEEppEv>
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	331c      	adds	r3, #28
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e7dd      	b.n	8001516 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEES5_EET0_T_S8_S7_+0x10>
	      return __cur;
 800155a:	697b      	ldr	r3, [r7, #20]
	}
 800155c:	4618      	mov	r0, r3
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}

08001564 <_ZNK9__gnu_cxx13new_allocatorIN20SparkboxAudioManager15AudioDmaRequestEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800156c:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_ZNK9__gnu_cxx13new_allocatorIPN20SparkboxAudioManager15AudioDmaRequestEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001584:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_ZSt19__relocate_object_aIN20SparkboxAudioManager18AudioStreamTrackerES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __dest, _Up* __orig, _Allocator& __alloc)
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f7ff f9eb 	bl	800097c <_ZSt4moveIRN20SparkboxAudioManager18AudioStreamTrackerEEONSt16remove_referenceIT_E4typeEOS4_>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	68f9      	ldr	r1, [r7, #12]
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fa88 	bl	8000ac2 <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager18AudioStreamTrackerEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80015b2:	68b8      	ldr	r0, [r7, #8]
 80015b4:	f7ff fd2d 	bl	8001012 <_ZSt11__addressofIN20SparkboxAudioManager18AudioStreamTrackerEEPT_RS2_>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4619      	mov	r1, r3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fcf0 	bl	8000fa2 <_ZNSt16allocator_traitsISaIN20SparkboxAudioManager18AudioStreamTrackerEEE7destroyIS1_EEvRS2_PT_>
    }
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_ZStneIPN20SparkboxAudioManager18AudioStreamTrackerEEbRKSt13move_iteratorIT_ES7_>:
    operator!=(const move_iterator<_Iterator>& __x,
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 80015d4:	6839      	ldr	r1, [r7, #0]
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f83f 	bl	800165a <_ZSteqIPN20SparkboxAudioManager18AudioStreamTrackerEEbRKSt13move_iteratorIT_ES7_>
 80015dc:	4603      	mov	r3, r0
 80015de:	f083 0301 	eor.w	r3, r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZNSt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEEppEv>:
      operator++()
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	++_M_current;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f103 021c 	add.w	r2, r3, #28
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	601a      	str	r2, [r3, #0]
	return *this;
 8001600:	687b      	ldr	r3, [r7, #4]
      }
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZNKSt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEEdeEv>:
      operator*() const
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_ZSt10_ConstructIN20SparkboxAudioManager18AudioStreamTrackerEJS1_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8001626:	b5b0      	push	{r4, r5, r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8001630:	6838      	ldr	r0, [r7, #0]
 8001632:	f7ff fa3b 	bl	8000aac <_ZSt7forwardIN20SparkboxAudioManager18AudioStreamTrackerEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001636:	4605      	mov	r5, r0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4619      	mov	r1, r3
 800163c:	201c      	movs	r0, #28
 800163e:	f7fe ffde 	bl	80005fe <_ZnwjPv>
 8001642:	4603      	mov	r3, r0
 8001644:	461c      	mov	r4, r3
 8001646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800164e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bdb0      	pop	{r4, r5, r7, pc}

0800165a <_ZSteqIPN20SparkboxAudioManager18AudioStreamTrackerEEbRKSt13move_iteratorIT_ES7_>:
    operator==(const move_iterator<_Iterator>& __x,
 800165a:	b590      	push	{r4, r7, lr}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f80e 	bl	8001686 <_ZNKSt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEE4baseEv>
 800166a:	4604      	mov	r4, r0
 800166c:	6838      	ldr	r0, [r7, #0]
 800166e:	f000 f80a 	bl	8001686 <_ZNKSt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEE4baseEv>
 8001672:	4603      	mov	r3, r0
 8001674:	429c      	cmp	r4, r3
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bd90      	pop	{r4, r7, pc}

08001686 <_ZNKSt13move_iteratorIPN20SparkboxAudioManager18AudioStreamTrackerEE4baseEv>:
      base() const
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2224      	movs	r2, #36	; 0x24
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00c fcaf 	bl	800e010 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_DAC1_Init+0x70>)
 80016b4:	4a17      	ldr	r2, [pc, #92]	; (8001714 <MX_DAC1_Init+0x74>)
 80016b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016b8:	4815      	ldr	r0, [pc, #84]	; (8001710 <MX_DAC1_Init+0x70>)
 80016ba:	f001 fa71 	bl	8002ba0 <HAL_DAC_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016c4:	f000 fc1f 	bl	8001f06 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80016cc:	2316      	movs	r3, #22
 80016ce:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	4619      	mov	r1, r3
 80016e2:	480b      	ldr	r0, [pc, #44]	; (8001710 <MX_DAC1_Init+0x70>)
 80016e4:	f001 fb34 	bl	8002d50 <HAL_DAC_ConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80016ee:	f000 fc0a 	bl	8001f06 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2210      	movs	r2, #16
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_DAC1_Init+0x70>)
 80016fa:	f001 fb29 	bl	8002d50 <HAL_DAC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001704:	f000 fbff 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	240049d0 	.word	0x240049d0
 8001714:	40007400 	.word	0x40007400

08001718 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <HAL_DAC_MspInit+0x90>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d131      	bne.n	800179e <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_DAC_MspInit+0x94>)
 800173c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001740:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <HAL_DAC_MspInit+0x94>)
 8001742:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001746:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_DAC_MspInit+0x94>)
 800174c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_DAC_MspInit+0x94>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175e:	4a13      	ldr	r2, [pc, #76]	; (80017ac <HAL_DAC_MspInit+0x94>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_DAC_MspInit+0x94>)
 800176a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001776:	2330      	movs	r3, #48	; 0x30
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177a:	2303      	movs	r3, #3
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4809      	ldr	r0, [pc, #36]	; (80017b0 <HAL_DAC_MspInit+0x98>)
 800178a:	f002 f9b3 	bl	8003af4 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2105      	movs	r1, #5
 8001792:	2036      	movs	r0, #54	; 0x36
 8001794:	f001 f9dc 	bl	8002b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001798:	2036      	movs	r0, #54	; 0x36
 800179a:	f001 f9f3 	bl	8002b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40007400 	.word	0x40007400
 80017ac:	58024400 	.word	0x58024400
 80017b0:	58020000 	.word	0x58020000

080017b4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_stream0
  */
void MX_DMA_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <MX_DMA_Init+0x90>)
 80017bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017c0:	4a20      	ldr	r2, [pc, #128]	; (8001844 <MX_DMA_Init+0x90>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <MX_DMA_Init+0x90>)
 80017cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_stream0 on DMA1_Stream0 */
  hdma_memtomem_dma1_stream0.Instance = DMA1_Stream0;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <MX_DMA_Init+0x94>)
 80017da:	4a1c      	ldr	r2, [pc, #112]	; (800184c <MX_DMA_Init+0x98>)
 80017dc:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MX_DMA_Init+0x94>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <MX_DMA_Init+0x94>)
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_DMA_Init+0x94>)
 80017ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f0:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_DMA_Init+0x94>)
 80017f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_DMA_Init+0x94>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_DMA_Init+0x94>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream0.Init.Mode = DMA_NORMAL;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_DMA_Init+0x94>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_DMA_Init+0x94>)
 800180e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001812:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_DMA_Init+0x94>)
 8001816:	2204      	movs	r2, #4
 8001818:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_DMA_Init+0x94>)
 800181c:	2200      	movs	r2, #0
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_DMA_Init+0x94>)
 8001822:	2200      	movs	r2, #0
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_DMA_Init+0x94>)
 8001828:	2200      	movs	r2, #0
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream0) != HAL_OK)
 800182c:	4806      	ldr	r0, [pc, #24]	; (8001848 <MX_DMA_Init+0x94>)
 800182e:	f001 fbc9 	bl	8002fc4 <HAL_DMA_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_DMA_Init+0x88>
  {
    Error_Handler();
 8001838:	f000 fb65 	bl	8001f06 <Error_Handler>
  }

}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	58024400 	.word	0x58024400
 8001848:	240049e4 	.word	0x240049e4
 800184c:	40020010 	.word	0x40020010

08001850 <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08e      	sub	sp, #56	; 0x38
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
 8001866:	615a      	str	r2, [r3, #20]
 8001868:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800186a:	463b      	mov	r3, r7
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
 8001878:	615a      	str	r2, [r3, #20]
 800187a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800187c:	4b45      	ldr	r3, [pc, #276]	; (8001994 <MX_FMC_Init+0x144>)
 800187e:	4a46      	ldr	r2, [pc, #280]	; (8001998 <MX_FMC_Init+0x148>)
 8001880:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001882:	4b44      	ldr	r3, [pc, #272]	; (8001994 <MX_FMC_Init+0x144>)
 8001884:	4a45      	ldr	r2, [pc, #276]	; (800199c <MX_FMC_Init+0x14c>)
 8001886:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001888:	4b42      	ldr	r3, [pc, #264]	; (8001994 <MX_FMC_Init+0x144>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800188e:	4b41      	ldr	r3, [pc, #260]	; (8001994 <MX_FMC_Init+0x144>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001894:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <MX_FMC_Init+0x144>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800189a:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <MX_FMC_Init+0x144>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80018a0:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <MX_FMC_Init+0x144>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80018a6:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <MX_FMC_Init+0x144>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80018ac:	4b39      	ldr	r3, [pc, #228]	; (8001994 <MX_FMC_Init+0x144>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80018b2:	4b38      	ldr	r3, [pc, #224]	; (8001994 <MX_FMC_Init+0x144>)
 80018b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80018ba:	4b36      	ldr	r3, [pc, #216]	; (8001994 <MX_FMC_Init+0x144>)
 80018bc:	2200      	movs	r2, #0
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80018c0:	4b34      	ldr	r3, [pc, #208]	; (8001994 <MX_FMC_Init+0x144>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80018c6:	4b33      	ldr	r3, [pc, #204]	; (8001994 <MX_FMC_Init+0x144>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <MX_FMC_Init+0x144>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80018d2:	4b30      	ldr	r3, [pc, #192]	; (8001994 <MX_FMC_Init+0x144>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80018d8:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <MX_FMC_Init+0x144>)
 80018da:	2200      	movs	r2, #0
 80018dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80018de:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <MX_FMC_Init+0x144>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80018e4:	230f      	movs	r3, #15
 80018e6:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80018e8:	230f      	movs	r3, #15
 80018ea:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 80018ec:	23ff      	movs	r3, #255	; 0xff
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80018f0:	230f      	movs	r3, #15
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80018f4:	2310      	movs	r3, #16
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80018f8:	2311      	movs	r3, #17
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80018fc:	2300      	movs	r3, #0
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	2200      	movs	r2, #0
 8001906:	4619      	mov	r1, r3
 8001908:	4822      	ldr	r0, [pc, #136]	; (8001994 <MX_FMC_Init+0x144>)
 800190a:	f006 ffe9 	bl	80088e0 <HAL_SRAM_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_FMC_Init+0xc8>
  {
    Error_Handler( );
 8001914:	f000 faf7 	bl	8001f06 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <MX_FMC_Init+0x150>)
 800191a:	4a22      	ldr	r2, [pc, #136]	; (80019a4 <MX_FMC_Init+0x154>)
 800191c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <MX_FMC_Init+0x150>)
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <MX_FMC_Init+0x150>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <MX_FMC_Init+0x150>)
 800192c:	2204      	movs	r2, #4
 800192e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <MX_FMC_Init+0x150>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <MX_FMC_Init+0x150>)
 8001938:	2240      	movs	r2, #64	; 0x40
 800193a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_FMC_Init+0x150>)
 800193e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001942:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <MX_FMC_Init+0x150>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <MX_FMC_Init+0x150>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <MX_FMC_Init+0x150>)
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_FMC_Init+0x150>)
 8001958:	2200      	movs	r2, #0
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800195c:	2310      	movs	r3, #16
 800195e:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001960:	2310      	movs	r3, #16
 8001962:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 8001964:	2310      	movs	r3, #16
 8001966:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 8001968:	2310      	movs	r3, #16
 800196a:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 800196c:	2310      	movs	r3, #16
 800196e:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 8001970:	2310      	movs	r3, #16
 8001972:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 8001974:	2310      	movs	r3, #16
 8001976:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4808      	ldr	r0, [pc, #32]	; (80019a0 <MX_FMC_Init+0x150>)
 800197e:	f006 fe55 	bl	800862c <HAL_SDRAM_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_FMC_Init+0x13c>
  {
    Error_Handler( );
 8001988:	f000 fabd 	bl	8001f06 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800198c:	bf00      	nop
 800198e:	3738      	adds	r7, #56	; 0x38
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	24004a5c 	.word	0x24004a5c
 8001998:	52004000 	.word	0x52004000
 800199c:	52004104 	.word	0x52004104
 80019a0:	24004aa8 	.word	0x24004aa8
 80019a4:	52004140 	.word	0x52004140

080019a8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b0b6      	sub	sp, #216	; 0xd8
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80019be:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <HAL_FMC_MspInit+0x180>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 80ab 	bne.w	8001b1e <HAL_FMC_MspInit+0x176>
    return;
  }
  FMC_Initialized = 1;
 80019c8:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <HAL_FMC_MspInit+0x180>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	22bc      	movs	r2, #188	; 0xbc
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f00c fb1a 	bl	800e010 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80019dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019e0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fa7c 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 80019f6:	f000 fa86 	bl	8001f06 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80019fa:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <HAL_FMC_MspInit+0x184>)
 80019fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a00:	4a4a      	ldr	r2, [pc, #296]	; (8001b2c <HAL_FMC_MspInit+0x184>)
 8001a02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a06:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001a0a:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <HAL_FMC_MspInit+0x184>)
 8001a0c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PG15   ------> FMC_SDNCAS
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a18:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a32:	230c      	movs	r3, #12
 8001a34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a38:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	483c      	ldr	r0, [pc, #240]	; (8001b30 <HAL_FMC_MspInit+0x188>)
 8001a40:	f002 f858 	bl	8003af4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8001a44:	2319      	movs	r3, #25
 8001a46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a5c:	230c      	movs	r3, #12
 8001a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a62:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4832      	ldr	r0, [pc, #200]	; (8001b34 <HAL_FMC_MspInit+0x18c>)
 8001a6a:	f002 f843 	bl	8003af4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001a6e:	f248 1333 	movw	r3, #33075	; 0x8133
 8001a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a88:	230c      	movs	r3, #12
 8001a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a8e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4828      	ldr	r0, [pc, #160]	; (8001b38 <HAL_FMC_MspInit+0x190>)
 8001a96:	f002 f82d 	bl	8003af4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001a9a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001a9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	481e      	ldr	r0, [pc, #120]	; (8001b3c <HAL_FMC_MspInit+0x194>)
 8001ac2:	f002 f817 	bl	8003af4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001ac6:	f24c 0333 	movw	r3, #49203	; 0xc033
 8001aca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ada:	2303      	movs	r3, #3
 8001adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001aea:	4619      	mov	r1, r3
 8001aec:	4814      	ldr	r0, [pc, #80]	; (8001b40 <HAL_FMC_MspInit+0x198>)
 8001aee:	f002 f801 	bl	8003af4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8001b0a:	2309      	movs	r3, #9
 8001b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4807      	ldr	r0, [pc, #28]	; (8001b34 <HAL_FMC_MspInit+0x18c>)
 8001b18:	f001 ffec 	bl	8003af4 <HAL_GPIO_Init>
 8001b1c:	e000      	b.n	8001b20 <HAL_FMC_MspInit+0x178>
    return;
 8001b1e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001b20:	37d8      	adds	r7, #216	; 0xd8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	24000094 	.word	0x24000094
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	58021400 	.word	0x58021400
 8001b34:	58020800 	.word	0x58020800
 8001b38:	58021800 	.word	0x58021800
 8001b3c:	58021000 	.word	0x58021000
 8001b40:	58020c00 	.word	0x58020c00

08001b44 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b4c:	f7ff ff2c 	bl	80019a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b60:	f7ff ff22 	bl	80019a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <MX_FREERTOS_Init+0x18>)
 8001b72:	2100      	movs	r1, #0
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <MX_FREERTOS_Init+0x1c>)
 8001b76:	f009 fcd1 	bl	800b51c <osThreadNew>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <MX_FREERTOS_Init+0x20>)
 8001b7e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	0800e30c 	.word	0x0800e30c
 8001b88:	08001b91 	.word	0x08001b91
 8001b8c:	24004adc 	.word	0x24004adc

08001b90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f009 fd51 	bl	800b640 <osDelay>
 8001b9e:	e7fb      	b.n	8001b98 <StartDefaultTask+0x8>

08001ba0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08e      	sub	sp, #56	; 0x38
 8001ba4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	4a6d      	ldr	r2, [pc, #436]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc6:	4b6b      	ldr	r3, [pc, #428]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	623b      	str	r3, [r7, #32]
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bd4:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	4a66      	ldr	r2, [pc, #408]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001bdc:	f043 0320 	orr.w	r3, r3, #32
 8001be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be4:	4b63      	ldr	r3, [pc, #396]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	61fb      	str	r3, [r7, #28]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf2:	4b60      	ldr	r3, [pc, #384]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf8:	4a5e      	ldr	r2, [pc, #376]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c02:	4b5c      	ldr	r3, [pc, #368]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b58      	ldr	r3, [pc, #352]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c16:	4a57      	ldr	r2, [pc, #348]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c20:	4b54      	ldr	r3, [pc, #336]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	4b51      	ldr	r3, [pc, #324]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c34:	4a4f      	ldr	r2, [pc, #316]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3e:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c4c:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c52:	4a48      	ldr	r2, [pc, #288]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5c:	4b45      	ldr	r3, [pc, #276]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c6a:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c70:	4a40      	ldr	r2, [pc, #256]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c72:	f043 0310 	orr.w	r3, r3, #16
 8001c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c88:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8e:	4a39      	ldr	r2, [pc, #228]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <MX_GPIO_Init+0x1d4>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f244 0101 	movw	r1, #16385	; 0x4001
 8001cac:	4832      	ldr	r0, [pc, #200]	; (8001d78 <MX_GPIO_Init+0x1d8>)
 8001cae:	f002 f8e9 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb8:	4830      	ldr	r0, [pc, #192]	; (8001d7c <MX_GPIO_Init+0x1dc>)
 8001cba:	f002 f8e3 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	482f      	ldr	r0, [pc, #188]	; (8001d80 <MX_GPIO_Init+0x1e0>)
 8001cc4:	f002 f8de 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4829      	ldr	r0, [pc, #164]	; (8001d84 <MX_GPIO_Init+0x1e4>)
 8001cde:	f001 ff09 	bl	8003af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001ce2:	f244 0301 	movw	r3, #16385	; 0x4001
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	481f      	ldr	r0, [pc, #124]	; (8001d78 <MX_GPIO_Init+0x1d8>)
 8001cfc:	f001 fefa 	bl	8003af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d16:	4619      	mov	r1, r3
 8001d18:	4818      	ldr	r0, [pc, #96]	; (8001d7c <MX_GPIO_Init+0x1dc>)
 8001d1a:	f001 feeb 	bl	8003af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <MX_GPIO_Init+0x1e8>)
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4816      	ldr	r0, [pc, #88]	; (8001d8c <MX_GPIO_Init+0x1ec>)
 8001d32:	f001 fedf 	bl	8003af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4811      	ldr	r0, [pc, #68]	; (8001d90 <MX_GPIO_Init+0x1f0>)
 8001d4c:	f001 fed2 	bl	8003af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d50:	2302      	movs	r3, #2
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d64:	4619      	mov	r1, r3
 8001d66:	4806      	ldr	r0, [pc, #24]	; (8001d80 <MX_GPIO_Init+0x1e0>)
 8001d68:	f001 fec4 	bl	8003af4 <HAL_GPIO_Init>

}
 8001d6c:	bf00      	nop
 8001d6e:	3738      	adds	r7, #56	; 0x38
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	58024400 	.word	0x58024400
 8001d78:	58020400 	.word	0x58020400
 8001d7c:	58020c00 	.word	0x58020c00
 8001d80:	58021000 	.word	0x58021000
 8001d84:	58020800 	.word	0x58020800
 8001d88:	11110000 	.word	0x11110000
 8001d8c:	58021800 	.word	0x58021800
 8001d90:	58020000 	.word	0x58020000

08001d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d98:	f000 fd96 	bl	80028c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d9c:	f000 f81c 	bl	8001dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da0:	f7ff fefe 	bl	8001ba0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001da4:	f000 fca4 	bl	80026f0 <MX_USART3_UART_Init>
  MX_DAC1_Init();
 8001da8:	f7ff fc7a 	bl	80016a0 <MX_DAC1_Init>
  MX_FMC_Init();
 8001dac:	f7ff fd50 	bl	8001850 <MX_FMC_Init>
  MX_RNG_Init();
 8001db0:	f000 f8ae 	bl	8001f10 <MX_RNG_Init>
  MX_SDMMC1_SD_Init();
 8001db4:	f000 f8fa 	bl	8001fac <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8001db8:	f000 f9c0 	bl	800213c <MX_SPI1_Init>
  MX_DMA_Init();
 8001dbc:	f7ff fcfa 	bl	80017b4 <MX_DMA_Init>
  MX_FATFS_Init();
 8001dc0:	f009 f8a6 	bl	800af10 <MX_FATFS_Init>
  MX_TIM6_Init();
 8001dc4:	f000 fc36 	bl	8002634 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001dc8:	f009 fb5e 	bl	800b488 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001dcc:	f7ff fece 	bl	8001b6c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001dd0:	f009 fb7e 	bl	800b4d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <main+0x40>
	...

08001dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b09c      	sub	sp, #112	; 0x70
 8001ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de2:	224c      	movs	r2, #76	; 0x4c
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f00c f912 	bl	800e010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	2220      	movs	r2, #32
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f00c f90c 	bl	800e010 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f002 f85d 	bl	8003eb8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <SystemClock_Config+0x104>)
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	4a35      	ldr	r2, [pc, #212]	; (8001edc <SystemClock_Config+0x104>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e0e:	4b33      	ldr	r3, [pc, #204]	; (8001edc <SystemClock_Config+0x104>)
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <SystemClock_Config+0x108>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e20:	4a2f      	ldr	r2, [pc, #188]	; (8001ee0 <SystemClock_Config+0x108>)
 8001e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <SystemClock_Config+0x108>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e34:	bf00      	nop
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <SystemClock_Config+0x108>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e42:	d1f8      	bne.n	8001e36 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <SystemClock_Config+0x10c>)
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	f023 0303 	bic.w	r3, r3, #3
 8001e4c:	4a25      	ldr	r2, [pc, #148]	; (8001ee4 <SystemClock_Config+0x10c>)
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001e54:	2321      	movs	r3, #33	; 0x21
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e58:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e62:	2302      	movs	r3, #2
 8001e64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e66:	2302      	movs	r3, #2
 8001e68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001e6e:	2378      	movs	r3, #120	; 0x78
 8001e70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e72:	2302      	movs	r3, #2
 8001e74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e76:	2304      	movs	r3, #4
 8001e78:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001e7e:	2308      	movs	r3, #8
 8001e80:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 f84c 	bl	8003f2c <HAL_RCC_OscConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e9a:	f000 f834 	bl	8001f06 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e9e:	233f      	movs	r3, #63	; 0x3f
 8001ea0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001eaa:	2308      	movs	r3, #8
 8001eac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 fc42 	bl	800474c <HAL_RCC_ClockConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001ece:	f000 f81a 	bl	8001f06 <Error_Handler>
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	3770      	adds	r7, #112	; 0x70
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	58000400 	.word	0x58000400
 8001ee0:	58024800 	.word	0x58024800
 8001ee4:	58024400 	.word	0x58024400

08001ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef8:	d101      	bne.n	8001efe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001efa:	f000 fd21 	bl	8002940 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0a:	b672      	cpsid	i
}
 8001f0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <Error_Handler+0x8>

08001f10 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MX_RNG_Init+0x24>)
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <MX_RNG_Init+0x28>)
 8001f18:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_RNG_Init+0x24>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_RNG_Init+0x24>)
 8001f22:	f005 f967 	bl	80071f4 <HAL_RNG_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001f2c:	f7ff ffeb 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	24004ae0 	.word	0x24004ae0
 8001f38:	48021800 	.word	0x48021800

08001f3c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0b2      	sub	sp, #200	; 0xc8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	22bc      	movs	r2, #188	; 0xbc
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f00c f85f 	bl	800e010 <memset>
  if(rngHandle->Instance==RNG)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <HAL_RNG_MspInit+0x68>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d11e      	bne.n	8001f9a <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f60:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f002 ffbb 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001f78:	f7ff ffc5 	bl	8001f06 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_RNG_MspInit+0x6c>)
 8001f7e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f82:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <HAL_RNG_MspInit+0x6c>)
 8001f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f88:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RNG_MspInit+0x6c>)
 8001f8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	37c8      	adds	r7, #200	; 0xc8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	48021800 	.word	0x48021800
 8001fa8:	58024400 	.word	0x58024400

08001fac <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MX_SDMMC1_SD_Init+0x34>)
 8001fb2:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <MX_SDMMC1_SD_Init+0x38>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <MX_SDMMC1_SD_Init+0x34>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <MX_SDMMC1_SD_Init+0x34>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <MX_SDMMC1_SD_Init+0x34>)
 8001fc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fc8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <MX_SDMMC1_SD_Init+0x34>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <MX_SDMMC1_SD_Init+0x34>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	24004af4 	.word	0x24004af4
 8001fe4:	52007000 	.word	0x52007000

08001fe8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0ba      	sub	sp, #232	; 0xe8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002000:	f107 0318 	add.w	r3, r7, #24
 8002004:	22bc      	movs	r2, #188	; 0xbc
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f00c f801 	bl	800e010 <memset>
  if(sdHandle->Instance==SDMMC1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a37      	ldr	r2, [pc, #220]	; (80020f0 <HAL_SD_MspInit+0x108>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d166      	bne.n	80020e6 <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800201e:	2300      	movs	r3, #0
 8002020:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	4618      	mov	r0, r3
 8002028:	f002 ff5e 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8002032:	f7ff ff68 	bl	8001f06 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_SD_MspInit+0x10c>)
 8002038:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800203c:	4a2d      	ldr	r2, [pc, #180]	; (80020f4 <HAL_SD_MspInit+0x10c>)
 800203e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002042:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002046:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_SD_MspInit+0x10c>)
 8002048:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_SD_MspInit+0x10c>)
 8002056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205a:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_SD_MspInit+0x10c>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002064:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_SD_MspInit+0x10c>)
 8002066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_SD_MspInit+0x10c>)
 8002074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002078:	4a1e      	ldr	r2, [pc, #120]	; (80020f4 <HAL_SD_MspInit+0x10c>)
 800207a:	f043 0308 	orr.w	r3, r3, #8
 800207e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <HAL_SD_MspInit+0x10c>)
 8002084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002090:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002094:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80020aa:	230c      	movs	r3, #12
 80020ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4810      	ldr	r0, [pc, #64]	; (80020f8 <HAL_SD_MspInit+0x110>)
 80020b8:	f001 fd1c 	bl	8003af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020bc:	2304      	movs	r3, #4
 80020be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80020d4:	230c      	movs	r3, #12
 80020d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020de:	4619      	mov	r1, r3
 80020e0:	4806      	ldr	r0, [pc, #24]	; (80020fc <HAL_SD_MspInit+0x114>)
 80020e2:	f001 fd07 	bl	8003af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80020e6:	bf00      	nop
 80020e8:	37e8      	adds	r7, #232	; 0xe8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	52007000 	.word	0x52007000
 80020f4:	58024400 	.word	0x58024400
 80020f8:	58020800 	.word	0x58020800
 80020fc:	58020c00 	.word	0x58020c00

08002100 <_Z41__static_initialization_and_destruction_0ii>:
#include "Sparkbox.h"


Sparkbox spk;
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002116:	4293      	cmp	r3, r2
 8002118:	d102      	bne.n	8002120 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800211a:	4803      	ldr	r0, [pc, #12]	; (8002128 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800211c:	f7fe fa5c 	bl	80005d8 <_ZN8SparkboxC1Ev>
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	24000098 	.word	0x24000098

0800212c <_GLOBAL__sub_I_spk>:
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
 8002130:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002134:	2001      	movs	r0, #1
 8002136:	f7ff ffe3 	bl	8002100 <_Z41__static_initialization_and_destruction_0ii>
 800213a:	bd80      	pop	{r7, pc}

0800213c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <MX_SPI1_Init+0xa4>)
 8002142:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <MX_SPI1_Init+0xa8>)
 8002144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <MX_SPI1_Init+0xa4>)
 8002148:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800214c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <MX_SPI1_Init+0xa4>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <MX_SPI1_Init+0xa4>)
 8002156:	2203      	movs	r2, #3
 8002158:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <MX_SPI1_Init+0xa4>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <MX_SPI1_Init+0xa4>)
 8002162:	2200      	movs	r2, #0
 8002164:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <MX_SPI1_Init+0xa4>)
 8002168:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800216c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <MX_SPI1_Init+0xa4>)
 8002170:	2200      	movs	r2, #0
 8002172:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <MX_SPI1_Init+0xa4>)
 8002176:	2200      	movs	r2, #0
 8002178:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <MX_SPI1_Init+0xa4>)
 800217c:	2200      	movs	r2, #0
 800217e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <MX_SPI1_Init+0xa4>)
 8002182:	2200      	movs	r2, #0
 8002184:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <MX_SPI1_Init+0xa4>)
 8002188:	2200      	movs	r2, #0
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_SPI1_Init+0xa4>)
 800218e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002192:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <MX_SPI1_Init+0xa4>)
 8002196:	2200      	movs	r2, #0
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_SPI1_Init+0xa4>)
 800219c:	2200      	movs	r2, #0
 800219e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_SPI1_Init+0xa4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_SPI1_Init+0xa4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_SPI1_Init+0xa4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <MX_SPI1_Init+0xa4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_SPI1_Init+0xa4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MX_SPI1_Init+0xa4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_SPI1_Init+0xa4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_SPI1_Init+0xa4>)
 80021cc:	f006 fa6a 	bl	80086a4 <HAL_SPI_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80021d6:	f7ff fe96 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	24004b70 	.word	0x24004b70
 80021e4:	40013000 	.word	0x40013000

080021e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0ba      	sub	sp, #232	; 0xe8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002200:	f107 0318 	add.w	r3, r7, #24
 8002204:	22bc      	movs	r2, #188	; 0xbc
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f00b ff01 	bl	800e010 <memset>
  if(spiHandle->Instance==SPI1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a37      	ldr	r2, [pc, #220]	; (80022f0 <HAL_SPI_MspInit+0x108>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d166      	bne.n	80022e6 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800221e:	2300      	movs	r3, #0
 8002220:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002222:	f107 0318 	add.w	r3, r7, #24
 8002226:	4618      	mov	r0, r3
 8002228:	f002 fe5e 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002232:	f7ff fe68 	bl	8001f06 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002236:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <HAL_SPI_MspInit+0x10c>)
 8002238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800223c:	4a2d      	ldr	r2, [pc, #180]	; (80022f4 <HAL_SPI_MspInit+0x10c>)
 800223e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002242:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_SPI_MspInit+0x10c>)
 8002248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800224c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_SPI_MspInit+0x10c>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225a:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <HAL_SPI_MspInit+0x10c>)
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002264:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <HAL_SPI_MspInit+0x10c>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_SPI_MspInit+0x10c>)
 8002274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002278:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <HAL_SPI_MspInit+0x10c>)
 800227a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_SPI_MspInit+0x10c>)
 8002284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a8:	2305      	movs	r3, #5
 80022aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022b2:	4619      	mov	r1, r3
 80022b4:	4810      	ldr	r0, [pc, #64]	; (80022f8 <HAL_SPI_MspInit+0x110>)
 80022b6:	f001 fc1d 	bl	8003af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80022ba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022d4:	2305      	movs	r3, #5
 80022d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022de:	4619      	mov	r1, r3
 80022e0:	4806      	ldr	r0, [pc, #24]	; (80022fc <HAL_SPI_MspInit+0x114>)
 80022e2:	f001 fc07 	bl	8003af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022e6:	bf00      	nop
 80022e8:	37e8      	adds	r7, #232	; 0xe8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40013000 	.word	0x40013000
 80022f4:	58024400 	.word	0x58024400
 80022f8:	58020c00 	.word	0x58020c00
 80022fc:	58021800 	.word	0x58021800

08002300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_MspInit+0x38>)
 8002308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_MspInit+0x38>)
 800230e:	f043 0302 	orr.w	r3, r3, #2
 8002312:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_MspInit+0x38>)
 8002318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	210f      	movs	r1, #15
 8002328:	f06f 0001 	mvn.w	r0, #1
 800232c:	f000 fc10 	bl	8002b50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	58024400 	.word	0x58024400

0800233c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b090      	sub	sp, #64	; 0x40
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	d827      	bhi.n	800239a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 800234a:	2200      	movs	r2, #0
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	201c      	movs	r0, #28
 8002350:	f000 fbfe 	bl	8002b50 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002354:	201c      	movs	r0, #28
 8002356:	f000 fc15 	bl	8002b84 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800235a:	4a29      	ldr	r2, [pc, #164]	; (8002400 <HAL_InitTick+0xc4>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <HAL_InitTick+0xc8>)
 8002362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002366:	4a27      	ldr	r2, [pc, #156]	; (8002404 <HAL_InitTick+0xc8>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_InitTick+0xc8>)
 8002372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800237e:	f107 0210 	add.w	r2, r7, #16
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f002 fd6b 	bl	8004e64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002394:	2b00      	cmp	r3, #0
 8002396:	d106      	bne.n	80023a6 <HAL_InitTick+0x6a>
 8002398:	e001      	b.n	800239e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e02c      	b.n	80023f8 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800239e:	f002 fd35 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80023a2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80023a4:	e004      	b.n	80023b0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023a6:	f002 fd31 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80023aa:	4603      	mov	r3, r0
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <HAL_InitTick+0xcc>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	0c9b      	lsrs	r3, r3, #18
 80023ba:	3b01      	subs	r3, #1
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_InitTick+0xd0>)
 80023c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_InitTick+0xd0>)
 80023c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023cc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80023ce:	4a0f      	ldr	r2, [pc, #60]	; (800240c <HAL_InitTick+0xd0>)
 80023d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_InitTick+0xd0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_InitTick+0xd0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80023e0:	480a      	ldr	r0, [pc, #40]	; (800240c <HAL_InitTick+0xd0>)
 80023e2:	f006 facd 	bl	8008980 <HAL_TIM_Base_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d104      	bne.n	80023f6 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <HAL_InitTick+0xd0>)
 80023ee:	f006 fb1f 	bl	8008a30 <HAL_TIM_Base_Start_IT>
 80023f2:	4603      	mov	r3, r0
 80023f4:	e000      	b.n	80023f8 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3740      	adds	r7, #64	; 0x40
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	24000008 	.word	0x24000008
 8002404:	58024400 	.word	0x58024400
 8002408:	431bde83 	.word	0x431bde83
 800240c:	24004bf8 	.word	0x24004bf8

08002410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <NMI_Handler+0x4>

08002416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800241a:	e7fe      	b.n	800241a <HardFault_Handler+0x4>

0800241c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <MemManage_Handler+0x4>

08002422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002426:	e7fe      	b.n	8002426 <BusFault_Handler+0x4>

08002428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800242c:	e7fe      	b.n	800242c <UsageFault_Handler+0x4>

0800242e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <TIM2_IRQHandler+0x10>)
 8002442:	f006 fb65 	bl	8008b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	24004bf8 	.word	0x24004bf8

08002450 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002454:	4803      	ldr	r0, [pc, #12]	; (8002464 <TIM6_DAC_IRQHandler+0x14>)
 8002456:	f000 fc17 	bl	8002c88 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800245a:	4803      	ldr	r0, [pc, #12]	; (8002468 <TIM6_DAC_IRQHandler+0x18>)
 800245c:	f006 fb58 	bl	8008b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	240049d0 	.word	0x240049d0
 8002468:	24004c44 	.word	0x24004c44

0800246c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
	return 1;
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_kill>:

int _kill(int pid, int sig)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002486:	f00b fd7b 	bl	800df80 <__errno>
 800248a:	4603      	mov	r3, r0
 800248c:	2216      	movs	r2, #22
 800248e:	601a      	str	r2, [r3, #0]
	return -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_exit>:

void _exit (int status)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ffe7 	bl	800247c <_kill>
	while (1) {}		/* Make sure we hang here */
 80024ae:	e7fe      	b.n	80024ae <_exit+0x12>

080024b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b8:	4a14      	ldr	r2, [pc, #80]	; (800250c <_sbrk+0x5c>)
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <_sbrk+0x60>)
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <_sbrk+0x64>)
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <_sbrk+0x68>)
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d207      	bcs.n	80024f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e0:	f00b fd4e 	bl	800df80 <__errno>
 80024e4:	4603      	mov	r3, r0
 80024e6:	220c      	movs	r2, #12
 80024e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
 80024ee:	e009      	b.n	8002504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <_sbrk+0x64>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <_sbrk+0x64>)
 8002500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002502:	68fb      	ldr	r3, [r7, #12]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	24080000 	.word	0x24080000
 8002510:	00000400 	.word	0x00000400
 8002514:	2400009c 	.word	0x2400009c
 8002518:	240051e0 	.word	0x240051e0

0800251c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002520:	4b39      	ldr	r3, [pc, #228]	; (8002608 <SystemInit+0xec>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002526:	4a38      	ldr	r2, [pc, #224]	; (8002608 <SystemInit+0xec>)
 8002528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800252c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <SystemInit+0xf0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	2b06      	cmp	r3, #6
 800253a:	d807      	bhi.n	800254c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800253c:	4b33      	ldr	r3, [pc, #204]	; (800260c <SystemInit+0xf0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 030f 	bic.w	r3, r3, #15
 8002544:	4a31      	ldr	r2, [pc, #196]	; (800260c <SystemInit+0xf0>)
 8002546:	f043 0307 	orr.w	r3, r3, #7
 800254a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800254c:	4b30      	ldr	r3, [pc, #192]	; (8002610 <SystemInit+0xf4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2f      	ldr	r2, [pc, #188]	; (8002610 <SystemInit+0xf4>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002558:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <SystemInit+0xf4>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800255e:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <SystemInit+0xf4>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	492b      	ldr	r1, [pc, #172]	; (8002610 <SystemInit+0xf4>)
 8002564:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <SystemInit+0xf8>)
 8002566:	4013      	ands	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800256a:	4b28      	ldr	r3, [pc, #160]	; (800260c <SystemInit+0xf0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <SystemInit+0xf0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 030f 	bic.w	r3, r3, #15
 800257e:	4a23      	ldr	r2, [pc, #140]	; (800260c <SystemInit+0xf0>)
 8002580:	f043 0307 	orr.w	r3, r3, #7
 8002584:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <SystemInit+0xf4>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800258c:	4b20      	ldr	r3, [pc, #128]	; (8002610 <SystemInit+0xf4>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002592:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <SystemInit+0xf4>)
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <SystemInit+0xf4>)
 800259a:	4a1f      	ldr	r2, [pc, #124]	; (8002618 <SystemInit+0xfc>)
 800259c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800259e:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <SystemInit+0xf4>)
 80025a0:	4a1e      	ldr	r2, [pc, #120]	; (800261c <SystemInit+0x100>)
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025a4:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <SystemInit+0xf4>)
 80025a6:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <SystemInit+0x104>)
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <SystemInit+0xf4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <SystemInit+0xf4>)
 80025b2:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <SystemInit+0x104>)
 80025b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <SystemInit+0xf4>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <SystemInit+0xf4>)
 80025be:	4a18      	ldr	r2, [pc, #96]	; (8002620 <SystemInit+0x104>)
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <SystemInit+0xf4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <SystemInit+0xf4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a10      	ldr	r2, [pc, #64]	; (8002610 <SystemInit+0xf4>)
 80025ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <SystemInit+0xf4>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <SystemInit+0x108>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <SystemInit+0x10c>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e6:	d202      	bcs.n	80025ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <SystemInit+0x110>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <SystemInit+0x114>)
 80025f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80025f4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <SystemInit+0xec>)
 80025f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025fc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00
 800260c:	52002000 	.word	0x52002000
 8002610:	58024400 	.word	0x58024400
 8002614:	eaf6ed7f 	.word	0xeaf6ed7f
 8002618:	02020200 	.word	0x02020200
 800261c:	01ff0000 	.word	0x01ff0000
 8002620:	01010280 	.word	0x01010280
 8002624:	5c001000 	.word	0x5c001000
 8002628:	ffff0000 	.word	0xffff0000
 800262c:	51008108 	.word	0x51008108
 8002630:	52004000 	.word	0x52004000

08002634 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <MX_TIM6_Init+0x64>)
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <MX_TIM6_Init+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <MX_TIM6_Init+0x64>)
 800264c:	2263      	movs	r2, #99	; 0x63
 800264e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MX_TIM6_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 24;
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <MX_TIM6_Init+0x64>)
 8002658:	2218      	movs	r2, #24
 800265a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_TIM6_Init+0x64>)
 800265e:	2280      	movs	r2, #128	; 0x80
 8002660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002662:	480d      	ldr	r0, [pc, #52]	; (8002698 <MX_TIM6_Init+0x64>)
 8002664:	f006 f98c 	bl	8008980 <HAL_TIM_Base_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800266e:	f7ff fc4a 	bl	8001f06 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002672:	2320      	movs	r3, #32
 8002674:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	4619      	mov	r1, r3
 800267e:	4806      	ldr	r0, [pc, #24]	; (8002698 <MX_TIM6_Init+0x64>)
 8002680:	f006 fc28 	bl	8008ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800268a:	f7ff fc3c 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	24004c44 	.word	0x24004c44
 800269c:	40001000 	.word	0x40001000

080026a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <HAL_TIM_Base_MspInit+0x48>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d116      	bne.n	80026e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <HAL_TIM_Base_MspInit+0x4c>)
 80026b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026b8:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <HAL_TIM_Base_MspInit+0x4c>)
 80026ba:	f043 0310 	orr.w	r3, r3, #16
 80026be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_TIM_Base_MspInit+0x4c>)
 80026c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2105      	movs	r1, #5
 80026d4:	2036      	movs	r0, #54	; 0x36
 80026d6:	f000 fa3b 	bl	8002b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026da:	2036      	movs	r0, #54	; 0x36
 80026dc:	f000 fa52 	bl	8002b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40001000 	.word	0x40001000
 80026ec:	58024400 	.word	0x58024400

080026f0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026f4:	4b22      	ldr	r3, [pc, #136]	; (8002780 <MX_USART3_UART_Init+0x90>)
 80026f6:	4a23      	ldr	r2, [pc, #140]	; (8002784 <MX_USART3_UART_Init+0x94>)
 80026f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <MX_USART3_UART_Init+0x90>)
 80026fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002700:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002702:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <MX_USART3_UART_Init+0x90>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <MX_USART3_UART_Init+0x90>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800270e:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <MX_USART3_UART_Init+0x90>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <MX_USART3_UART_Init+0x90>)
 8002716:	220c      	movs	r2, #12
 8002718:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <MX_USART3_UART_Init+0x90>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002720:	4b17      	ldr	r3, [pc, #92]	; (8002780 <MX_USART3_UART_Init+0x90>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <MX_USART3_UART_Init+0x90>)
 8002728:	2200      	movs	r2, #0
 800272a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <MX_USART3_UART_Init+0x90>)
 800272e:	2200      	movs	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <MX_USART3_UART_Init+0x90>)
 8002734:	2200      	movs	r2, #0
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002738:	4811      	ldr	r0, [pc, #68]	; (8002780 <MX_USART3_UART_Init+0x90>)
 800273a:	f006 fc71 	bl	8009020 <HAL_UART_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002744:	f7ff fbdf 	bl	8001f06 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002748:	2100      	movs	r1, #0
 800274a:	480d      	ldr	r0, [pc, #52]	; (8002780 <MX_USART3_UART_Init+0x90>)
 800274c:	f007 fbbe 	bl	8009ecc <HAL_UARTEx_SetTxFifoThreshold>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002756:	f7ff fbd6 	bl	8001f06 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800275a:	2100      	movs	r1, #0
 800275c:	4808      	ldr	r0, [pc, #32]	; (8002780 <MX_USART3_UART_Init+0x90>)
 800275e:	f007 fbf3 	bl	8009f48 <HAL_UARTEx_SetRxFifoThreshold>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002768:	f7ff fbcd 	bl	8001f06 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800276c:	4804      	ldr	r0, [pc, #16]	; (8002780 <MX_USART3_UART_Init+0x90>)
 800276e:	f007 fb74 	bl	8009e5a <HAL_UARTEx_DisableFifoMode>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002778:	f7ff fbc5 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}
 8002780:	24004c90 	.word	0x24004c90
 8002784:	40004800 	.word	0x40004800

08002788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b0b8      	sub	sp, #224	; 0xe0
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	22bc      	movs	r2, #188	; 0xbc
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f00b fc31 	bl	800e010 <memset>
  if(uartHandle->Instance==USART3)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a2d      	ldr	r2, [pc, #180]	; (8002868 <HAL_UART_MspInit+0xe0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d152      	bne.n	800285e <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027b8:	2302      	movs	r3, #2
 80027ba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80027bc:	2304      	movs	r3, #4
 80027be:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 75;
 80027c0:	234b      	movs	r3, #75	; 0x4b
 80027c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80027c4:	2302      	movs	r3, #2
 80027c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80027c8:	2302      	movs	r3, #2
 80027ca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80027cc:	2302      	movs	r3, #2
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80027d0:	2340      	movs	r3, #64	; 0x40
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80027d4:	2320      	movs	r3, #32
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 80027dc:	2301      	movs	r3, #1
 80027de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e2:	f107 0310 	add.w	r3, r7, #16
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 fb7e 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_UART_MspInit+0x6e>
    {
      Error_Handler();
 80027f2:	f7ff fb88 	bl	8001f06 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027f6:	4b1d      	ldr	r3, [pc, #116]	; (800286c <HAL_UART_MspInit+0xe4>)
 80027f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <HAL_UART_MspInit+0xe4>)
 80027fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002802:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_UART_MspInit+0xe4>)
 8002808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800280c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_UART_MspInit+0xe4>)
 8002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281a:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_UART_MspInit+0xe4>)
 800281c:	f043 0308 	orr.w	r3, r3, #8
 8002820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_UART_MspInit+0xe4>)
 8002826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002832:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002836:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800284c:	2307      	movs	r3, #7
 800284e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002852:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002856:	4619      	mov	r1, r3
 8002858:	4805      	ldr	r0, [pc, #20]	; (8002870 <HAL_UART_MspInit+0xe8>)
 800285a:	f001 f94b 	bl	8003af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800285e:	bf00      	nop
 8002860:	37e0      	adds	r7, #224	; 0xe0
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40004800 	.word	0x40004800
 800286c:	58024400 	.word	0x58024400
 8002870:	58020c00 	.word	0x58020c00

08002874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002878:	f7ff fe50 	bl	800251c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800287c:	480c      	ldr	r0, [pc, #48]	; (80028b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800287e:	490d      	ldr	r1, [pc, #52]	; (80028b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002880:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002884:	e002      	b.n	800288c <LoopCopyDataInit>

08002886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288a:	3304      	adds	r3, #4

0800288c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800288c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002890:	d3f9      	bcc.n	8002886 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002892:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002894:	4c0a      	ldr	r4, [pc, #40]	; (80028c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002898:	e001      	b.n	800289e <LoopFillZerobss>

0800289a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800289c:	3204      	adds	r2, #4

0800289e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a0:	d3fb      	bcc.n	800289a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028a2:	f00b fb73 	bl	800df8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028a6:	f7ff fa75 	bl	8001d94 <main>
  bx  lr
 80028aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80028b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80028b4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80028b8:	0800e398 	.word	0x0800e398
  ldr r2, =_sbss
 80028bc:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80028c0:	240051dc 	.word	0x240051dc

080028c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028c4:	e7fe      	b.n	80028c4 <ADC3_IRQHandler>
	...

080028c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028ce:	2003      	movs	r0, #3
 80028d0:	f000 f933 	bl	8002b3a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028d4:	f002 f8f0 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_Init+0x68>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	4913      	ldr	r1, [pc, #76]	; (8002934 <HAL_Init+0x6c>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
 80028f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_Init+0x68>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	4a0e      	ldr	r2, [pc, #56]	; (8002934 <HAL_Init+0x6c>)
 80028fc:	5cd3      	ldrb	r3, [r2, r3]
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
 8002908:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <HAL_Init+0x70>)
 800290a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800290c:	4a0b      	ldr	r2, [pc, #44]	; (800293c <HAL_Init+0x74>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002912:	200f      	movs	r0, #15
 8002914:	f7ff fd12 	bl	800233c <HAL_InitTick>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e002      	b.n	8002928 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002922:	f7ff fced 	bl	8002300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	58024400 	.word	0x58024400
 8002934:	0800e330 	.word	0x0800e330
 8002938:	24000004 	.word	0x24000004
 800293c:	24000000 	.word	0x24000000

08002940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_IncTick+0x20>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_IncTick+0x24>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4413      	add	r3, r2
 8002950:	4a04      	ldr	r2, [pc, #16]	; (8002964 <HAL_IncTick+0x24>)
 8002952:	6013      	str	r3, [r2, #0]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	2400000c 	.word	0x2400000c
 8002964:	24004d20 	.word	0x24004d20

08002968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return uwTick;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_GetTick+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	24004d20 	.word	0x24004d20

08002980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002988:	f7ff ffee 	bl	8002968 <HAL_GetTick>
 800298c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d005      	beq.n	80029a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_Delay+0x44>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029a6:	bf00      	nop
 80029a8:	f7ff ffde 	bl	8002968 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d8f7      	bhi.n	80029a8 <HAL_Delay+0x28>
  {
  }
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2400000c 	.word	0x2400000c

080029c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_GetREVID+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0c1b      	lsrs	r3, r3, #16
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	5c001000 	.word	0x5c001000

080029e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <__NVIC_SetPriorityGrouping+0x40>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <__NVIC_SetPriorityGrouping+0x40>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	60d3      	str	r3, [r2, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00
 8002a24:	05fa0000 	.word	0x05fa0000

08002a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db0b      	blt.n	8002a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	4907      	ldr	r1, [pc, #28]	; (8002a7c <__NVIC_EnableIRQ+0x38>)
 8002a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2001      	movs	r0, #1
 8002a66:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000e100 	.word	0xe000e100

08002a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	db0a      	blt.n	8002aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	490c      	ldr	r1, [pc, #48]	; (8002acc <__NVIC_SetPriority+0x4c>)
 8002a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a9e:	0112      	lsls	r2, r2, #4
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa8:	e00a      	b.n	8002ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4908      	ldr	r1, [pc, #32]	; (8002ad0 <__NVIC_SetPriority+0x50>)
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	3b04      	subs	r3, #4
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	440b      	add	r3, r1
 8002abe:	761a      	strb	r2, [r3, #24]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000e100 	.word	0xe000e100
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f1c3 0307 	rsb	r3, r3, #7
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	bf28      	it	cs
 8002af2:	2304      	movcs	r3, #4
 8002af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d902      	bls.n	8002b04 <NVIC_EncodePriority+0x30>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3b03      	subs	r3, #3
 8002b02:	e000      	b.n	8002b06 <NVIC_EncodePriority+0x32>
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	401a      	ands	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	43d9      	mvns	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	4313      	orrs	r3, r2
         );
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	; 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ff4c 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b5e:	f7ff ff63 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002b62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	6978      	ldr	r0, [r7, #20]
 8002b6a:	f7ff ffb3 	bl	8002ad4 <NVIC_EncodePriority>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff82 	bl	8002a80 <__NVIC_SetPriority>
}
 8002b7c:	bf00      	nop
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ff56 	bl	8002a44 <__NVIC_EnableIRQ>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e014      	b.n	8002bdc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	791b      	ldrb	r3, [r3, #4]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d105      	bne.n	8002bc8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe fda8 	bl	8001718 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	795b      	ldrb	r3, [r3, #5]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_DAC_Start+0x16>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e040      	b.n	8002c7c <HAL_DAC_Start+0x98>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6819      	ldr	r1, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2201      	movs	r2, #1
 8002c14:	409a      	lsls	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10f      	bne.n	8002c44 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d11d      	bne.n	8002c6e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	e014      	b.n	8002c6e <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2102      	movs	r1, #2
 8002c56:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d107      	bne.n	8002c6e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0202 	orr.w	r2, r2, #2
 8002c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9e:	d120      	bne.n	8002ce2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cae:	d118      	bne.n	8002ce2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cda:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f82d 	bl	8002d3c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf0:	d120      	bne.n	8002d34 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d00:	d118      	bne.n	8002d34 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f043 0202 	orr.w	r2, r3, #2
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f93e 	bl	8002fb0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	795b      	ldrb	r3, [r3, #5]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_DAC_ConfigChannel+0x18>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e11d      	b.n	8002fa4 <HAL_DAC_ConfigChannel+0x254>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2202      	movs	r2, #2
 8002d72:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d174      	bne.n	8002e66 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002d7c:	f7ff fdf4 	bl	8002968 <HAL_GetTick>
 8002d80:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d134      	bne.n	8002df2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d88:	e011      	b.n	8002dae <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d8a:	f7ff fded 	bl	8002968 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d90a      	bls.n	8002dae <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f043 0208 	orr.w	r2, r3, #8
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2203      	movs	r2, #3
 8002da8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e0fa      	b.n	8002fa4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db4:	4b7d      	ldr	r3, [pc, #500]	; (8002fac <HAL_DAC_ConfigChannel+0x25c>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e6      	bne.n	8002d8a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f7ff fddf 	bl	8002980 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	6992      	ldr	r2, [r2, #24]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40
 8002dcc:	e01e      	b.n	8002e0c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002dce:	f7ff fdcb 	bl	8002968 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d90a      	bls.n	8002df2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f043 0208 	orr.w	r2, r3, #8
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2203      	movs	r2, #3
 8002dec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e0d8      	b.n	8002fa4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	dbe8      	blt.n	8002dce <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f7ff fdbf 	bl	8002980 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	6992      	ldr	r2, [r2, #24]
 8002e0a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	ea02 0103 	and.w	r1, r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	409a      	lsls	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	21ff      	movs	r1, #255	; 0xff
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	ea02 0103 	and.w	r1, r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	6a1a      	ldr	r2, [r3, #32]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d11d      	bne.n	8002eaa <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	221f      	movs	r2, #31
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4013      	ands	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2207      	movs	r2, #7
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d102      	bne.n	8002ed4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	e00f      	b.n	8002ef4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d102      	bne.n	8002ee2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002edc:	2301      	movs	r3, #1
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	e008      	b.n	8002ef4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	e001      	b.n	8002ef4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	400a      	ands	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4013      	ands	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6819      	ldr	r1, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	22c0      	movs	r2, #192	; 0xc0
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	400a      	ands	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20008000 	.word	0x20008000

08002fb0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff fccc 	bl	8002968 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e316      	b.n	800360a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a66      	ldr	r2, [pc, #408]	; (800317c <HAL_DMA_Init+0x1b8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d04a      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a65      	ldr	r2, [pc, #404]	; (8003180 <HAL_DMA_Init+0x1bc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d045      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a63      	ldr	r2, [pc, #396]	; (8003184 <HAL_DMA_Init+0x1c0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d040      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a62      	ldr	r2, [pc, #392]	; (8003188 <HAL_DMA_Init+0x1c4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d03b      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a60      	ldr	r2, [pc, #384]	; (800318c <HAL_DMA_Init+0x1c8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d036      	beq.n	800307c <HAL_DMA_Init+0xb8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a5f      	ldr	r2, [pc, #380]	; (8003190 <HAL_DMA_Init+0x1cc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d031      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a5d      	ldr	r2, [pc, #372]	; (8003194 <HAL_DMA_Init+0x1d0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d02c      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a5c      	ldr	r2, [pc, #368]	; (8003198 <HAL_DMA_Init+0x1d4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d027      	beq.n	800307c <HAL_DMA_Init+0xb8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a5a      	ldr	r2, [pc, #360]	; (800319c <HAL_DMA_Init+0x1d8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d022      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a59      	ldr	r2, [pc, #356]	; (80031a0 <HAL_DMA_Init+0x1dc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d01d      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a57      	ldr	r2, [pc, #348]	; (80031a4 <HAL_DMA_Init+0x1e0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d018      	beq.n	800307c <HAL_DMA_Init+0xb8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a56      	ldr	r2, [pc, #344]	; (80031a8 <HAL_DMA_Init+0x1e4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a54      	ldr	r2, [pc, #336]	; (80031ac <HAL_DMA_Init+0x1e8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <HAL_DMA_Init+0xb8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a53      	ldr	r2, [pc, #332]	; (80031b0 <HAL_DMA_Init+0x1ec>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d009      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a51      	ldr	r2, [pc, #324]	; (80031b4 <HAL_DMA_Init+0x1f0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a50      	ldr	r2, [pc, #320]	; (80031b8 <HAL_DMA_Init+0x1f4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d101      	bne.n	8003080 <HAL_DMA_Init+0xbc>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <HAL_DMA_Init+0xbe>
 8003080:	2300      	movs	r3, #0
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 813b 	beq.w	80032fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a37      	ldr	r2, [pc, #220]	; (800317c <HAL_DMA_Init+0x1b8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d04a      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a36      	ldr	r2, [pc, #216]	; (8003180 <HAL_DMA_Init+0x1bc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d045      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a34      	ldr	r2, [pc, #208]	; (8003184 <HAL_DMA_Init+0x1c0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d040      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a33      	ldr	r2, [pc, #204]	; (8003188 <HAL_DMA_Init+0x1c4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d03b      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a31      	ldr	r2, [pc, #196]	; (800318c <HAL_DMA_Init+0x1c8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d036      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a30      	ldr	r2, [pc, #192]	; (8003190 <HAL_DMA_Init+0x1cc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d031      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2e      	ldr	r2, [pc, #184]	; (8003194 <HAL_DMA_Init+0x1d0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d02c      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a2d      	ldr	r2, [pc, #180]	; (8003198 <HAL_DMA_Init+0x1d4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d027      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a2b      	ldr	r2, [pc, #172]	; (800319c <HAL_DMA_Init+0x1d8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d022      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2a      	ldr	r2, [pc, #168]	; (80031a0 <HAL_DMA_Init+0x1dc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d01d      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a28      	ldr	r2, [pc, #160]	; (80031a4 <HAL_DMA_Init+0x1e0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d018      	beq.n	8003138 <HAL_DMA_Init+0x174>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <HAL_DMA_Init+0x1e4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d013      	beq.n	8003138 <HAL_DMA_Init+0x174>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a25      	ldr	r2, [pc, #148]	; (80031ac <HAL_DMA_Init+0x1e8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00e      	beq.n	8003138 <HAL_DMA_Init+0x174>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a24      	ldr	r2, [pc, #144]	; (80031b0 <HAL_DMA_Init+0x1ec>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d009      	beq.n	8003138 <HAL_DMA_Init+0x174>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <HAL_DMA_Init+0x1f0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <HAL_DMA_Init+0x174>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a21      	ldr	r2, [pc, #132]	; (80031b8 <HAL_DMA_Init+0x1f4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d108      	bne.n	800314a <HAL_DMA_Init+0x186>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e007      	b.n	800315a <HAL_DMA_Init+0x196>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800315a:	e02f      	b.n	80031bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800315c:	f7ff fc04 	bl	8002968 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b05      	cmp	r3, #5
 8003168:	d928      	bls.n	80031bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2203      	movs	r2, #3
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e246      	b.n	800360a <HAL_DMA_Init+0x646>
 800317c:	40020010 	.word	0x40020010
 8003180:	40020028 	.word	0x40020028
 8003184:	40020040 	.word	0x40020040
 8003188:	40020058 	.word	0x40020058
 800318c:	40020070 	.word	0x40020070
 8003190:	40020088 	.word	0x40020088
 8003194:	400200a0 	.word	0x400200a0
 8003198:	400200b8 	.word	0x400200b8
 800319c:	40020410 	.word	0x40020410
 80031a0:	40020428 	.word	0x40020428
 80031a4:	40020440 	.word	0x40020440
 80031a8:	40020458 	.word	0x40020458
 80031ac:	40020470 	.word	0x40020470
 80031b0:	40020488 	.word	0x40020488
 80031b4:	400204a0 	.word	0x400204a0
 80031b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1c8      	bne.n	800315c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4b83      	ldr	r3, [pc, #524]	; (80033e4 <HAL_DMA_Init+0x420>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80031e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	2b04      	cmp	r3, #4
 800320e:	d107      	bne.n	8003220 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	4313      	orrs	r3, r2
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003220:	4b71      	ldr	r3, [pc, #452]	; (80033e8 <HAL_DMA_Init+0x424>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b71      	ldr	r3, [pc, #452]	; (80033ec <HAL_DMA_Init+0x428>)
 8003226:	4013      	ands	r3, r2
 8003228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800322c:	d328      	bcc.n	8003280 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b28      	cmp	r3, #40	; 0x28
 8003234:	d903      	bls.n	800323e <HAL_DMA_Init+0x27a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b2e      	cmp	r3, #46	; 0x2e
 800323c:	d917      	bls.n	800326e <HAL_DMA_Init+0x2aa>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b3e      	cmp	r3, #62	; 0x3e
 8003244:	d903      	bls.n	800324e <HAL_DMA_Init+0x28a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b42      	cmp	r3, #66	; 0x42
 800324c:	d90f      	bls.n	800326e <HAL_DMA_Init+0x2aa>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b46      	cmp	r3, #70	; 0x46
 8003254:	d903      	bls.n	800325e <HAL_DMA_Init+0x29a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b48      	cmp	r3, #72	; 0x48
 800325c:	d907      	bls.n	800326e <HAL_DMA_Init+0x2aa>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b4e      	cmp	r3, #78	; 0x4e
 8003264:	d905      	bls.n	8003272 <HAL_DMA_Init+0x2ae>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b52      	cmp	r3, #82	; 0x52
 800326c:	d801      	bhi.n	8003272 <HAL_DMA_Init+0x2ae>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_DMA_Init+0x2b0>
 8003272:	2300      	movs	r3, #0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800327e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f023 0307 	bic.w	r3, r3, #7
 8003296:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d117      	bne.n	80032da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00e      	beq.n	80032da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fa8f 	bl	80037e0 <DMA_CheckFifoParam>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2240      	movs	r2, #64	; 0x40
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e197      	b.n	800360a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f9ca 	bl	800367c <DMA_CalcBaseAndBitshift>
 80032e8:	4603      	mov	r3, r0
 80032ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	223f      	movs	r2, #63	; 0x3f
 80032f6:	409a      	lsls	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	e0cd      	b.n	800349a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a3b      	ldr	r2, [pc, #236]	; (80033f0 <HAL_DMA_Init+0x42c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d022      	beq.n	800334e <HAL_DMA_Init+0x38a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a39      	ldr	r2, [pc, #228]	; (80033f4 <HAL_DMA_Init+0x430>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01d      	beq.n	800334e <HAL_DMA_Init+0x38a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a38      	ldr	r2, [pc, #224]	; (80033f8 <HAL_DMA_Init+0x434>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d018      	beq.n	800334e <HAL_DMA_Init+0x38a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a36      	ldr	r2, [pc, #216]	; (80033fc <HAL_DMA_Init+0x438>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_DMA_Init+0x38a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a35      	ldr	r2, [pc, #212]	; (8003400 <HAL_DMA_Init+0x43c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_DMA_Init+0x38a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a33      	ldr	r2, [pc, #204]	; (8003404 <HAL_DMA_Init+0x440>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d009      	beq.n	800334e <HAL_DMA_Init+0x38a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a32      	ldr	r2, [pc, #200]	; (8003408 <HAL_DMA_Init+0x444>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_DMA_Init+0x38a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a30      	ldr	r2, [pc, #192]	; (800340c <HAL_DMA_Init+0x448>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_DMA_Init+0x38e>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <HAL_DMA_Init+0x390>
 8003352:	2300      	movs	r3, #0
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 8097 	beq.w	8003488 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a24      	ldr	r2, [pc, #144]	; (80033f0 <HAL_DMA_Init+0x42c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d021      	beq.n	80033a8 <HAL_DMA_Init+0x3e4>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a22      	ldr	r2, [pc, #136]	; (80033f4 <HAL_DMA_Init+0x430>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01c      	beq.n	80033a8 <HAL_DMA_Init+0x3e4>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a21      	ldr	r2, [pc, #132]	; (80033f8 <HAL_DMA_Init+0x434>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d017      	beq.n	80033a8 <HAL_DMA_Init+0x3e4>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <HAL_DMA_Init+0x438>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d012      	beq.n	80033a8 <HAL_DMA_Init+0x3e4>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1e      	ldr	r2, [pc, #120]	; (8003400 <HAL_DMA_Init+0x43c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00d      	beq.n	80033a8 <HAL_DMA_Init+0x3e4>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <HAL_DMA_Init+0x440>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d008      	beq.n	80033a8 <HAL_DMA_Init+0x3e4>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <HAL_DMA_Init+0x444>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <HAL_DMA_Init+0x3e4>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a19      	ldr	r2, [pc, #100]	; (800340c <HAL_DMA_Init+0x448>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_DMA_Init+0x44c>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d020      	beq.n	8003414 <HAL_DMA_Init+0x450>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b80      	cmp	r3, #128	; 0x80
 80033d8:	d102      	bne.n	80033e0 <HAL_DMA_Init+0x41c>
 80033da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033de:	e01a      	b.n	8003416 <HAL_DMA_Init+0x452>
 80033e0:	2300      	movs	r3, #0
 80033e2:	e018      	b.n	8003416 <HAL_DMA_Init+0x452>
 80033e4:	fe10803f 	.word	0xfe10803f
 80033e8:	5c001000 	.word	0x5c001000
 80033ec:	ffff0000 	.word	0xffff0000
 80033f0:	58025408 	.word	0x58025408
 80033f4:	5802541c 	.word	0x5802541c
 80033f8:	58025430 	.word	0x58025430
 80033fc:	58025444 	.word	0x58025444
 8003400:	58025458 	.word	0x58025458
 8003404:	5802546c 	.word	0x5802546c
 8003408:	58025480 	.word	0x58025480
 800340c:	58025494 	.word	0x58025494
 8003410:	fffe000f 	.word	0xfffe000f
 8003414:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68d2      	ldr	r2, [r2, #12]
 800341a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800341c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003424:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800342c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003434:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800343c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003444:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	4b6e      	ldr	r3, [pc, #440]	; (8003614 <HAL_DMA_Init+0x650>)
 800345c:	4413      	add	r3, r2
 800345e:	4a6e      	ldr	r2, [pc, #440]	; (8003618 <HAL_DMA_Init+0x654>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	009a      	lsls	r2, r3, #2
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f905 	bl	800367c <DMA_CalcBaseAndBitshift>
 8003472:	4603      	mov	r3, r0
 8003474:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2201      	movs	r2, #1
 8003480:	409a      	lsls	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	e008      	b.n	800349a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2240      	movs	r2, #64	; 0x40
 800348c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2203      	movs	r2, #3
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0b7      	b.n	800360a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a5f      	ldr	r2, [pc, #380]	; (800361c <HAL_DMA_Init+0x658>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d072      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a5d      	ldr	r2, [pc, #372]	; (8003620 <HAL_DMA_Init+0x65c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d06d      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a5c      	ldr	r2, [pc, #368]	; (8003624 <HAL_DMA_Init+0x660>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d068      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a5a      	ldr	r2, [pc, #360]	; (8003628 <HAL_DMA_Init+0x664>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d063      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a59      	ldr	r2, [pc, #356]	; (800362c <HAL_DMA_Init+0x668>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d05e      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a57      	ldr	r2, [pc, #348]	; (8003630 <HAL_DMA_Init+0x66c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d059      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a56      	ldr	r2, [pc, #344]	; (8003634 <HAL_DMA_Init+0x670>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d054      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a54      	ldr	r2, [pc, #336]	; (8003638 <HAL_DMA_Init+0x674>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d04f      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a53      	ldr	r2, [pc, #332]	; (800363c <HAL_DMA_Init+0x678>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d04a      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a51      	ldr	r2, [pc, #324]	; (8003640 <HAL_DMA_Init+0x67c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d045      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a50      	ldr	r2, [pc, #320]	; (8003644 <HAL_DMA_Init+0x680>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d040      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a4e      	ldr	r2, [pc, #312]	; (8003648 <HAL_DMA_Init+0x684>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d03b      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a4d      	ldr	r2, [pc, #308]	; (800364c <HAL_DMA_Init+0x688>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d036      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a4b      	ldr	r2, [pc, #300]	; (8003650 <HAL_DMA_Init+0x68c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d031      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a4a      	ldr	r2, [pc, #296]	; (8003654 <HAL_DMA_Init+0x690>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d02c      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a48      	ldr	r2, [pc, #288]	; (8003658 <HAL_DMA_Init+0x694>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d027      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a47      	ldr	r2, [pc, #284]	; (800365c <HAL_DMA_Init+0x698>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d022      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a45      	ldr	r2, [pc, #276]	; (8003660 <HAL_DMA_Init+0x69c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01d      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a44      	ldr	r2, [pc, #272]	; (8003664 <HAL_DMA_Init+0x6a0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a42      	ldr	r2, [pc, #264]	; (8003668 <HAL_DMA_Init+0x6a4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a41      	ldr	r2, [pc, #260]	; (800366c <HAL_DMA_Init+0x6a8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00e      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a3f      	ldr	r2, [pc, #252]	; (8003670 <HAL_DMA_Init+0x6ac>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a3e      	ldr	r2, [pc, #248]	; (8003674 <HAL_DMA_Init+0x6b0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_DMA_Init+0x5c6>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a3c      	ldr	r2, [pc, #240]	; (8003678 <HAL_DMA_Init+0x6b4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_DMA_Init+0x5ca>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_DMA_Init+0x5cc>
 800358e:	2300      	movs	r3, #0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d032      	beq.n	80035fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f99f 	bl	80038d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b80      	cmp	r3, #128	; 0x80
 80035a0:	d102      	bne.n	80035a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d010      	beq.n	80035e8 <HAL_DMA_Init+0x624>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d80c      	bhi.n	80035e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fa1c 	bl	8003a0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	e008      	b.n	80035fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	a7fdabf8 	.word	0xa7fdabf8
 8003618:	cccccccd 	.word	0xcccccccd
 800361c:	40020010 	.word	0x40020010
 8003620:	40020028 	.word	0x40020028
 8003624:	40020040 	.word	0x40020040
 8003628:	40020058 	.word	0x40020058
 800362c:	40020070 	.word	0x40020070
 8003630:	40020088 	.word	0x40020088
 8003634:	400200a0 	.word	0x400200a0
 8003638:	400200b8 	.word	0x400200b8
 800363c:	40020410 	.word	0x40020410
 8003640:	40020428 	.word	0x40020428
 8003644:	40020440 	.word	0x40020440
 8003648:	40020458 	.word	0x40020458
 800364c:	40020470 	.word	0x40020470
 8003650:	40020488 	.word	0x40020488
 8003654:	400204a0 	.word	0x400204a0
 8003658:	400204b8 	.word	0x400204b8
 800365c:	58025408 	.word	0x58025408
 8003660:	5802541c 	.word	0x5802541c
 8003664:	58025430 	.word	0x58025430
 8003668:	58025444 	.word	0x58025444
 800366c:	58025458 	.word	0x58025458
 8003670:	5802546c 	.word	0x5802546c
 8003674:	58025480 	.word	0x58025480
 8003678:	58025494 	.word	0x58025494

0800367c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a42      	ldr	r2, [pc, #264]	; (8003794 <DMA_CalcBaseAndBitshift+0x118>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d04a      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a41      	ldr	r2, [pc, #260]	; (8003798 <DMA_CalcBaseAndBitshift+0x11c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d045      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a3f      	ldr	r2, [pc, #252]	; (800379c <DMA_CalcBaseAndBitshift+0x120>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d040      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a3e      	ldr	r2, [pc, #248]	; (80037a0 <DMA_CalcBaseAndBitshift+0x124>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d03b      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3c      	ldr	r2, [pc, #240]	; (80037a4 <DMA_CalcBaseAndBitshift+0x128>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d036      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a3b      	ldr	r2, [pc, #236]	; (80037a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d031      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a39      	ldr	r2, [pc, #228]	; (80037ac <DMA_CalcBaseAndBitshift+0x130>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d02c      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a38      	ldr	r2, [pc, #224]	; (80037b0 <DMA_CalcBaseAndBitshift+0x134>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d027      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a36      	ldr	r2, [pc, #216]	; (80037b4 <DMA_CalcBaseAndBitshift+0x138>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d022      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a35      	ldr	r2, [pc, #212]	; (80037b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d01d      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a33      	ldr	r2, [pc, #204]	; (80037bc <DMA_CalcBaseAndBitshift+0x140>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d018      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a32      	ldr	r2, [pc, #200]	; (80037c0 <DMA_CalcBaseAndBitshift+0x144>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d013      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a30      	ldr	r2, [pc, #192]	; (80037c4 <DMA_CalcBaseAndBitshift+0x148>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00e      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2f      	ldr	r2, [pc, #188]	; (80037c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d009      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <DMA_CalcBaseAndBitshift+0x150>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <DMA_CalcBaseAndBitshift+0xa8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <DMA_CalcBaseAndBitshift+0x154>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d101      	bne.n	8003728 <DMA_CalcBaseAndBitshift+0xac>
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <DMA_CalcBaseAndBitshift+0xae>
 8003728:	2300      	movs	r3, #0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d024      	beq.n	8003778 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	3b10      	subs	r3, #16
 8003736:	4a27      	ldr	r2, [pc, #156]	; (80037d4 <DMA_CalcBaseAndBitshift+0x158>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003748:	5cd3      	ldrb	r3, [r2, r3]
 800374a:	461a      	mov	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d908      	bls.n	8003768 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <DMA_CalcBaseAndBitshift+0x160>)
 800375e:	4013      	ands	r3, r2
 8003760:	1d1a      	adds	r2, r3, #4
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	659a      	str	r2, [r3, #88]	; 0x58
 8003766:	e00d      	b.n	8003784 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <DMA_CalcBaseAndBitshift+0x160>)
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6593      	str	r3, [r2, #88]	; 0x58
 8003776:	e005      	b.n	8003784 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40020010 	.word	0x40020010
 8003798:	40020028 	.word	0x40020028
 800379c:	40020040 	.word	0x40020040
 80037a0:	40020058 	.word	0x40020058
 80037a4:	40020070 	.word	0x40020070
 80037a8:	40020088 	.word	0x40020088
 80037ac:	400200a0 	.word	0x400200a0
 80037b0:	400200b8 	.word	0x400200b8
 80037b4:	40020410 	.word	0x40020410
 80037b8:	40020428 	.word	0x40020428
 80037bc:	40020440 	.word	0x40020440
 80037c0:	40020458 	.word	0x40020458
 80037c4:	40020470 	.word	0x40020470
 80037c8:	40020488 	.word	0x40020488
 80037cc:	400204a0 	.word	0x400204a0
 80037d0:	400204b8 	.word	0x400204b8
 80037d4:	aaaaaaab 	.word	0xaaaaaaab
 80037d8:	0800e340 	.word	0x0800e340
 80037dc:	fffffc00 	.word	0xfffffc00

080037e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d120      	bne.n	8003836 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d858      	bhi.n	80038ae <DMA_CheckFifoParam+0xce>
 80037fc:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <DMA_CheckFifoParam+0x24>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003815 	.word	0x08003815
 8003808:	08003827 	.word	0x08003827
 800380c:	08003815 	.word	0x08003815
 8003810:	080038af 	.word	0x080038af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d048      	beq.n	80038b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003824:	e045      	b.n	80038b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800382e:	d142      	bne.n	80038b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003834:	e03f      	b.n	80038b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800383e:	d123      	bne.n	8003888 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	2b03      	cmp	r3, #3
 8003846:	d838      	bhi.n	80038ba <DMA_CheckFifoParam+0xda>
 8003848:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <DMA_CheckFifoParam+0x70>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003861 	.word	0x08003861
 8003854:	08003867 	.word	0x08003867
 8003858:	08003861 	.word	0x08003861
 800385c:	08003879 	.word	0x08003879
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
        break;
 8003864:	e030      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d025      	beq.n	80038be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003876:	e022      	b.n	80038be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003880:	d11f      	bne.n	80038c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003886:	e01c      	b.n	80038c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	2b02      	cmp	r3, #2
 800388e:	d902      	bls.n	8003896 <DMA_CheckFifoParam+0xb6>
 8003890:	2b03      	cmp	r3, #3
 8003892:	d003      	beq.n	800389c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003894:	e018      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
        break;
 800389a:	e015      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
    break;
 80038ac:	e00b      	b.n	80038c6 <DMA_CheckFifoParam+0xe6>
        break;
 80038ae:	bf00      	nop
 80038b0:	e00a      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
        break;
 80038b2:	bf00      	nop
 80038b4:	e008      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
        break;
 80038b6:	bf00      	nop
 80038b8:	e006      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
        break;
 80038ba:	bf00      	nop
 80038bc:	e004      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
        break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
        break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
    break;
 80038c6:	bf00      	nop
    }
  }

  return status;
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop

080038d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a38      	ldr	r2, [pc, #224]	; (80039cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a36      	ldr	r2, [pc, #216]	; (80039d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01d      	beq.n	8003936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a35      	ldr	r2, [pc, #212]	; (80039d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d018      	beq.n	8003936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a33      	ldr	r2, [pc, #204]	; (80039d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a32      	ldr	r2, [pc, #200]	; (80039dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00e      	beq.n	8003936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a30      	ldr	r2, [pc, #192]	; (80039e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2f      	ldr	r2, [pc, #188]	; (80039e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2d      	ldr	r2, [pc, #180]	; (80039e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01a      	beq.n	8003976 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	3b08      	subs	r3, #8
 8003948:	4a28      	ldr	r2, [pc, #160]	; (80039ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4b26      	ldr	r3, [pc, #152]	; (80039f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	461a      	mov	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003964:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	2201      	movs	r2, #1
 800396e:	409a      	lsls	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003974:	e024      	b.n	80039c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	3b10      	subs	r3, #16
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d806      	bhi.n	800399e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d902      	bls.n	800399e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3308      	adds	r3, #8
 800399c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	461a      	mov	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a16      	ldr	r2, [pc, #88]	; (8003a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80039b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2201      	movs	r2, #1
 80039ba:	409a      	lsls	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	58025408 	.word	0x58025408
 80039d0:	5802541c 	.word	0x5802541c
 80039d4:	58025430 	.word	0x58025430
 80039d8:	58025444 	.word	0x58025444
 80039dc:	58025458 	.word	0x58025458
 80039e0:	5802546c 	.word	0x5802546c
 80039e4:	58025480 	.word	0x58025480
 80039e8:	58025494 	.word	0x58025494
 80039ec:	cccccccd 	.word	0xcccccccd
 80039f0:	16009600 	.word	0x16009600
 80039f4:	58025880 	.word	0x58025880
 80039f8:	aaaaaaab 	.word	0xaaaaaaab
 80039fc:	400204b8 	.word	0x400204b8
 8003a00:	4002040f 	.word	0x4002040f
 8003a04:	10008200 	.word	0x10008200
 8003a08:	40020880 	.word	0x40020880

08003a0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d04a      	beq.n	8003ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d847      	bhi.n	8003ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a25      	ldr	r2, [pc, #148]	; (8003ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d022      	beq.n	8003a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a24      	ldr	r2, [pc, #144]	; (8003ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d01d      	beq.n	8003a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a22      	ldr	r2, [pc, #136]	; (8003acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d018      	beq.n	8003a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00e      	beq.n	8003a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d009      	beq.n	8003a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d101      	bne.n	8003a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003a94:	671a      	str	r2, [r3, #112]	; 0x70
 8003a96:	e009      	b.n	8003aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a11      	ldr	r2, [pc, #68]	; (8003af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003aaa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	58025408 	.word	0x58025408
 8003ac8:	5802541c 	.word	0x5802541c
 8003acc:	58025430 	.word	0x58025430
 8003ad0:	58025444 	.word	0x58025444
 8003ad4:	58025458 	.word	0x58025458
 8003ad8:	5802546c 	.word	0x5802546c
 8003adc:	58025480 	.word	0x58025480
 8003ae0:	58025494 	.word	0x58025494
 8003ae4:	1600963f 	.word	0x1600963f
 8003ae8:	58025940 	.word	0x58025940
 8003aec:	1000823f 	.word	0x1000823f
 8003af0:	40020940 	.word	0x40020940

08003af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b089      	sub	sp, #36	; 0x24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b02:	4b89      	ldr	r3, [pc, #548]	; (8003d28 <HAL_GPIO_Init+0x234>)
 8003b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b06:	e194      	b.n	8003e32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	4013      	ands	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8186 	beq.w	8003e2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d00b      	beq.n	8003b40 <HAL_GPIO_Init+0x4c>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d007      	beq.n	8003b40 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b34:	2b11      	cmp	r3, #17
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b12      	cmp	r3, #18
 8003b3e:	d130      	bne.n	8003ba2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b76:	2201      	movs	r2, #1
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	f003 0201 	and.w	r2, r3, #1
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	2203      	movs	r2, #3
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d003      	beq.n	8003be2 <HAL_GPIO_Init+0xee>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b12      	cmp	r3, #18
 8003be0:	d123      	bne.n	8003c2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	08da      	lsrs	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3208      	adds	r2, #8
 8003bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	220f      	movs	r2, #15
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	08da      	lsrs	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3208      	adds	r2, #8
 8003c24:	69b9      	ldr	r1, [r7, #24]
 8003c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	2203      	movs	r2, #3
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0203 	and.w	r2, r3, #3
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80e0 	beq.w	8003e2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6c:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <HAL_GPIO_Init+0x238>)
 8003c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c72:	4a2e      	ldr	r2, [pc, #184]	; (8003d2c <HAL_GPIO_Init+0x238>)
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c7c:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <HAL_GPIO_Init+0x238>)
 8003c7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c8a:	4a29      	ldr	r2, [pc, #164]	; (8003d30 <HAL_GPIO_Init+0x23c>)
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	089b      	lsrs	r3, r3, #2
 8003c90:	3302      	adds	r3, #2
 8003c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4013      	ands	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a20      	ldr	r2, [pc, #128]	; (8003d34 <HAL_GPIO_Init+0x240>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d052      	beq.n	8003d5c <HAL_GPIO_Init+0x268>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a1f      	ldr	r2, [pc, #124]	; (8003d38 <HAL_GPIO_Init+0x244>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d031      	beq.n	8003d22 <HAL_GPIO_Init+0x22e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <HAL_GPIO_Init+0x248>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d02b      	beq.n	8003d1e <HAL_GPIO_Init+0x22a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <HAL_GPIO_Init+0x24c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d025      	beq.n	8003d1a <HAL_GPIO_Init+0x226>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <HAL_GPIO_Init+0x250>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d01f      	beq.n	8003d16 <HAL_GPIO_Init+0x222>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <HAL_GPIO_Init+0x254>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d019      	beq.n	8003d12 <HAL_GPIO_Init+0x21e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1a      	ldr	r2, [pc, #104]	; (8003d4c <HAL_GPIO_Init+0x258>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_GPIO_Init+0x21a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <HAL_GPIO_Init+0x25c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00d      	beq.n	8003d0a <HAL_GPIO_Init+0x216>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <HAL_GPIO_Init+0x260>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d007      	beq.n	8003d06 <HAL_GPIO_Init+0x212>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a17      	ldr	r2, [pc, #92]	; (8003d58 <HAL_GPIO_Init+0x264>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d101      	bne.n	8003d02 <HAL_GPIO_Init+0x20e>
 8003cfe:	2309      	movs	r3, #9
 8003d00:	e02d      	b.n	8003d5e <HAL_GPIO_Init+0x26a>
 8003d02:	230a      	movs	r3, #10
 8003d04:	e02b      	b.n	8003d5e <HAL_GPIO_Init+0x26a>
 8003d06:	2308      	movs	r3, #8
 8003d08:	e029      	b.n	8003d5e <HAL_GPIO_Init+0x26a>
 8003d0a:	2307      	movs	r3, #7
 8003d0c:	e027      	b.n	8003d5e <HAL_GPIO_Init+0x26a>
 8003d0e:	2306      	movs	r3, #6
 8003d10:	e025      	b.n	8003d5e <HAL_GPIO_Init+0x26a>
 8003d12:	2305      	movs	r3, #5
 8003d14:	e023      	b.n	8003d5e <HAL_GPIO_Init+0x26a>
 8003d16:	2304      	movs	r3, #4
 8003d18:	e021      	b.n	8003d5e <HAL_GPIO_Init+0x26a>
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e01f      	b.n	8003d5e <HAL_GPIO_Init+0x26a>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e01d      	b.n	8003d5e <HAL_GPIO_Init+0x26a>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e01b      	b.n	8003d5e <HAL_GPIO_Init+0x26a>
 8003d26:	bf00      	nop
 8003d28:	58000080 	.word	0x58000080
 8003d2c:	58024400 	.word	0x58024400
 8003d30:	58000400 	.word	0x58000400
 8003d34:	58020000 	.word	0x58020000
 8003d38:	58020400 	.word	0x58020400
 8003d3c:	58020800 	.word	0x58020800
 8003d40:	58020c00 	.word	0x58020c00
 8003d44:	58021000 	.word	0x58021000
 8003d48:	58021400 	.word	0x58021400
 8003d4c:	58021800 	.word	0x58021800
 8003d50:	58021c00 	.word	0x58021c00
 8003d54:	58022000 	.word	0x58022000
 8003d58:	58022400 	.word	0x58022400
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	f002 0203 	and.w	r2, r2, #3
 8003d64:	0092      	lsls	r2, r2, #2
 8003d66:	4093      	lsls	r3, r2
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d6e:	4938      	ldr	r1, [pc, #224]	; (8003e50 <HAL_GPIO_Init+0x35c>)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	3302      	adds	r3, #2
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	43db      	mvns	r3, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4013      	ands	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f47f ae63 	bne.w	8003b08 <HAL_GPIO_Init+0x14>
  }
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	3724      	adds	r7, #36	; 0x24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	58000400 	.word	0x58000400

08003e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	e001      	b.n	8003e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
 8003e90:	4613      	mov	r3, r2
 8003e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e94:	787b      	ldrb	r3, [r7, #1]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ea0:	e003      	b.n	8003eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	041a      	lsls	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	619a      	str	r2, [r3, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003ec0:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <HAL_PWREx_ConfigSupply+0x70>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d00a      	beq.n	8003ee2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ecc:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <HAL_PWREx_ConfigSupply+0x70>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d001      	beq.n	8003ede <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e01f      	b.n	8003f1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e01d      	b.n	8003f1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ee2:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <HAL_PWREx_ConfigSupply+0x70>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f023 0207 	bic.w	r2, r3, #7
 8003eea:	490f      	ldr	r1, [pc, #60]	; (8003f28 <HAL_PWREx_ConfigSupply+0x70>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003ef2:	f7fe fd39 	bl	8002968 <HAL_GetTick>
 8003ef6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ef8:	e009      	b.n	8003f0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003efa:	f7fe fd35 	bl	8002968 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f08:	d901      	bls.n	8003f0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e007      	b.n	8003f1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_PWREx_ConfigSupply+0x70>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1a:	d1ee      	bne.n	8003efa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	58024800 	.word	0x58024800

08003f2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08c      	sub	sp, #48	; 0x30
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e3ff      	b.n	800473e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8087 	beq.w	800405a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f4c:	4b99      	ldr	r3, [pc, #612]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f56:	4b97      	ldr	r3, [pc, #604]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d007      	beq.n	8003f72 <HAL_RCC_OscConfig+0x46>
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	2b18      	cmp	r3, #24
 8003f66:	d110      	bne.n	8003f8a <HAL_RCC_OscConfig+0x5e>
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d10b      	bne.n	8003f8a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f72:	4b90      	ldr	r3, [pc, #576]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d06c      	beq.n	8004058 <HAL_RCC_OscConfig+0x12c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d168      	bne.n	8004058 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e3d9      	b.n	800473e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x76>
 8003f94:	4b87      	ldr	r3, [pc, #540]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a86      	ldr	r2, [pc, #536]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	e02e      	b.n	8004000 <HAL_RCC_OscConfig+0xd4>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x98>
 8003faa:	4b82      	ldr	r3, [pc, #520]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a81      	ldr	r2, [pc, #516]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	4b7f      	ldr	r3, [pc, #508]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a7e      	ldr	r2, [pc, #504]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e01d      	b.n	8004000 <HAL_RCC_OscConfig+0xd4>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0xbc>
 8003fce:	4b79      	ldr	r3, [pc, #484]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a78      	ldr	r2, [pc, #480]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b76      	ldr	r3, [pc, #472]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a75      	ldr	r2, [pc, #468]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0xd4>
 8003fe8:	4b72      	ldr	r3, [pc, #456]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a71      	ldr	r2, [pc, #452]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b6f      	ldr	r3, [pc, #444]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a6e      	ldr	r2, [pc, #440]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8003ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d013      	beq.n	8004030 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fe fcae 	bl	8002968 <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004010:	f7fe fcaa 	bl	8002968 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e38d      	b.n	800473e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004022:	4b64      	ldr	r3, [pc, #400]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0xe4>
 800402e:	e014      	b.n	800405a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fe fc9a 	bl	8002968 <HAL_GetTick>
 8004034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004038:	f7fe fc96 	bl	8002968 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e379      	b.n	800473e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800404a:	4b5a      	ldr	r3, [pc, #360]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x10c>
 8004056:	e000      	b.n	800405a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80ae 	beq.w	80041c4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004068:	4b52      	ldr	r3, [pc, #328]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004070:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004072:	4b50      	ldr	r3, [pc, #320]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <HAL_RCC_OscConfig+0x162>
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	2b18      	cmp	r3, #24
 8004082:	d13a      	bne.n	80040fa <HAL_RCC_OscConfig+0x1ce>
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d135      	bne.n	80040fa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800408e:	4b49      	ldr	r3, [pc, #292]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_RCC_OscConfig+0x17a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e34b      	b.n	800473e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a6:	f7fe fc8f 	bl	80029c8 <HAL_GetREVID>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d817      	bhi.n	80040e4 <HAL_RCC_OscConfig+0x1b8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d108      	bne.n	80040ce <HAL_RCC_OscConfig+0x1a2>
 80040bc:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80040c4:	4a3b      	ldr	r2, [pc, #236]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 80040c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ca:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040cc:	e07a      	b.n	80041c4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ce:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	031b      	lsls	r3, r3, #12
 80040dc:	4935      	ldr	r1, [pc, #212]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e2:	e06f      	b.n	80041c4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e4:	4b33      	ldr	r3, [pc, #204]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	4930      	ldr	r1, [pc, #192]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f8:	e064      	b.n	80041c4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d045      	beq.n	800418e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004102:	4b2c      	ldr	r3, [pc, #176]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 0219 	bic.w	r2, r3, #25
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	4929      	ldr	r1, [pc, #164]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fe fc28 	bl	8002968 <HAL_GetTick>
 8004118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411c:	f7fe fc24 	bl	8002968 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e307      	b.n	800473e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800412e:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413a:	f7fe fc45 	bl	80029c8 <HAL_GetREVID>
 800413e:	4603      	mov	r3, r0
 8004140:	f241 0203 	movw	r2, #4099	; 0x1003
 8004144:	4293      	cmp	r3, r2
 8004146:	d817      	bhi.n	8004178 <HAL_RCC_OscConfig+0x24c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d108      	bne.n	8004162 <HAL_RCC_OscConfig+0x236>
 8004150:	4b18      	ldr	r3, [pc, #96]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004158:	4a16      	ldr	r2, [pc, #88]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 800415a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415e:	6053      	str	r3, [r2, #4]
 8004160:	e030      	b.n	80041c4 <HAL_RCC_OscConfig+0x298>
 8004162:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	031b      	lsls	r3, r3, #12
 8004170:	4910      	ldr	r1, [pc, #64]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8004172:	4313      	orrs	r3, r2
 8004174:	604b      	str	r3, [r1, #4]
 8004176:	e025      	b.n	80041c4 <HAL_RCC_OscConfig+0x298>
 8004178:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	490b      	ldr	r1, [pc, #44]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
 800418c:	e01a      	b.n	80041c4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a08      	ldr	r2, [pc, #32]	; (80041b4 <HAL_RCC_OscConfig+0x288>)
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fe fbe5 	bl	8002968 <HAL_GetTick>
 800419e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041a0:	e00a      	b.n	80041b8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041a2:	f7fe fbe1 	bl	8002968 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d903      	bls.n	80041b8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e2c4      	b.n	800473e <HAL_RCC_OscConfig+0x812>
 80041b4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041b8:	4ba4      	ldr	r3, [pc, #656]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1ee      	bne.n	80041a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80a9 	beq.w	8004324 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d2:	4b9e      	ldr	r3, [pc, #632]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041dc:	4b9b      	ldr	r3, [pc, #620]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d007      	beq.n	80041f8 <HAL_RCC_OscConfig+0x2cc>
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b18      	cmp	r3, #24
 80041ec:	d13a      	bne.n	8004264 <HAL_RCC_OscConfig+0x338>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d135      	bne.n	8004264 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041f8:	4b94      	ldr	r3, [pc, #592]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_OscConfig+0x2e4>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d001      	beq.n	8004210 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e296      	b.n	800473e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004210:	f7fe fbda 	bl	80029c8 <HAL_GetREVID>
 8004214:	4603      	mov	r3, r0
 8004216:	f241 0203 	movw	r2, #4099	; 0x1003
 800421a:	4293      	cmp	r3, r2
 800421c:	d817      	bhi.n	800424e <HAL_RCC_OscConfig+0x322>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	2b20      	cmp	r3, #32
 8004224:	d108      	bne.n	8004238 <HAL_RCC_OscConfig+0x30c>
 8004226:	4b89      	ldr	r3, [pc, #548]	; (800444c <HAL_RCC_OscConfig+0x520>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800422e:	4a87      	ldr	r2, [pc, #540]	; (800444c <HAL_RCC_OscConfig+0x520>)
 8004230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004234:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004236:	e075      	b.n	8004324 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004238:	4b84      	ldr	r3, [pc, #528]	; (800444c <HAL_RCC_OscConfig+0x520>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	069b      	lsls	r3, r3, #26
 8004246:	4981      	ldr	r1, [pc, #516]	; (800444c <HAL_RCC_OscConfig+0x520>)
 8004248:	4313      	orrs	r3, r2
 800424a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800424c:	e06a      	b.n	8004324 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800424e:	4b7f      	ldr	r3, [pc, #508]	; (800444c <HAL_RCC_OscConfig+0x520>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	061b      	lsls	r3, r3, #24
 800425c:	497b      	ldr	r1, [pc, #492]	; (800444c <HAL_RCC_OscConfig+0x520>)
 800425e:	4313      	orrs	r3, r2
 8004260:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004262:	e05f      	b.n	8004324 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d042      	beq.n	80042f2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800426c:	4b77      	ldr	r3, [pc, #476]	; (800444c <HAL_RCC_OscConfig+0x520>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a76      	ldr	r2, [pc, #472]	; (800444c <HAL_RCC_OscConfig+0x520>)
 8004272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fe fb76 	bl	8002968 <HAL_GetTick>
 800427c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004280:	f7fe fb72 	bl	8002968 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e255      	b.n	800473e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004292:	4b6e      	ldr	r3, [pc, #440]	; (800444c <HAL_RCC_OscConfig+0x520>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800429e:	f7fe fb93 	bl	80029c8 <HAL_GetREVID>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d817      	bhi.n	80042dc <HAL_RCC_OscConfig+0x3b0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d108      	bne.n	80042c6 <HAL_RCC_OscConfig+0x39a>
 80042b4:	4b65      	ldr	r3, [pc, #404]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80042bc:	4a63      	ldr	r2, [pc, #396]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80042be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042c2:	6053      	str	r3, [r2, #4]
 80042c4:	e02e      	b.n	8004324 <HAL_RCC_OscConfig+0x3f8>
 80042c6:	4b61      	ldr	r3, [pc, #388]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	069b      	lsls	r3, r3, #26
 80042d4:	495d      	ldr	r1, [pc, #372]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	604b      	str	r3, [r1, #4]
 80042da:	e023      	b.n	8004324 <HAL_RCC_OscConfig+0x3f8>
 80042dc:	4b5b      	ldr	r3, [pc, #364]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	061b      	lsls	r3, r3, #24
 80042ea:	4958      	ldr	r1, [pc, #352]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60cb      	str	r3, [r1, #12]
 80042f0:	e018      	b.n	8004324 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80042f2:	4b56      	ldr	r3, [pc, #344]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a55      	ldr	r2, [pc, #340]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80042f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fe:	f7fe fb33 	bl	8002968 <HAL_GetTick>
 8004302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004306:	f7fe fb2f 	bl	8002968 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e212      	b.n	800473e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004318:	4b4c      	ldr	r3, [pc, #304]	; (800444c <HAL_RCC_OscConfig+0x520>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d036      	beq.n	800439e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d019      	beq.n	800436c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004338:	4b44      	ldr	r3, [pc, #272]	; (800444c <HAL_RCC_OscConfig+0x520>)
 800433a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433c:	4a43      	ldr	r2, [pc, #268]	; (800444c <HAL_RCC_OscConfig+0x520>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fe fb10 	bl	8002968 <HAL_GetTick>
 8004348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800434c:	f7fe fb0c 	bl	8002968 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1ef      	b.n	800473e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800435e:	4b3b      	ldr	r3, [pc, #236]	; (800444c <HAL_RCC_OscConfig+0x520>)
 8004360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x420>
 800436a:	e018      	b.n	800439e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800436c:	4b37      	ldr	r3, [pc, #220]	; (800444c <HAL_RCC_OscConfig+0x520>)
 800436e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004370:	4a36      	ldr	r2, [pc, #216]	; (800444c <HAL_RCC_OscConfig+0x520>)
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fe faf6 	bl	8002968 <HAL_GetTick>
 800437c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004380:	f7fe faf2 	bl	8002968 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1d5      	b.n	800473e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004392:	4b2e      	ldr	r3, [pc, #184]	; (800444c <HAL_RCC_OscConfig+0x520>)
 8004394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d036      	beq.n	8004418 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d019      	beq.n	80043e6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043b2:	4b26      	ldr	r3, [pc, #152]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a25      	ldr	r2, [pc, #148]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80043b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043be:	f7fe fad3 	bl	8002968 <HAL_GetTick>
 80043c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80043c6:	f7fe facf 	bl	8002968 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e1b2      	b.n	800473e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043d8:	4b1c      	ldr	r3, [pc, #112]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x49a>
 80043e4:	e018      	b.n	8004418 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043e6:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_RCC_OscConfig+0x520>)
 80043ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043f2:	f7fe fab9 	bl	8002968 <HAL_GetTick>
 80043f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80043fa:	f7fe fab5 	bl	8002968 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e198      	b.n	800473e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <HAL_RCC_OscConfig+0x520>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8085 	beq.w	8004530 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <HAL_RCC_OscConfig+0x524>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <HAL_RCC_OscConfig+0x524>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004430:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004432:	f7fe fa99 	bl	8002968 <HAL_GetTick>
 8004436:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004438:	e00c      	b.n	8004454 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800443a:	f7fe fa95 	bl	8002968 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b64      	cmp	r3, #100	; 0x64
 8004446:	d905      	bls.n	8004454 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e178      	b.n	800473e <HAL_RCC_OscConfig+0x812>
 800444c:	58024400 	.word	0x58024400
 8004450:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004454:	4b96      	ldr	r3, [pc, #600]	; (80046b0 <HAL_RCC_OscConfig+0x784>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0ec      	beq.n	800443a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d106      	bne.n	8004476 <HAL_RCC_OscConfig+0x54a>
 8004468:	4b92      	ldr	r3, [pc, #584]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	4a91      	ldr	r2, [pc, #580]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	6713      	str	r3, [r2, #112]	; 0x70
 8004474:	e02d      	b.n	80044d2 <HAL_RCC_OscConfig+0x5a6>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0x56c>
 800447e:	4b8d      	ldr	r3, [pc, #564]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	4a8c      	ldr	r2, [pc, #560]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	6713      	str	r3, [r2, #112]	; 0x70
 800448a:	4b8a      	ldr	r3, [pc, #552]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	4a89      	ldr	r2, [pc, #548]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004490:	f023 0304 	bic.w	r3, r3, #4
 8004494:	6713      	str	r3, [r2, #112]	; 0x70
 8004496:	e01c      	b.n	80044d2 <HAL_RCC_OscConfig+0x5a6>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b05      	cmp	r3, #5
 800449e:	d10c      	bne.n	80044ba <HAL_RCC_OscConfig+0x58e>
 80044a0:	4b84      	ldr	r3, [pc, #528]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a83      	ldr	r2, [pc, #524]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80044a6:	f043 0304 	orr.w	r3, r3, #4
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	4b81      	ldr	r3, [pc, #516]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	4a80      	ldr	r2, [pc, #512]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6713      	str	r3, [r2, #112]	; 0x70
 80044b8:	e00b      	b.n	80044d2 <HAL_RCC_OscConfig+0x5a6>
 80044ba:	4b7e      	ldr	r3, [pc, #504]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a7d      	ldr	r2, [pc, #500]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
 80044c6:	4b7b      	ldr	r3, [pc, #492]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	4a7a      	ldr	r2, [pc, #488]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80044cc:	f023 0304 	bic.w	r3, r3, #4
 80044d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d015      	beq.n	8004506 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044da:	f7fe fa45 	bl	8002968 <HAL_GetTick>
 80044de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044e0:	e00a      	b.n	80044f8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e2:	f7fe fa41 	bl	8002968 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e122      	b.n	800473e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044f8:	4b6e      	ldr	r3, [pc, #440]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ee      	beq.n	80044e2 <HAL_RCC_OscConfig+0x5b6>
 8004504:	e014      	b.n	8004530 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004506:	f7fe fa2f 	bl	8002968 <HAL_GetTick>
 800450a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800450c:	e00a      	b.n	8004524 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fe fa2b 	bl	8002968 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e10c      	b.n	800473e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004524:	4b63      	ldr	r3, [pc, #396]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ee      	bne.n	800450e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8101 	beq.w	800473c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800453a:	4b5e      	ldr	r3, [pc, #376]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004542:	2b18      	cmp	r3, #24
 8004544:	f000 80bc 	beq.w	80046c0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	2b02      	cmp	r3, #2
 800454e:	f040 8095 	bne.w	800467c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004552:	4b58      	ldr	r3, [pc, #352]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a57      	ldr	r2, [pc, #348]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004558:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fe fa03 	bl	8002968 <HAL_GetTick>
 8004562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004566:	f7fe f9ff 	bl	8002968 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0e2      	b.n	800473e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004578:	4b4e      	ldr	r3, [pc, #312]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f0      	bne.n	8004566 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004584:	4b4b      	ldr	r3, [pc, #300]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004588:	4b4b      	ldr	r3, [pc, #300]	; (80046b8 <HAL_RCC_OscConfig+0x78c>)
 800458a:	4013      	ands	r3, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004594:	0112      	lsls	r2, r2, #4
 8004596:	430a      	orrs	r2, r1
 8004598:	4946      	ldr	r1, [pc, #280]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800459a:	4313      	orrs	r3, r2
 800459c:	628b      	str	r3, [r1, #40]	; 0x28
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	3b01      	subs	r3, #1
 80045a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	3b01      	subs	r3, #1
 80045ae:	025b      	lsls	r3, r3, #9
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	3b01      	subs	r3, #1
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	3b01      	subs	r3, #1
 80045c8:	061b      	lsls	r3, r3, #24
 80045ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045ce:	4939      	ldr	r1, [pc, #228]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80045d4:	4b37      	ldr	r3, [pc, #220]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	4a36      	ldr	r2, [pc, #216]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80045e0:	4b34      	ldr	r3, [pc, #208]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80045e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e4:	4b35      	ldr	r3, [pc, #212]	; (80046bc <HAL_RCC_OscConfig+0x790>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045ec:	00d2      	lsls	r2, r2, #3
 80045ee:	4931      	ldr	r1, [pc, #196]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80045f4:	4b2f      	ldr	r3, [pc, #188]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	f023 020c 	bic.w	r2, r3, #12
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	492c      	ldr	r1, [pc, #176]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004602:	4313      	orrs	r3, r2
 8004604:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004606:	4b2b      	ldr	r3, [pc, #172]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	f023 0202 	bic.w	r2, r3, #2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	4928      	ldr	r1, [pc, #160]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004614:	4313      	orrs	r3, r2
 8004616:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004618:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	4a25      	ldr	r2, [pc, #148]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800461e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004622:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004624:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800462a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800462e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004630:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	4a1f      	ldr	r2, [pc, #124]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800463a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800463c:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004648:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a19      	ldr	r2, [pc, #100]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800464e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fe f988 	bl	8002968 <HAL_GetTick>
 8004658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465c:	f7fe f984 	bl	8002968 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e067      	b.n	800473e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800466e:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x730>
 800467a:	e05f      	b.n	800473c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a0c      	ldr	r2, [pc, #48]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 8004682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fe f96e 	bl	8002968 <HAL_GetTick>
 800468c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004690:	f7fe f96a 	bl	8002968 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e04d      	b.n	800473e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046a2:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <HAL_RCC_OscConfig+0x788>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x764>
 80046ae:	e045      	b.n	800473c <HAL_RCC_OscConfig+0x810>
 80046b0:	58024800 	.word	0x58024800
 80046b4:	58024400 	.word	0x58024400
 80046b8:	fffffc0c 	.word	0xfffffc0c
 80046bc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80046c0:	4b21      	ldr	r3, [pc, #132]	; (8004748 <HAL_RCC_OscConfig+0x81c>)
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046c6:	4b20      	ldr	r3, [pc, #128]	; (8004748 <HAL_RCC_OscConfig+0x81c>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d031      	beq.n	8004738 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f003 0203 	and.w	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d12a      	bne.n	8004738 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d122      	bne.n	8004738 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d11a      	bne.n	8004738 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	0a5b      	lsrs	r3, r3, #9
 8004706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d111      	bne.n	8004738 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	0c1b      	lsrs	r3, r3, #16
 8004718:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d108      	bne.n	8004738 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	0e1b      	lsrs	r3, r3, #24
 800472a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3730      	adds	r7, #48	; 0x30
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	58024400 	.word	0x58024400

0800474c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e19c      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004760:	4b8a      	ldr	r3, [pc, #552]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d910      	bls.n	8004790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b87      	ldr	r3, [pc, #540]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 020f 	bic.w	r2, r3, #15
 8004776:	4985      	ldr	r1, [pc, #532]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b83      	ldr	r3, [pc, #524]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e184      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d010      	beq.n	80047be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	4b7b      	ldr	r3, [pc, #492]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d908      	bls.n	80047be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047ac:	4b78      	ldr	r3, [pc, #480]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	4975      	ldr	r1, [pc, #468]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d010      	beq.n	80047ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	4b70      	ldr	r3, [pc, #448]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d908      	bls.n	80047ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047da:	4b6d      	ldr	r3, [pc, #436]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	496a      	ldr	r1, [pc, #424]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	4b64      	ldr	r3, [pc, #400]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004804:	429a      	cmp	r2, r3
 8004806:	d908      	bls.n	800481a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004808:	4b61      	ldr	r3, [pc, #388]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	495e      	ldr	r1, [pc, #376]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004816:	4313      	orrs	r3, r2
 8004818:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d010      	beq.n	8004848 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69da      	ldr	r2, [r3, #28]
 800482a:	4b59      	ldr	r3, [pc, #356]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004832:	429a      	cmp	r2, r3
 8004834:	d908      	bls.n	8004848 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004836:	4b56      	ldr	r3, [pc, #344]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	4953      	ldr	r1, [pc, #332]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004844:	4313      	orrs	r3, r2
 8004846:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d010      	beq.n	8004876 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	4b4d      	ldr	r3, [pc, #308]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	429a      	cmp	r2, r3
 8004862:	d908      	bls.n	8004876 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004864:	4b4a      	ldr	r3, [pc, #296]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f023 020f 	bic.w	r2, r3, #15
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4947      	ldr	r1, [pc, #284]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004872:	4313      	orrs	r3, r2
 8004874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d055      	beq.n	800492e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004882:	4b43      	ldr	r3, [pc, #268]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	4940      	ldr	r1, [pc, #256]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004890:	4313      	orrs	r3, r2
 8004892:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d107      	bne.n	80048ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800489c:	4b3c      	ldr	r3, [pc, #240]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d121      	bne.n	80048ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0f6      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d107      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048b4:	4b36      	ldr	r3, [pc, #216]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d115      	bne.n	80048ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0ea      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d107      	bne.n	80048dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048cc:	4b30      	ldr	r3, [pc, #192]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0de      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048dc:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0d6      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048ec:	4b28      	ldr	r3, [pc, #160]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f023 0207 	bic.w	r2, r3, #7
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4925      	ldr	r1, [pc, #148]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fe:	f7fe f833 	bl	8002968 <HAL_GetTick>
 8004902:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004904:	e00a      	b.n	800491c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004906:	f7fe f82f 	bl	8002968 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f241 3288 	movw	r2, #5000	; 0x1388
 8004914:	4293      	cmp	r3, r2
 8004916:	d901      	bls.n	800491c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0be      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491c:	4b1c      	ldr	r3, [pc, #112]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	429a      	cmp	r2, r3
 800492c:	d1eb      	bne.n	8004906 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d010      	beq.n	800495c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	4b14      	ldr	r3, [pc, #80]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	429a      	cmp	r2, r3
 8004948:	d208      	bcs.n	800495c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494a:	4b11      	ldr	r3, [pc, #68]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f023 020f 	bic.w	r2, r3, #15
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	490e      	ldr	r1, [pc, #56]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004958:	4313      	orrs	r3, r2
 800495a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d214      	bcs.n	8004994 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b08      	ldr	r3, [pc, #32]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 020f 	bic.w	r2, r3, #15
 8004972:	4906      	ldr	r1, [pc, #24]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4313      	orrs	r3, r2
 8004978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b04      	ldr	r3, [pc, #16]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e086      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
 800498c:	52002000 	.word	0x52002000
 8004990:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d010      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	4b3f      	ldr	r3, [pc, #252]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d208      	bcs.n	80049c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049b0:	4b3c      	ldr	r3, [pc, #240]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	4939      	ldr	r1, [pc, #228]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d010      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	4b34      	ldr	r3, [pc, #208]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049da:	429a      	cmp	r2, r3
 80049dc:	d208      	bcs.n	80049f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049de:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	492e      	ldr	r1, [pc, #184]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d010      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699a      	ldr	r2, [r3, #24]
 8004a00:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d208      	bcs.n	8004a1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a0c:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	4922      	ldr	r1, [pc, #136]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d010      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69da      	ldr	r2, [r3, #28]
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d208      	bcs.n	8004a4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a3a:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4917      	ldr	r1, [pc, #92]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a4c:	f000 f834 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	4912      	ldr	r1, [pc, #72]	; (8004aa8 <HAL_RCC_ClockConfig+0x35c>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
 8004a68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a6a:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	4a0d      	ldr	r2, [pc, #52]	; (8004aa8 <HAL_RCC_ClockConfig+0x35c>)
 8004a74:	5cd3      	ldrb	r3, [r2, r3]
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <HAL_RCC_ClockConfig+0x360>)
 8004a82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a84:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <HAL_RCC_ClockConfig+0x364>)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_RCC_ClockConfig+0x368>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fd fc54 	bl	800233c <HAL_InitTick>
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	58024400 	.word	0x58024400
 8004aa8:	0800e330 	.word	0x0800e330
 8004aac:	24000004 	.word	0x24000004
 8004ab0:	24000000 	.word	0x24000000
 8004ab4:	24000008 	.word	0x24000008

08004ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b089      	sub	sp, #36	; 0x24
 8004abc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004abe:	4bb3      	ldr	r3, [pc, #716]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac6:	2b18      	cmp	r3, #24
 8004ac8:	f200 8155 	bhi.w	8004d76 <HAL_RCC_GetSysClockFreq+0x2be>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004b39 	.word	0x08004b39
 8004ad8:	08004d77 	.word	0x08004d77
 8004adc:	08004d77 	.word	0x08004d77
 8004ae0:	08004d77 	.word	0x08004d77
 8004ae4:	08004d77 	.word	0x08004d77
 8004ae8:	08004d77 	.word	0x08004d77
 8004aec:	08004d77 	.word	0x08004d77
 8004af0:	08004d77 	.word	0x08004d77
 8004af4:	08004b5f 	.word	0x08004b5f
 8004af8:	08004d77 	.word	0x08004d77
 8004afc:	08004d77 	.word	0x08004d77
 8004b00:	08004d77 	.word	0x08004d77
 8004b04:	08004d77 	.word	0x08004d77
 8004b08:	08004d77 	.word	0x08004d77
 8004b0c:	08004d77 	.word	0x08004d77
 8004b10:	08004d77 	.word	0x08004d77
 8004b14:	08004b65 	.word	0x08004b65
 8004b18:	08004d77 	.word	0x08004d77
 8004b1c:	08004d77 	.word	0x08004d77
 8004b20:	08004d77 	.word	0x08004d77
 8004b24:	08004d77 	.word	0x08004d77
 8004b28:	08004d77 	.word	0x08004d77
 8004b2c:	08004d77 	.word	0x08004d77
 8004b30:	08004d77 	.word	0x08004d77
 8004b34:	08004b6b 	.word	0x08004b6b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b38:	4b94      	ldr	r3, [pc, #592]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d009      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b44:	4b91      	ldr	r3, [pc, #580]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	08db      	lsrs	r3, r3, #3
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	4a90      	ldr	r2, [pc, #576]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
 8004b54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004b56:	e111      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b58:	4b8d      	ldr	r3, [pc, #564]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b5a:	61bb      	str	r3, [r7, #24]
    break;
 8004b5c:	e10e      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004b5e:	4b8d      	ldr	r3, [pc, #564]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b60:	61bb      	str	r3, [r7, #24]
    break;
 8004b62:	e10b      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004b64:	4b8c      	ldr	r3, [pc, #560]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b66:	61bb      	str	r3, [r7, #24]
    break;
 8004b68:	e108      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b6a:	4b88      	ldr	r3, [pc, #544]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004b74:	4b85      	ldr	r3, [pc, #532]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b7e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b80:	4b82      	ldr	r3, [pc, #520]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004b8a:	4b80      	ldr	r3, [pc, #512]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8e:	08db      	lsrs	r3, r3, #3
 8004b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80e1 	beq.w	8004d70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	f000 8083 	beq.w	8004cbc <HAL_RCC_GetSysClockFreq+0x204>
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	f200 80a1 	bhi.w	8004d00 <HAL_RCC_GetSysClockFreq+0x248>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x114>
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d056      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004bca:	e099      	b.n	8004d00 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bcc:	4b6f      	ldr	r3, [pc, #444]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d02d      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bd8:	4b6c      	ldr	r3, [pc, #432]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	08db      	lsrs	r3, r3, #3
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	4a6b      	ldr	r2, [pc, #428]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
 8004be8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	ee07 3a90 	vmov	s15, r3
 8004bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c02:	4b62      	ldr	r3, [pc, #392]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c16:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004c32:	e087      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004da0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c46:	4b51      	ldr	r3, [pc, #324]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c5a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c76:	e065      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004da4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8a:	4b40      	ldr	r3, [pc, #256]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c9e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cba:	e043      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004da8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cce:	4b2f      	ldr	r3, [pc, #188]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ce2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cfe:	e021      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004da4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d12:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d42:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004d44:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	0a5b      	lsrs	r3, r3, #9
 8004d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d4e:	3301      	adds	r3, #1
 8004d50:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	ee07 3a90 	vmov	s15, r3
 8004d58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d68:	ee17 3a90 	vmov	r3, s15
 8004d6c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004d6e:	e005      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61bb      	str	r3, [r7, #24]
    break;
 8004d74:	e002      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004d76:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d78:	61bb      	str	r3, [r7, #24]
    break;
 8004d7a:	bf00      	nop
  }

  return sysclockfreq;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3724      	adds	r7, #36	; 0x24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	03d09000 	.word	0x03d09000
 8004d94:	003d0900 	.word	0x003d0900
 8004d98:	007a1200 	.word	0x007a1200
 8004d9c:	46000000 	.word	0x46000000
 8004da0:	4c742400 	.word	0x4c742400
 8004da4:	4a742400 	.word	0x4a742400
 8004da8:	4af42400 	.word	0x4af42400

08004dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004db2:	f7ff fe81 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <HAL_RCC_GetHCLKFreq+0x50>)
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	490f      	ldr	r1, [pc, #60]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dc4:	5ccb      	ldrb	r3, [r1, r3]
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	fa22 f303 	lsr.w	r3, r2, r3
 8004dce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <HAL_RCC_GetHCLKFreq+0x50>)
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dda:	5cd3      	ldrb	r3, [r2, r3]
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	fa22 f303 	lsr.w	r3, r2, r3
 8004de6:	4a07      	ldr	r2, [pc, #28]	; (8004e04 <HAL_RCC_GetHCLKFreq+0x58>)
 8004de8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dea:	4a07      	ldr	r2, [pc, #28]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <HAL_RCC_GetHCLKFreq+0x58>)
 8004df2:	681b      	ldr	r3, [r3, #0]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	0800e330 	.word	0x0800e330
 8004e04:	24000004 	.word	0x24000004
 8004e08:	24000000 	.word	0x24000000

08004e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e10:	f7ff ffcc 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004e14:	4602      	mov	r2, r0
 8004e16:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	4904      	ldr	r1, [pc, #16]	; (8004e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e22:	5ccb      	ldrb	r3, [r1, r3]
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	58024400 	.word	0x58024400
 8004e34:	0800e330 	.word	0x0800e330

08004e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e3c:	f7ff ffb6 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	4904      	ldr	r1, [pc, #16]	; (8004e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e4e:	5ccb      	ldrb	r3, [r1, r3]
 8004e50:	f003 031f 	and.w	r3, r3, #31
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	58024400 	.word	0x58024400
 8004e60:	0800e330 	.word	0x0800e330

08004e64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	223f      	movs	r2, #63	; 0x3f
 8004e72:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e74:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0207 	and.w	r2, r3, #7
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004e80:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004e8c:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	f003 020f 	and.w	r2, r3, #15
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004e98:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <HAL_RCC_GetClockConfig+0x80>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 020f 	and.w	r2, r3, #15
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	601a      	str	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	58024400 	.word	0x58024400
 8004ee4:	52002000 	.word	0x52002000

08004ee8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d03f      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f0c:	d02a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f12:	d824      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f18:	d018      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f1e:	d81e      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f28:	d007      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f2a:	e018      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f2c:	4bab      	ldr	r3, [pc, #684]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	4aaa      	ldr	r2, [pc, #680]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f38:	e015      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2102      	movs	r1, #2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f001 fff3 	bl	8006f2c <RCCEx_PLL2_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f4a:	e00c      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3324      	adds	r3, #36	; 0x24
 8004f50:	2102      	movs	r1, #2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f002 f89c 	bl	8007090 <RCCEx_PLL3_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	75fb      	strb	r3, [r7, #23]
      break;
 8004f62:	e000      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d109      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f6c:	4b9b      	ldr	r3, [pc, #620]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f78:	4998      	ldr	r1, [pc, #608]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	650b      	str	r3, [r1, #80]	; 0x50
 8004f7e:	e001      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d03d      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d826      	bhi.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004f98:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004fb5 	.word	0x08004fb5
 8004fa4:	08004fc3 	.word	0x08004fc3
 8004fa8:	08004fd5 	.word	0x08004fd5
 8004fac:	08004fed 	.word	0x08004fed
 8004fb0:	08004fed 	.word	0x08004fed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb4:	4b89      	ldr	r3, [pc, #548]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	4a88      	ldr	r2, [pc, #544]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fc0:	e015      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 ffaf 	bl	8006f2c <RCCEx_PLL2_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fd2:	e00c      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3324      	adds	r3, #36	; 0x24
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f002 f858 	bl	8007090 <RCCEx_PLL3_Config>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fe4:	e003      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fea:	e000      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ff4:	4b79      	ldr	r3, [pc, #484]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	f023 0207 	bic.w	r2, r3, #7
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005000:	4976      	ldr	r1, [pc, #472]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005002:	4313      	orrs	r3, r2
 8005004:	650b      	str	r3, [r1, #80]	; 0x50
 8005006:	e001      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005014:	2b00      	cmp	r3, #0
 8005016:	d042      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005020:	d02b      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005026:	d825      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005028:	2bc0      	cmp	r3, #192	; 0xc0
 800502a:	d028      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800502c:	2bc0      	cmp	r3, #192	; 0xc0
 800502e:	d821      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005030:	2b80      	cmp	r3, #128	; 0x80
 8005032:	d016      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005034:	2b80      	cmp	r3, #128	; 0x80
 8005036:	d81d      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d007      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005040:	e018      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005042:	4b66      	ldr	r3, [pc, #408]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	4a65      	ldr	r2, [pc, #404]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800504c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800504e:	e017      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3304      	adds	r3, #4
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f001 ff68 	bl	8006f2c <RCCEx_PLL2_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005060:	e00e      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3324      	adds	r3, #36	; 0x24
 8005066:	2100      	movs	r1, #0
 8005068:	4618      	mov	r0, r3
 800506a:	f002 f811 	bl	8007090 <RCCEx_PLL3_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005072:	e005      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75fb      	strb	r3, [r7, #23]
      break;
 8005078:	e002      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800507e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005080:	7dfb      	ldrb	r3, [r7, #23]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005086:	4b55      	ldr	r3, [pc, #340]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	4952      	ldr	r1, [pc, #328]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005094:	4313      	orrs	r3, r2
 8005096:	650b      	str	r3, [r1, #80]	; 0x50
 8005098:	e001      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509a:	7dfb      	ldrb	r3, [r7, #23]
 800509c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d049      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050b4:	d030      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80050b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ba:	d82a      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050c0:	d02c      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80050c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050c6:	d824      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050cc:	d018      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80050ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d2:	d81e      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80050d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050dc:	d007      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80050de:	e018      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e0:	4b3e      	ldr	r3, [pc, #248]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	4a3d      	ldr	r2, [pc, #244]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050ec:	e017      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	2100      	movs	r1, #0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 ff19 	bl	8006f2c <RCCEx_PLL2_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80050fe:	e00e      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3324      	adds	r3, #36	; 0x24
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f001 ffc2 	bl	8007090 <RCCEx_PLL3_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005110:	e005      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
      break;
 8005116:	e002      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005118:	bf00      	nop
 800511a:	e000      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800511c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005124:	4b2d      	ldr	r3, [pc, #180]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005132:	492a      	ldr	r1, [pc, #168]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005134:	4313      	orrs	r3, r2
 8005136:	658b      	str	r3, [r1, #88]	; 0x58
 8005138:	e001      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005146:	2b00      	cmp	r3, #0
 8005148:	d04c      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005154:	d030      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005156:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800515a:	d82a      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800515c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005160:	d02c      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005162:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005166:	d824      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800516c:	d018      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800516e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005172:	d81e      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800517c:	d007      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800517e:	e018      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005180:	4b16      	ldr	r3, [pc, #88]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	4a15      	ldr	r2, [pc, #84]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800518a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800518c:	e017      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3304      	adds	r3, #4
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f001 fec9 	bl	8006f2c <RCCEx_PLL2_Config>
 800519a:	4603      	mov	r3, r0
 800519c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800519e:	e00e      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3324      	adds	r3, #36	; 0x24
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 ff72 	bl	8007090 <RCCEx_PLL3_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051b0:	e005      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	75fb      	strb	r3, [r7, #23]
      break;
 80051b6:	e002      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80051b8:	bf00      	nop
 80051ba:	e000      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80051bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051be:	7dfb      	ldrb	r3, [r7, #23]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10d      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051d2:	4902      	ldr	r1, [pc, #8]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	658b      	str	r3, [r1, #88]	; 0x58
 80051d8:	e004      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80051da:	bf00      	nop
 80051dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
 80051e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d032      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f4:	2b30      	cmp	r3, #48	; 0x30
 80051f6:	d01c      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80051f8:	2b30      	cmp	r3, #48	; 0x30
 80051fa:	d817      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d00c      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005200:	2b20      	cmp	r3, #32
 8005202:	d813      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d016      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005208:	2b10      	cmp	r3, #16
 800520a:	d10f      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520c:	4baf      	ldr	r3, [pc, #700]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	4aae      	ldr	r2, [pc, #696]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005218:	e00e      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3304      	adds	r3, #4
 800521e:	2102      	movs	r1, #2
 8005220:	4618      	mov	r0, r3
 8005222:	f001 fe83 	bl	8006f2c <RCCEx_PLL2_Config>
 8005226:	4603      	mov	r3, r0
 8005228:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800522a:	e005      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	75fb      	strb	r3, [r7, #23]
      break;
 8005230:	e002      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005232:	bf00      	nop
 8005234:	e000      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005238:	7dfb      	ldrb	r3, [r7, #23]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800523e:	4ba3      	ldr	r3, [pc, #652]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005242:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524a:	49a0      	ldr	r1, [pc, #640]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800524c:	4313      	orrs	r3, r2
 800524e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005250:	e001      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d047      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800526a:	d030      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800526c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005270:	d82a      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005272:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005276:	d02c      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005278:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800527c:	d824      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800527e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005282:	d018      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005288:	d81e      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800528e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005292:	d007      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005294:	e018      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005296:	4b8d      	ldr	r3, [pc, #564]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	4a8c      	ldr	r2, [pc, #560]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800529c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052a2:	e017      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3304      	adds	r3, #4
 80052a8:	2100      	movs	r1, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	f001 fe3e 	bl	8006f2c <RCCEx_PLL2_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052b4:	e00e      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3324      	adds	r3, #36	; 0x24
 80052ba:	2100      	movs	r1, #0
 80052bc:	4618      	mov	r0, r3
 80052be:	f001 fee7 	bl	8007090 <RCCEx_PLL3_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052c6:	e005      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	75fb      	strb	r3, [r7, #23]
      break;
 80052cc:	e002      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80052ce:	bf00      	nop
 80052d0:	e000      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80052d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052da:	4b7c      	ldr	r3, [pc, #496]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80052dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e6:	4979      	ldr	r1, [pc, #484]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	650b      	str	r3, [r1, #80]	; 0x50
 80052ec:	e001      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
 80052f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d049      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005302:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005306:	d02e      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800530c:	d828      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800530e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005312:	d02a      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005314:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005318:	d822      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800531a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800531e:	d026      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005320:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005324:	d81c      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800532a:	d010      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800532c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005330:	d816      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01d      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533a:	d111      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	2101      	movs	r1, #1
 8005342:	4618      	mov	r0, r3
 8005344:	f001 fdf2 	bl	8006f2c <RCCEx_PLL2_Config>
 8005348:	4603      	mov	r3, r0
 800534a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800534c:	e012      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3324      	adds	r3, #36	; 0x24
 8005352:	2101      	movs	r1, #1
 8005354:	4618      	mov	r0, r3
 8005356:	f001 fe9b 	bl	8007090 <RCCEx_PLL3_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800535e:	e009      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	75fb      	strb	r3, [r7, #23]
      break;
 8005364:	e006      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005366:	bf00      	nop
 8005368:	e004      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800536a:	bf00      	nop
 800536c:	e002      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800536e:	bf00      	nop
 8005370:	e000      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d109      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800537a:	4b54      	ldr	r3, [pc, #336]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800537c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005386:	4951      	ldr	r1, [pc, #324]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005388:	4313      	orrs	r3, r2
 800538a:	650b      	str	r3, [r1, #80]	; 0x50
 800538c:	e001      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538e:	7dfb      	ldrb	r3, [r7, #23]
 8005390:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d04b      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053a8:	d02e      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80053aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053ae:	d828      	bhi.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b4:	d02a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80053b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ba:	d822      	bhi.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80053bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053c0:	d026      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80053c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053c6:	d81c      	bhi.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80053c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053cc:	d010      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80053ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053d2:	d816      	bhi.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01d      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80053d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053dc:	d111      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3304      	adds	r3, #4
 80053e2:	2101      	movs	r1, #1
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 fda1 	bl	8006f2c <RCCEx_PLL2_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80053ee:	e012      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3324      	adds	r3, #36	; 0x24
 80053f4:	2101      	movs	r1, #1
 80053f6:	4618      	mov	r0, r3
 80053f8:	f001 fe4a 	bl	8007090 <RCCEx_PLL3_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005400:	e009      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	75fb      	strb	r3, [r7, #23]
      break;
 8005406:	e006      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005408:	bf00      	nop
 800540a:	e004      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800540c:	bf00      	nop
 800540e:	e002      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005410:	bf00      	nop
 8005412:	e000      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005416:	7dfb      	ldrb	r3, [r7, #23]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005420:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800542a:	4928      	ldr	r1, [pc, #160]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800542c:	4313      	orrs	r3, r2
 800542e:	658b      	str	r3, [r1, #88]	; 0x58
 8005430:	e001      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005432:	7dfb      	ldrb	r3, [r7, #23]
 8005434:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d02f      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800544a:	d00e      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800544c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005450:	d814      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005452:	2b00      	cmp	r3, #0
 8005454:	d015      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800545a:	d10f      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800545c:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	4a1a      	ldr	r2, [pc, #104]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005466:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005468:	e00c      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3304      	adds	r3, #4
 800546e:	2101      	movs	r1, #1
 8005470:	4618      	mov	r0, r3
 8005472:	f001 fd5b 	bl	8006f2c <RCCEx_PLL2_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800547a:	e003      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
      break;
 8005480:	e000      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005482:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005484:	7dfb      	ldrb	r3, [r7, #23]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800548a:	4b10      	ldr	r3, [pc, #64]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800548c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005496:	490d      	ldr	r1, [pc, #52]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005498:	4313      	orrs	r3, r2
 800549a:	650b      	str	r3, [r1, #80]	; 0x50
 800549c:	e001      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549e:	7dfb      	ldrb	r3, [r7, #23]
 80054a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d033      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d81c      	bhi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080054f7 	.word	0x080054f7
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	080054df 	.word	0x080054df
 80054c8:	080054f7 	.word	0x080054f7
 80054cc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054d0:	4bb8      	ldr	r3, [pc, #736]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	4ab7      	ldr	r2, [pc, #732]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80054dc:	e00c      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3304      	adds	r3, #4
 80054e2:	2102      	movs	r1, #2
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 fd21 	bl	8006f2c <RCCEx_PLL2_Config>
 80054ea:	4603      	mov	r3, r0
 80054ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80054ee:	e003      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	75fb      	strb	r3, [r7, #23]
      break;
 80054f4:	e000      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80054f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054fe:	4bad      	ldr	r3, [pc, #692]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005502:	f023 0203 	bic.w	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550a:	49aa      	ldr	r1, [pc, #680]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800550c:	4313      	orrs	r3, r2
 800550e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005510:	e001      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8086 	beq.w	8005630 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005524:	4ba4      	ldr	r3, [pc, #656]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4aa3      	ldr	r2, [pc, #652]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800552a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005530:	f7fd fa1a 	bl	8002968 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005536:	e009      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005538:	f7fd fa16 	bl	8002968 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b64      	cmp	r3, #100	; 0x64
 8005544:	d902      	bls.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	75fb      	strb	r3, [r7, #23]
        break;
 800554a:	e005      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800554c:	4b9a      	ldr	r3, [pc, #616]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ef      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d166      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800555e:	4b95      	ldr	r3, [pc, #596]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005560:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005568:	4053      	eors	r3, r2
 800556a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556e:	2b00      	cmp	r3, #0
 8005570:	d013      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005572:	4b90      	ldr	r3, [pc, #576]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800557c:	4b8d      	ldr	r3, [pc, #564]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	4a8c      	ldr	r2, [pc, #560]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005586:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005588:	4b8a      	ldr	r3, [pc, #552]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	4a89      	ldr	r2, [pc, #548]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800558e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005592:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005594:	4a87      	ldr	r2, [pc, #540]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a4:	d115      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fd f9df 	bl	8002968 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ac:	e00b      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ae:	f7fd f9db 	bl	8002968 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055bc:	4293      	cmp	r3, r2
 80055be:	d902      	bls.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	75fb      	strb	r3, [r7, #23]
            break;
 80055c4:	e005      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055c6:	4b7b      	ldr	r3, [pc, #492]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0ed      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d126      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e6:	d10d      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80055e8:	4b72      	ldr	r3, [pc, #456]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055f6:	0919      	lsrs	r1, r3, #4
 80055f8:	4b70      	ldr	r3, [pc, #448]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80055fa:	400b      	ands	r3, r1
 80055fc:	496d      	ldr	r1, [pc, #436]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	610b      	str	r3, [r1, #16]
 8005602:	e005      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005604:	4b6b      	ldr	r3, [pc, #428]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	4a6a      	ldr	r2, [pc, #424]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800560a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800560e:	6113      	str	r3, [r2, #16]
 8005610:	4b68      	ldr	r3, [pc, #416]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800561a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561e:	4965      	ldr	r1, [pc, #404]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005620:	4313      	orrs	r3, r2
 8005622:	670b      	str	r3, [r1, #112]	; 0x70
 8005624:	e004      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	75bb      	strb	r3, [r7, #22]
 800562a:	e001      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d07e      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005640:	2b28      	cmp	r3, #40	; 0x28
 8005642:	d867      	bhi.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005644:	a201      	add	r2, pc, #4	; (adr r2, 800564c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	0800571b 	.word	0x0800571b
 8005650:	08005715 	.word	0x08005715
 8005654:	08005715 	.word	0x08005715
 8005658:	08005715 	.word	0x08005715
 800565c:	08005715 	.word	0x08005715
 8005660:	08005715 	.word	0x08005715
 8005664:	08005715 	.word	0x08005715
 8005668:	08005715 	.word	0x08005715
 800566c:	080056f1 	.word	0x080056f1
 8005670:	08005715 	.word	0x08005715
 8005674:	08005715 	.word	0x08005715
 8005678:	08005715 	.word	0x08005715
 800567c:	08005715 	.word	0x08005715
 8005680:	08005715 	.word	0x08005715
 8005684:	08005715 	.word	0x08005715
 8005688:	08005715 	.word	0x08005715
 800568c:	08005703 	.word	0x08005703
 8005690:	08005715 	.word	0x08005715
 8005694:	08005715 	.word	0x08005715
 8005698:	08005715 	.word	0x08005715
 800569c:	08005715 	.word	0x08005715
 80056a0:	08005715 	.word	0x08005715
 80056a4:	08005715 	.word	0x08005715
 80056a8:	08005715 	.word	0x08005715
 80056ac:	0800571b 	.word	0x0800571b
 80056b0:	08005715 	.word	0x08005715
 80056b4:	08005715 	.word	0x08005715
 80056b8:	08005715 	.word	0x08005715
 80056bc:	08005715 	.word	0x08005715
 80056c0:	08005715 	.word	0x08005715
 80056c4:	08005715 	.word	0x08005715
 80056c8:	08005715 	.word	0x08005715
 80056cc:	0800571b 	.word	0x0800571b
 80056d0:	08005715 	.word	0x08005715
 80056d4:	08005715 	.word	0x08005715
 80056d8:	08005715 	.word	0x08005715
 80056dc:	08005715 	.word	0x08005715
 80056e0:	08005715 	.word	0x08005715
 80056e4:	08005715 	.word	0x08005715
 80056e8:	08005715 	.word	0x08005715
 80056ec:	0800571b 	.word	0x0800571b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	2101      	movs	r1, #1
 80056f6:	4618      	mov	r0, r3
 80056f8:	f001 fc18 	bl	8006f2c <RCCEx_PLL2_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005700:	e00c      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3324      	adds	r3, #36	; 0x24
 8005706:	2101      	movs	r1, #1
 8005708:	4618      	mov	r0, r3
 800570a:	f001 fcc1 	bl	8007090 <RCCEx_PLL3_Config>
 800570e:	4603      	mov	r3, r0
 8005710:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005712:	e003      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	75fb      	strb	r3, [r7, #23]
      break;
 8005718:	e000      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800571a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800571c:	7dfb      	ldrb	r3, [r7, #23]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005722:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005726:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800572e:	4921      	ldr	r1, [pc, #132]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005730:	4313      	orrs	r3, r2
 8005732:	654b      	str	r3, [r1, #84]	; 0x54
 8005734:	e001      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005736:	7dfb      	ldrb	r3, [r7, #23]
 8005738:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d03e      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800574a:	2b05      	cmp	r3, #5
 800574c:	d820      	bhi.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005797 	.word	0x08005797
 8005758:	0800576d 	.word	0x0800576d
 800575c:	0800577f 	.word	0x0800577f
 8005760:	08005797 	.word	0x08005797
 8005764:	08005797 	.word	0x08005797
 8005768:	08005797 	.word	0x08005797
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3304      	adds	r3, #4
 8005770:	2101      	movs	r1, #1
 8005772:	4618      	mov	r0, r3
 8005774:	f001 fbda 	bl	8006f2c <RCCEx_PLL2_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800577c:	e00c      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3324      	adds	r3, #36	; 0x24
 8005782:	2101      	movs	r1, #1
 8005784:	4618      	mov	r0, r3
 8005786:	f001 fc83 	bl	8007090 <RCCEx_PLL3_Config>
 800578a:	4603      	mov	r3, r0
 800578c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800578e:	e003      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
      break;
 8005794:	e000      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d110      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a2:	f023 0207 	bic.w	r2, r3, #7
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057aa:	4902      	ldr	r1, [pc, #8]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	654b      	str	r3, [r1, #84]	; 0x54
 80057b0:	e008      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80057b2:	bf00      	nop
 80057b4:	58024400 	.word	0x58024400
 80057b8:	58024800 	.word	0x58024800
 80057bc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d039      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d6:	2b05      	cmp	r3, #5
 80057d8:	d820      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80057da:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80057dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e0:	08005823 	.word	0x08005823
 80057e4:	080057f9 	.word	0x080057f9
 80057e8:	0800580b 	.word	0x0800580b
 80057ec:	08005823 	.word	0x08005823
 80057f0:	08005823 	.word	0x08005823
 80057f4:	08005823 	.word	0x08005823
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	2101      	movs	r1, #1
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 fb94 	bl	8006f2c <RCCEx_PLL2_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005808:	e00c      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	3324      	adds	r3, #36	; 0x24
 800580e:	2101      	movs	r1, #1
 8005810:	4618      	mov	r0, r3
 8005812:	f001 fc3d 	bl	8007090 <RCCEx_PLL3_Config>
 8005816:	4603      	mov	r3, r0
 8005818:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800581a:	e003      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	75fb      	strb	r3, [r7, #23]
      break;
 8005820:	e000      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005824:	7dfb      	ldrb	r3, [r7, #23]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800582a:	4bb7      	ldr	r3, [pc, #732]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800582c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582e:	f023 0207 	bic.w	r2, r3, #7
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005838:	49b3      	ldr	r1, [pc, #716]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800583a:	4313      	orrs	r3, r2
 800583c:	658b      	str	r3, [r1, #88]	; 0x58
 800583e:	e001      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005840:	7dfb      	ldrb	r3, [r7, #23]
 8005842:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d04b      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005856:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800585a:	d02e      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800585c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005860:	d828      	bhi.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005866:	d02a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586c:	d822      	bhi.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800586e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005872:	d026      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005874:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005878:	d81c      	bhi.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800587a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800587e:	d010      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005884:	d816      	bhi.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01d      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800588a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800588e:	d111      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3304      	adds	r3, #4
 8005894:	2100      	movs	r1, #0
 8005896:	4618      	mov	r0, r3
 8005898:	f001 fb48 	bl	8006f2c <RCCEx_PLL2_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80058a0:	e012      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3324      	adds	r3, #36	; 0x24
 80058a6:	2102      	movs	r1, #2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f001 fbf1 	bl	8007090 <RCCEx_PLL3_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80058b2:	e009      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	75fb      	strb	r3, [r7, #23]
      break;
 80058b8:	e006      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80058ba:	bf00      	nop
 80058bc:	e004      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80058be:	bf00      	nop
 80058c0:	e002      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80058c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058ce:	4b8e      	ldr	r3, [pc, #568]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80058d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058dc:	498a      	ldr	r1, [pc, #552]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	654b      	str	r3, [r1, #84]	; 0x54
 80058e2:	e001      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
 80058e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d04b      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058fe:	d02e      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005900:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005904:	d828      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590a:	d02a      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800590c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005910:	d822      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005912:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005916:	d026      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005918:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800591c:	d81c      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800591e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005922:	d010      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005928:	d816      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d01d      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800592e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005932:	d111      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	2100      	movs	r1, #0
 800593a:	4618      	mov	r0, r3
 800593c:	f001 faf6 	bl	8006f2c <RCCEx_PLL2_Config>
 8005940:	4603      	mov	r3, r0
 8005942:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005944:	e012      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3324      	adds	r3, #36	; 0x24
 800594a:	2102      	movs	r1, #2
 800594c:	4618      	mov	r0, r3
 800594e:	f001 fb9f 	bl	8007090 <RCCEx_PLL3_Config>
 8005952:	4603      	mov	r3, r0
 8005954:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005956:	e009      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	75fb      	strb	r3, [r7, #23]
      break;
 800595c:	e006      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800595e:	bf00      	nop
 8005960:	e004      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005962:	bf00      	nop
 8005964:	e002      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005966:	bf00      	nop
 8005968:	e000      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800596a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800596c:	7dfb      	ldrb	r3, [r7, #23]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10a      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005972:	4b65      	ldr	r3, [pc, #404]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005980:	4961      	ldr	r1, [pc, #388]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005982:	4313      	orrs	r3, r2
 8005984:	658b      	str	r3, [r1, #88]	; 0x58
 8005986:	e001      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005994:	2b00      	cmp	r3, #0
 8005996:	d04b      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800599e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059a2:	d02e      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80059a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059a8:	d828      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80059aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ae:	d02a      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80059b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b4:	d822      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80059b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059ba:	d026      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80059bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059c0:	d81c      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80059c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c6:	d010      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80059c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059cc:	d816      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01d      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80059d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d6:	d111      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 faa4 	bl	8006f2c <RCCEx_PLL2_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80059e8:	e012      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3324      	adds	r3, #36	; 0x24
 80059ee:	2102      	movs	r1, #2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 fb4d 	bl	8007090 <RCCEx_PLL3_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80059fa:	e009      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005a00:	e006      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005a02:	bf00      	nop
 8005a04:	e004      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005a06:	bf00      	nop
 8005a08:	e002      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005a0a:	bf00      	nop
 8005a0c:	e000      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a16:	4b3c      	ldr	r3, [pc, #240]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a24:	4938      	ldr	r1, [pc, #224]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	658b      	str	r3, [r1, #88]	; 0x58
 8005a2a:	e001      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a46:	d10a      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3324      	adds	r3, #36	; 0x24
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f001 fb1e 	bl	8007090 <RCCEx_PLL3_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a5e:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a6c:	4926      	ldr	r1, [pc, #152]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d01a      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a88:	d10a      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3324      	adds	r3, #36	; 0x24
 8005a8e:	2102      	movs	r1, #2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 fafd 	bl	8007090 <RCCEx_PLL3_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005aa0:	4b19      	ldr	r3, [pc, #100]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aae:	4916      	ldr	r1, [pc, #88]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d036      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aca:	d01f      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ad0:	d817      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ada:	d009      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005adc:	e011      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f001 fa21 	bl	8006f2c <RCCEx_PLL2_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005aee:	e00e      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3324      	adds	r3, #36	; 0x24
 8005af4:	2102      	movs	r1, #2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 faca 	bl	8007090 <RCCEx_PLL3_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005b00:	e005      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	75fb      	strb	r3, [r7, #23]
      break;
 8005b06:	e002      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005b08:	58024400 	.word	0x58024400
      break;
 8005b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b14:	4b93      	ldr	r3, [pc, #588]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b22:	4990      	ldr	r1, [pc, #576]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	658b      	str	r3, [r1, #88]	; 0x58
 8005b28:	e001      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
 8005b2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d033      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b44:	d01c      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005b46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b4a:	d816      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b50:	d003      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b56:	d007      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005b58:	e00f      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b5a:	4b82      	ldr	r3, [pc, #520]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	4a81      	ldr	r2, [pc, #516]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005b66:	e00c      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3324      	adds	r3, #36	; 0x24
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 fa8e 	bl	8007090 <RCCEx_PLL3_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005b78:	e003      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b7e:	e000      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b88:	4b76      	ldr	r3, [pc, #472]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b96:	4973      	ldr	r1, [pc, #460]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	654b      	str	r3, [r1, #84]	; 0x54
 8005b9c:	e001      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ba0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d029      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bba:	d007      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005bbc:	e00f      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bbe:	4b69      	ldr	r3, [pc, #420]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	4a68      	ldr	r2, [pc, #416]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005bca:	e00b      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 f9aa 	bl	8006f2c <RCCEx_PLL2_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005bdc:	e002      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	75fb      	strb	r3, [r7, #23]
      break;
 8005be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005bea:	4b5e      	ldr	r3, [pc, #376]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf6:	495b      	ldr	r1, [pc, #364]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bfc:	e001      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
 8005c00:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3324      	adds	r3, #36	; 0x24
 8005c12:	2102      	movs	r1, #2
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 fa3b 	bl	8007090 <RCCEx_PLL3_Config>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d030      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c38:	d017      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c3e:	d811      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c44:	d013      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c4a:	d80b      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d010      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c54:	d106      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c56:	4b43      	ldr	r3, [pc, #268]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	4a42      	ldr	r2, [pc, #264]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005c62:	e007      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	75fb      	strb	r3, [r7, #23]
      break;
 8005c68:	e004      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005c6a:	bf00      	nop
 8005c6c:	e002      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c7a:	4b3a      	ldr	r3, [pc, #232]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c86:	4937      	ldr	r1, [pc, #220]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	654b      	str	r3, [r1, #84]	; 0x54
 8005c8c:	e001      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d008      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c9e:	4b31      	ldr	r3, [pc, #196]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005caa:	492e      	ldr	r1, [pc, #184]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d009      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005cbc:	4b29      	ldr	r3, [pc, #164]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005cca:	4926      	ldr	r1, [pc, #152]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cdc:	4b21      	ldr	r3, [pc, #132]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce8:	491e      	ldr	r1, [pc, #120]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	4a19      	ldr	r2, [pc, #100]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d04:	6113      	str	r3, [r2, #16]
 8005d06:	4b17      	ldr	r3, [pc, #92]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005d10:	4914      	ldr	r1, [pc, #80]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	da08      	bge.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d1e:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2a:	490e      	ldr	r1, [pc, #56]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d009      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4a:	4906      	ldr	r1, [pc, #24]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005d50:	7dbb      	ldrb	r3, [r7, #22]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	58024400 	.word	0x58024400

08005d68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b090      	sub	sp, #64	; 0x40
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d76:	f040 8095 	bne.w	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005d7a:	4bae      	ldr	r3, [pc, #696]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	633b      	str	r3, [r7, #48]	; 0x30
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	f200 8088 	bhi.w	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005d8c:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d92:	bf00      	nop
 8005d94:	08005da9 	.word	0x08005da9
 8005d98:	08005dd1 	.word	0x08005dd1
 8005d9c:	08005df9 	.word	0x08005df9
 8005da0:	08005e95 	.word	0x08005e95
 8005da4:	08005e21 	.word	0x08005e21

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005da8:	4ba2      	ldr	r3, [pc, #648]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005db4:	d108      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 ff64 	bl	8006c88 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005dc4:	f000 bc95 	b.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dcc:	f000 bc91 	b.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dd0:	4b98      	ldr	r3, [pc, #608]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ddc:	d108      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dde:	f107 0318 	add.w	r3, r7, #24
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fca8 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005dec:	f000 bc81 	b.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005df4:	f000 bc7d 	b.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005df8:	4b8e      	ldr	r3, [pc, #568]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e04:	d108      	bne.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e06:	f107 030c 	add.w	r3, r7, #12
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fde8 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e14:	f000 bc6d 	b.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e1c:	f000 bc69 	b.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e20:	4b84      	ldr	r3, [pc, #528]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e2a:	4b82      	ldr	r3, [pc, #520]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d10c      	bne.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e3c:	4b7d      	ldr	r3, [pc, #500]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	08db      	lsrs	r3, r3, #3
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	4a7c      	ldr	r2, [pc, #496]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005e48:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e4e:	e01f      	b.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e50:	4b78      	ldr	r3, [pc, #480]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5c:	d106      	bne.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e64:	d102      	bne.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005e66:	4b75      	ldr	r3, [pc, #468]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e6a:	e011      	b.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e6c:	4b71      	ldr	r3, [pc, #452]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e78:	d106      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e80:	d102      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005e82:	4b6f      	ldr	r3, [pc, #444]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e86:	e003      	b.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005e8c:	f000 bc31 	b.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e90:	f000 bc2f 	b.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e94:	4b6b      	ldr	r3, [pc, #428]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e98:	f000 bc2b 	b.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ea0:	f000 bc27 	b.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eaa:	f040 8095 	bne.w	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005eae:	4b61      	ldr	r3, [pc, #388]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005eb6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ebe:	d04d      	beq.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec6:	f200 8084 	bhi.w	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	2bc0      	cmp	r3, #192	; 0xc0
 8005ece:	d07d      	beq.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ed4:	d87d      	bhi.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2b80      	cmp	r3, #128	; 0x80
 8005eda:	d02d      	beq.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	2b80      	cmp	r3, #128	; 0x80
 8005ee0:	d877      	bhi.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	2b40      	cmp	r3, #64	; 0x40
 8005eec:	d012      	beq.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005eee:	e070      	b.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ef0:	4b50      	ldr	r3, [pc, #320]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005efc:	d107      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fec0 	bl	8006c88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f0c:	e3f1      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f12:	e3ee      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f14:	4b47      	ldr	r3, [pc, #284]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f20:	d107      	bne.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f22:	f107 0318 	add.w	r3, r7, #24
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fc06 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f30:	e3df      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f36:	e3dc      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f38:	4b3e      	ldr	r3, [pc, #248]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f44:	d107      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f46:	f107 030c 	add.w	r3, r7, #12
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fd48 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f54:	e3cd      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f5a:	e3ca      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f5c:	4b35      	ldr	r3, [pc, #212]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f66:	4b33      	ldr	r3, [pc, #204]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d10c      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8005f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f78:	4b2e      	ldr	r3, [pc, #184]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	08db      	lsrs	r3, r3, #3
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	4a2d      	ldr	r2, [pc, #180]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f8a:	e01e      	b.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f8c:	4b29      	ldr	r3, [pc, #164]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f98:	d106      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fa0:	d102      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005fa2:	4b26      	ldr	r3, [pc, #152]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa6:	e010      	b.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fa8:	4b22      	ldr	r3, [pc, #136]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb4:	d106      	bne.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fbc:	d102      	bne.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005fbe:	4b20      	ldr	r3, [pc, #128]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc2:	e002      	b.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005fc8:	e393      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005fca:	e392      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005fcc:	4b1d      	ldr	r3, [pc, #116]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fd0:	e38f      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fd6:	e38c      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fde:	f040 80a7 	bne.w	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005fe2:	4b14      	ldr	r3, [pc, #80]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005fea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ff2:	d05f      	beq.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ffa:	f200 8096 	bhi.w	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006004:	f000 808e 	beq.w	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800600e:	f200 808c 	bhi.w	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006018:	d03a      	beq.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006020:	f200 8083 	bhi.w	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00e      	beq.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006030:	d01c      	beq.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006032:	e07a      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006034:	58024400 	.word	0x58024400
 8006038:	03d09000 	.word	0x03d09000
 800603c:	003d0900 	.word	0x003d0900
 8006040:	007a1200 	.word	0x007a1200
 8006044:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006048:	4baa      	ldr	r3, [pc, #680]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006050:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006054:	d107      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fe14 	bl	8006c88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006064:	e345      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800606a:	e342      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800606c:	4ba1      	ldr	r3, [pc, #644]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006078:	d107      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800607a:	f107 0318 	add.w	r3, r7, #24
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fb5a 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006088:	e333      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800608e:	e330      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006090:	4b98      	ldr	r3, [pc, #608]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800609c:	d107      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800609e:	f107 030c 	add.w	r3, r7, #12
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fc9c 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80060ac:	e321      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060b2:	e31e      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80060b4:	4b8f      	ldr	r3, [pc, #572]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80060b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060bc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060be:	4b8d      	ldr	r3, [pc, #564]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d10c      	bne.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80060ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d109      	bne.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060d0:	4b88      	ldr	r3, [pc, #544]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	08db      	lsrs	r3, r3, #3
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	4a87      	ldr	r2, [pc, #540]	; (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060dc:	fa22 f303 	lsr.w	r3, r2, r3
 80060e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e2:	e01e      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060e4:	4b83      	ldr	r3, [pc, #524]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f0:	d106      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80060f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060f8:	d102      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80060fa:	4b80      	ldr	r3, [pc, #512]	; (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060fe:	e010      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006100:	4b7c      	ldr	r3, [pc, #496]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800610c:	d106      	bne.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800610e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006114:	d102      	bne.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006116:	4b7a      	ldr	r3, [pc, #488]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800611a:	e002      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006120:	e2e7      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006122:	e2e6      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006124:	4b77      	ldr	r3, [pc, #476]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006128:	e2e3      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800612e:	e2e0      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006136:	f040 809c 	bne.w	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800613a:	4b6e      	ldr	r3, [pc, #440]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006142:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800614a:	d054      	beq.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006152:	f200 808b 	bhi.w	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800615c:	f000 8083 	beq.w	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006166:	f200 8081 	bhi.w	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006170:	d02f      	beq.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006178:	d878      	bhi.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006186:	d012      	beq.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006188:	e070      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800618a:	4b5a      	ldr	r3, [pc, #360]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006196:	d107      	bne.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fd73 	bl	8006c88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061a6:	e2a4      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061ac:	e2a1      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061ae:	4b51      	ldr	r3, [pc, #324]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ba:	d107      	bne.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061bc:	f107 0318 	add.w	r3, r7, #24
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fab9 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80061ca:	e292      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061d0:	e28f      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061d2:	4b48      	ldr	r3, [pc, #288]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061de:	d107      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fbfb 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061ee:	e280      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061f4:	e27d      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80061f6:	4b3f      	ldr	r3, [pc, #252]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80061f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006200:	4b3c      	ldr	r3, [pc, #240]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b04      	cmp	r3, #4
 800620a:	d10c      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620e:	2b00      	cmp	r3, #0
 8006210:	d109      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006212:	4b38      	ldr	r3, [pc, #224]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	08db      	lsrs	r3, r3, #3
 8006218:	f003 0303 	and.w	r3, r3, #3
 800621c:	4a36      	ldr	r2, [pc, #216]	; (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800621e:	fa22 f303 	lsr.w	r3, r2, r3
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006224:	e01e      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006226:	4b33      	ldr	r3, [pc, #204]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006232:	d106      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800623a:	d102      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800623c:	4b2f      	ldr	r3, [pc, #188]	; (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006240:	e010      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006242:	4b2c      	ldr	r3, [pc, #176]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800624e:	d106      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006256:	d102      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006258:	4b29      	ldr	r3, [pc, #164]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800625c:	e002      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006262:	e246      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006264:	e245      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006266:	4b27      	ldr	r3, [pc, #156]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800626a:	e242      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006270:	e23f      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006278:	f040 80a8 	bne.w	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800627c:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800627e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006280:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006284:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800628c:	d060      	beq.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006294:	f200 8097 	bhi.w	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800629e:	f000 808f 	beq.w	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062a8:	f200 808d 	bhi.w	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b2:	d03b      	beq.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ba:	f200 8084 	bhi.w	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ca:	d01d      	beq.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80062cc:	e07b      	b.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062ce:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062da:	d107      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fcd1 	bl	8006c88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062ea:	e202      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062f0:	e1ff      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80062f2:	bf00      	nop
 80062f4:	58024400 	.word	0x58024400
 80062f8:	03d09000 	.word	0x03d09000
 80062fc:	003d0900 	.word	0x003d0900
 8006300:	007a1200 	.word	0x007a1200
 8006304:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006308:	4ba3      	ldr	r3, [pc, #652]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006314:	d107      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006316:	f107 0318 	add.w	r3, r7, #24
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fa0c 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006324:	e1e5      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800632a:	e1e2      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800632c:	4b9a      	ldr	r3, [pc, #616]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006338:	d107      	bne.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800633a:	f107 030c 	add.w	r3, r7, #12
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fb4e 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006348:	e1d3      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800634e:	e1d0      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006350:	4b91      	ldr	r3, [pc, #580]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006354:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006358:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800635a:	4b8f      	ldr	r3, [pc, #572]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b04      	cmp	r3, #4
 8006364:	d10c      	bne.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006368:	2b00      	cmp	r3, #0
 800636a:	d109      	bne.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800636c:	4b8a      	ldr	r3, [pc, #552]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	08db      	lsrs	r3, r3, #3
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	4a89      	ldr	r2, [pc, #548]	; (800659c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006378:	fa22 f303 	lsr.w	r3, r2, r3
 800637c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800637e:	e01e      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006380:	4b85      	ldr	r3, [pc, #532]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800638c:	d106      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800638e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006390:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006394:	d102      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006396:	4b82      	ldr	r3, [pc, #520]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800639a:	e010      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800639c:	4b7e      	ldr	r3, [pc, #504]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063a8:	d106      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80063aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063b0:	d102      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80063b2:	4b7c      	ldr	r3, [pc, #496]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80063b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b6:	e002      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80063bc:	e199      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80063be:	e198      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80063c0:	4b79      	ldr	r3, [pc, #484]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063c4:	e195      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063ca:	e192      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063d2:	d173      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80063d4:	4b70      	ldr	r3, [pc, #448]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063dc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063e4:	d02f      	beq.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ec:	d863      	bhi.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fa:	d012      	beq.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80063fc:	e05b      	b.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063fe:	4b66      	ldr	r3, [pc, #408]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800640a:	d107      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800640c:	f107 0318 	add.w	r3, r7, #24
 8006410:	4618      	mov	r0, r3
 8006412:	f000 f991 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800641a:	e16a      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006420:	e167      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006422:	4b5d      	ldr	r3, [pc, #372]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800642a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800642e:	d107      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006430:	f107 030c 	add.w	r3, r7, #12
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fad3 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800643e:	e158      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006440:	2300      	movs	r3, #0
 8006442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006444:	e155      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006446:	4b54      	ldr	r3, [pc, #336]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800644e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006450:	4b51      	ldr	r3, [pc, #324]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b04      	cmp	r3, #4
 800645a:	d10c      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645e:	2b00      	cmp	r3, #0
 8006460:	d109      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006462:	4b4d      	ldr	r3, [pc, #308]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	08db      	lsrs	r3, r3, #3
 8006468:	f003 0303 	and.w	r3, r3, #3
 800646c:	4a4b      	ldr	r2, [pc, #300]	; (800659c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800646e:	fa22 f303 	lsr.w	r3, r2, r3
 8006472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006474:	e01e      	b.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006476:	4b48      	ldr	r3, [pc, #288]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006482:	d106      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800648a:	d102      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800648c:	4b44      	ldr	r3, [pc, #272]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800648e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006490:	e010      	b.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006492:	4b41      	ldr	r3, [pc, #260]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800649e:	d106      	bne.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a6:	d102      	bne.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80064a8:	4b3e      	ldr	r3, [pc, #248]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ac:	e002      	b.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80064b2:	e11e      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80064b4:	e11d      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064ba:	e11a      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c2:	d133      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80064c4:	4b34      	ldr	r3, [pc, #208]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80064c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d004      	beq.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064da:	d012      	beq.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80064dc:	e023      	b.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064de:	4b2e      	ldr	r3, [pc, #184]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ea:	d107      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fbc9 	bl	8006c88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80064fa:	e0fa      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006500:	e0f7      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006502:	4b25      	ldr	r3, [pc, #148]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800650a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800650e:	d107      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006510:	f107 0318 	add.w	r3, r7, #24
 8006514:	4618      	mov	r0, r3
 8006516:	f000 f90f 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800651e:	e0e8      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006524:	e0e5      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800652a:	e0e2      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006532:	f040 808f 	bne.w	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006536:	4b18      	ldr	r3, [pc, #96]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800653e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006546:	d075      	beq.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800654e:	d87e      	bhi.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006556:	d060      	beq.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655e:	d876      	bhi.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006566:	d045      	beq.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800656e:	d86e      	bhi.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006576:	d02b      	beq.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8006578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800657e:	d866      	bhi.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800658c:	d00e      	beq.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800658e:	e05e      	b.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006590:	f000 f8bc 	bl	800670c <HAL_RCCEx_GetD3PCLK1Freq>
 8006594:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006596:	e0ac      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006598:	58024400 	.word	0x58024400
 800659c:	03d09000 	.word	0x03d09000
 80065a0:	003d0900 	.word	0x003d0900
 80065a4:	007a1200 	.word	0x007a1200
 80065a8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065ac:	4b53      	ldr	r3, [pc, #332]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065b8:	d107      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ba:	f107 0318 	add.w	r3, r7, #24
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 f8ba 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80065c8:	e093      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ce:	e090      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065d0:	4b4a      	ldr	r3, [pc, #296]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065dc:	d107      	bne.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065de:	f107 030c 	add.w	r3, r7, #12
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 f9fc 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80065ec:	e081      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065f2:	e07e      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065f4:	4b41      	ldr	r3, [pc, #260]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d109      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006600:	4b3e      	ldr	r3, [pc, #248]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	08db      	lsrs	r3, r3, #3
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	4a3d      	ldr	r2, [pc, #244]	; (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800660c:	fa22 f303 	lsr.w	r3, r2, r3
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006612:	e06e      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006618:	e06b      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800661a:	4b38      	ldr	r3, [pc, #224]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006626:	d102      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8006628:	4b36      	ldr	r3, [pc, #216]	; (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800662a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800662c:	e061      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006632:	e05e      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006634:	4b31      	ldr	r3, [pc, #196]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006640:	d102      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8006642:	4b31      	ldr	r3, [pc, #196]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006644:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006646:	e054      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800664c:	e051      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006652:	e04e      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665a:	d148      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800665c:	4b27      	ldr	r3, [pc, #156]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800665e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006664:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800666c:	d02a      	beq.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006674:	d838      	bhi.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	2b00      	cmp	r3, #0
 800667a:	d004      	beq.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006682:	d00d      	beq.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006684:	e030      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006686:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006692:	d102      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8006694:	4b1c      	ldr	r3, [pc, #112]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006698:	e02b      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800669e:	e028      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066a0:	4b16      	ldr	r3, [pc, #88]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066ac:	d107      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fae8 	bl	8006c88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066bc:	e019      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066c2:	e016      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066c4:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d0:	d107      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066d2:	f107 0318 	add.w	r3, r7, #24
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 f82e 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066e0:	e007      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066e6:	e004      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80066e8:	2300      	movs	r3, #0
 80066ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ec:	e001      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80066f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3740      	adds	r7, #64	; 0x40
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	58024400 	.word	0x58024400
 8006700:	03d09000 	.word	0x03d09000
 8006704:	003d0900 	.word	0x003d0900
 8006708:	007a1200 	.word	0x007a1200

0800670c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006710:	f7fe fb4c 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8006714:	4602      	mov	r2, r0
 8006716:	4b06      	ldr	r3, [pc, #24]	; (8006730 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	091b      	lsrs	r3, r3, #4
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	4904      	ldr	r1, [pc, #16]	; (8006734 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006722:	5ccb      	ldrb	r3, [r1, r3]
 8006724:	f003 031f 	and.w	r3, r3, #31
 8006728:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800672c:	4618      	mov	r0, r3
 800672e:	bd80      	pop	{r7, pc}
 8006730:	58024400 	.word	0x58024400
 8006734:	0800e330 	.word	0x0800e330

08006738 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006738:	b480      	push	{r7}
 800673a:	b089      	sub	sp, #36	; 0x24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006740:	4ba1      	ldr	r3, [pc, #644]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800674a:	4b9f      	ldr	r3, [pc, #636]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674e:	0b1b      	lsrs	r3, r3, #12
 8006750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006754:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006756:	4b9c      	ldr	r3, [pc, #624]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	091b      	lsrs	r3, r3, #4
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006762:	4b99      	ldr	r3, [pc, #612]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006766:	08db      	lsrs	r3, r3, #3
 8006768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8111 	beq.w	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b02      	cmp	r3, #2
 800678a:	f000 8083 	beq.w	8006894 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b02      	cmp	r3, #2
 8006792:	f200 80a1 	bhi.w	80068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d056      	beq.n	8006850 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067a2:	e099      	b.n	80068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a4:	4b88      	ldr	r3, [pc, #544]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d02d      	beq.n	800680c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067b0:	4b85      	ldr	r3, [pc, #532]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	08db      	lsrs	r3, r3, #3
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	4a84      	ldr	r2, [pc, #528]	; (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067bc:	fa22 f303 	lsr.w	r3, r2, r3
 80067c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	ee07 3a90 	vmov	s15, r3
 80067c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067da:	4b7b      	ldr	r3, [pc, #492]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006806:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800680a:	e087      	b.n	800691c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006816:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80069d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800681a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681e:	4b6a      	ldr	r3, [pc, #424]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006832:	eddf 5a67 	vldr	s11, [pc, #412]	; 80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800684e:	e065      	b.n	800691c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800685e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006862:	4b59      	ldr	r3, [pc, #356]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006872:	ed97 6a03 	vldr	s12, [r7, #12]
 8006876:	eddf 5a56 	vldr	s11, [pc, #344]	; 80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800687a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006892:	e043      	b.n	800691c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a6:	4b48      	ldr	r3, [pc, #288]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068d6:	e021      	b.n	800691c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ea:	4b37      	ldr	r3, [pc, #220]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80068fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800690e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800691a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800691c:	4b2a      	ldr	r3, [pc, #168]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	0a5b      	lsrs	r3, r3, #9
 8006922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006932:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006936:	edd7 6a07 	vldr	s13, [r7, #28]
 800693a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800693e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006942:	ee17 2a90 	vmov	r2, s15
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800694a:	4b1f      	ldr	r3, [pc, #124]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	0c1b      	lsrs	r3, r3, #16
 8006950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006954:	ee07 3a90 	vmov	s15, r3
 8006958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006960:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006964:	edd7 6a07 	vldr	s13, [r7, #28]
 8006968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006970:	ee17 2a90 	vmov	r2, s15
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006978:	4b13      	ldr	r3, [pc, #76]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	0e1b      	lsrs	r3, r3, #24
 800697e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800698e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006992:	edd7 6a07 	vldr	s13, [r7, #28]
 8006996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800699a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800699e:	ee17 2a90 	vmov	r2, s15
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069a6:	e008      	b.n	80069ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	609a      	str	r2, [r3, #8]
}
 80069ba:	bf00      	nop
 80069bc:	3724      	adds	r7, #36	; 0x24
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	58024400 	.word	0x58024400
 80069cc:	03d09000 	.word	0x03d09000
 80069d0:	46000000 	.word	0x46000000
 80069d4:	4c742400 	.word	0x4c742400
 80069d8:	4a742400 	.word	0x4a742400
 80069dc:	4af42400 	.word	0x4af42400

080069e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b089      	sub	sp, #36	; 0x24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069e8:	4ba1      	ldr	r3, [pc, #644]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80069f2:	4b9f      	ldr	r3, [pc, #636]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	0d1b      	lsrs	r3, r3, #20
 80069f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80069fe:	4b9c      	ldr	r3, [pc, #624]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	0a1b      	lsrs	r3, r3, #8
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a0a:	4b99      	ldr	r3, [pc, #612]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0e:	08db      	lsrs	r3, r3, #3
 8006a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	fb02 f303 	mul.w	r3, r2, r3
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8111 	beq.w	8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	f000 8083 	beq.w	8006b3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	f200 80a1 	bhi.w	8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d056      	beq.n	8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a4a:	e099      	b.n	8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a4c:	4b88      	ldr	r3, [pc, #544]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d02d      	beq.n	8006ab4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a58:	4b85      	ldr	r3, [pc, #532]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	08db      	lsrs	r3, r3, #3
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	4a84      	ldr	r2, [pc, #528]	; (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a64:	fa22 f303 	lsr.w	r3, r2, r3
 8006a68:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	ee07 3a90 	vmov	s15, r3
 8006a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a82:	4b7b      	ldr	r3, [pc, #492]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ab2:	e087      	b.n	8006bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac6:	4b6a      	ldr	r3, [pc, #424]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ada:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006af6:	e065      	b.n	8006bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b0a:	4b59      	ldr	r3, [pc, #356]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b3a:	e043      	b.n	8006bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b4e:	4b48      	ldr	r3, [pc, #288]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b7e:	e021      	b.n	8006bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b92:	4b37      	ldr	r3, [pc, #220]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9a:	ee07 3a90 	vmov	s15, r3
 8006b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ba6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006bc4:	4b2a      	ldr	r3, [pc, #168]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	0a5b      	lsrs	r3, r3, #9
 8006bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bea:	ee17 2a90 	vmov	r2, s15
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006bf2:	4b1f      	ldr	r3, [pc, #124]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	0c1b      	lsrs	r3, r3, #16
 8006bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfc:	ee07 3a90 	vmov	s15, r3
 8006c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c18:	ee17 2a90 	vmov	r2, s15
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006c20:	4b13      	ldr	r3, [pc, #76]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	0e1b      	lsrs	r3, r3, #24
 8006c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c46:	ee17 2a90 	vmov	r2, s15
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c4e:	e008      	b.n	8006c62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	609a      	str	r2, [r3, #8]
}
 8006c62:	bf00      	nop
 8006c64:	3724      	adds	r7, #36	; 0x24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	58024400 	.word	0x58024400
 8006c74:	03d09000 	.word	0x03d09000
 8006c78:	46000000 	.word	0x46000000
 8006c7c:	4c742400 	.word	0x4c742400
 8006c80:	4a742400 	.word	0x4a742400
 8006c84:	4af42400 	.word	0x4af42400

08006c88 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b089      	sub	sp, #36	; 0x24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c90:	4ba0      	ldr	r3, [pc, #640]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	f003 0303 	and.w	r3, r3, #3
 8006c98:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006c9a:	4b9e      	ldr	r3, [pc, #632]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9e:	091b      	lsrs	r3, r3, #4
 8006ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ca4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006ca6:	4b9b      	ldr	r3, [pc, #620]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006cb0:	4b98      	ldr	r3, [pc, #608]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb4:	08db      	lsrs	r3, r3, #3
 8006cb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	fb02 f303 	mul.w	r3, r2, r3
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 8111 	beq.w	8006ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	f000 8083 	beq.w	8006de2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	f200 80a1 	bhi.w	8006e26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d056      	beq.n	8006d9e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006cf0:	e099      	b.n	8006e26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cf2:	4b88      	ldr	r3, [pc, #544]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d02d      	beq.n	8006d5a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cfe:	4b85      	ldr	r3, [pc, #532]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	08db      	lsrs	r3, r3, #3
 8006d04:	f003 0303 	and.w	r3, r3, #3
 8006d08:	4a83      	ldr	r2, [pc, #524]	; (8006f18 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	ee07 3a90 	vmov	s15, r3
 8006d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d28:	4b7a      	ldr	r3, [pc, #488]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d30:	ee07 3a90 	vmov	s15, r3
 8006d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d38:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006f1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d54:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d58:	e087      	b.n	8006e6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006f20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6c:	4b69      	ldr	r3, [pc, #420]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d80:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006f1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d9c:	e065      	b.n	8006e6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	ee07 3a90 	vmov	s15, r3
 8006da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006f24 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db0:	4b58      	ldr	r3, [pc, #352]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dc4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006f1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ddc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006de0:	e043      	b.n	8006e6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006f28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df4:	4b47      	ldr	r3, [pc, #284]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfc:	ee07 3a90 	vmov	s15, r3
 8006e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e08:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006f1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e24:	e021      	b.n	8006e6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	ee07 3a90 	vmov	s15, r3
 8006e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e30:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006f20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e38:	4b36      	ldr	r3, [pc, #216]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006f1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e68:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006e6a:	4b2a      	ldr	r3, [pc, #168]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	0a5b      	lsrs	r3, r3, #9
 8006e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e90:	ee17 2a90 	vmov	r2, s15
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006e98:	4b1e      	ldr	r3, [pc, #120]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9c:	0c1b      	lsrs	r3, r3, #16
 8006e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ebe:	ee17 2a90 	vmov	r2, s15
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006ec6:	4b13      	ldr	r3, [pc, #76]	; (8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	0e1b      	lsrs	r3, r3, #24
 8006ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed0:	ee07 3a90 	vmov	s15, r3
 8006ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eec:	ee17 2a90 	vmov	r2, s15
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006ef4:	e008      	b.n	8006f08 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	609a      	str	r2, [r3, #8]
}
 8006f08:	bf00      	nop
 8006f0a:	3724      	adds	r7, #36	; 0x24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	58024400 	.word	0x58024400
 8006f18:	03d09000 	.word	0x03d09000
 8006f1c:	46000000 	.word	0x46000000
 8006f20:	4c742400 	.word	0x4c742400
 8006f24:	4a742400 	.word	0x4a742400
 8006f28:	4af42400 	.word	0x4af42400

08006f2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f3a:	4b53      	ldr	r3, [pc, #332]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d101      	bne.n	8006f4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e099      	b.n	800707e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f4a:	4b4f      	ldr	r3, [pc, #316]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a4e      	ldr	r2, [pc, #312]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006f50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f56:	f7fb fd07 	bl	8002968 <HAL_GetTick>
 8006f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f5c:	e008      	b.n	8006f70 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006f5e:	f7fb fd03 	bl	8002968 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d901      	bls.n	8006f70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e086      	b.n	800707e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f70:	4b45      	ldr	r3, [pc, #276]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1f0      	bne.n	8006f5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f7c:	4b42      	ldr	r3, [pc, #264]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	031b      	lsls	r3, r3, #12
 8006f8a:	493f      	ldr	r1, [pc, #252]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	628b      	str	r3, [r1, #40]	; 0x28
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	025b      	lsls	r3, r3, #9
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	041b      	lsls	r3, r3, #16
 8006fae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	061b      	lsls	r3, r3, #24
 8006fbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fc0:	4931      	ldr	r1, [pc, #196]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006fc6:	4b30      	ldr	r3, [pc, #192]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	492d      	ldr	r1, [pc, #180]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006fd8:	4b2b      	ldr	r3, [pc, #172]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	f023 0220 	bic.w	r2, r3, #32
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	4928      	ldr	r1, [pc, #160]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006fea:	4b27      	ldr	r3, [pc, #156]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fee:	4a26      	ldr	r2, [pc, #152]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006ff0:	f023 0310 	bic.w	r3, r3, #16
 8006ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006ff6:	4b24      	ldr	r3, [pc, #144]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8006ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ffa:	4b24      	ldr	r3, [pc, #144]	; (800708c <RCCEx_PLL2_Config+0x160>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	69d2      	ldr	r2, [r2, #28]
 8007002:	00d2      	lsls	r2, r2, #3
 8007004:	4920      	ldr	r1, [pc, #128]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8007006:	4313      	orrs	r3, r2
 8007008:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800700a:	4b1f      	ldr	r3, [pc, #124]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	4a1e      	ldr	r2, [pc, #120]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8007010:	f043 0310 	orr.w	r3, r3, #16
 8007014:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d106      	bne.n	800702a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800701c:	4b1a      	ldr	r3, [pc, #104]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	4a19      	ldr	r2, [pc, #100]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8007022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007026:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007028:	e00f      	b.n	800704a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d106      	bne.n	800703e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007030:	4b15      	ldr	r3, [pc, #84]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	4a14      	ldr	r2, [pc, #80]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8007036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800703a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800703c:	e005      	b.n	800704a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800703e:	4b12      	ldr	r3, [pc, #72]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007042:	4a11      	ldr	r2, [pc, #68]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8007044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007048:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800704a:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a0e      	ldr	r2, [pc, #56]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8007050:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007056:	f7fb fc87 	bl	8002968 <HAL_GetTick>
 800705a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800705c:	e008      	b.n	8007070 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800705e:	f7fb fc83 	bl	8002968 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d901      	bls.n	8007070 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e006      	b.n	800707e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007070:	4b05      	ldr	r3, [pc, #20]	; (8007088 <RCCEx_PLL2_Config+0x15c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0f0      	beq.n	800705e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800707c:	7bfb      	ldrb	r3, [r7, #15]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	58024400 	.word	0x58024400
 800708c:	ffff0007 	.word	0xffff0007

08007090 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800709e:	4b53      	ldr	r3, [pc, #332]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 80070a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d101      	bne.n	80070ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e099      	b.n	80071e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070ae:	4b4f      	ldr	r3, [pc, #316]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a4e      	ldr	r2, [pc, #312]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 80070b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ba:	f7fb fc55 	bl	8002968 <HAL_GetTick>
 80070be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070c0:	e008      	b.n	80070d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80070c2:	f7fb fc51 	bl	8002968 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d901      	bls.n	80070d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e086      	b.n	80071e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070d4:	4b45      	ldr	r3, [pc, #276]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1f0      	bne.n	80070c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80070e0:	4b42      	ldr	r3, [pc, #264]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	051b      	lsls	r3, r3, #20
 80070ee:	493f      	ldr	r1, [pc, #252]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	628b      	str	r3, [r1, #40]	; 0x28
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	3b01      	subs	r3, #1
 8007104:	025b      	lsls	r3, r3, #9
 8007106:	b29b      	uxth	r3, r3
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	3b01      	subs	r3, #1
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	3b01      	subs	r3, #1
 800711e:	061b      	lsls	r3, r3, #24
 8007120:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007124:	4931      	ldr	r1, [pc, #196]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 8007126:	4313      	orrs	r3, r2
 8007128:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800712a:	4b30      	ldr	r3, [pc, #192]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	492d      	ldr	r1, [pc, #180]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 8007138:	4313      	orrs	r3, r2
 800713a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800713c:	4b2b      	ldr	r3, [pc, #172]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	4928      	ldr	r1, [pc, #160]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 800714a:	4313      	orrs	r3, r2
 800714c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800714e:	4b27      	ldr	r3, [pc, #156]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 8007150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007152:	4a26      	ldr	r2, [pc, #152]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 8007154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800715a:	4b24      	ldr	r3, [pc, #144]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 800715c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800715e:	4b24      	ldr	r3, [pc, #144]	; (80071f0 <RCCEx_PLL3_Config+0x160>)
 8007160:	4013      	ands	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	69d2      	ldr	r2, [r2, #28]
 8007166:	00d2      	lsls	r2, r2, #3
 8007168:	4920      	ldr	r1, [pc, #128]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 800716a:	4313      	orrs	r3, r2
 800716c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800716e:	4b1f      	ldr	r3, [pc, #124]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	4a1e      	ldr	r2, [pc, #120]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 8007174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007178:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007180:	4b1a      	ldr	r3, [pc, #104]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	4a19      	ldr	r2, [pc, #100]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 8007186:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800718a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800718c:	e00f      	b.n	80071ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d106      	bne.n	80071a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007194:	4b15      	ldr	r3, [pc, #84]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	4a14      	ldr	r2, [pc, #80]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 800719a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800719e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071a0:	e005      	b.n	80071ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071a2:	4b12      	ldr	r3, [pc, #72]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 80071a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a6:	4a11      	ldr	r2, [pc, #68]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 80071a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071ae:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a0e      	ldr	r2, [pc, #56]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 80071b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ba:	f7fb fbd5 	bl	8002968 <HAL_GetTick>
 80071be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071c0:	e008      	b.n	80071d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071c2:	f7fb fbd1 	bl	8002968 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d901      	bls.n	80071d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e006      	b.n	80071e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071d4:	4b05      	ldr	r3, [pc, #20]	; (80071ec <RCCEx_PLL3_Config+0x15c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0f0      	beq.n	80071c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	58024400 	.word	0x58024400
 80071f0:	ffff0007 	.word	0xffff0007

080071f4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e04d      	b.n	80072a2 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	7a5b      	ldrb	r3, [r3, #9]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d105      	bne.n	800721c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7fa fe90 	bl	8001f3c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f023 0120 	bic.w	r1, r3, #32
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0204 	orr.w	r2, r2, #4
 8007246:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007252:	2b40      	cmp	r3, #64	; 0x40
 8007254:	d104      	bne.n	8007260 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2204      	movs	r2, #4
 800725a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e020      	b.n	80072a2 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8007260:	f7fb fb82 	bl	8002968 <HAL_GetTick>
 8007264:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8007266:	e00e      	b.n	8007286 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007268:	f7fb fb7e 	bl	8002968 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d907      	bls.n	8007286 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2204      	movs	r2, #4
 800727a:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e00d      	b.n	80072a2 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f003 0304 	and.w	r3, r3, #4
 8007290:	2b04      	cmp	r3, #4
 8007292:	d0e9      	beq.n	8007268 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b08a      	sub	sp, #40	; 0x28
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e075      	b.n	80073a8 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d105      	bne.n	80072d4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fa fe8a 	bl	8001fe8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2203      	movs	r2, #3
 80072d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f867 	bl	80073b0 <HAL_SD_InitCard>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e05d      	b.n	80073a8 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80072ec:	f107 0308 	add.w	r3, r7, #8
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fbe4 	bl	8007ac0 <HAL_SD_GetCardStatus>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e052      	b.n	80073a8 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007302:	7e3b      	ldrb	r3, [r7, #24]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007308:	7e7b      	ldrb	r3, [r7, #25]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	2b01      	cmp	r3, #1
 8007314:	d10a      	bne.n	800732c <HAL_SD_Init+0x82>
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	2b00      	cmp	r3, #0
 800731a:	d102      	bne.n	8007322 <HAL_SD_Init+0x78>
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d004      	beq.n	800732c <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007328:	659a      	str	r2, [r3, #88]	; 0x58
 800732a:	e00b      	b.n	8007344 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	2b01      	cmp	r3, #1
 8007332:	d104      	bne.n	800733e <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800733a:	659a      	str	r2, [r3, #88]	; 0x58
 800733c:	e002      	b.n	8007344 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fc9a 	bl	8007c84 <HAL_SD_ConfigWideBusOperation>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e026      	b.n	80073a8 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800735a:	f7fb fb05 	bl	8002968 <HAL_GetTick>
 800735e:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007360:	e011      	b.n	8007386 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007362:	f7fb fb01 	bl	8002968 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007370:	d109      	bne.n	8007386 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007378:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e010      	b.n	80073a8 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fd8c 	bl	8007ea4 <HAL_SD_GetCardState>
 800738c:	4603      	mov	r3, r0
 800738e:	2b04      	cmp	r3, #4
 8007390:	d1e7      	bne.n	8007362 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3728      	adds	r7, #40	; 0x28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80073b0:	b590      	push	{r4, r7, lr}
 80073b2:	b08d      	sub	sp, #52	; 0x34
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80073bc:	2300      	movs	r3, #0
 80073be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80073c0:	2300      	movs	r3, #0
 80073c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80073c4:	2300      	movs	r3, #0
 80073c6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80073c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80073cc:	f7fe fccc 	bl	8005d68 <HAL_RCCEx_GetPeriphCLKFreq>
 80073d0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d109      	bne.n	80073ec <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073e6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e06a      	b.n	80074c2 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	0a1b      	lsrs	r3, r3, #8
 80073f0:	4a36      	ldr	r2, [pc, #216]	; (80074cc <HAL_SD_InitCard+0x11c>)
 80073f2:	fba2 2303 	umull	r2, r3, r2, r3
 80073f6:	091b      	lsrs	r3, r3, #4
 80073f8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681c      	ldr	r4, [r3, #0]
 80073fe:	466a      	mov	r2, sp
 8007400:	f107 0318 	add.w	r3, r7, #24
 8007404:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007408:	e882 0003 	stmia.w	r2, {r0, r1}
 800740c:	f107 030c 	add.w	r3, r7, #12
 8007410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007412:	4620      	mov	r0, r4
 8007414:	f003 f802 	bl	800a41c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f003 f834 	bl	800a48a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007428:	fbb2 f3f3 	udiv	r3, r2, r3
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800742e:	4a28      	ldr	r2, [pc, #160]	; (80074d0 <HAL_SD_InitCard+0x120>)
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	fbb2 f3f3 	udiv	r3, r2, r3
 8007436:	3301      	adds	r3, #1
 8007438:	4618      	mov	r0, r3
 800743a:	f7fb faa1 	bl	8002980 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fe0c 	bl	800805c <SD_PowerON>
 8007444:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00b      	beq.n	8007464 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e02e      	b.n	80074c2 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fd3d 	bl	8007ee4 <SD_InitCard>
 800746a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e01b      	b.n	80074c2 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007492:	4618      	mov	r0, r3
 8007494:	f003 f88e 	bl	800a5b4 <SDMMC_CmdBlockLength>
 8007498:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00f      	beq.n	80074c0 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a0b      	ldr	r2, [pc, #44]	; (80074d4 <HAL_SD_InitCard+0x124>)
 80074a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	372c      	adds	r7, #44	; 0x2c
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd90      	pop	{r4, r7, pc}
 80074ca:	bf00      	nop
 80074cc:	014f8b59 	.word	0x014f8b59
 80074d0:	00012110 	.word	0x00012110
 80074d4:	1fe00fff 	.word	0x1fe00fff

080074d8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08c      	sub	sp, #48	; 0x30
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d107      	bne.n	8007500 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e08d      	b.n	800761c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	f040 8086 	bne.w	800761a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	441a      	add	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751e:	429a      	cmp	r2, r3
 8007520:	d907      	bls.n	8007532 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007526:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e074      	b.n	800761c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2203      	movs	r2, #3
 8007536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2200      	movs	r2, #0
 8007540:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	025a      	lsls	r2, r3, #9
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	2b01      	cmp	r3, #1
 8007556:	d002      	beq.n	800755e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755a:	025b      	lsls	r3, r3, #9
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800755e:	f04f 33ff 	mov.w	r3, #4294967295
 8007562:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	025b      	lsls	r3, r3, #9
 8007568:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800756a:	2390      	movs	r3, #144	; 0x90
 800756c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800756e:	2302      	movs	r3, #2
 8007570:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007572:	2300      	movs	r3, #0
 8007574:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007576:	2300      	movs	r3, #0
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f107 0210 	add.w	r2, r7, #16
 8007582:	4611      	mov	r1, r2
 8007584:	4618      	mov	r0, r3
 8007586:	f002 ffe9 	bl	800a55c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007598:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2201      	movs	r2, #1
 80075a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d90a      	bls.n	80075c6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2282      	movs	r2, #130	; 0x82
 80075b4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075bc:	4618      	mov	r0, r3
 80075be:	f003 f83f 	bl	800a640 <SDMMC_CmdReadMultiBlock>
 80075c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80075c4:	e009      	b.n	80075da <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2281      	movs	r2, #129	; 0x81
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075d2:	4618      	mov	r0, r3
 80075d4:	f003 f811 	bl	800a5fa <SDMMC_CmdReadSingleBlock>
 80075d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d012      	beq.n	8007606 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a0f      	ldr	r2, [pc, #60]	; (8007624 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80075e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	431a      	orrs	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e00a      	b.n	800761c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007614:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	e000      	b.n	800761c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800761a:	2302      	movs	r3, #2
  }
}
 800761c:	4618      	mov	r0, r3
 800761e:	3730      	adds	r7, #48	; 0x30
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	1fe00fff 	.word	0x1fe00fff

08007628 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08c      	sub	sp, #48	; 0x30
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d107      	bne.n	8007650 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007644:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e08d      	b.n	800776c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b01      	cmp	r3, #1
 800765a:	f040 8086 	bne.w	800776a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	441a      	add	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800766e:	429a      	cmp	r2, r3
 8007670:	d907      	bls.n	8007682 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007676:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e074      	b.n	800776c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2203      	movs	r2, #3
 8007686:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2200      	movs	r2, #0
 8007690:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	025a      	lsls	r2, r3, #9
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d002      	beq.n	80076ae <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	025b      	lsls	r3, r3, #9
 80076ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076ae:	f04f 33ff 	mov.w	r3, #4294967295
 80076b2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	025b      	lsls	r3, r3, #9
 80076b8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80076ba:	2390      	movs	r3, #144	; 0x90
 80076bc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80076be:	2300      	movs	r3, #0
 80076c0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f107 0210 	add.w	r2, r7, #16
 80076d2:	4611      	mov	r1, r2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f002 ff41 	bl	800a55c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076e8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2201      	movs	r2, #1
 80076f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d90a      	bls.n	8007716 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	22a0      	movs	r2, #160	; 0xa0
 8007704:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800770c:	4618      	mov	r0, r3
 800770e:	f002 ffdd 	bl	800a6cc <SDMMC_CmdWriteMultiBlock>
 8007712:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007714:	e009      	b.n	800772a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2290      	movs	r2, #144	; 0x90
 800771a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007722:	4618      	mov	r0, r3
 8007724:	f002 ffaf 	bl	800a686 <SDMMC_CmdWriteSingleBlock>
 8007728:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d012      	beq.n	8007756 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a0f      	ldr	r2, [pc, #60]	; (8007774 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007736:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773e:	431a      	orrs	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e00a      	b.n	800776c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007764:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	e000      	b.n	800776c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800776a:	2302      	movs	r3, #2
  }
}
 800776c:	4618      	mov	r0, r3
 800776e:	3730      	adds	r7, #48	; 0x30
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	1fe00fff 	.word	0x1fe00fff

08007778 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007786:	0f9b      	lsrs	r3, r3, #30
 8007788:	b2da      	uxtb	r2, r3
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007792:	0e9b      	lsrs	r3, r3, #26
 8007794:	b2db      	uxtb	r3, r3
 8007796:	f003 030f 	and.w	r3, r3, #15
 800779a:	b2da      	uxtb	r2, r3
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a4:	0e1b      	lsrs	r3, r3, #24
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	f003 0303 	and.w	r3, r3, #3
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b6:	0c1b      	lsrs	r3, r3, #16
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c2:	0a1b      	lsrs	r3, r3, #8
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d8:	0d1b      	lsrs	r3, r3, #20
 80077da:	b29a      	uxth	r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e4:	0c1b      	lsrs	r3, r3, #16
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 030f 	and.w	r3, r3, #15
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f6:	0bdb      	lsrs	r3, r3, #15
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007808:	0b9b      	lsrs	r3, r3, #14
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	b2da      	uxtb	r2, r3
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800781a:	0b5b      	lsrs	r3, r3, #13
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	b2da      	uxtb	r2, r3
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800782c:	0b1b      	lsrs	r3, r3, #12
 800782e:	b2db      	uxtb	r3, r3
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	b2da      	uxtb	r2, r3
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2200      	movs	r2, #0
 800783e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d163      	bne.n	8007910 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784c:	009a      	lsls	r2, r3, #2
 800784e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007852:	4013      	ands	r3, r2
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007858:	0f92      	lsrs	r2, r2, #30
 800785a:	431a      	orrs	r2, r3
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007864:	0edb      	lsrs	r3, r3, #27
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	b2da      	uxtb	r2, r3
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007876:	0e1b      	lsrs	r3, r3, #24
 8007878:	b2db      	uxtb	r3, r3
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	b2da      	uxtb	r2, r3
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007888:	0d5b      	lsrs	r3, r3, #21
 800788a:	b2db      	uxtb	r3, r3
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	b2da      	uxtb	r2, r3
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800789a:	0c9b      	lsrs	r3, r3, #18
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f003 0307 	and.w	r3, r3, #7
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ac:	0bdb      	lsrs	r3, r3, #15
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	1c5a      	adds	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	7e1b      	ldrb	r3, [r3, #24]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	3302      	adds	r3, #2
 80078d0:	2201      	movs	r2, #1
 80078d2:	fa02 f303 	lsl.w	r3, r2, r3
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80078da:	fb02 f203 	mul.w	r2, r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	7a1b      	ldrb	r3, [r3, #8]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 030f 	and.w	r3, r3, #15
 80078ec:	2201      	movs	r2, #1
 80078ee:	409a      	lsls	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80078fc:	0a52      	lsrs	r2, r2, #9
 80078fe:	fb02 f203 	mul.w	r2, r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800790c:	655a      	str	r2, [r3, #84]	; 0x54
 800790e:	e031      	b.n	8007974 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007914:	2b01      	cmp	r3, #1
 8007916:	d11d      	bne.n	8007954 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800791c:	041b      	lsls	r3, r3, #16
 800791e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007926:	0c1b      	lsrs	r3, r3, #16
 8007928:	431a      	orrs	r2, r3
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	3301      	adds	r3, #1
 8007934:	029a      	lsls	r2, r3, #10
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007948:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	655a      	str	r2, [r3, #84]	; 0x54
 8007952:	e00f      	b.n	8007974 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a58      	ldr	r2, [pc, #352]	; (8007abc <HAL_SD_GetCardCSD+0x344>)
 800795a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e09d      	b.n	8007ab0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007978:	0b9b      	lsrs	r3, r3, #14
 800797a:	b2db      	uxtb	r3, r3
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	b2da      	uxtb	r2, r3
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800798a:	09db      	lsrs	r3, r3, #7
 800798c:	b2db      	uxtb	r3, r3
 800798e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007992:	b2da      	uxtb	r2, r3
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800799c:	b2db      	uxtb	r3, r3
 800799e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ac:	0fdb      	lsrs	r3, r3, #31
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079b8:	0f5b      	lsrs	r3, r3, #29
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	f003 0303 	and.w	r3, r3, #3
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ca:	0e9b      	lsrs	r3, r3, #26
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079dc:	0d9b      	lsrs	r3, r3, #22
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ee:	0d5b      	lsrs	r3, r3, #21
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a0a:	0c1b      	lsrs	r3, r3, #16
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a1e:	0bdb      	lsrs	r3, r3, #15
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a32:	0b9b      	lsrs	r3, r3, #14
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a46:	0b5b      	lsrs	r3, r3, #13
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a5a:	0b1b      	lsrs	r3, r3, #12
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a6e:	0a9b      	lsrs	r3, r3, #10
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	f003 0303 	and.w	r3, r3, #3
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a82:	0a1b      	lsrs	r3, r3, #8
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a96:	085b      	lsrs	r3, r3, #1
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	1fe00fff 	.word	0x1fe00fff

08007ac0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b094      	sub	sp, #80	; 0x50
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007ad0:	f107 0308 	add.w	r3, r7, #8
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fb4a 	bl	8008170 <SD_SendSDStatus>
 8007adc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d011      	beq.n	8007b08 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a4f      	ldr	r2, [pc, #316]	; (8007c28 <HAL_SD_GetCardStatus+0x168>)
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007af2:	431a      	orrs	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007b06:	e070      	b.n	8007bea <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	099b      	lsrs	r3, r3, #6
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	f003 0303 	and.w	r3, r3, #3
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	0a1b      	lsrs	r3, r3, #8
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	0e1b      	lsrs	r3, r3, #24
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	061a      	lsls	r2, r3, #24
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	021b      	lsls	r3, r3, #8
 8007b4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b4e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	0a1b      	lsrs	r3, r3, #8
 8007b54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007b58:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	0e1b      	lsrs	r3, r3, #24
 8007b5e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	0a1b      	lsrs	r3, r3, #8
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	0d1b      	lsrs	r3, r3, #20
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	0c1b      	lsrs	r3, r3, #16
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	0a9b      	lsrs	r3, r3, #10
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	0a1b      	lsrs	r3, r3, #8
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 0303 	and.w	r3, r3, #3
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	091b      	lsrs	r3, r3, #4
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 030f 	and.w	r3, r3, #15
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	f003 030f 	and.w	r3, r3, #15
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	0e1b      	lsrs	r3, r3, #24
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f002 fcde 	bl	800a5b4 <SDMMC_CmdBlockLength>
 8007bf8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00d      	beq.n	8007c1c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a08      	ldr	r2, [pc, #32]	; (8007c28 <HAL_SD_GetCardStatus+0x168>)
 8007c06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c0c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007c1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3750      	adds	r7, #80	; 0x50
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	1fe00fff 	.word	0x1fe00fff

08007c2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007c84:	b590      	push	{r4, r7, lr}
 8007c86:	b08d      	sub	sp, #52	; 0x34
 8007c88:	af02      	add	r7, sp, #8
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2203      	movs	r2, #3
 8007c98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d02e      	beq.n	8007d02 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007caa:	d106      	bne.n	8007cba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	635a      	str	r2, [r3, #52]	; 0x34
 8007cb8:	e029      	b.n	8007d0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cc0:	d10a      	bne.n	8007cd8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fb4c 	bl	8008360 <SD_WideBus_Enable>
 8007cc8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8007cd6:	e01a      	b.n	8007d0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10a      	bne.n	8007cf4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fb89 	bl	80083f6 <SD_WideBus_Disable>
 8007ce4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8007cf2:	e00c      	b.n	8007d0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	635a      	str	r2, [r3, #52]	; 0x34
 8007d00:	e005      	b.n	8007d0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a5e      	ldr	r2, [pc, #376]	; (8007e94 <HAL_SD_ConfigWideBusOperation+0x210>)
 8007d1c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d24:	e094      	b.n	8007e50 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007d26:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007d2a:	f7fe f81d 	bl	8005d68 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d2e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 8083 	beq.w	8007e3e <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	695a      	ldr	r2, [r3, #20]
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	4950      	ldr	r1, [pc, #320]	; (8007e98 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007d56:	fba1 1303 	umull	r1, r3, r1, r3
 8007d5a:	0e1b      	lsrs	r3, r3, #24
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d303      	bcc.n	8007d68 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	61bb      	str	r3, [r7, #24]
 8007d66:	e05a      	b.n	8007e1e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d70:	d103      	bne.n	8007d7a <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	61bb      	str	r3, [r7, #24]
 8007d78:	e051      	b.n	8007e1e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d82:	d126      	bne.n	8007dd2 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10e      	bne.n	8007daa <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	4a43      	ldr	r2, [pc, #268]	; (8007e9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d906      	bls.n	8007da2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	4a40      	ldr	r2, [pc, #256]	; (8007e98 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007d98:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9c:	0e5b      	lsrs	r3, r3, #25
 8007d9e:	61bb      	str	r3, [r7, #24]
 8007da0:	e03d      	b.n	8007e1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	61bb      	str	r3, [r7, #24]
 8007da8:	e039      	b.n	8007e1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	69fa      	ldr	r2, [r7, #28]
 8007db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db6:	4a39      	ldr	r2, [pc, #228]	; (8007e9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d906      	bls.n	8007dca <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	4a36      	ldr	r2, [pc, #216]	; (8007e98 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc4:	0e5b      	lsrs	r3, r3, #25
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	e029      	b.n	8007e1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	61bb      	str	r3, [r7, #24]
 8007dd0:	e025      	b.n	8007e1e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10e      	bne.n	8007df8 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	4a30      	ldr	r2, [pc, #192]	; (8007ea0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d906      	bls.n	8007df0 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	4a2c      	ldr	r2, [pc, #176]	; (8007e98 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007de6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dea:	0e1b      	lsrs	r3, r3, #24
 8007dec:	61bb      	str	r3, [r7, #24]
 8007dee:	e016      	b.n	8007e1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	61bb      	str	r3, [r7, #24]
 8007df6:	e012      	b.n	8007e1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	69fa      	ldr	r2, [r7, #28]
 8007e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e04:	4a26      	ldr	r2, [pc, #152]	; (8007ea0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d906      	bls.n	8007e18 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	4a22      	ldr	r2, [pc, #136]	; (8007e98 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e12:	0e1b      	lsrs	r3, r3, #24
 8007e14:	61bb      	str	r3, [r7, #24]
 8007e16:	e002      	b.n	8007e1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681c      	ldr	r4, [r3, #0]
 8007e22:	466a      	mov	r2, sp
 8007e24:	f107 0314 	add.w	r3, r7, #20
 8007e28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e2c:	e882 0003 	stmia.w	r2, {r0, r1}
 8007e30:	f107 0308 	add.w	r3, r7, #8
 8007e34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e36:	4620      	mov	r0, r4
 8007e38:	f002 faf0 	bl	800a41c <SDMMC_Init>
 8007e3c:	e008      	b.n	8007e50 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f002 fbab 	bl	800a5b4 <SDMMC_CmdBlockLength>
 8007e5e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00c      	beq.n	8007e80 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a0a      	ldr	r2, [pc, #40]	; (8007e94 <HAL_SD_ConfigWideBusOperation+0x210>)
 8007e6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	372c      	adds	r7, #44	; 0x2c
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd90      	pop	{r4, r7, pc}
 8007e94:	1fe00fff 	.word	0x1fe00fff
 8007e98:	55e63b89 	.word	0x55e63b89
 8007e9c:	02faf080 	.word	0x02faf080
 8007ea0:	017d7840 	.word	0x017d7840

08007ea4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007eb0:	f107 030c 	add.w	r3, r7, #12
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fa2a 	bl	8008310 <SD_SendStatus>
 8007ebc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d005      	beq.n	8007ed0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	0a5b      	lsrs	r3, r3, #9
 8007ed4:	f003 030f 	and.w	r3, r3, #15
 8007ed8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007eda:	693b      	ldr	r3, [r7, #16]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b090      	sub	sp, #64	; 0x40
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007eec:	2301      	movs	r3, #1
 8007eee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f002 fad9 	bl	800a4ac <SDMMC_GetPowerState>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d102      	bne.n	8007f06 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007f04:	e0a5      	b.n	8008052 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d02e      	beq.n	8007f6c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f002 fce6 	bl	800a8e4 <SDMMC_CmdSendCID>
 8007f18:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <SD_InitCard+0x40>
    {
      return errorstate;
 8007f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f22:	e096      	b.n	8008052 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f002 fb03 	bl	800a536 <SDMMC_GetResponse>
 8007f30:	4602      	mov	r2, r0
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2104      	movs	r1, #4
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f002 fafa 	bl	800a536 <SDMMC_GetResponse>
 8007f42:	4602      	mov	r2, r0
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2108      	movs	r1, #8
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f002 faf1 	bl	800a536 <SDMMC_GetResponse>
 8007f54:	4602      	mov	r2, r0
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	210c      	movs	r1, #12
 8007f60:	4618      	mov	r0, r3
 8007f62:	f002 fae8 	bl	800a536 <SDMMC_GetResponse>
 8007f66:	4602      	mov	r2, r0
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d00d      	beq.n	8007f90 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f107 020e 	add.w	r2, r7, #14
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f002 fcef 	bl	800a962 <SDMMC_CmdSetRelAdd>
 8007f84:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <SD_InitCard+0xac>
    {
      return errorstate;
 8007f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f8e:	e060      	b.n	8008052 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d036      	beq.n	8008006 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007f98:	89fb      	ldrh	r3, [r7, #14]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa8:	041b      	lsls	r3, r3, #16
 8007faa:	4619      	mov	r1, r3
 8007fac:	4610      	mov	r0, r2
 8007fae:	f002 fcb8 	bl	800a922 <SDMMC_CmdSendCSD>
 8007fb2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <SD_InitCard+0xda>
    {
      return errorstate;
 8007fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fbc:	e049      	b.n	8008052 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f002 fab6 	bl	800a536 <SDMMC_GetResponse>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2104      	movs	r1, #4
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f002 faad 	bl	800a536 <SDMMC_GetResponse>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2108      	movs	r1, #8
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f002 faa4 	bl	800a536 <SDMMC_GetResponse>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	210c      	movs	r1, #12
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f002 fa9b 	bl	800a536 <SDMMC_GetResponse>
 8008000:	4602      	mov	r2, r0
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2104      	movs	r1, #4
 800800c:	4618      	mov	r0, r3
 800800e:	f002 fa92 	bl	800a536 <SDMMC_GetResponse>
 8008012:	4603      	mov	r3, r0
 8008014:	0d1a      	lsrs	r2, r3, #20
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800801a:	f107 0310 	add.w	r3, r7, #16
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff fba9 	bl	8007778 <HAL_SD_GetCardCSD>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800802c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008030:	e00f      	b.n	8008052 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803a:	041b      	lsls	r3, r3, #16
 800803c:	4619      	mov	r1, r3
 800803e:	4610      	mov	r0, r2
 8008040:	f002 fb67 	bl	800a712 <SDMMC_CmdSelDesel>
 8008044:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8008046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <SD_InitCard+0x16c>
  {
    return errorstate;
 800804c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800804e:	e000      	b.n	8008052 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3740      	adds	r7, #64	; 0x40
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f002 fb6f 	bl	800a758 <SDMMC_CmdGoIdleState>
 800807a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	e06e      	b.n	8008164 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4618      	mov	r0, r3
 800808c:	f002 fb82 	bl	800a794 <SDMMC_CmdOperCond>
 8008090:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00d      	beq.n	80080b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f002 fb58 	bl	800a758 <SDMMC_CmdGoIdleState>
 80080a8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	e057      	b.n	8008164 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d137      	bne.n	8008132 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2100      	movs	r1, #0
 80080c8:	4618      	mov	r0, r3
 80080ca:	f002 fb83 	bl	800a7d4 <SDMMC_CmdAppCommand>
 80080ce:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d02d      	beq.n	8008132 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80080da:	e043      	b.n	8008164 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2100      	movs	r1, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	f002 fb76 	bl	800a7d4 <SDMMC_CmdAppCommand>
 80080e8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	e037      	b.n	8008164 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	491c      	ldr	r1, [pc, #112]	; (800816c <SD_PowerON+0x110>)
 80080fa:	4618      	mov	r0, r3
 80080fc:	f002 fb8d 	bl	800a81a <SDMMC_CmdAppOperCommand>
 8008100:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008108:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800810c:	e02a      	b.n	8008164 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2100      	movs	r1, #0
 8008114:	4618      	mov	r0, r3
 8008116:	f002 fa0e 	bl	800a536 <SDMMC_GetResponse>
 800811a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	0fdb      	lsrs	r3, r3, #31
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <SD_PowerON+0xcc>
 8008124:	2301      	movs	r3, #1
 8008126:	e000      	b.n	800812a <SD_PowerON+0xce>
 8008128:	2300      	movs	r3, #0
 800812a:	613b      	str	r3, [r7, #16]

    count++;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	3301      	adds	r3, #1
 8008130:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008138:	4293      	cmp	r3, r2
 800813a:	d802      	bhi.n	8008142 <SD_PowerON+0xe6>
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d0cc      	beq.n	80080dc <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008148:	4293      	cmp	r3, r2
 800814a:	d902      	bls.n	8008152 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800814c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008150:	e008      	b.n	8008164 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	c1100000 	.word	0xc1100000

08008170 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08c      	sub	sp, #48	; 0x30
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800817a:	f7fa fbf5 	bl	8002968 <HAL_GetTick>
 800817e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2100      	movs	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f002 f9d3 	bl	800a536 <SDMMC_GetResponse>
 8008190:	4603      	mov	r3, r0
 8008192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800819a:	d102      	bne.n	80081a2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800819c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081a0:	e0b0      	b.n	8008304 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2140      	movs	r1, #64	; 0x40
 80081a8:	4618      	mov	r0, r3
 80081aa:	f002 fa03 	bl	800a5b4 <SDMMC_CmdBlockLength>
 80081ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d005      	beq.n	80081c2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	e0a0      	b.n	8008304 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ca:	041b      	lsls	r3, r3, #16
 80081cc:	4619      	mov	r1, r3
 80081ce:	4610      	mov	r0, r2
 80081d0:	f002 fb00 	bl	800a7d4 <SDMMC_CmdAppCommand>
 80081d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	e08d      	b.n	8008304 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081e8:	f04f 33ff 	mov.w	r3, #4294967295
 80081ec:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80081ee:	2340      	movs	r3, #64	; 0x40
 80081f0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80081f2:	2360      	movs	r3, #96	; 0x60
 80081f4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80081f6:	2302      	movs	r3, #2
 80081f8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80081fe:	2301      	movs	r3, #1
 8008200:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f107 0208 	add.w	r2, r7, #8
 800820a:	4611      	mov	r1, r2
 800820c:	4618      	mov	r0, r3
 800820e:	f002 f9a5 	bl	800a55c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f002 fbe8 	bl	800a9ec <SDMMC_CmdStatusRegister>
 800821c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d02b      	beq.n	800827c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	e069      	b.n	8008304 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d013      	beq.n	8008266 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800823e:	2300      	movs	r3, #0
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008242:	e00d      	b.n	8008260 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4618      	mov	r0, r3
 800824a:	f002 f911 	bl	800a470 <SDMMC_ReadFIFO>
 800824e:	4602      	mov	r2, r0
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	601a      	str	r2, [r3, #0]
        pData++;
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	3304      	adds	r3, #4
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	3301      	adds	r3, #1
 800825e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008262:	2b07      	cmp	r3, #7
 8008264:	d9ee      	bls.n	8008244 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008266:	f7fa fb7f 	bl	8002968 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008274:	d102      	bne.n	800827c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008276:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800827a:	e043      	b.n	8008304 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008282:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0d2      	beq.n	8008230 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008290:	f003 0308 	and.w	r3, r3, #8
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008298:	2308      	movs	r3, #8
 800829a:	e033      	b.n	8008304 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80082aa:	2302      	movs	r3, #2
 80082ac:	e02a      	b.n	8008304 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d017      	beq.n	80082ec <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80082bc:	2320      	movs	r3, #32
 80082be:	e021      	b.n	8008304 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f002 f8d3 	bl	800a470 <SDMMC_ReadFIFO>
 80082ca:	4602      	mov	r2, r0
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	601a      	str	r2, [r3, #0]
    pData++;
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	3304      	adds	r3, #4
 80082d4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082d6:	f7fa fb47 	bl	8002968 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e4:	d102      	bne.n	80082ec <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80082e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082ea:	e00b      	b.n	8008304 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e2      	bne.n	80082c0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a03      	ldr	r2, [pc, #12]	; (800830c <SD_SendSDStatus+0x19c>)
 8008300:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3730      	adds	r7, #48	; 0x30
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	18000f3a 	.word	0x18000f3a

08008310 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d102      	bne.n	8008326 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008324:	e018      	b.n	8008358 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832e:	041b      	lsls	r3, r3, #16
 8008330:	4619      	mov	r1, r3
 8008332:	4610      	mov	r0, r2
 8008334:	f002 fb37 	bl	800a9a6 <SDMMC_CmdSendStatus>
 8008338:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	e009      	b.n	8008358 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2100      	movs	r1, #0
 800834a:	4618      	mov	r0, r3
 800834c:	f002 f8f3 	bl	800a536 <SDMMC_GetResponse>
 8008350:	4602      	mov	r2, r0
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008368:	2300      	movs	r3, #0
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	2300      	movs	r3, #0
 800836e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2100      	movs	r1, #0
 8008376:	4618      	mov	r0, r3
 8008378:	f002 f8dd 	bl	800a536 <SDMMC_GetResponse>
 800837c:	4603      	mov	r3, r0
 800837e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008386:	d102      	bne.n	800838e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800838c:	e02f      	b.n	80083ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800838e:	f107 030c 	add.w	r3, r7, #12
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f879 	bl	800848c <SD_FindSCR>
 800839a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	e023      	b.n	80083ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01c      	beq.n	80083ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b8:	041b      	lsls	r3, r3, #16
 80083ba:	4619      	mov	r1, r3
 80083bc:	4610      	mov	r0, r2
 80083be:	f002 fa09 	bl	800a7d4 <SDMMC_CmdAppCommand>
 80083c2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	e00f      	b.n	80083ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2102      	movs	r1, #2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f002 fa40 	bl	800a85a <SDMMC_CmdBusWidth>
 80083da:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	e003      	b.n	80083ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	e001      	b.n	80083ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80083ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b086      	sub	sp, #24
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80083fe:	2300      	movs	r3, #0
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	2300      	movs	r3, #0
 8008404:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2100      	movs	r1, #0
 800840c:	4618      	mov	r0, r3
 800840e:	f002 f892 	bl	800a536 <SDMMC_GetResponse>
 8008412:	4603      	mov	r3, r0
 8008414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800841c:	d102      	bne.n	8008424 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800841e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008422:	e02f      	b.n	8008484 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008424:	f107 030c 	add.w	r3, r7, #12
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f82e 	bl	800848c <SD_FindSCR>
 8008430:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	e023      	b.n	8008484 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d01c      	beq.n	8008480 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800844e:	041b      	lsls	r3, r3, #16
 8008450:	4619      	mov	r1, r3
 8008452:	4610      	mov	r0, r2
 8008454:	f002 f9be 	bl	800a7d4 <SDMMC_CmdAppCommand>
 8008458:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	e00f      	b.n	8008484 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2100      	movs	r1, #0
 800846a:	4618      	mov	r0, r3
 800846c:	f002 f9f5 	bl	800a85a <SDMMC_CmdBusWidth>
 8008470:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	e003      	b.n	8008484 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800847c:	2300      	movs	r3, #0
 800847e:	e001      	b.n	8008484 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008480:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08e      	sub	sp, #56	; 0x38
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008496:	f7fa fa67 	bl	8002968 <HAL_GetTick>
 800849a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80084a0:	2300      	movs	r3, #0
 80084a2:	60bb      	str	r3, [r7, #8]
 80084a4:	2300      	movs	r3, #0
 80084a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2108      	movs	r1, #8
 80084b2:	4618      	mov	r0, r3
 80084b4:	f002 f87e 	bl	800a5b4 <SDMMC_CmdBlockLength>
 80084b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	e0ad      	b.n	8008620 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084cc:	041b      	lsls	r3, r3, #16
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f002 f97f 	bl	800a7d4 <SDMMC_CmdAppCommand>
 80084d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80084de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e0:	e09e      	b.n	8008620 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084e2:	f04f 33ff 	mov.w	r3, #4294967295
 80084e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80084e8:	2308      	movs	r3, #8
 80084ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80084ec:	2330      	movs	r3, #48	; 0x30
 80084ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80084f0:	2302      	movs	r3, #2
 80084f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80084f8:	2301      	movs	r3, #1
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f107 0210 	add.w	r2, r7, #16
 8008504:	4611      	mov	r1, r2
 8008506:	4618      	mov	r0, r3
 8008508:	f002 f828 	bl	800a55c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4618      	mov	r0, r3
 8008512:	f002 f9c5 	bl	800a8a0 <SDMMC_CmdSendSCR>
 8008516:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	2b00      	cmp	r3, #0
 800851c:	d027      	beq.n	800856e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008520:	e07e      	b.n	8008620 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d113      	bne.n	8008558 <SD_FindSCR+0xcc>
 8008530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008532:	2b00      	cmp	r3, #0
 8008534:	d110      	bne.n	8008558 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4618      	mov	r0, r3
 800853c:	f001 ff98 	bl	800a470 <SDMMC_ReadFIFO>
 8008540:	4603      	mov	r3, r0
 8008542:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4618      	mov	r0, r3
 800854a:	f001 ff91 	bl	800a470 <SDMMC_ReadFIFO>
 800854e:	4603      	mov	r3, r0
 8008550:	60fb      	str	r3, [r7, #12]
      index++;
 8008552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008554:	3301      	adds	r3, #1
 8008556:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008558:	f7fa fa06 	bl	8002968 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008566:	d102      	bne.n	800856e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008568:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800856c:	e058      	b.n	8008620 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008574:	f240 532a 	movw	r3, #1322	; 0x52a
 8008578:	4013      	ands	r3, r2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0d1      	beq.n	8008522 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008584:	f003 0308 	and.w	r3, r3, #8
 8008588:	2b00      	cmp	r3, #0
 800858a:	d005      	beq.n	8008598 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2208      	movs	r2, #8
 8008592:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008594:	2308      	movs	r3, #8
 8008596:	e043      	b.n	8008620 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d005      	beq.n	80085b2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2202      	movs	r2, #2
 80085ac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80085ae:	2302      	movs	r3, #2
 80085b0:	e036      	b.n	8008620 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b8:	f003 0320 	and.w	r3, r3, #32
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d005      	beq.n	80085cc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2220      	movs	r2, #32
 80085c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80085c8:	2320      	movs	r3, #32
 80085ca:	e029      	b.n	8008620 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a15      	ldr	r2, [pc, #84]	; (8008628 <SD_FindSCR+0x19c>)
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	061a      	lsls	r2, r3, #24
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	021b      	lsls	r3, r3, #8
 80085dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	0a1b      	lsrs	r3, r3, #8
 80085e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80085ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	0e1b      	lsrs	r3, r3, #24
 80085f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80085f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f4:	601a      	str	r2, [r3, #0]
    scr++;
 80085f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f8:	3304      	adds	r3, #4
 80085fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	061a      	lsls	r2, r3, #24
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	021b      	lsls	r3, r3, #8
 8008604:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008608:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	0a1b      	lsrs	r3, r3, #8
 800860e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008612:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	0e1b      	lsrs	r3, r3, #24
 8008618:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3738      	adds	r7, #56	; 0x38
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	18000f3a 	.word	0x18000f3a

0800862c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d101      	bne.n	8008640 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e02b      	b.n	8008698 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d106      	bne.n	800865a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7f9 fa7f 	bl	8001b58 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2202      	movs	r2, #2
 800865e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3304      	adds	r3, #4
 800866a:	4619      	mov	r1, r3
 800866c:	4610      	mov	r0, r2
 800866e:	f001 fe0f 	bl	800a290 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	461a      	mov	r2, r3
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	f001 fe63 	bl	800a348 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008682:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <HAL_SDRAM_Init+0x74>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a06      	ldr	r2, [pc, #24]	; (80086a0 <HAL_SDRAM_Init+0x74>)
 8008688:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800868c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	52004000 	.word	0x52004000

080086a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e0eb      	b.n	8008892 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a75      	ldr	r2, [pc, #468]	; (800889c <HAL_SPI_Init+0x1f8>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d00f      	beq.n	80086ea <HAL_SPI_Init+0x46>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a74      	ldr	r2, [pc, #464]	; (80088a0 <HAL_SPI_Init+0x1fc>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d00a      	beq.n	80086ea <HAL_SPI_Init+0x46>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a72      	ldr	r2, [pc, #456]	; (80088a4 <HAL_SPI_Init+0x200>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d005      	beq.n	80086ea <HAL_SPI_Init+0x46>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	2b0f      	cmp	r3, #15
 80086e4:	d901      	bls.n	80086ea <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e0d3      	b.n	8008892 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f8dc 	bl	80088a8 <SPI_GetPacketSize>
 80086f0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a69      	ldr	r2, [pc, #420]	; (800889c <HAL_SPI_Init+0x1f8>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00c      	beq.n	8008716 <HAL_SPI_Init+0x72>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a67      	ldr	r2, [pc, #412]	; (80088a0 <HAL_SPI_Init+0x1fc>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d007      	beq.n	8008716 <HAL_SPI_Init+0x72>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a66      	ldr	r2, [pc, #408]	; (80088a4 <HAL_SPI_Init+0x200>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d002      	beq.n	8008716 <HAL_SPI_Init+0x72>
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b08      	cmp	r3, #8
 8008714:	d811      	bhi.n	800873a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800871a:	4a60      	ldr	r2, [pc, #384]	; (800889c <HAL_SPI_Init+0x1f8>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d009      	beq.n	8008734 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a5e      	ldr	r2, [pc, #376]	; (80088a0 <HAL_SPI_Init+0x1fc>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d004      	beq.n	8008734 <HAL_SPI_Init+0x90>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a5d      	ldr	r2, [pc, #372]	; (80088a4 <HAL_SPI_Init+0x200>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d104      	bne.n	800873e <HAL_SPI_Init+0x9a>
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b10      	cmp	r3, #16
 8008738:	d901      	bls.n	800873e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e0a9      	b.n	8008892 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d106      	bne.n	8008758 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7f9 fd48 	bl	80021e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0201 	bic.w	r2, r2, #1
 800876e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008778:	d119      	bne.n	80087ae <HAL_SPI_Init+0x10a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008782:	d103      	bne.n	800878c <HAL_SPI_Init+0xe8>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008788:	2b00      	cmp	r3, #0
 800878a:	d008      	beq.n	800879e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10c      	bne.n	80087ae <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800879c:	d107      	bne.n	80087ae <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69da      	ldr	r2, [r3, #28]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b6:	431a      	orrs	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	431a      	orrs	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c0:	ea42 0103 	orr.w	r1, r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68da      	ldr	r2, [r3, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	431a      	orrs	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	431a      	orrs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	431a      	orrs	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	431a      	orrs	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	431a      	orrs	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	431a      	orrs	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	431a      	orrs	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800880e:	ea42 0103 	orr.w	r1, r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d113      	bne.n	800884e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008838:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800884c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 0201 	bic.w	r2, r2, #1
 800885c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	430a      	orrs	r2, r1
 800887e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	40013000 	.word	0x40013000
 80088a0:	40003800 	.word	0x40003800
 80088a4:	40003c00 	.word	0x40003c00

080088a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b4:	095b      	lsrs	r3, r3, #5
 80088b6:	3301      	adds	r3, #1
 80088b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	3307      	adds	r3, #7
 80088c6:	08db      	lsrs	r3, r3, #3
 80088c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	fb02 f303 	mul.w	r3, r2, r3
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
	...

080088e0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e03e      	b.n	8008974 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d106      	bne.n	8008910 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f7f9 f91a 	bl	8001b44 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3308      	adds	r3, #8
 8008918:	4619      	mov	r1, r3
 800891a:	4610      	mov	r0, r2
 800891c:	f001 fba0 	bl	800a060 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6818      	ldr	r0, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	461a      	mov	r2, r3
 800892a:	68b9      	ldr	r1, [r7, #8]
 800892c:	f001 fc28 	bl	800a180 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6858      	ldr	r0, [r3, #4]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	f001 fc6f 	bl	800a220 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	6892      	ldr	r2, [r2, #8]
 800894a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	6892      	ldr	r2, [r2, #8]
 8008956:	f041 0101 	orr.w	r1, r1, #1
 800895a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800895e:	4b07      	ldr	r3, [pc, #28]	; (800897c <HAL_SRAM_Init+0x9c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a06      	ldr	r2, [pc, #24]	; (800897c <HAL_SRAM_Init+0x9c>)
 8008964:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008968:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	52004000 	.word	0x52004000

08008980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e049      	b.n	8008a26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d106      	bne.n	80089ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7f9 fe7a 	bl	80026a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4619      	mov	r1, r3
 80089be:	4610      	mov	r0, r2
 80089c0:	f000 f9ee 	bl	8008da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d001      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e04f      	b.n	8008ae8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68da      	ldr	r2, [r3, #12]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f042 0201 	orr.w	r2, r2, #1
 8008a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a23      	ldr	r2, [pc, #140]	; (8008af4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d01d      	beq.n	8008aa6 <HAL_TIM_Base_Start_IT+0x76>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a72:	d018      	beq.n	8008aa6 <HAL_TIM_Base_Start_IT+0x76>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a1f      	ldr	r2, [pc, #124]	; (8008af8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d013      	beq.n	8008aa6 <HAL_TIM_Base_Start_IT+0x76>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a1e      	ldr	r2, [pc, #120]	; (8008afc <HAL_TIM_Base_Start_IT+0xcc>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d00e      	beq.n	8008aa6 <HAL_TIM_Base_Start_IT+0x76>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a1c      	ldr	r2, [pc, #112]	; (8008b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d009      	beq.n	8008aa6 <HAL_TIM_Base_Start_IT+0x76>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a1b      	ldr	r2, [pc, #108]	; (8008b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d004      	beq.n	8008aa6 <HAL_TIM_Base_Start_IT+0x76>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a19      	ldr	r2, [pc, #100]	; (8008b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d115      	bne.n	8008ad2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689a      	ldr	r2, [r3, #8]
 8008aac:	4b17      	ldr	r3, [pc, #92]	; (8008b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8008aae:	4013      	ands	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b06      	cmp	r3, #6
 8008ab6:	d015      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0xb4>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008abe:	d011      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f042 0201 	orr.w	r2, r2, #1
 8008ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad0:	e008      	b.n	8008ae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f042 0201 	orr.w	r2, r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	e000      	b.n	8008ae6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	40010000 	.word	0x40010000
 8008af8:	40000400 	.word	0x40000400
 8008afc:	40000800 	.word	0x40000800
 8008b00:	40000c00 	.word	0x40000c00
 8008b04:	40010400 	.word	0x40010400
 8008b08:	40001800 	.word	0x40001800
 8008b0c:	00010007 	.word	0x00010007

08008b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d122      	bne.n	8008b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f003 0302 	and.w	r3, r3, #2
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d11b      	bne.n	8008b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f06f 0202 	mvn.w	r2, #2
 8008b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f905 	bl	8008d62 <HAL_TIM_IC_CaptureCallback>
 8008b58:	e005      	b.n	8008b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f8f7 	bl	8008d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f908 	bl	8008d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	f003 0304 	and.w	r3, r3, #4
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d122      	bne.n	8008bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	d11b      	bne.n	8008bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f06f 0204 	mvn.w	r2, #4
 8008b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2202      	movs	r2, #2
 8008b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f8db 	bl	8008d62 <HAL_TIM_IC_CaptureCallback>
 8008bac:	e005      	b.n	8008bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f8cd 	bl	8008d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f8de 	bl	8008d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f003 0308 	and.w	r3, r3, #8
 8008bca:	2b08      	cmp	r3, #8
 8008bcc:	d122      	bne.n	8008c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f003 0308 	and.w	r3, r3, #8
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d11b      	bne.n	8008c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f06f 0208 	mvn.w	r2, #8
 8008be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2204      	movs	r2, #4
 8008bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f8b1 	bl	8008d62 <HAL_TIM_IC_CaptureCallback>
 8008c00:	e005      	b.n	8008c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f8a3 	bl	8008d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f8b4 	bl	8008d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	f003 0310 	and.w	r3, r3, #16
 8008c1e:	2b10      	cmp	r3, #16
 8008c20:	d122      	bne.n	8008c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f003 0310 	and.w	r3, r3, #16
 8008c2c:	2b10      	cmp	r3, #16
 8008c2e:	d11b      	bne.n	8008c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f06f 0210 	mvn.w	r2, #16
 8008c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2208      	movs	r2, #8
 8008c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f887 	bl	8008d62 <HAL_TIM_IC_CaptureCallback>
 8008c54:	e005      	b.n	8008c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f879 	bl	8008d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f88a 	bl	8008d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d10e      	bne.n	8008c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d107      	bne.n	8008c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f06f 0201 	mvn.w	r2, #1
 8008c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7f9 f92a 	bl	8001ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9e:	2b80      	cmp	r3, #128	; 0x80
 8008ca0:	d10e      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cac:	2b80      	cmp	r3, #128	; 0x80
 8008cae:	d107      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f99c 	bl	8008ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cce:	d10e      	bne.n	8008cee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cda:	2b80      	cmp	r3, #128	; 0x80
 8008cdc:	d107      	bne.n	8008cee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f98f 	bl	800900c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf8:	2b40      	cmp	r3, #64	; 0x40
 8008cfa:	d10e      	bne.n	8008d1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d06:	2b40      	cmp	r3, #64	; 0x40
 8008d08:	d107      	bne.n	8008d1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f838 	bl	8008d8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	f003 0320 	and.w	r3, r3, #32
 8008d24:	2b20      	cmp	r3, #32
 8008d26:	d10e      	bne.n	8008d46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b20      	cmp	r3, #32
 8008d34:	d107      	bne.n	8008d46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f06f 0220 	mvn.w	r2, #32
 8008d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f94f 	bl	8008fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d46:	bf00      	nop
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d56:	bf00      	nop
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d76:	b480      	push	{r7}
 8008d78:	b083      	sub	sp, #12
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d7e:	bf00      	nop
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
	...

08008da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a40      	ldr	r2, [pc, #256]	; (8008eb4 <TIM_Base_SetConfig+0x114>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d013      	beq.n	8008de0 <TIM_Base_SetConfig+0x40>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dbe:	d00f      	beq.n	8008de0 <TIM_Base_SetConfig+0x40>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a3d      	ldr	r2, [pc, #244]	; (8008eb8 <TIM_Base_SetConfig+0x118>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d00b      	beq.n	8008de0 <TIM_Base_SetConfig+0x40>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a3c      	ldr	r2, [pc, #240]	; (8008ebc <TIM_Base_SetConfig+0x11c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d007      	beq.n	8008de0 <TIM_Base_SetConfig+0x40>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a3b      	ldr	r2, [pc, #236]	; (8008ec0 <TIM_Base_SetConfig+0x120>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d003      	beq.n	8008de0 <TIM_Base_SetConfig+0x40>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a3a      	ldr	r2, [pc, #232]	; (8008ec4 <TIM_Base_SetConfig+0x124>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d108      	bne.n	8008df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a2f      	ldr	r2, [pc, #188]	; (8008eb4 <TIM_Base_SetConfig+0x114>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d01f      	beq.n	8008e3a <TIM_Base_SetConfig+0x9a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e00:	d01b      	beq.n	8008e3a <TIM_Base_SetConfig+0x9a>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a2c      	ldr	r2, [pc, #176]	; (8008eb8 <TIM_Base_SetConfig+0x118>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d017      	beq.n	8008e3a <TIM_Base_SetConfig+0x9a>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a2b      	ldr	r2, [pc, #172]	; (8008ebc <TIM_Base_SetConfig+0x11c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d013      	beq.n	8008e3a <TIM_Base_SetConfig+0x9a>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a2a      	ldr	r2, [pc, #168]	; (8008ec0 <TIM_Base_SetConfig+0x120>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d00f      	beq.n	8008e3a <TIM_Base_SetConfig+0x9a>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a29      	ldr	r2, [pc, #164]	; (8008ec4 <TIM_Base_SetConfig+0x124>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00b      	beq.n	8008e3a <TIM_Base_SetConfig+0x9a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a28      	ldr	r2, [pc, #160]	; (8008ec8 <TIM_Base_SetConfig+0x128>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d007      	beq.n	8008e3a <TIM_Base_SetConfig+0x9a>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a27      	ldr	r2, [pc, #156]	; (8008ecc <TIM_Base_SetConfig+0x12c>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d003      	beq.n	8008e3a <TIM_Base_SetConfig+0x9a>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a26      	ldr	r2, [pc, #152]	; (8008ed0 <TIM_Base_SetConfig+0x130>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d108      	bne.n	8008e4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a10      	ldr	r2, [pc, #64]	; (8008eb4 <TIM_Base_SetConfig+0x114>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d00f      	beq.n	8008e98 <TIM_Base_SetConfig+0xf8>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a12      	ldr	r2, [pc, #72]	; (8008ec4 <TIM_Base_SetConfig+0x124>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d00b      	beq.n	8008e98 <TIM_Base_SetConfig+0xf8>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a11      	ldr	r2, [pc, #68]	; (8008ec8 <TIM_Base_SetConfig+0x128>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d007      	beq.n	8008e98 <TIM_Base_SetConfig+0xf8>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a10      	ldr	r2, [pc, #64]	; (8008ecc <TIM_Base_SetConfig+0x12c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d003      	beq.n	8008e98 <TIM_Base_SetConfig+0xf8>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a0f      	ldr	r2, [pc, #60]	; (8008ed0 <TIM_Base_SetConfig+0x130>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d103      	bne.n	8008ea0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	691a      	ldr	r2, [r3, #16]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	615a      	str	r2, [r3, #20]
}
 8008ea6:	bf00      	nop
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	40010000 	.word	0x40010000
 8008eb8:	40000400 	.word	0x40000400
 8008ebc:	40000800 	.word	0x40000800
 8008ec0:	40000c00 	.word	0x40000c00
 8008ec4:	40010400 	.word	0x40010400
 8008ec8:	40014000 	.word	0x40014000
 8008ecc:	40014400 	.word	0x40014400
 8008ed0:	40014800 	.word	0x40014800

08008ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d101      	bne.n	8008eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ee8:	2302      	movs	r3, #2
 8008eea:	e068      	b.n	8008fbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a2e      	ldr	r2, [pc, #184]	; (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d004      	beq.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a2d      	ldr	r2, [pc, #180]	; (8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d108      	bne.n	8008f32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a1e      	ldr	r2, [pc, #120]	; (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d01d      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f5e:	d018      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a1b      	ldr	r2, [pc, #108]	; (8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d013      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a1a      	ldr	r2, [pc, #104]	; (8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00e      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a18      	ldr	r2, [pc, #96]	; (8008fdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d009      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a13      	ldr	r2, [pc, #76]	; (8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d004      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a14      	ldr	r2, [pc, #80]	; (8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d10c      	bne.n	8008fac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	40010000 	.word	0x40010000
 8008fd0:	40010400 	.word	0x40010400
 8008fd4:	40000400 	.word	0x40000400
 8008fd8:	40000800 	.word	0x40000800
 8008fdc:	40000c00 	.word	0x40000c00
 8008fe0:	40001800 	.word	0x40001800

08008fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e042      	b.n	80090b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7f9 fb9f 	bl	8002788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2224      	movs	r2, #36	; 0x24
 800904e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f022 0201 	bic.w	r2, r2, #1
 8009060:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f82c 	bl	80090c0 <UART_SetConfig>
 8009068:	4603      	mov	r3, r0
 800906a:	2b01      	cmp	r3, #1
 800906c:	d101      	bne.n	8009072 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e022      	b.n	80090b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009076:	2b00      	cmp	r3, #0
 8009078:	d002      	beq.n	8009080 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fd80 	bl	8009b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800908e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689a      	ldr	r2, [r3, #8]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800909e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f042 0201 	orr.w	r2, r2, #1
 80090ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fe07 	bl	8009cc4 <UART_CheckIdleState>
 80090b6:	4603      	mov	r3, r0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090c0:	b5b0      	push	{r4, r5, r7, lr}
 80090c2:	b08e      	sub	sp, #56	; 0x38
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689a      	ldr	r2, [r3, #8]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	431a      	orrs	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	431a      	orrs	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	4bbf      	ldr	r3, [pc, #764]	; (80093ec <UART_SetConfig+0x32c>)
 80090ee:	4013      	ands	r3, r2
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	6812      	ldr	r2, [r2, #0]
 80090f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80090f6:	430b      	orrs	r3, r1
 80090f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68da      	ldr	r2, [r3, #12]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4ab5      	ldr	r2, [pc, #724]	; (80093f0 <UART_SetConfig+0x330>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d004      	beq.n	800912a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009126:	4313      	orrs	r3, r2
 8009128:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	689a      	ldr	r2, [r3, #8]
 8009130:	4bb0      	ldr	r3, [pc, #704]	; (80093f4 <UART_SetConfig+0x334>)
 8009132:	4013      	ands	r3, r2
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	6812      	ldr	r2, [r2, #0]
 8009138:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800913a:	430b      	orrs	r3, r1
 800913c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	f023 010f 	bic.w	r1, r3, #15
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4aa7      	ldr	r2, [pc, #668]	; (80093f8 <UART_SetConfig+0x338>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d176      	bne.n	800924c <UART_SetConfig+0x18c>
 800915e:	4ba7      	ldr	r3, [pc, #668]	; (80093fc <UART_SetConfig+0x33c>)
 8009160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009166:	2b28      	cmp	r3, #40	; 0x28
 8009168:	d86c      	bhi.n	8009244 <UART_SetConfig+0x184>
 800916a:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <UART_SetConfig+0xb0>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	08009215 	.word	0x08009215
 8009174:	08009245 	.word	0x08009245
 8009178:	08009245 	.word	0x08009245
 800917c:	08009245 	.word	0x08009245
 8009180:	08009245 	.word	0x08009245
 8009184:	08009245 	.word	0x08009245
 8009188:	08009245 	.word	0x08009245
 800918c:	08009245 	.word	0x08009245
 8009190:	0800921d 	.word	0x0800921d
 8009194:	08009245 	.word	0x08009245
 8009198:	08009245 	.word	0x08009245
 800919c:	08009245 	.word	0x08009245
 80091a0:	08009245 	.word	0x08009245
 80091a4:	08009245 	.word	0x08009245
 80091a8:	08009245 	.word	0x08009245
 80091ac:	08009245 	.word	0x08009245
 80091b0:	08009225 	.word	0x08009225
 80091b4:	08009245 	.word	0x08009245
 80091b8:	08009245 	.word	0x08009245
 80091bc:	08009245 	.word	0x08009245
 80091c0:	08009245 	.word	0x08009245
 80091c4:	08009245 	.word	0x08009245
 80091c8:	08009245 	.word	0x08009245
 80091cc:	08009245 	.word	0x08009245
 80091d0:	0800922d 	.word	0x0800922d
 80091d4:	08009245 	.word	0x08009245
 80091d8:	08009245 	.word	0x08009245
 80091dc:	08009245 	.word	0x08009245
 80091e0:	08009245 	.word	0x08009245
 80091e4:	08009245 	.word	0x08009245
 80091e8:	08009245 	.word	0x08009245
 80091ec:	08009245 	.word	0x08009245
 80091f0:	08009235 	.word	0x08009235
 80091f4:	08009245 	.word	0x08009245
 80091f8:	08009245 	.word	0x08009245
 80091fc:	08009245 	.word	0x08009245
 8009200:	08009245 	.word	0x08009245
 8009204:	08009245 	.word	0x08009245
 8009208:	08009245 	.word	0x08009245
 800920c:	08009245 	.word	0x08009245
 8009210:	0800923d 	.word	0x0800923d
 8009214:	2301      	movs	r3, #1
 8009216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800921a:	e222      	b.n	8009662 <UART_SetConfig+0x5a2>
 800921c:	2304      	movs	r3, #4
 800921e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009222:	e21e      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009224:	2308      	movs	r3, #8
 8009226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800922a:	e21a      	b.n	8009662 <UART_SetConfig+0x5a2>
 800922c:	2310      	movs	r3, #16
 800922e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009232:	e216      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009234:	2320      	movs	r3, #32
 8009236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923a:	e212      	b.n	8009662 <UART_SetConfig+0x5a2>
 800923c:	2340      	movs	r3, #64	; 0x40
 800923e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009242:	e20e      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009244:	2380      	movs	r3, #128	; 0x80
 8009246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800924a:	e20a      	b.n	8009662 <UART_SetConfig+0x5a2>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a6b      	ldr	r2, [pc, #428]	; (8009400 <UART_SetConfig+0x340>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d130      	bne.n	80092b8 <UART_SetConfig+0x1f8>
 8009256:	4b69      	ldr	r3, [pc, #420]	; (80093fc <UART_SetConfig+0x33c>)
 8009258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800925a:	f003 0307 	and.w	r3, r3, #7
 800925e:	2b05      	cmp	r3, #5
 8009260:	d826      	bhi.n	80092b0 <UART_SetConfig+0x1f0>
 8009262:	a201      	add	r2, pc, #4	; (adr r2, 8009268 <UART_SetConfig+0x1a8>)
 8009264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009268:	08009281 	.word	0x08009281
 800926c:	08009289 	.word	0x08009289
 8009270:	08009291 	.word	0x08009291
 8009274:	08009299 	.word	0x08009299
 8009278:	080092a1 	.word	0x080092a1
 800927c:	080092a9 	.word	0x080092a9
 8009280:	2300      	movs	r3, #0
 8009282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009286:	e1ec      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009288:	2304      	movs	r3, #4
 800928a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800928e:	e1e8      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009290:	2308      	movs	r3, #8
 8009292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009296:	e1e4      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009298:	2310      	movs	r3, #16
 800929a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929e:	e1e0      	b.n	8009662 <UART_SetConfig+0x5a2>
 80092a0:	2320      	movs	r3, #32
 80092a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a6:	e1dc      	b.n	8009662 <UART_SetConfig+0x5a2>
 80092a8:	2340      	movs	r3, #64	; 0x40
 80092aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ae:	e1d8      	b.n	8009662 <UART_SetConfig+0x5a2>
 80092b0:	2380      	movs	r3, #128	; 0x80
 80092b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092b6:	e1d4      	b.n	8009662 <UART_SetConfig+0x5a2>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a51      	ldr	r2, [pc, #324]	; (8009404 <UART_SetConfig+0x344>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d130      	bne.n	8009324 <UART_SetConfig+0x264>
 80092c2:	4b4e      	ldr	r3, [pc, #312]	; (80093fc <UART_SetConfig+0x33c>)
 80092c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	2b05      	cmp	r3, #5
 80092cc:	d826      	bhi.n	800931c <UART_SetConfig+0x25c>
 80092ce:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <UART_SetConfig+0x214>)
 80092d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d4:	080092ed 	.word	0x080092ed
 80092d8:	080092f5 	.word	0x080092f5
 80092dc:	080092fd 	.word	0x080092fd
 80092e0:	08009305 	.word	0x08009305
 80092e4:	0800930d 	.word	0x0800930d
 80092e8:	08009315 	.word	0x08009315
 80092ec:	2300      	movs	r3, #0
 80092ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f2:	e1b6      	b.n	8009662 <UART_SetConfig+0x5a2>
 80092f4:	2304      	movs	r3, #4
 80092f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fa:	e1b2      	b.n	8009662 <UART_SetConfig+0x5a2>
 80092fc:	2308      	movs	r3, #8
 80092fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009302:	e1ae      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009304:	2310      	movs	r3, #16
 8009306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930a:	e1aa      	b.n	8009662 <UART_SetConfig+0x5a2>
 800930c:	2320      	movs	r3, #32
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	e1a6      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009314:	2340      	movs	r3, #64	; 0x40
 8009316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931a:	e1a2      	b.n	8009662 <UART_SetConfig+0x5a2>
 800931c:	2380      	movs	r3, #128	; 0x80
 800931e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009322:	e19e      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a37      	ldr	r2, [pc, #220]	; (8009408 <UART_SetConfig+0x348>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d130      	bne.n	8009390 <UART_SetConfig+0x2d0>
 800932e:	4b33      	ldr	r3, [pc, #204]	; (80093fc <UART_SetConfig+0x33c>)
 8009330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	2b05      	cmp	r3, #5
 8009338:	d826      	bhi.n	8009388 <UART_SetConfig+0x2c8>
 800933a:	a201      	add	r2, pc, #4	; (adr r2, 8009340 <UART_SetConfig+0x280>)
 800933c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009340:	08009359 	.word	0x08009359
 8009344:	08009361 	.word	0x08009361
 8009348:	08009369 	.word	0x08009369
 800934c:	08009371 	.word	0x08009371
 8009350:	08009379 	.word	0x08009379
 8009354:	08009381 	.word	0x08009381
 8009358:	2300      	movs	r3, #0
 800935a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800935e:	e180      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009360:	2304      	movs	r3, #4
 8009362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009366:	e17c      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009368:	2308      	movs	r3, #8
 800936a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936e:	e178      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009370:	2310      	movs	r3, #16
 8009372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009376:	e174      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009378:	2320      	movs	r3, #32
 800937a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937e:	e170      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009380:	2340      	movs	r3, #64	; 0x40
 8009382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009386:	e16c      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009388:	2380      	movs	r3, #128	; 0x80
 800938a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938e:	e168      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a1d      	ldr	r2, [pc, #116]	; (800940c <UART_SetConfig+0x34c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d142      	bne.n	8009420 <UART_SetConfig+0x360>
 800939a:	4b18      	ldr	r3, [pc, #96]	; (80093fc <UART_SetConfig+0x33c>)
 800939c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800939e:	f003 0307 	and.w	r3, r3, #7
 80093a2:	2b05      	cmp	r3, #5
 80093a4:	d838      	bhi.n	8009418 <UART_SetConfig+0x358>
 80093a6:	a201      	add	r2, pc, #4	; (adr r2, 80093ac <UART_SetConfig+0x2ec>)
 80093a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ac:	080093c5 	.word	0x080093c5
 80093b0:	080093cd 	.word	0x080093cd
 80093b4:	080093d5 	.word	0x080093d5
 80093b8:	080093dd 	.word	0x080093dd
 80093bc:	080093e5 	.word	0x080093e5
 80093c0:	08009411 	.word	0x08009411
 80093c4:	2300      	movs	r3, #0
 80093c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ca:	e14a      	b.n	8009662 <UART_SetConfig+0x5a2>
 80093cc:	2304      	movs	r3, #4
 80093ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d2:	e146      	b.n	8009662 <UART_SetConfig+0x5a2>
 80093d4:	2308      	movs	r3, #8
 80093d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093da:	e142      	b.n	8009662 <UART_SetConfig+0x5a2>
 80093dc:	2310      	movs	r3, #16
 80093de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e2:	e13e      	b.n	8009662 <UART_SetConfig+0x5a2>
 80093e4:	2320      	movs	r3, #32
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	e13a      	b.n	8009662 <UART_SetConfig+0x5a2>
 80093ec:	cfff69f3 	.word	0xcfff69f3
 80093f0:	58000c00 	.word	0x58000c00
 80093f4:	11fff4ff 	.word	0x11fff4ff
 80093f8:	40011000 	.word	0x40011000
 80093fc:	58024400 	.word	0x58024400
 8009400:	40004400 	.word	0x40004400
 8009404:	40004800 	.word	0x40004800
 8009408:	40004c00 	.word	0x40004c00
 800940c:	40005000 	.word	0x40005000
 8009410:	2340      	movs	r3, #64	; 0x40
 8009412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009416:	e124      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009418:	2380      	movs	r3, #128	; 0x80
 800941a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800941e:	e120      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4acc      	ldr	r2, [pc, #816]	; (8009758 <UART_SetConfig+0x698>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d176      	bne.n	8009518 <UART_SetConfig+0x458>
 800942a:	4bcc      	ldr	r3, [pc, #816]	; (800975c <UART_SetConfig+0x69c>)
 800942c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009432:	2b28      	cmp	r3, #40	; 0x28
 8009434:	d86c      	bhi.n	8009510 <UART_SetConfig+0x450>
 8009436:	a201      	add	r2, pc, #4	; (adr r2, 800943c <UART_SetConfig+0x37c>)
 8009438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943c:	080094e1 	.word	0x080094e1
 8009440:	08009511 	.word	0x08009511
 8009444:	08009511 	.word	0x08009511
 8009448:	08009511 	.word	0x08009511
 800944c:	08009511 	.word	0x08009511
 8009450:	08009511 	.word	0x08009511
 8009454:	08009511 	.word	0x08009511
 8009458:	08009511 	.word	0x08009511
 800945c:	080094e9 	.word	0x080094e9
 8009460:	08009511 	.word	0x08009511
 8009464:	08009511 	.word	0x08009511
 8009468:	08009511 	.word	0x08009511
 800946c:	08009511 	.word	0x08009511
 8009470:	08009511 	.word	0x08009511
 8009474:	08009511 	.word	0x08009511
 8009478:	08009511 	.word	0x08009511
 800947c:	080094f1 	.word	0x080094f1
 8009480:	08009511 	.word	0x08009511
 8009484:	08009511 	.word	0x08009511
 8009488:	08009511 	.word	0x08009511
 800948c:	08009511 	.word	0x08009511
 8009490:	08009511 	.word	0x08009511
 8009494:	08009511 	.word	0x08009511
 8009498:	08009511 	.word	0x08009511
 800949c:	080094f9 	.word	0x080094f9
 80094a0:	08009511 	.word	0x08009511
 80094a4:	08009511 	.word	0x08009511
 80094a8:	08009511 	.word	0x08009511
 80094ac:	08009511 	.word	0x08009511
 80094b0:	08009511 	.word	0x08009511
 80094b4:	08009511 	.word	0x08009511
 80094b8:	08009511 	.word	0x08009511
 80094bc:	08009501 	.word	0x08009501
 80094c0:	08009511 	.word	0x08009511
 80094c4:	08009511 	.word	0x08009511
 80094c8:	08009511 	.word	0x08009511
 80094cc:	08009511 	.word	0x08009511
 80094d0:	08009511 	.word	0x08009511
 80094d4:	08009511 	.word	0x08009511
 80094d8:	08009511 	.word	0x08009511
 80094dc:	08009509 	.word	0x08009509
 80094e0:	2301      	movs	r3, #1
 80094e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094e6:	e0bc      	b.n	8009662 <UART_SetConfig+0x5a2>
 80094e8:	2304      	movs	r3, #4
 80094ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ee:	e0b8      	b.n	8009662 <UART_SetConfig+0x5a2>
 80094f0:	2308      	movs	r3, #8
 80094f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094f6:	e0b4      	b.n	8009662 <UART_SetConfig+0x5a2>
 80094f8:	2310      	movs	r3, #16
 80094fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094fe:	e0b0      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009500:	2320      	movs	r3, #32
 8009502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009506:	e0ac      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009508:	2340      	movs	r3, #64	; 0x40
 800950a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800950e:	e0a8      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009510:	2380      	movs	r3, #128	; 0x80
 8009512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009516:	e0a4      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a90      	ldr	r2, [pc, #576]	; (8009760 <UART_SetConfig+0x6a0>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d130      	bne.n	8009584 <UART_SetConfig+0x4c4>
 8009522:	4b8e      	ldr	r3, [pc, #568]	; (800975c <UART_SetConfig+0x69c>)
 8009524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	2b05      	cmp	r3, #5
 800952c:	d826      	bhi.n	800957c <UART_SetConfig+0x4bc>
 800952e:	a201      	add	r2, pc, #4	; (adr r2, 8009534 <UART_SetConfig+0x474>)
 8009530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009534:	0800954d 	.word	0x0800954d
 8009538:	08009555 	.word	0x08009555
 800953c:	0800955d 	.word	0x0800955d
 8009540:	08009565 	.word	0x08009565
 8009544:	0800956d 	.word	0x0800956d
 8009548:	08009575 	.word	0x08009575
 800954c:	2300      	movs	r3, #0
 800954e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009552:	e086      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009554:	2304      	movs	r3, #4
 8009556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800955a:	e082      	b.n	8009662 <UART_SetConfig+0x5a2>
 800955c:	2308      	movs	r3, #8
 800955e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009562:	e07e      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009564:	2310      	movs	r3, #16
 8009566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800956a:	e07a      	b.n	8009662 <UART_SetConfig+0x5a2>
 800956c:	2320      	movs	r3, #32
 800956e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009572:	e076      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009574:	2340      	movs	r3, #64	; 0x40
 8009576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800957a:	e072      	b.n	8009662 <UART_SetConfig+0x5a2>
 800957c:	2380      	movs	r3, #128	; 0x80
 800957e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009582:	e06e      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a76      	ldr	r2, [pc, #472]	; (8009764 <UART_SetConfig+0x6a4>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d130      	bne.n	80095f0 <UART_SetConfig+0x530>
 800958e:	4b73      	ldr	r3, [pc, #460]	; (800975c <UART_SetConfig+0x69c>)
 8009590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009592:	f003 0307 	and.w	r3, r3, #7
 8009596:	2b05      	cmp	r3, #5
 8009598:	d826      	bhi.n	80095e8 <UART_SetConfig+0x528>
 800959a:	a201      	add	r2, pc, #4	; (adr r2, 80095a0 <UART_SetConfig+0x4e0>)
 800959c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a0:	080095b9 	.word	0x080095b9
 80095a4:	080095c1 	.word	0x080095c1
 80095a8:	080095c9 	.word	0x080095c9
 80095ac:	080095d1 	.word	0x080095d1
 80095b0:	080095d9 	.word	0x080095d9
 80095b4:	080095e1 	.word	0x080095e1
 80095b8:	2300      	movs	r3, #0
 80095ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095be:	e050      	b.n	8009662 <UART_SetConfig+0x5a2>
 80095c0:	2304      	movs	r3, #4
 80095c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095c6:	e04c      	b.n	8009662 <UART_SetConfig+0x5a2>
 80095c8:	2308      	movs	r3, #8
 80095ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ce:	e048      	b.n	8009662 <UART_SetConfig+0x5a2>
 80095d0:	2310      	movs	r3, #16
 80095d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095d6:	e044      	b.n	8009662 <UART_SetConfig+0x5a2>
 80095d8:	2320      	movs	r3, #32
 80095da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095de:	e040      	b.n	8009662 <UART_SetConfig+0x5a2>
 80095e0:	2340      	movs	r3, #64	; 0x40
 80095e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e6:	e03c      	b.n	8009662 <UART_SetConfig+0x5a2>
 80095e8:	2380      	movs	r3, #128	; 0x80
 80095ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ee:	e038      	b.n	8009662 <UART_SetConfig+0x5a2>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a5c      	ldr	r2, [pc, #368]	; (8009768 <UART_SetConfig+0x6a8>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d130      	bne.n	800965c <UART_SetConfig+0x59c>
 80095fa:	4b58      	ldr	r3, [pc, #352]	; (800975c <UART_SetConfig+0x69c>)
 80095fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095fe:	f003 0307 	and.w	r3, r3, #7
 8009602:	2b05      	cmp	r3, #5
 8009604:	d826      	bhi.n	8009654 <UART_SetConfig+0x594>
 8009606:	a201      	add	r2, pc, #4	; (adr r2, 800960c <UART_SetConfig+0x54c>)
 8009608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960c:	08009625 	.word	0x08009625
 8009610:	0800962d 	.word	0x0800962d
 8009614:	08009635 	.word	0x08009635
 8009618:	0800963d 	.word	0x0800963d
 800961c:	08009645 	.word	0x08009645
 8009620:	0800964d 	.word	0x0800964d
 8009624:	2302      	movs	r3, #2
 8009626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800962a:	e01a      	b.n	8009662 <UART_SetConfig+0x5a2>
 800962c:	2304      	movs	r3, #4
 800962e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009632:	e016      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009634:	2308      	movs	r3, #8
 8009636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800963a:	e012      	b.n	8009662 <UART_SetConfig+0x5a2>
 800963c:	2310      	movs	r3, #16
 800963e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009642:	e00e      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009644:	2320      	movs	r3, #32
 8009646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964a:	e00a      	b.n	8009662 <UART_SetConfig+0x5a2>
 800964c:	2340      	movs	r3, #64	; 0x40
 800964e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009652:	e006      	b.n	8009662 <UART_SetConfig+0x5a2>
 8009654:	2380      	movs	r3, #128	; 0x80
 8009656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965a:	e002      	b.n	8009662 <UART_SetConfig+0x5a2>
 800965c:	2380      	movs	r3, #128	; 0x80
 800965e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a40      	ldr	r2, [pc, #256]	; (8009768 <UART_SetConfig+0x6a8>)
 8009668:	4293      	cmp	r3, r2
 800966a:	f040 80ef 	bne.w	800984c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800966e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009672:	2b20      	cmp	r3, #32
 8009674:	dc46      	bgt.n	8009704 <UART_SetConfig+0x644>
 8009676:	2b02      	cmp	r3, #2
 8009678:	f2c0 8081 	blt.w	800977e <UART_SetConfig+0x6be>
 800967c:	3b02      	subs	r3, #2
 800967e:	2b1e      	cmp	r3, #30
 8009680:	d87d      	bhi.n	800977e <UART_SetConfig+0x6be>
 8009682:	a201      	add	r2, pc, #4	; (adr r2, 8009688 <UART_SetConfig+0x5c8>)
 8009684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009688:	0800970b 	.word	0x0800970b
 800968c:	0800977f 	.word	0x0800977f
 8009690:	08009713 	.word	0x08009713
 8009694:	0800977f 	.word	0x0800977f
 8009698:	0800977f 	.word	0x0800977f
 800969c:	0800977f 	.word	0x0800977f
 80096a0:	08009723 	.word	0x08009723
 80096a4:	0800977f 	.word	0x0800977f
 80096a8:	0800977f 	.word	0x0800977f
 80096ac:	0800977f 	.word	0x0800977f
 80096b0:	0800977f 	.word	0x0800977f
 80096b4:	0800977f 	.word	0x0800977f
 80096b8:	0800977f 	.word	0x0800977f
 80096bc:	0800977f 	.word	0x0800977f
 80096c0:	08009733 	.word	0x08009733
 80096c4:	0800977f 	.word	0x0800977f
 80096c8:	0800977f 	.word	0x0800977f
 80096cc:	0800977f 	.word	0x0800977f
 80096d0:	0800977f 	.word	0x0800977f
 80096d4:	0800977f 	.word	0x0800977f
 80096d8:	0800977f 	.word	0x0800977f
 80096dc:	0800977f 	.word	0x0800977f
 80096e0:	0800977f 	.word	0x0800977f
 80096e4:	0800977f 	.word	0x0800977f
 80096e8:	0800977f 	.word	0x0800977f
 80096ec:	0800977f 	.word	0x0800977f
 80096f0:	0800977f 	.word	0x0800977f
 80096f4:	0800977f 	.word	0x0800977f
 80096f8:	0800977f 	.word	0x0800977f
 80096fc:	0800977f 	.word	0x0800977f
 8009700:	08009771 	.word	0x08009771
 8009704:	2b40      	cmp	r3, #64	; 0x40
 8009706:	d036      	beq.n	8009776 <UART_SetConfig+0x6b6>
 8009708:	e039      	b.n	800977e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800970a:	f7fc ffff 	bl	800670c <HAL_RCCEx_GetD3PCLK1Freq>
 800970e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009710:	e03b      	b.n	800978a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009712:	f107 0314 	add.w	r3, r7, #20
 8009716:	4618      	mov	r0, r3
 8009718:	f7fd f80e 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009720:	e033      	b.n	800978a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009722:	f107 0308 	add.w	r3, r7, #8
 8009726:	4618      	mov	r0, r3
 8009728:	f7fd f95a 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009730:	e02b      	b.n	800978a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009732:	4b0a      	ldr	r3, [pc, #40]	; (800975c <UART_SetConfig+0x69c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0320 	and.w	r3, r3, #32
 800973a:	2b00      	cmp	r3, #0
 800973c:	d009      	beq.n	8009752 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800973e:	4b07      	ldr	r3, [pc, #28]	; (800975c <UART_SetConfig+0x69c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	08db      	lsrs	r3, r3, #3
 8009744:	f003 0303 	and.w	r3, r3, #3
 8009748:	4a08      	ldr	r2, [pc, #32]	; (800976c <UART_SetConfig+0x6ac>)
 800974a:	fa22 f303 	lsr.w	r3, r2, r3
 800974e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009750:	e01b      	b.n	800978a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009752:	4b06      	ldr	r3, [pc, #24]	; (800976c <UART_SetConfig+0x6ac>)
 8009754:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009756:	e018      	b.n	800978a <UART_SetConfig+0x6ca>
 8009758:	40011400 	.word	0x40011400
 800975c:	58024400 	.word	0x58024400
 8009760:	40007800 	.word	0x40007800
 8009764:	40007c00 	.word	0x40007c00
 8009768:	58000c00 	.word	0x58000c00
 800976c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009770:	4bc4      	ldr	r3, [pc, #784]	; (8009a84 <UART_SetConfig+0x9c4>)
 8009772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009774:	e009      	b.n	800978a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800977a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800977c:	e005      	b.n	800978a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800977e:	2300      	movs	r3, #0
 8009780:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009788:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 81da 	beq.w	8009b46 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	4abc      	ldr	r2, [pc, #752]	; (8009a88 <UART_SetConfig+0x9c8>)
 8009798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800979c:	461a      	mov	r2, r3
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80097a4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685a      	ldr	r2, [r3, #4]
 80097aa:	4613      	mov	r3, r2
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	4413      	add	r3, r2
 80097b0:	6a3a      	ldr	r2, [r7, #32]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d305      	bcc.n	80097c2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097bc:	6a3a      	ldr	r2, [r7, #32]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d903      	bls.n	80097ca <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80097c8:	e1bd      	b.n	8009b46 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	4618      	mov	r0, r3
 80097ce:	f04f 0100 	mov.w	r1, #0
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d6:	4aac      	ldr	r2, [pc, #688]	; (8009a88 <UART_SetConfig+0x9c8>)
 80097d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097dc:	b29a      	uxth	r2, r3
 80097de:	f04f 0300 	mov.w	r3, #0
 80097e2:	f7f6 fd7d 	bl	80002e0 <__aeabi_uldivmod>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4610      	mov	r0, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	f04f 0200 	mov.w	r2, #0
 80097f2:	f04f 0300 	mov.w	r3, #0
 80097f6:	020b      	lsls	r3, r1, #8
 80097f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097fc:	0202      	lsls	r2, r0, #8
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	6849      	ldr	r1, [r1, #4]
 8009802:	0849      	lsrs	r1, r1, #1
 8009804:	4608      	mov	r0, r1
 8009806:	f04f 0100 	mov.w	r1, #0
 800980a:	1814      	adds	r4, r2, r0
 800980c:	eb43 0501 	adc.w	r5, r3, r1
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	461a      	mov	r2, r3
 8009816:	f04f 0300 	mov.w	r3, #0
 800981a:	4620      	mov	r0, r4
 800981c:	4629      	mov	r1, r5
 800981e:	f7f6 fd5f 	bl	80002e0 <__aeabi_uldivmod>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4613      	mov	r3, r2
 8009828:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009830:	d308      	bcc.n	8009844 <UART_SetConfig+0x784>
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009838:	d204      	bcs.n	8009844 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009840:	60da      	str	r2, [r3, #12]
 8009842:	e180      	b.n	8009b46 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800984a:	e17c      	b.n	8009b46 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009854:	f040 80bf 	bne.w	80099d6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800985c:	2b20      	cmp	r3, #32
 800985e:	dc49      	bgt.n	80098f4 <UART_SetConfig+0x834>
 8009860:	2b00      	cmp	r3, #0
 8009862:	db7c      	blt.n	800995e <UART_SetConfig+0x89e>
 8009864:	2b20      	cmp	r3, #32
 8009866:	d87a      	bhi.n	800995e <UART_SetConfig+0x89e>
 8009868:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <UART_SetConfig+0x7b0>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	080098fb 	.word	0x080098fb
 8009874:	08009903 	.word	0x08009903
 8009878:	0800995f 	.word	0x0800995f
 800987c:	0800995f 	.word	0x0800995f
 8009880:	0800990b 	.word	0x0800990b
 8009884:	0800995f 	.word	0x0800995f
 8009888:	0800995f 	.word	0x0800995f
 800988c:	0800995f 	.word	0x0800995f
 8009890:	0800991b 	.word	0x0800991b
 8009894:	0800995f 	.word	0x0800995f
 8009898:	0800995f 	.word	0x0800995f
 800989c:	0800995f 	.word	0x0800995f
 80098a0:	0800995f 	.word	0x0800995f
 80098a4:	0800995f 	.word	0x0800995f
 80098a8:	0800995f 	.word	0x0800995f
 80098ac:	0800995f 	.word	0x0800995f
 80098b0:	0800992b 	.word	0x0800992b
 80098b4:	0800995f 	.word	0x0800995f
 80098b8:	0800995f 	.word	0x0800995f
 80098bc:	0800995f 	.word	0x0800995f
 80098c0:	0800995f 	.word	0x0800995f
 80098c4:	0800995f 	.word	0x0800995f
 80098c8:	0800995f 	.word	0x0800995f
 80098cc:	0800995f 	.word	0x0800995f
 80098d0:	0800995f 	.word	0x0800995f
 80098d4:	0800995f 	.word	0x0800995f
 80098d8:	0800995f 	.word	0x0800995f
 80098dc:	0800995f 	.word	0x0800995f
 80098e0:	0800995f 	.word	0x0800995f
 80098e4:	0800995f 	.word	0x0800995f
 80098e8:	0800995f 	.word	0x0800995f
 80098ec:	0800995f 	.word	0x0800995f
 80098f0:	08009951 	.word	0x08009951
 80098f4:	2b40      	cmp	r3, #64	; 0x40
 80098f6:	d02e      	beq.n	8009956 <UART_SetConfig+0x896>
 80098f8:	e031      	b.n	800995e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098fa:	f7fb fa87 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80098fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009900:	e033      	b.n	800996a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009902:	f7fb fa99 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 8009906:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009908:	e02f      	b.n	800996a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990a:	f107 0314 	add.w	r3, r7, #20
 800990e:	4618      	mov	r0, r3
 8009910:	f7fc ff12 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009918:	e027      	b.n	800996a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800991a:	f107 0308 	add.w	r3, r7, #8
 800991e:	4618      	mov	r0, r3
 8009920:	f7fd f85e 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009928:	e01f      	b.n	800996a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800992a:	4b58      	ldr	r3, [pc, #352]	; (8009a8c <UART_SetConfig+0x9cc>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b00      	cmp	r3, #0
 8009934:	d009      	beq.n	800994a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009936:	4b55      	ldr	r3, [pc, #340]	; (8009a8c <UART_SetConfig+0x9cc>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	08db      	lsrs	r3, r3, #3
 800993c:	f003 0303 	and.w	r3, r3, #3
 8009940:	4a53      	ldr	r2, [pc, #332]	; (8009a90 <UART_SetConfig+0x9d0>)
 8009942:	fa22 f303 	lsr.w	r3, r2, r3
 8009946:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009948:	e00f      	b.n	800996a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800994a:	4b51      	ldr	r3, [pc, #324]	; (8009a90 <UART_SetConfig+0x9d0>)
 800994c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800994e:	e00c      	b.n	800996a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009950:	4b4c      	ldr	r3, [pc, #304]	; (8009a84 <UART_SetConfig+0x9c4>)
 8009952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009954:	e009      	b.n	800996a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800995a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800995c:	e005      	b.n	800996a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800995e:	2300      	movs	r3, #0
 8009960:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 80ea 	beq.w	8009b46 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	4a44      	ldr	r2, [pc, #272]	; (8009a88 <UART_SetConfig+0x9c8>)
 8009978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800997c:	461a      	mov	r2, r3
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	fbb3 f3f2 	udiv	r3, r3, r2
 8009984:	005a      	lsls	r2, r3, #1
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	085b      	lsrs	r3, r3, #1
 800998c:	441a      	add	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	fbb2 f3f3 	udiv	r3, r2, r3
 8009996:	b29b      	uxth	r3, r3
 8009998:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999c:	2b0f      	cmp	r3, #15
 800999e:	d916      	bls.n	80099ce <UART_SetConfig+0x90e>
 80099a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099a6:	d212      	bcs.n	80099ce <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	f023 030f 	bic.w	r3, r3, #15
 80099b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	085b      	lsrs	r3, r3, #1
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f003 0307 	and.w	r3, r3, #7
 80099bc:	b29a      	uxth	r2, r3
 80099be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80099c0:	4313      	orrs	r3, r2
 80099c2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80099ca:	60da      	str	r2, [r3, #12]
 80099cc:	e0bb      	b.n	8009b46 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80099d4:	e0b7      	b.n	8009b46 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80099da:	2b20      	cmp	r3, #32
 80099dc:	dc4a      	bgt.n	8009a74 <UART_SetConfig+0x9b4>
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f2c0 8086 	blt.w	8009af0 <UART_SetConfig+0xa30>
 80099e4:	2b20      	cmp	r3, #32
 80099e6:	f200 8083 	bhi.w	8009af0 <UART_SetConfig+0xa30>
 80099ea:	a201      	add	r2, pc, #4	; (adr r2, 80099f0 <UART_SetConfig+0x930>)
 80099ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f0:	08009a7b 	.word	0x08009a7b
 80099f4:	08009a95 	.word	0x08009a95
 80099f8:	08009af1 	.word	0x08009af1
 80099fc:	08009af1 	.word	0x08009af1
 8009a00:	08009a9d 	.word	0x08009a9d
 8009a04:	08009af1 	.word	0x08009af1
 8009a08:	08009af1 	.word	0x08009af1
 8009a0c:	08009af1 	.word	0x08009af1
 8009a10:	08009aad 	.word	0x08009aad
 8009a14:	08009af1 	.word	0x08009af1
 8009a18:	08009af1 	.word	0x08009af1
 8009a1c:	08009af1 	.word	0x08009af1
 8009a20:	08009af1 	.word	0x08009af1
 8009a24:	08009af1 	.word	0x08009af1
 8009a28:	08009af1 	.word	0x08009af1
 8009a2c:	08009af1 	.word	0x08009af1
 8009a30:	08009abd 	.word	0x08009abd
 8009a34:	08009af1 	.word	0x08009af1
 8009a38:	08009af1 	.word	0x08009af1
 8009a3c:	08009af1 	.word	0x08009af1
 8009a40:	08009af1 	.word	0x08009af1
 8009a44:	08009af1 	.word	0x08009af1
 8009a48:	08009af1 	.word	0x08009af1
 8009a4c:	08009af1 	.word	0x08009af1
 8009a50:	08009af1 	.word	0x08009af1
 8009a54:	08009af1 	.word	0x08009af1
 8009a58:	08009af1 	.word	0x08009af1
 8009a5c:	08009af1 	.word	0x08009af1
 8009a60:	08009af1 	.word	0x08009af1
 8009a64:	08009af1 	.word	0x08009af1
 8009a68:	08009af1 	.word	0x08009af1
 8009a6c:	08009af1 	.word	0x08009af1
 8009a70:	08009ae3 	.word	0x08009ae3
 8009a74:	2b40      	cmp	r3, #64	; 0x40
 8009a76:	d037      	beq.n	8009ae8 <UART_SetConfig+0xa28>
 8009a78:	e03a      	b.n	8009af0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a7a:	f7fb f9c7 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8009a7e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a80:	e03c      	b.n	8009afc <UART_SetConfig+0xa3c>
 8009a82:	bf00      	nop
 8009a84:	003d0900 	.word	0x003d0900
 8009a88:	0800e348 	.word	0x0800e348
 8009a8c:	58024400 	.word	0x58024400
 8009a90:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a94:	f7fb f9d0 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 8009a98:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a9a:	e02f      	b.n	8009afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a9c:	f107 0314 	add.w	r3, r7, #20
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fc fe49 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009aaa:	e027      	b.n	8009afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aac:	f107 0308 	add.w	r3, r7, #8
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fc ff95 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009aba:	e01f      	b.n	8009afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009abc:	4b2c      	ldr	r3, [pc, #176]	; (8009b70 <UART_SetConfig+0xab0>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0320 	and.w	r3, r3, #32
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d009      	beq.n	8009adc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ac8:	4b29      	ldr	r3, [pc, #164]	; (8009b70 <UART_SetConfig+0xab0>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	08db      	lsrs	r3, r3, #3
 8009ace:	f003 0303 	and.w	r3, r3, #3
 8009ad2:	4a28      	ldr	r2, [pc, #160]	; (8009b74 <UART_SetConfig+0xab4>)
 8009ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ada:	e00f      	b.n	8009afc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009adc:	4b25      	ldr	r3, [pc, #148]	; (8009b74 <UART_SetConfig+0xab4>)
 8009ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ae0:	e00c      	b.n	8009afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ae2:	4b25      	ldr	r3, [pc, #148]	; (8009b78 <UART_SetConfig+0xab8>)
 8009ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ae6:	e009      	b.n	8009afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009aee:	e005      	b.n	8009afc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009af0:	2300      	movs	r3, #0
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009afa:	bf00      	nop
    }

    if (pclk != 0U)
 8009afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d021      	beq.n	8009b46 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	4a1d      	ldr	r2, [pc, #116]	; (8009b7c <UART_SetConfig+0xabc>)
 8009b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b10:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	085b      	lsrs	r3, r3, #1
 8009b1a:	441a      	add	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2a:	2b0f      	cmp	r3, #15
 8009b2c:	d908      	bls.n	8009b40 <UART_SetConfig+0xa80>
 8009b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b34:	d204      	bcs.n	8009b40 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b3c:	60da      	str	r2, [r3, #12]
 8009b3e:	e002      	b.n	8009b46 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009b62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3738      	adds	r7, #56	; 0x38
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	58024400 	.word	0x58024400
 8009b74:	03d09000 	.word	0x03d09000
 8009b78:	003d0900 	.word	0x003d0900
 8009b7c:	0800e348 	.word	0x0800e348

08009b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bae:	f003 0302 	and.w	r3, r3, #2
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd0:	f003 0304 	and.w	r3, r3, #4
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00a      	beq.n	8009bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	430a      	orrs	r2, r1
 8009bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf2:	f003 0308 	and.w	r3, r3, #8
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00a      	beq.n	8009c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c14:	f003 0310 	and.w	r3, r3, #16
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00a      	beq.n	8009c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c36:	f003 0320 	and.w	r3, r3, #32
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00a      	beq.n	8009c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	430a      	orrs	r2, r1
 8009c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01a      	beq.n	8009c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c7e:	d10a      	bne.n	8009c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	605a      	str	r2, [r3, #4]
  }
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cd4:	f7f8 fe48 	bl	8002968 <HAL_GetTick>
 8009cd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0308 	and.w	r3, r3, #8
 8009ce4:	2b08      	cmp	r3, #8
 8009ce6:	d10e      	bne.n	8009d06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f82f 	bl	8009d5a <UART_WaitOnFlagUntilTimeout>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e025      	b.n	8009d52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0304 	and.w	r3, r3, #4
 8009d10:	2b04      	cmp	r3, #4
 8009d12:	d10e      	bne.n	8009d32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f819 	bl	8009d5a <UART_WaitOnFlagUntilTimeout>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e00f      	b.n	8009d52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2220      	movs	r2, #32
 8009d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	603b      	str	r3, [r7, #0]
 8009d66:	4613      	mov	r3, r2
 8009d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d6a:	e062      	b.n	8009e32 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d72:	d05e      	beq.n	8009e32 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d74:	f7f8 fdf8 	bl	8002968 <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	69ba      	ldr	r2, [r7, #24]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d302      	bcc.n	8009d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d11d      	bne.n	8009dc6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009d98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 0201 	bic.w	r2, r2, #1
 8009da8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2220      	movs	r2, #32
 8009db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e045      	b.n	8009e52 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d02e      	beq.n	8009e32 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009de2:	d126      	bne.n	8009e32 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009dec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009dfc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0201 	bic.w	r2, r2, #1
 8009e0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2220      	movs	r2, #32
 8009e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2220      	movs	r2, #32
 8009e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e00f      	b.n	8009e52 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69da      	ldr	r2, [r3, #28]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	bf0c      	ite	eq
 8009e42:	2301      	moveq	r3, #1
 8009e44:	2300      	movne	r3, #0
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	461a      	mov	r2, r3
 8009e4a:	79fb      	ldrb	r3, [r7, #7]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d08d      	beq.n	8009d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d101      	bne.n	8009e70 <HAL_UARTEx_DisableFifoMode+0x16>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e027      	b.n	8009ec0 <HAL_UARTEx_DisableFifoMode+0x66>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2224      	movs	r2, #36	; 0x24
 8009e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f022 0201 	bic.w	r2, r2, #1
 8009e96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d101      	bne.n	8009ee4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e02d      	b.n	8009f40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2224      	movs	r2, #36	; 0x24
 8009ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f022 0201 	bic.w	r2, r2, #1
 8009f0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f84f 	bl	8009fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2220      	movs	r2, #32
 8009f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d101      	bne.n	8009f60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	e02d      	b.n	8009fbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2224      	movs	r2, #36	; 0x24
 8009f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f022 0201 	bic.w	r2, r2, #1
 8009f86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f811 	bl	8009fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2220      	movs	r2, #32
 8009fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d108      	bne.n	8009fe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fe4:	e031      	b.n	800a04a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009fe6:	2310      	movs	r3, #16
 8009fe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009fea:	2310      	movs	r3, #16
 8009fec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	0e5b      	lsrs	r3, r3, #25
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	f003 0307 	and.w	r3, r3, #7
 8009ffc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	0f5b      	lsrs	r3, r3, #29
 800a006:	b2db      	uxtb	r3, r3
 800a008:	f003 0307 	and.w	r3, r3, #7
 800a00c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
 800a010:	7b3a      	ldrb	r2, [r7, #12]
 800a012:	4911      	ldr	r1, [pc, #68]	; (800a058 <UARTEx_SetNbDataToProcess+0x94>)
 800a014:	5c8a      	ldrb	r2, [r1, r2]
 800a016:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a01a:	7b3a      	ldrb	r2, [r7, #12]
 800a01c:	490f      	ldr	r1, [pc, #60]	; (800a05c <UARTEx_SetNbDataToProcess+0x98>)
 800a01e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a020:	fb93 f3f2 	sdiv	r3, r3, r2
 800a024:	b29a      	uxth	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	7b7a      	ldrb	r2, [r7, #13]
 800a030:	4909      	ldr	r1, [pc, #36]	; (800a058 <UARTEx_SetNbDataToProcess+0x94>)
 800a032:	5c8a      	ldrb	r2, [r1, r2]
 800a034:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a038:	7b7a      	ldrb	r2, [r7, #13]
 800a03a:	4908      	ldr	r1, [pc, #32]	; (800a05c <UARTEx_SetNbDataToProcess+0x98>)
 800a03c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a03e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a042:	b29a      	uxth	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a04a:	bf00      	nop
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	0800e360 	.word	0x0800e360
 800a05c:	0800e368 	.word	0x0800e368

0800a060 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	6812      	ldr	r2, [r2, #0]
 800a078:	f023 0101 	bic.w	r1, r3, #1
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	2b08      	cmp	r3, #8
 800a088:	d102      	bne.n	800a090 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a08a:	2340      	movs	r3, #64	; 0x40
 800a08c:	617b      	str	r3, [r7, #20]
 800a08e:	e001      	b.n	800a094 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a0a0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a0a6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a0ac:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a0b2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800a0b8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800a0be:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800a0c4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800a0ca:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800a0d0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800a0f8:	4b20      	ldr	r3, [pc, #128]	; (800a17c <FMC_NORSRAM_Init+0x11c>)
 800a0fa:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a102:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a10a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a112:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	43db      	mvns	r3, r3
 800a122:	ea02 0103 	and.w	r1, r2, r3
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	4319      	orrs	r1, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a13c:	d10c      	bne.n	800a158 <FMC_NORSRAM_Init+0xf8>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d008      	beq.n	800a158 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a152:	431a      	orrs	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d006      	beq.n	800a16e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a168:	431a      	orrs	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	371c      	adds	r7, #28
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	0008fb7f 	.word	0x0008fb7f

0800a180 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a180:	b480      	push	{r7}
 800a182:	b087      	sub	sp, #28
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	1c5a      	adds	r2, r3, #1
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a196:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	011b      	lsls	r3, r3, #4
 800a1a4:	431a      	orrs	r2, r3
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	431a      	orrs	r2, r3
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	041b      	lsls	r3, r3, #16
 800a1b4:	431a      	orrs	r2, r3
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	051b      	lsls	r3, r3, #20
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	695b      	ldr	r3, [r3, #20]
 800a1c4:	3b02      	subs	r3, #2
 800a1c6:	061b      	lsls	r3, r3, #24
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	3201      	adds	r2, #1
 800a1d4:	4319      	orrs	r1, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1e8:	d113      	bne.n	800a212 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1f2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	051b      	lsls	r3, r3, #20
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	431a      	orrs	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	371c      	adds	r7, #28
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a234:	d11d      	bne.n	800a272 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a23e:	4b13      	ldr	r3, [pc, #76]	; (800a28c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a240:	4013      	ands	r3, r2
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	6811      	ldr	r1, [r2, #0]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	6852      	ldr	r2, [r2, #4]
 800a24a:	0112      	lsls	r2, r2, #4
 800a24c:	4311      	orrs	r1, r2
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	6892      	ldr	r2, [r2, #8]
 800a252:	0212      	lsls	r2, r2, #8
 800a254:	4311      	orrs	r1, r2
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	6992      	ldr	r2, [r2, #24]
 800a25a:	4311      	orrs	r1, r2
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	68d2      	ldr	r2, [r2, #12]
 800a260:	0412      	lsls	r2, r2, #16
 800a262:	430a      	orrs	r2, r1
 800a264:	ea43 0102 	orr.w	r1, r3, r2
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a270:	e005      	b.n	800a27e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a27a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	cff00000 	.word	0xcff00000

0800a290 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d121      	bne.n	800a2e6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	4b27      	ldr	r3, [pc, #156]	; (800a344 <FMC_SDRAM_Init+0xb4>)
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	6851      	ldr	r1, [r2, #4]
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	6892      	ldr	r2, [r2, #8]
 800a2b2:	4311      	orrs	r1, r2
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	68d2      	ldr	r2, [r2, #12]
 800a2b8:	4311      	orrs	r1, r2
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	6912      	ldr	r2, [r2, #16]
 800a2be:	4311      	orrs	r1, r2
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	6952      	ldr	r2, [r2, #20]
 800a2c4:	4311      	orrs	r1, r2
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	6992      	ldr	r2, [r2, #24]
 800a2ca:	4311      	orrs	r1, r2
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	69d2      	ldr	r2, [r2, #28]
 800a2d0:	4311      	orrs	r1, r2
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	6a12      	ldr	r2, [r2, #32]
 800a2d6:	4311      	orrs	r1, r2
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	e026      	b.n	800a334 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	69d9      	ldr	r1, [r3, #28]
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	4319      	orrs	r1, r3
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fc:	430b      	orrs	r3, r1
 800a2fe:	431a      	orrs	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	4b0e      	ldr	r3, [pc, #56]	; (800a344 <FMC_SDRAM_Init+0xb4>)
 800a30a:	4013      	ands	r3, r2
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	6851      	ldr	r1, [r2, #4]
 800a310:	683a      	ldr	r2, [r7, #0]
 800a312:	6892      	ldr	r2, [r2, #8]
 800a314:	4311      	orrs	r1, r2
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	68d2      	ldr	r2, [r2, #12]
 800a31a:	4311      	orrs	r1, r2
 800a31c:	683a      	ldr	r2, [r7, #0]
 800a31e:	6912      	ldr	r2, [r2, #16]
 800a320:	4311      	orrs	r1, r2
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	6952      	ldr	r2, [r2, #20]
 800a326:	4311      	orrs	r1, r2
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	6992      	ldr	r2, [r2, #24]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	431a      	orrs	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	ffff8000 	.word	0xffff8000

0800a348 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d128      	bne.n	800a3ac <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	1e59      	subs	r1, r3, #1
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	011b      	lsls	r3, r3, #4
 800a370:	4319      	orrs	r1, r3
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	3b01      	subs	r3, #1
 800a378:	021b      	lsls	r3, r3, #8
 800a37a:	4319      	orrs	r1, r3
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	3b01      	subs	r3, #1
 800a382:	031b      	lsls	r3, r3, #12
 800a384:	4319      	orrs	r1, r3
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	041b      	lsls	r3, r3, #16
 800a38e:	4319      	orrs	r1, r3
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	695b      	ldr	r3, [r3, #20]
 800a394:	3b01      	subs	r3, #1
 800a396:	051b      	lsls	r3, r3, #20
 800a398:	4319      	orrs	r1, r3
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	061b      	lsls	r3, r3, #24
 800a3a2:	430b      	orrs	r3, r1
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	609a      	str	r2, [r3, #8]
 800a3aa:	e02d      	b.n	800a408 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	4b19      	ldr	r3, [pc, #100]	; (800a418 <FMC_SDRAM_Timing_Init+0xd0>)
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	68d2      	ldr	r2, [r2, #12]
 800a3b8:	3a01      	subs	r2, #1
 800a3ba:	0311      	lsls	r1, r2, #12
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	6952      	ldr	r2, [r2, #20]
 800a3c0:	3a01      	subs	r2, #1
 800a3c2:	0512      	lsls	r2, r2, #20
 800a3c4:	430a      	orrs	r2, r1
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	1e59      	subs	r1, r3, #1
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	011b      	lsls	r3, r3, #4
 800a3e2:	4319      	orrs	r1, r3
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	021b      	lsls	r3, r3, #8
 800a3ec:	4319      	orrs	r1, r3
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	041b      	lsls	r3, r3, #16
 800a3f6:	4319      	orrs	r1, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	061b      	lsls	r3, r3, #24
 800a400:	430b      	orrs	r3, r1
 800a402:	431a      	orrs	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	ff0f0fff 	.word	0xff0f0fff

0800a41c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a41c:	b084      	sub	sp, #16
 800a41e:	b480      	push	{r7}
 800a420:	b085      	sub	sp, #20
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	f107 001c 	add.w	r0, r7, #28
 800a42a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a432:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a434:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a436:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800a43a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800a43e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800a442:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	4313      	orrs	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	4b07      	ldr	r3, [pc, #28]	; (800a46c <SDMMC_Init+0x50>)
 800a450:	4013      	ands	r3, r2
 800a452:	68fa      	ldr	r2, [r7, #12]
 800a454:	431a      	orrs	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	b004      	add	sp, #16
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	ffc02c00 	.word	0xffc02c00

0800a470 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a47e:	4618      	mov	r0, r3
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a48a:	b480      	push	{r7}
 800a48c:	b083      	sub	sp, #12
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f043 0203 	orr.w	r2, r3, #3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0303 	and.w	r3, r3, #3
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a4e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a4ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a4f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68da      	ldr	r2, [r3, #12]
 800a4fe:	4b06      	ldr	r3, [pc, #24]	; (800a518 <SDMMC_SendCommand+0x50>)
 800a500:	4013      	ands	r3, r2
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	431a      	orrs	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3714      	adds	r7, #20
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	fffee0c0 	.word	0xfffee0c0

0800a51c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	b2db      	uxtb	r3, r3
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a536:	b480      	push	{r7}
 800a538:	b085      	sub	sp, #20
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3314      	adds	r3, #20
 800a544:	461a      	mov	r2, r3
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	4413      	add	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a582:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a588:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a58e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	4313      	orrs	r3, r2
 800a594:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	431a      	orrs	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0

}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b088      	sub	sp, #32
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a5c2:	2310      	movs	r3, #16
 800a5c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5d6:	f107 0308 	add.w	r3, r7, #8
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7ff ff73 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a5e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5e6:	2110      	movs	r1, #16
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 fa21 	bl	800aa30 <SDMMC_GetCmdResp1>
 800a5ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5f0:	69fb      	ldr	r3, [r7, #28]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3720      	adds	r7, #32
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b088      	sub	sp, #32
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a608:	2311      	movs	r3, #17
 800a60a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a60c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a612:	2300      	movs	r3, #0
 800a614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a61a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a61c:	f107 0308 	add.w	r3, r7, #8
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7ff ff50 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a628:	f241 3288 	movw	r2, #5000	; 0x1388
 800a62c:	2111      	movs	r1, #17
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f9fe 	bl	800aa30 <SDMMC_GetCmdResp1>
 800a634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a636:	69fb      	ldr	r3, [r7, #28]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3720      	adds	r7, #32
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a64e:	2312      	movs	r3, #18
 800a650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a652:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a65c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a660:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a662:	f107 0308 	add.w	r3, r7, #8
 800a666:	4619      	mov	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f7ff ff2d 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a66e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a672:	2112      	movs	r1, #18
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f9db 	bl	800aa30 <SDMMC_GetCmdResp1>
 800a67a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a67c:	69fb      	ldr	r3, [r7, #28]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3720      	adds	r7, #32
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b088      	sub	sp, #32
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a694:	2318      	movs	r3, #24
 800a696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a69c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6a8:	f107 0308 	add.w	r3, r7, #8
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff ff0a 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a6b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6b8:	2118      	movs	r1, #24
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f9b8 	bl	800aa30 <SDMMC_GetCmdResp1>
 800a6c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6c2:	69fb      	ldr	r3, [r7, #28]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3720      	adds	r7, #32
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a6da:	2319      	movs	r3, #25
 800a6dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6ee:	f107 0308 	add.w	r3, r7, #8
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff fee7 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a6fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6fe:	2119      	movs	r1, #25
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f995 	bl	800aa30 <SDMMC_GetCmdResp1>
 800a706:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a708:	69fb      	ldr	r3, [r7, #28]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3720      	adds	r7, #32
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b088      	sub	sp, #32
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a720:	2307      	movs	r3, #7
 800a722:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a724:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a72a:	2300      	movs	r3, #0
 800a72c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a72e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a732:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a734:	f107 0308 	add.w	r3, r7, #8
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f7ff fec4 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a740:	f241 3288 	movw	r2, #5000	; 0x1388
 800a744:	2107      	movs	r1, #7
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f972 	bl	800aa30 <SDMMC_GetCmdResp1>
 800a74c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a74e:	69fb      	ldr	r3, [r7, #28]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3720      	adds	r7, #32
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b088      	sub	sp, #32
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a760:	2300      	movs	r3, #0
 800a762:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a764:	2300      	movs	r3, #0
 800a766:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a768:	2300      	movs	r3, #0
 800a76a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a76c:	2300      	movs	r3, #0
 800a76e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a774:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a776:	f107 0308 	add.w	r3, r7, #8
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff fea3 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fb96 	bl	800aeb4 <SDMMC_GetCmdError>
 800a788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a78a:	69fb      	ldr	r3, [r7, #28]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3720      	adds	r7, #32
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a79c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a7a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a7a2:	2308      	movs	r3, #8
 800a7a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7b6:	f107 0308 	add.w	r3, r7, #8
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7ff fe83 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fb28 	bl	800ae18 <SDMMC_GetCmdResp7>
 800a7c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ca:	69fb      	ldr	r3, [r7, #28]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3720      	adds	r7, #32
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a7e2:	2337      	movs	r3, #55	; 0x37
 800a7e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7f6:	f107 0308 	add.w	r3, r7, #8
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7ff fe63 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a802:	f241 3288 	movw	r2, #5000	; 0x1388
 800a806:	2137      	movs	r1, #55	; 0x37
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f911 	bl	800aa30 <SDMMC_GetCmdResp1>
 800a80e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a810:	69fb      	ldr	r3, [r7, #28]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b088      	sub	sp, #32
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a828:	2329      	movs	r3, #41	; 0x29
 800a82a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a82c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a832:	2300      	movs	r3, #0
 800a834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a83a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a83c:	f107 0308 	add.w	r3, r7, #8
 800a840:	4619      	mov	r1, r3
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7ff fe40 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fa2d 	bl	800aca8 <SDMMC_GetCmdResp3>
 800a84e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a850:	69fb      	ldr	r3, [r7, #28]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3720      	adds	r7, #32
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b088      	sub	sp, #32
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a868:	2306      	movs	r3, #6
 800a86a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a86c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a872:	2300      	movs	r3, #0
 800a874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a87a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a87c:	f107 0308 	add.w	r3, r7, #8
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7ff fe20 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a888:	f241 3288 	movw	r2, #5000	; 0x1388
 800a88c:	2106      	movs	r1, #6
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f8ce 	bl	800aa30 <SDMMC_GetCmdResp1>
 800a894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a896:	69fb      	ldr	r3, [r7, #28]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3720      	adds	r7, #32
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b088      	sub	sp, #32
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a8ac:	2333      	movs	r3, #51	; 0x33
 800a8ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8c0:	f107 0308 	add.w	r3, r7, #8
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff fdfe 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a8cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8d0:	2133      	movs	r1, #51	; 0x33
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f8ac 	bl	800aa30 <SDMMC_GetCmdResp1>
 800a8d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8da:	69fb      	ldr	r3, [r7, #28]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3720      	adds	r7, #32
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b088      	sub	sp, #32
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a8f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a8f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a902:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a904:	f107 0308 	add.w	r3, r7, #8
 800a908:	4619      	mov	r1, r3
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff fddc 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f97f 	bl	800ac14 <SDMMC_GetCmdResp2>
 800a916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a918:	69fb      	ldr	r3, [r7, #28]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3720      	adds	r7, #32
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b088      	sub	sp, #32
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a930:	2309      	movs	r3, #9
 800a932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a934:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a93a:	2300      	movs	r3, #0
 800a93c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a93e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a942:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a944:	f107 0308 	add.w	r3, r7, #8
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff fdbc 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f95f 	bl	800ac14 <SDMMC_GetCmdResp2>
 800a956:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a958:	69fb      	ldr	r3, [r7, #28]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3720      	adds	r7, #32
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b088      	sub	sp, #32
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a96c:	2300      	movs	r3, #0
 800a96e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a970:	2303      	movs	r3, #3
 800a972:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a974:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a97a:	2300      	movs	r3, #0
 800a97c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a97e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a982:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a984:	f107 0308 	add.w	r3, r7, #8
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7ff fd9c 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	2103      	movs	r1, #3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f9c7 	bl	800ad28 <SDMMC_GetCmdResp6>
 800a99a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a99c:	69fb      	ldr	r3, [r7, #28]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3720      	adds	r7, #32
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b088      	sub	sp, #32
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a9b4:	230d      	movs	r3, #13
 800a9b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9c8:	f107 0308 	add.w	r3, r7, #8
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7ff fd7a 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a9d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9d8:	210d      	movs	r1, #13
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f828 	bl	800aa30 <SDMMC_GetCmdResp1>
 800a9e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9e2:	69fb      	ldr	r3, [r7, #28]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3720      	adds	r7, #32
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b088      	sub	sp, #32
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a9f8:	230d      	movs	r3, #13
 800a9fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa02:	2300      	movs	r3, #0
 800aa04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa0c:	f107 0308 	add.w	r3, r7, #8
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff fd58 	bl	800a4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800aa18:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa1c:	210d      	movs	r1, #13
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f806 	bl	800aa30 <SDMMC_GetCmdResp1>
 800aa24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa26:	69fb      	ldr	r3, [r7, #28]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3720      	adds	r7, #32
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b088      	sub	sp, #32
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	607a      	str	r2, [r7, #4]
 800aa3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800aa3e:	4b70      	ldr	r3, [pc, #448]	; (800ac00 <SDMMC_GetCmdResp1+0x1d0>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a70      	ldr	r2, [pc, #448]	; (800ac04 <SDMMC_GetCmdResp1+0x1d4>)
 800aa44:	fba2 2303 	umull	r2, r3, r2, r3
 800aa48:	0a5a      	lsrs	r2, r3, #9
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	fb02 f303 	mul.w	r3, r2, r3
 800aa50:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	1e5a      	subs	r2, r3, #1
 800aa56:	61fa      	str	r2, [r7, #28]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d102      	bne.n	800aa62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa60:	e0c9      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa66:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800aa68:	69ba      	ldr	r2, [r7, #24]
 800aa6a:	4b67      	ldr	r3, [pc, #412]	; (800ac08 <SDMMC_GetCmdResp1+0x1d8>)
 800aa6c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0ef      	beq.n	800aa52 <SDMMC_GetCmdResp1+0x22>
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1ea      	bne.n	800aa52 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa80:	f003 0304 	and.w	r3, r3, #4
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d004      	beq.n	800aa92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2204      	movs	r2, #4
 800aa8c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa8e:	2304      	movs	r3, #4
 800aa90:	e0b1      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa96:	f003 0301 	and.w	r3, r3, #1
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d004      	beq.n	800aaa8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e0a6      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4a58      	ldr	r2, [pc, #352]	; (800ac0c <SDMMC_GetCmdResp1+0x1dc>)
 800aaac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f7ff fd34 	bl	800a51c <SDMMC_GetCommandResponse>
 800aab4:	4603      	mov	r3, r0
 800aab6:	461a      	mov	r2, r3
 800aab8:	7afb      	ldrb	r3, [r7, #11]
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d001      	beq.n	800aac2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e099      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800aac2:	2100      	movs	r1, #0
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f7ff fd36 	bl	800a536 <SDMMC_GetResponse>
 800aaca:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	4b50      	ldr	r3, [pc, #320]	; (800ac10 <SDMMC_GetCmdResp1+0x1e0>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aad6:	2300      	movs	r3, #0
 800aad8:	e08d      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	da02      	bge.n	800aae6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aae0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aae4:	e087      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aaf0:	2340      	movs	r3, #64	; 0x40
 800aaf2:	e080      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aafe:	2380      	movs	r3, #128	; 0x80
 800ab00:	e079      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ab0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab10:	e071      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ab1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab20:	e069      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ab2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab30:	e061      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ab3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab40:	e059      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d002      	beq.n	800ab52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab50:	e051      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab60:	e049      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ab6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab70:	e041      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ab7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab80:	e039      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ab8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab90:	e031      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ab9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aba0:	e029      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800abac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800abb0:	e021      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800abbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800abc0:	e019      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d002      	beq.n	800abd2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800abcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800abd0:	e011      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800abdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800abe0:	e009      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f003 0308 	and.w	r3, r3, #8
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800abec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800abf0:	e001      	b.n	800abf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800abf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3720      	adds	r7, #32
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	24000000 	.word	0x24000000
 800ac04:	10624dd3 	.word	0x10624dd3
 800ac08:	00200045 	.word	0x00200045
 800ac0c:	002000c5 	.word	0x002000c5
 800ac10:	fdffe008 	.word	0xfdffe008

0800ac14 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ac1c:	4b1f      	ldr	r3, [pc, #124]	; (800ac9c <SDMMC_GetCmdResp2+0x88>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a1f      	ldr	r2, [pc, #124]	; (800aca0 <SDMMC_GetCmdResp2+0x8c>)
 800ac22:	fba2 2303 	umull	r2, r3, r2, r3
 800ac26:	0a5b      	lsrs	r3, r3, #9
 800ac28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac2c:	fb02 f303 	mul.w	r3, r2, r3
 800ac30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	1e5a      	subs	r2, r3, #1
 800ac36:	60fa      	str	r2, [r7, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac40:	e026      	b.n	800ac90 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac46:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d0ef      	beq.n	800ac32 <SDMMC_GetCmdResp2+0x1e>
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1ea      	bne.n	800ac32 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac60:	f003 0304 	and.w	r3, r3, #4
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d004      	beq.n	800ac72 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2204      	movs	r2, #4
 800ac6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac6e:	2304      	movs	r3, #4
 800ac70:	e00e      	b.n	800ac90 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac76:	f003 0301 	and.w	r3, r3, #1
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d004      	beq.n	800ac88 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2201      	movs	r2, #1
 800ac82:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e003      	b.n	800ac90 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a06      	ldr	r2, [pc, #24]	; (800aca4 <SDMMC_GetCmdResp2+0x90>)
 800ac8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	24000000 	.word	0x24000000
 800aca0:	10624dd3 	.word	0x10624dd3
 800aca4:	002000c5 	.word	0x002000c5

0800aca8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800acb0:	4b1a      	ldr	r3, [pc, #104]	; (800ad1c <SDMMC_GetCmdResp3+0x74>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a1a      	ldr	r2, [pc, #104]	; (800ad20 <SDMMC_GetCmdResp3+0x78>)
 800acb6:	fba2 2303 	umull	r2, r3, r2, r3
 800acba:	0a5b      	lsrs	r3, r3, #9
 800acbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc0:	fb02 f303 	mul.w	r3, r2, r3
 800acc4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	1e5a      	subs	r2, r3, #1
 800acca:	60fa      	str	r2, [r7, #12]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acd4:	e01b      	b.n	800ad0e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acda:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d0ef      	beq.n	800acc6 <SDMMC_GetCmdResp3+0x1e>
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1ea      	bne.n	800acc6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acf4:	f003 0304 	and.w	r3, r3, #4
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d004      	beq.n	800ad06 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2204      	movs	r2, #4
 800ad00:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad02:	2304      	movs	r3, #4
 800ad04:	e003      	b.n	800ad0e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a06      	ldr	r2, [pc, #24]	; (800ad24 <SDMMC_GetCmdResp3+0x7c>)
 800ad0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3714      	adds	r7, #20
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	24000000 	.word	0x24000000
 800ad20:	10624dd3 	.word	0x10624dd3
 800ad24:	002000c5 	.word	0x002000c5

0800ad28 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b088      	sub	sp, #32
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	460b      	mov	r3, r1
 800ad32:	607a      	str	r2, [r7, #4]
 800ad34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ad36:	4b35      	ldr	r3, [pc, #212]	; (800ae0c <SDMMC_GetCmdResp6+0xe4>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a35      	ldr	r2, [pc, #212]	; (800ae10 <SDMMC_GetCmdResp6+0xe8>)
 800ad3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad40:	0a5b      	lsrs	r3, r3, #9
 800ad42:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad46:	fb02 f303 	mul.w	r3, r2, r3
 800ad4a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	1e5a      	subs	r2, r3, #1
 800ad50:	61fa      	str	r2, [r7, #28]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d102      	bne.n	800ad5c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad5a:	e052      	b.n	800ae02 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad60:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d0ef      	beq.n	800ad4c <SDMMC_GetCmdResp6+0x24>
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1ea      	bne.n	800ad4c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad7a:	f003 0304 	and.w	r3, r3, #4
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d004      	beq.n	800ad8c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2204      	movs	r2, #4
 800ad86:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad88:	2304      	movs	r3, #4
 800ad8a:	e03a      	b.n	800ae02 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d004      	beq.n	800ada2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e02f      	b.n	800ae02 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f7ff fbba 	bl	800a51c <SDMMC_GetCommandResponse>
 800ada8:	4603      	mov	r3, r0
 800adaa:	461a      	mov	r2, r3
 800adac:	7afb      	ldrb	r3, [r7, #11]
 800adae:	4293      	cmp	r3, r2
 800adb0:	d001      	beq.n	800adb6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e025      	b.n	800ae02 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4a16      	ldr	r2, [pc, #88]	; (800ae14 <SDMMC_GetCmdResp6+0xec>)
 800adba:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800adbc:	2100      	movs	r1, #0
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f7ff fbb9 	bl	800a536 <SDMMC_GetResponse>
 800adc4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d106      	bne.n	800adde <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	0c1b      	lsrs	r3, r3, #16
 800add4:	b29a      	uxth	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800adda:	2300      	movs	r3, #0
 800addc:	e011      	b.n	800ae02 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ade8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adec:	e009      	b.n	800ae02 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800adf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adfc:	e001      	b.n	800ae02 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800adfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3720      	adds	r7, #32
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	24000000 	.word	0x24000000
 800ae10:	10624dd3 	.word	0x10624dd3
 800ae14:	002000c5 	.word	0x002000c5

0800ae18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ae20:	4b22      	ldr	r3, [pc, #136]	; (800aeac <SDMMC_GetCmdResp7+0x94>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a22      	ldr	r2, [pc, #136]	; (800aeb0 <SDMMC_GetCmdResp7+0x98>)
 800ae26:	fba2 2303 	umull	r2, r3, r2, r3
 800ae2a:	0a5b      	lsrs	r3, r3, #9
 800ae2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae30:	fb02 f303 	mul.w	r3, r2, r3
 800ae34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	1e5a      	subs	r2, r3, #1
 800ae3a:	60fa      	str	r2, [r7, #12]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae44:	e02c      	b.n	800aea0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae4a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d0ef      	beq.n	800ae36 <SDMMC_GetCmdResp7+0x1e>
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1ea      	bne.n	800ae36 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d004      	beq.n	800ae76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2204      	movs	r2, #4
 800ae70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae72:	2304      	movs	r3, #4
 800ae74:	e014      	b.n	800aea0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d004      	beq.n	800ae8c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2201      	movs	r2, #1
 800ae86:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e009      	b.n	800aea0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2240      	movs	r2, #64	; 0x40
 800ae9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ae9e:	2300      	movs	r3, #0

}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	24000000 	.word	0x24000000
 800aeb0:	10624dd3 	.word	0x10624dd3

0800aeb4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800aebc:	4b11      	ldr	r3, [pc, #68]	; (800af04 <SDMMC_GetCmdError+0x50>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a11      	ldr	r2, [pc, #68]	; (800af08 <SDMMC_GetCmdError+0x54>)
 800aec2:	fba2 2303 	umull	r2, r3, r2, r3
 800aec6:	0a5b      	lsrs	r3, r3, #9
 800aec8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aecc:	fb02 f303 	mul.w	r3, r2, r3
 800aed0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	1e5a      	subs	r2, r3, #1
 800aed6:	60fa      	str	r2, [r7, #12]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d102      	bne.n	800aee2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aedc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aee0:	e009      	b.n	800aef6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d0f1      	beq.n	800aed2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a06      	ldr	r2, [pc, #24]	; (800af0c <SDMMC_GetCmdError+0x58>)
 800aef2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	24000000 	.word	0x24000000
 800af08:	10624dd3 	.word	0x10624dd3
 800af0c:	002000c5 	.word	0x002000c5

0800af10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800af14:	4904      	ldr	r1, [pc, #16]	; (800af28 <MX_FATFS_Init+0x18>)
 800af16:	4805      	ldr	r0, [pc, #20]	; (800af2c <MX_FATFS_Init+0x1c>)
 800af18:	f000 fa62 	bl	800b3e0 <FATFS_LinkDriver>
 800af1c:	4603      	mov	r3, r0
 800af1e:	461a      	mov	r2, r3
 800af20:	4b03      	ldr	r3, [pc, #12]	; (800af30 <MX_FATFS_Init+0x20>)
 800af22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800af24:	bf00      	nop
 800af26:	bd80      	pop	{r7, pc}
 800af28:	24004d28 	.word	0x24004d28
 800af2c:	0800e370 	.word	0x0800e370
 800af30:	24004d24 	.word	0x24004d24

0800af34 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800af3e:	f000 f871 	bl	800b024 <BSP_SD_IsDetected>
 800af42:	4603      	mov	r3, r0
 800af44:	2b01      	cmp	r3, #1
 800af46:	d001      	beq.n	800af4c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800af48:	2302      	movs	r3, #2
 800af4a:	e012      	b.n	800af72 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800af4c:	480b      	ldr	r0, [pc, #44]	; (800af7c <BSP_SD_Init+0x48>)
 800af4e:	f7fc f9ac 	bl	80072aa <HAL_SD_Init>
 800af52:	4603      	mov	r3, r0
 800af54:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d109      	bne.n	800af70 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800af5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800af60:	4806      	ldr	r0, [pc, #24]	; (800af7c <BSP_SD_Init+0x48>)
 800af62:	f7fc fe8f 	bl	8007c84 <HAL_SD_ConfigWideBusOperation>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d001      	beq.n	800af70 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800af70:	79fb      	ldrb	r3, [r7, #7]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	24004af4 	.word	0x24004af4

0800af80 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	68f9      	ldr	r1, [r7, #12]
 800af96:	4806      	ldr	r0, [pc, #24]	; (800afb0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800af98:	f7fc fa9e 	bl	80074d8 <HAL_SD_ReadBlocks_DMA>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3718      	adds	r7, #24
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	24004af4 	.word	0x24004af4

0800afb4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	68f9      	ldr	r1, [r7, #12]
 800afca:	4806      	ldr	r0, [pc, #24]	; (800afe4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800afcc:	f7fc fb2c 	bl	8007628 <HAL_SD_WriteBlocks_DMA>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afda:	7dfb      	ldrb	r3, [r7, #23]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	24004af4 	.word	0x24004af4

0800afe8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800afec:	4805      	ldr	r0, [pc, #20]	; (800b004 <BSP_SD_GetCardState+0x1c>)
 800afee:	f7fc ff59 	bl	8007ea4 <HAL_SD_GetCardState>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	bf14      	ite	ne
 800aff8:	2301      	movne	r3, #1
 800affa:	2300      	moveq	r3, #0
 800affc:	b2db      	uxtb	r3, r3
}
 800affe:	4618      	mov	r0, r3
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	24004af4 	.word	0x24004af4

0800b008 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b010:	6879      	ldr	r1, [r7, #4]
 800b012:	4803      	ldr	r0, [pc, #12]	; (800b020 <BSP_SD_GetCardInfo+0x18>)
 800b014:	f7fc fe0a 	bl	8007c2c <HAL_SD_GetCardInfo>
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	24004af4 	.word	0x24004af4

0800b024 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b02a:	2301      	movs	r3, #1
 800b02c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b02e:	f000 f80b 	bl	800b048 <BSP_PlatformIsDetected>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b038:	2300      	movs	r3, #0
 800b03a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b03c:	79fb      	ldrb	r3, [r7, #7]
 800b03e:	b2db      	uxtb	r3, r3
}
 800b040:	4618      	mov	r0, r3
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b04e:	2301      	movs	r3, #1
 800b050:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b056:	4806      	ldr	r0, [pc, #24]	; (800b070 <BSP_PlatformIsDetected+0x28>)
 800b058:	f7f8 fefc 	bl	8003e54 <HAL_GPIO_ReadPin>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b062:	2300      	movs	r3, #0
 800b064:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b066:	79fb      	ldrb	r3, [r7, #7]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	58020000 	.word	0x58020000

0800b074 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b07c:	f7f7 fc74 	bl	8002968 <HAL_GetTick>
 800b080:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b082:	e006      	b.n	800b092 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b084:	f7ff ffb0 	bl	800afe8 <BSP_SD_GetCardState>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	e009      	b.n	800b0a6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b092:	f7f7 fc69 	bl	8002968 <HAL_GetTick>
 800b096:	4602      	mov	r2, r0
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d8f0      	bhi.n	800b084 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b0a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
	...

0800b0b0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b0ba:	4b0b      	ldr	r3, [pc, #44]	; (800b0e8 <SD_CheckStatus+0x38>)
 800b0bc:	2201      	movs	r2, #1
 800b0be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b0c0:	f7ff ff92 	bl	800afe8 <BSP_SD_GetCardState>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d107      	bne.n	800b0da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b0ca:	4b07      	ldr	r3, [pc, #28]	; (800b0e8 <SD_CheckStatus+0x38>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	f023 0301 	bic.w	r3, r3, #1
 800b0d4:	b2da      	uxtb	r2, r3
 800b0d6:	4b04      	ldr	r3, [pc, #16]	; (800b0e8 <SD_CheckStatus+0x38>)
 800b0d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b0da:	4b03      	ldr	r3, [pc, #12]	; (800b0e8 <SD_CheckStatus+0x38>)
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	b2db      	uxtb	r3, r3
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	2400000d 	.word	0x2400000d

0800b0ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b0f6:	f7ff ff1d 	bl	800af34 <BSP_SD_Init>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d107      	bne.n	800b110 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b100:	79fb      	ldrb	r3, [r7, #7]
 800b102:	4618      	mov	r0, r3
 800b104:	f7ff ffd4 	bl	800b0b0 <SD_CheckStatus>
 800b108:	4603      	mov	r3, r0
 800b10a:	461a      	mov	r2, r3
 800b10c:	4b04      	ldr	r3, [pc, #16]	; (800b120 <SD_initialize+0x34>)
 800b10e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b110:	4b03      	ldr	r3, [pc, #12]	; (800b120 <SD_initialize+0x34>)
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	b2db      	uxtb	r3, r3
}
 800b116:	4618      	mov	r0, r3
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	2400000d 	.word	0x2400000d

0800b124 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b12e:	79fb      	ldrb	r3, [r7, #7]
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff ffbd 	bl	800b0b0 <SD_CheckStatus>
 800b136:	4603      	mov	r3, r0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	60b9      	str	r1, [r7, #8]
 800b148:	607a      	str	r2, [r7, #4]
 800b14a:	603b      	str	r3, [r7, #0]
 800b14c:	4603      	mov	r3, r0
 800b14e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b154:	f247 5030 	movw	r0, #30000	; 0x7530
 800b158:	f7ff ff8c 	bl	800b074 <SD_CheckStatusWithTimeout>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	da01      	bge.n	800b166 <SD_read+0x26>
  {
    return res;
 800b162:	7dfb      	ldrb	r3, [r7, #23]
 800b164:	e03b      	b.n	800b1de <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b166:	683a      	ldr	r2, [r7, #0]
 800b168:	6879      	ldr	r1, [r7, #4]
 800b16a:	68b8      	ldr	r0, [r7, #8]
 800b16c:	f7ff ff08 	bl	800af80 <BSP_SD_ReadBlocks_DMA>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d132      	bne.n	800b1dc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b176:	4b1c      	ldr	r3, [pc, #112]	; (800b1e8 <SD_read+0xa8>)
 800b178:	2200      	movs	r2, #0
 800b17a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b17c:	f7f7 fbf4 	bl	8002968 <HAL_GetTick>
 800b180:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b182:	bf00      	nop
 800b184:	4b18      	ldr	r3, [pc, #96]	; (800b1e8 <SD_read+0xa8>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d108      	bne.n	800b19e <SD_read+0x5e>
 800b18c:	f7f7 fbec 	bl	8002968 <HAL_GetTick>
 800b190:	4602      	mov	r2, r0
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	f247 522f 	movw	r2, #29999	; 0x752f
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d9f2      	bls.n	800b184 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b19e:	4b12      	ldr	r3, [pc, #72]	; (800b1e8 <SD_read+0xa8>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d102      	bne.n	800b1ac <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	75fb      	strb	r3, [r7, #23]
 800b1aa:	e017      	b.n	800b1dc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b1ac:	4b0e      	ldr	r3, [pc, #56]	; (800b1e8 <SD_read+0xa8>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b1b2:	f7f7 fbd9 	bl	8002968 <HAL_GetTick>
 800b1b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1b8:	e007      	b.n	800b1ca <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b1ba:	f7ff ff15 	bl	800afe8 <BSP_SD_GetCardState>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d102      	bne.n	800b1ca <SD_read+0x8a>
          {
            res = RES_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b1c8:	e008      	b.n	800b1dc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1ca:	f7f7 fbcd 	bl	8002968 <HAL_GetTick>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	f247 522f 	movw	r2, #29999	; 0x752f
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d9ee      	bls.n	800b1ba <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3718      	adds	r7, #24
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	240000a4 	.word	0x240000a4

0800b1ec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60b9      	str	r1, [r7, #8]
 800b1f4:	607a      	str	r2, [r7, #4]
 800b1f6:	603b      	str	r3, [r7, #0]
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b200:	4b24      	ldr	r3, [pc, #144]	; (800b294 <SD_write+0xa8>)
 800b202:	2200      	movs	r2, #0
 800b204:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b206:	f247 5030 	movw	r0, #30000	; 0x7530
 800b20a:	f7ff ff33 	bl	800b074 <SD_CheckStatusWithTimeout>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	da01      	bge.n	800b218 <SD_write+0x2c>
  {
    return res;
 800b214:	7dfb      	ldrb	r3, [r7, #23]
 800b216:	e038      	b.n	800b28a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	6879      	ldr	r1, [r7, #4]
 800b21c:	68b8      	ldr	r0, [r7, #8]
 800b21e:	f7ff fec9 	bl	800afb4 <BSP_SD_WriteBlocks_DMA>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d12f      	bne.n	800b288 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b228:	f7f7 fb9e 	bl	8002968 <HAL_GetTick>
 800b22c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b22e:	bf00      	nop
 800b230:	4b18      	ldr	r3, [pc, #96]	; (800b294 <SD_write+0xa8>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d108      	bne.n	800b24a <SD_write+0x5e>
 800b238:	f7f7 fb96 	bl	8002968 <HAL_GetTick>
 800b23c:	4602      	mov	r2, r0
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	f247 522f 	movw	r2, #29999	; 0x752f
 800b246:	4293      	cmp	r3, r2
 800b248:	d9f2      	bls.n	800b230 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b24a:	4b12      	ldr	r3, [pc, #72]	; (800b294 <SD_write+0xa8>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d102      	bne.n	800b258 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	75fb      	strb	r3, [r7, #23]
 800b256:	e017      	b.n	800b288 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b258:	4b0e      	ldr	r3, [pc, #56]	; (800b294 <SD_write+0xa8>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b25e:	f7f7 fb83 	bl	8002968 <HAL_GetTick>
 800b262:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b264:	e007      	b.n	800b276 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b266:	f7ff febf 	bl	800afe8 <BSP_SD_GetCardState>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d102      	bne.n	800b276 <SD_write+0x8a>
          {
            res = RES_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	75fb      	strb	r3, [r7, #23]
            break;
 800b274:	e008      	b.n	800b288 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b276:	f7f7 fb77 	bl	8002968 <HAL_GetTick>
 800b27a:	4602      	mov	r2, r0
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	f247 522f 	movw	r2, #29999	; 0x752f
 800b284:	4293      	cmp	r3, r2
 800b286:	d9ee      	bls.n	800b266 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b288:	7dfb      	ldrb	r3, [r7, #23]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3718      	adds	r7, #24
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	240000a0 	.word	0x240000a0

0800b298 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08c      	sub	sp, #48	; 0x30
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	603a      	str	r2, [r7, #0]
 800b2a2:	71fb      	strb	r3, [r7, #7]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b2ae:	4b25      	ldr	r3, [pc, #148]	; (800b344 <SD_ioctl+0xac>)
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	f003 0301 	and.w	r3, r3, #1
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d001      	beq.n	800b2c0 <SD_ioctl+0x28>
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e03c      	b.n	800b33a <SD_ioctl+0xa2>

  switch (cmd)
 800b2c0:	79bb      	ldrb	r3, [r7, #6]
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	d834      	bhi.n	800b330 <SD_ioctl+0x98>
 800b2c6:	a201      	add	r2, pc, #4	; (adr r2, 800b2cc <SD_ioctl+0x34>)
 800b2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2cc:	0800b2dd 	.word	0x0800b2dd
 800b2d0:	0800b2e5 	.word	0x0800b2e5
 800b2d4:	0800b2fd 	.word	0x0800b2fd
 800b2d8:	0800b317 	.word	0x0800b317
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b2e2:	e028      	b.n	800b336 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b2e4:	f107 0308 	add.w	r3, r7, #8
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff fe8d 	bl	800b008 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b2ee:	6a3a      	ldr	r2, [r7, #32]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b2fa:	e01c      	b.n	800b336 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b2fc:	f107 0308 	add.w	r3, r7, #8
 800b300:	4618      	mov	r0, r3
 800b302:	f7ff fe81 	bl	800b008 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b308:	b29a      	uxth	r2, r3
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b314:	e00f      	b.n	800b336 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b316:	f107 0308 	add.w	r3, r7, #8
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7ff fe74 	bl	800b008 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b322:	0a5a      	lsrs	r2, r3, #9
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b328:	2300      	movs	r3, #0
 800b32a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b32e:	e002      	b.n	800b336 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b330:	2304      	movs	r3, #4
 800b332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3730      	adds	r7, #48	; 0x30
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	2400000d 	.word	0x2400000d

0800b348 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b348:	b480      	push	{r7}
 800b34a:	b087      	sub	sp, #28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	4613      	mov	r3, r2
 800b354:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b356:	2301      	movs	r3, #1
 800b358:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b35e:	4b1f      	ldr	r3, [pc, #124]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b360:	7a5b      	ldrb	r3, [r3, #9]
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	d131      	bne.n	800b3cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b368:	4b1c      	ldr	r3, [pc, #112]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b36a:	7a5b      	ldrb	r3, [r3, #9]
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	461a      	mov	r2, r3
 800b370:	4b1a      	ldr	r3, [pc, #104]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b372:	2100      	movs	r1, #0
 800b374:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b376:	4b19      	ldr	r3, [pc, #100]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b378:	7a5b      	ldrb	r3, [r3, #9]
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	4a17      	ldr	r2, [pc, #92]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b386:	4b15      	ldr	r3, [pc, #84]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b388:	7a5b      	ldrb	r3, [r3, #9]
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	461a      	mov	r2, r3
 800b38e:	4b13      	ldr	r3, [pc, #76]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b390:	4413      	add	r3, r2
 800b392:	79fa      	ldrb	r2, [r7, #7]
 800b394:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b396:	4b11      	ldr	r3, [pc, #68]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b398:	7a5b      	ldrb	r3, [r3, #9]
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	b2d1      	uxtb	r1, r2
 800b3a0:	4a0e      	ldr	r2, [pc, #56]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b3a2:	7251      	strb	r1, [r2, #9]
 800b3a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b3a6:	7dbb      	ldrb	r3, [r7, #22]
 800b3a8:	3330      	adds	r3, #48	; 0x30
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	223a      	movs	r2, #58	; 0x3a
 800b3b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	3302      	adds	r3, #2
 800b3bc:	222f      	movs	r2, #47	; 0x2f
 800b3be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	3303      	adds	r3, #3
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	371c      	adds	r7, #28
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	240000a8 	.word	0x240000a8

0800b3e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7ff ffaa 	bl	800b348 <FATFS_LinkDriverEx>
 800b3f4:	4603      	mov	r3, r0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
	...

0800b400 <__NVIC_SetPriority>:
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	4603      	mov	r3, r0
 800b408:	6039      	str	r1, [r7, #0]
 800b40a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b40c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b410:	2b00      	cmp	r3, #0
 800b412:	db0a      	blt.n	800b42a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	b2da      	uxtb	r2, r3
 800b418:	490c      	ldr	r1, [pc, #48]	; (800b44c <__NVIC_SetPriority+0x4c>)
 800b41a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b41e:	0112      	lsls	r2, r2, #4
 800b420:	b2d2      	uxtb	r2, r2
 800b422:	440b      	add	r3, r1
 800b424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b428:	e00a      	b.n	800b440 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	b2da      	uxtb	r2, r3
 800b42e:	4908      	ldr	r1, [pc, #32]	; (800b450 <__NVIC_SetPriority+0x50>)
 800b430:	88fb      	ldrh	r3, [r7, #6]
 800b432:	f003 030f 	and.w	r3, r3, #15
 800b436:	3b04      	subs	r3, #4
 800b438:	0112      	lsls	r2, r2, #4
 800b43a:	b2d2      	uxtb	r2, r2
 800b43c:	440b      	add	r3, r1
 800b43e:	761a      	strb	r2, [r3, #24]
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	e000e100 	.word	0xe000e100
 800b450:	e000ed00 	.word	0xe000ed00

0800b454 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b454:	b580      	push	{r7, lr}
 800b456:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b458:	4b05      	ldr	r3, [pc, #20]	; (800b470 <SysTick_Handler+0x1c>)
 800b45a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b45c:	f001 fcfe 	bl	800ce5c <xTaskGetSchedulerState>
 800b460:	4603      	mov	r3, r0
 800b462:	2b01      	cmp	r3, #1
 800b464:	d001      	beq.n	800b46a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b466:	f002 fae7 	bl	800da38 <xPortSysTickHandler>
  }
}
 800b46a:	bf00      	nop
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	e000e010 	.word	0xe000e010

0800b474 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b474:	b580      	push	{r7, lr}
 800b476:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b478:	2100      	movs	r1, #0
 800b47a:	f06f 0004 	mvn.w	r0, #4
 800b47e:	f7ff ffbf 	bl	800b400 <__NVIC_SetPriority>
#endif
}
 800b482:	bf00      	nop
 800b484:	bd80      	pop	{r7, pc}
	...

0800b488 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b48e:	f3ef 8305 	mrs	r3, IPSR
 800b492:	603b      	str	r3, [r7, #0]
  return(result);
 800b494:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b49a:	f06f 0305 	mvn.w	r3, #5
 800b49e:	607b      	str	r3, [r7, #4]
 800b4a0:	e00c      	b.n	800b4bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b4a2:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <osKernelInitialize+0x44>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d105      	bne.n	800b4b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b4aa:	4b08      	ldr	r3, [pc, #32]	; (800b4cc <osKernelInitialize+0x44>)
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	607b      	str	r3, [r7, #4]
 800b4b4:	e002      	b.n	800b4bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b4bc:	687b      	ldr	r3, [r7, #4]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	370c      	adds	r7, #12
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	240000b4 	.word	0x240000b4

0800b4d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4d6:	f3ef 8305 	mrs	r3, IPSR
 800b4da:	603b      	str	r3, [r7, #0]
  return(result);
 800b4dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <osKernelStart+0x1a>
    stat = osErrorISR;
 800b4e2:	f06f 0305 	mvn.w	r3, #5
 800b4e6:	607b      	str	r3, [r7, #4]
 800b4e8:	e010      	b.n	800b50c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b4ea:	4b0b      	ldr	r3, [pc, #44]	; (800b518 <osKernelStart+0x48>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d109      	bne.n	800b506 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b4f2:	f7ff ffbf 	bl	800b474 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b4f6:	4b08      	ldr	r3, [pc, #32]	; (800b518 <osKernelStart+0x48>)
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b4fc:	f001 f866 	bl	800c5cc <vTaskStartScheduler>
      stat = osOK;
 800b500:	2300      	movs	r3, #0
 800b502:	607b      	str	r3, [r7, #4]
 800b504:	e002      	b.n	800b50c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b506:	f04f 33ff 	mov.w	r3, #4294967295
 800b50a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b50c:	687b      	ldr	r3, [r7, #4]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	240000b4 	.word	0x240000b4

0800b51c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b08e      	sub	sp, #56	; 0x38
 800b520:	af04      	add	r7, sp, #16
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b528:	2300      	movs	r3, #0
 800b52a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b52c:	f3ef 8305 	mrs	r3, IPSR
 800b530:	617b      	str	r3, [r7, #20]
  return(result);
 800b532:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b534:	2b00      	cmp	r3, #0
 800b536:	d17e      	bne.n	800b636 <osThreadNew+0x11a>
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d07b      	beq.n	800b636 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b53e:	2380      	movs	r3, #128	; 0x80
 800b540:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b542:	2318      	movs	r3, #24
 800b544:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b546:	2300      	movs	r3, #0
 800b548:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b54a:	f04f 33ff 	mov.w	r3, #4294967295
 800b54e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d045      	beq.n	800b5e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d002      	beq.n	800b564 <osThreadNew+0x48>
        name = attr->name;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	699b      	ldr	r3, [r3, #24]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	699b      	ldr	r3, [r3, #24]
 800b570:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d008      	beq.n	800b58a <osThreadNew+0x6e>
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	2b38      	cmp	r3, #56	; 0x38
 800b57c:	d805      	bhi.n	800b58a <osThreadNew+0x6e>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	f003 0301 	and.w	r3, r3, #1
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <osThreadNew+0x72>
        return (NULL);
 800b58a:	2300      	movs	r3, #0
 800b58c:	e054      	b.n	800b638 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	695b      	ldr	r3, [r3, #20]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d003      	beq.n	800b59e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	695b      	ldr	r3, [r3, #20]
 800b59a:	089b      	lsrs	r3, r3, #2
 800b59c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00e      	beq.n	800b5c4 <osThreadNew+0xa8>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	2b5b      	cmp	r3, #91	; 0x5b
 800b5ac:	d90a      	bls.n	800b5c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d006      	beq.n	800b5c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <osThreadNew+0xa8>
        mem = 1;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	61bb      	str	r3, [r7, #24]
 800b5c2:	e010      	b.n	800b5e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10c      	bne.n	800b5e6 <osThreadNew+0xca>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d108      	bne.n	800b5e6 <osThreadNew+0xca>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	691b      	ldr	r3, [r3, #16]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d104      	bne.n	800b5e6 <osThreadNew+0xca>
          mem = 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	61bb      	str	r3, [r7, #24]
 800b5e0:	e001      	b.n	800b5e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d110      	bne.n	800b60e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5f4:	9202      	str	r2, [sp, #8]
 800b5f6:	9301      	str	r3, [sp, #4]
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	6a3a      	ldr	r2, [r7, #32]
 800b600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f000 fe0c 	bl	800c220 <xTaskCreateStatic>
 800b608:	4603      	mov	r3, r0
 800b60a:	613b      	str	r3, [r7, #16]
 800b60c:	e013      	b.n	800b636 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d110      	bne.n	800b636 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	b29a      	uxth	r2, r3
 800b618:	f107 0310 	add.w	r3, r7, #16
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 fe57 	bl	800c2da <xTaskCreate>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d001      	beq.n	800b636 <osThreadNew+0x11a>
            hTask = NULL;
 800b632:	2300      	movs	r3, #0
 800b634:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b636:	693b      	ldr	r3, [r7, #16]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3728      	adds	r7, #40	; 0x28
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b648:	f3ef 8305 	mrs	r3, IPSR
 800b64c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b64e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b650:	2b00      	cmp	r3, #0
 800b652:	d003      	beq.n	800b65c <osDelay+0x1c>
    stat = osErrorISR;
 800b654:	f06f 0305 	mvn.w	r3, #5
 800b658:	60fb      	str	r3, [r7, #12]
 800b65a:	e007      	b.n	800b66c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b65c:	2300      	movs	r3, #0
 800b65e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d002      	beq.n	800b66c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 ff7c 	bl	800c564 <vTaskDelay>
    }
  }

  return (stat);
 800b66c:	68fb      	ldr	r3, [r7, #12]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	4a07      	ldr	r2, [pc, #28]	; (800b6a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b688:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	4a06      	ldr	r2, [pc, #24]	; (800b6a8 <vApplicationGetIdleTaskMemory+0x30>)
 800b68e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2280      	movs	r2, #128	; 0x80
 800b694:	601a      	str	r2, [r3, #0]
}
 800b696:	bf00      	nop
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	240000b8 	.word	0x240000b8
 800b6a8:	24000114 	.word	0x24000114

0800b6ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	4a07      	ldr	r2, [pc, #28]	; (800b6d8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b6bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	4a06      	ldr	r2, [pc, #24]	; (800b6dc <vApplicationGetTimerTaskMemory+0x30>)
 800b6c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b6ca:	601a      	str	r2, [r3, #0]
}
 800b6cc:	bf00      	nop
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr
 800b6d8:	24000314 	.word	0x24000314
 800b6dc:	24000370 	.word	0x24000370

0800b6e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f103 0208 	add.w	r2, r3, #8
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f103 0208 	add.w	r2, r3, #8
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f103 0208 	add.w	r2, r3, #8
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b72e:	bf00      	nop
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b73a:	b480      	push	{r7}
 800b73c:	b085      	sub	sp, #20
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	689a      	ldr	r2, [r3, #8]
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	1c5a      	adds	r2, r3, #1
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	601a      	str	r2, [r3, #0]
}
 800b776:	bf00      	nop
 800b778:	3714      	adds	r7, #20
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b782:	b480      	push	{r7}
 800b784:	b085      	sub	sp, #20
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b798:	d103      	bne.n	800b7a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	e00c      	b.n	800b7bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	3308      	adds	r3, #8
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	e002      	b.n	800b7b0 <vListInsert+0x2e>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	60fb      	str	r3, [r7, #12]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d2f6      	bcs.n	800b7aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	685a      	ldr	r2, [r3, #4]
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	683a      	ldr	r2, [r7, #0]
 800b7ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	683a      	ldr	r2, [r7, #0]
 800b7d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	601a      	str	r2, [r3, #0]
}
 800b7e8:	bf00      	nop
 800b7ea:	3714      	adds	r7, #20
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	6892      	ldr	r2, [r2, #8]
 800b80a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	6852      	ldr	r2, [r2, #4]
 800b814:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d103      	bne.n	800b828 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	689a      	ldr	r2, [r3, #8]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	1e5a      	subs	r2, r3, #1
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3714      	adds	r7, #20
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10a      	bne.n	800b872 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b86e:	bf00      	nop
 800b870:	e7fe      	b.n	800b870 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b872:	f002 f84f 	bl	800d914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b87e:	68f9      	ldr	r1, [r7, #12]
 800b880:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b882:	fb01 f303 	mul.w	r3, r1, r3
 800b886:	441a      	add	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	68f9      	ldr	r1, [r7, #12]
 800b8a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8a8:	fb01 f303 	mul.w	r3, r1, r3
 800b8ac:	441a      	add	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	22ff      	movs	r2, #255	; 0xff
 800b8b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	22ff      	movs	r2, #255	; 0xff
 800b8be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d114      	bne.n	800b8f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d01a      	beq.n	800b906 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3310      	adds	r3, #16
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f001 f903 	bl	800cae0 <xTaskRemoveFromEventList>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d012      	beq.n	800b906 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b8e0:	4b0c      	ldr	r3, [pc, #48]	; (800b914 <xQueueGenericReset+0xcc>)
 800b8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e6:	601a      	str	r2, [r3, #0]
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	e009      	b.n	800b906 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	3310      	adds	r3, #16
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7ff fef2 	bl	800b6e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	3324      	adds	r3, #36	; 0x24
 800b900:	4618      	mov	r0, r3
 800b902:	f7ff feed 	bl	800b6e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b906:	f002 f835 	bl	800d974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b90a:	2301      	movs	r3, #1
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	e000ed04 	.word	0xe000ed04

0800b918 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08e      	sub	sp, #56	; 0x38
 800b91c:	af02      	add	r7, sp, #8
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b93e:	bf00      	nop
 800b940:	e7fe      	b.n	800b940 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <xQueueGenericCreateStatic+0x52>
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <xQueueGenericCreateStatic+0x56>
 800b96a:	2301      	movs	r3, #1
 800b96c:	e000      	b.n	800b970 <xQueueGenericCreateStatic+0x58>
 800b96e:	2300      	movs	r3, #0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10a      	bne.n	800b98a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b978:	f383 8811 	msr	BASEPRI, r3
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f3bf 8f4f 	dsb	sy
 800b984:	623b      	str	r3, [r7, #32]
}
 800b986:	bf00      	nop
 800b988:	e7fe      	b.n	800b988 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d102      	bne.n	800b996 <xQueueGenericCreateStatic+0x7e>
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d101      	bne.n	800b99a <xQueueGenericCreateStatic+0x82>
 800b996:	2301      	movs	r3, #1
 800b998:	e000      	b.n	800b99c <xQueueGenericCreateStatic+0x84>
 800b99a:	2300      	movs	r3, #0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10a      	bne.n	800b9b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	61fb      	str	r3, [r7, #28]
}
 800b9b2:	bf00      	nop
 800b9b4:	e7fe      	b.n	800b9b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b9b6:	2350      	movs	r3, #80	; 0x50
 800b9b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	2b50      	cmp	r3, #80	; 0x50
 800b9be:	d00a      	beq.n	800b9d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	61bb      	str	r3, [r7, #24]
}
 800b9d2:	bf00      	nop
 800b9d4:	e7fe      	b.n	800b9d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00d      	beq.n	800b9fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	68b9      	ldr	r1, [r7, #8]
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f000 f805 	bl	800ba08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3730      	adds	r7, #48	; 0x30
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d103      	bne.n	800ba24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	69ba      	ldr	r2, [r7, #24]
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	e002      	b.n	800ba2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba36:	2101      	movs	r1, #1
 800ba38:	69b8      	ldr	r0, [r7, #24]
 800ba3a:	f7ff ff05 	bl	800b848 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	78fa      	ldrb	r2, [r7, #3]
 800ba42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba46:	bf00      	nop
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
	...

0800ba50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b08e      	sub	sp, #56	; 0x38
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
 800ba5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d10a      	bne.n	800ba82 <xQueueGenericSend+0x32>
	__asm volatile
 800ba6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba7e:	bf00      	nop
 800ba80:	e7fe      	b.n	800ba80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d103      	bne.n	800ba90 <xQueueGenericSend+0x40>
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d101      	bne.n	800ba94 <xQueueGenericSend+0x44>
 800ba90:	2301      	movs	r3, #1
 800ba92:	e000      	b.n	800ba96 <xQueueGenericSend+0x46>
 800ba94:	2300      	movs	r3, #0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10a      	bne.n	800bab0 <xQueueGenericSend+0x60>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800baac:	bf00      	nop
 800baae:	e7fe      	b.n	800baae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d103      	bne.n	800babe <xQueueGenericSend+0x6e>
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baba:	2b01      	cmp	r3, #1
 800babc:	d101      	bne.n	800bac2 <xQueueGenericSend+0x72>
 800babe:	2301      	movs	r3, #1
 800bac0:	e000      	b.n	800bac4 <xQueueGenericSend+0x74>
 800bac2:	2300      	movs	r3, #0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <xQueueGenericSend+0x8e>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	623b      	str	r3, [r7, #32]
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bade:	f001 f9bd 	bl	800ce5c <xTaskGetSchedulerState>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d102      	bne.n	800baee <xQueueGenericSend+0x9e>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <xQueueGenericSend+0xa2>
 800baee:	2301      	movs	r3, #1
 800baf0:	e000      	b.n	800baf4 <xQueueGenericSend+0xa4>
 800baf2:	2300      	movs	r3, #0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10a      	bne.n	800bb0e <xQueueGenericSend+0xbe>
	__asm volatile
 800baf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafc:	f383 8811 	msr	BASEPRI, r3
 800bb00:	f3bf 8f6f 	isb	sy
 800bb04:	f3bf 8f4f 	dsb	sy
 800bb08:	61fb      	str	r3, [r7, #28]
}
 800bb0a:	bf00      	nop
 800bb0c:	e7fe      	b.n	800bb0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb0e:	f001 ff01 	bl	800d914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d302      	bcc.n	800bb24 <xQueueGenericSend+0xd4>
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d129      	bne.n	800bb78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb24:	683a      	ldr	r2, [r7, #0]
 800bb26:	68b9      	ldr	r1, [r7, #8]
 800bb28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb2a:	f000 fa0b 	bl	800bf44 <prvCopyDataToQueue>
 800bb2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d010      	beq.n	800bb5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3a:	3324      	adds	r3, #36	; 0x24
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f000 ffcf 	bl	800cae0 <xTaskRemoveFromEventList>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d013      	beq.n	800bb70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb48:	4b3f      	ldr	r3, [pc, #252]	; (800bc48 <xQueueGenericSend+0x1f8>)
 800bb4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb4e:	601a      	str	r2, [r3, #0]
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	e00a      	b.n	800bb70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d007      	beq.n	800bb70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb60:	4b39      	ldr	r3, [pc, #228]	; (800bc48 <xQueueGenericSend+0x1f8>)
 800bb62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb70:	f001 ff00 	bl	800d974 <vPortExitCritical>
				return pdPASS;
 800bb74:	2301      	movs	r3, #1
 800bb76:	e063      	b.n	800bc40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d103      	bne.n	800bb86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb7e:	f001 fef9 	bl	800d974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb82:	2300      	movs	r3, #0
 800bb84:	e05c      	b.n	800bc40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d106      	bne.n	800bb9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb8c:	f107 0314 	add.w	r3, r7, #20
 800bb90:	4618      	mov	r0, r3
 800bb92:	f001 f809 	bl	800cba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb96:	2301      	movs	r3, #1
 800bb98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb9a:	f001 feeb 	bl	800d974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb9e:	f000 fd7b 	bl	800c698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bba2:	f001 feb7 	bl	800d914 <vPortEnterCritical>
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbac:	b25b      	sxtb	r3, r3
 800bbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb2:	d103      	bne.n	800bbbc <xQueueGenericSend+0x16c>
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbc2:	b25b      	sxtb	r3, r3
 800bbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc8:	d103      	bne.n	800bbd2 <xQueueGenericSend+0x182>
 800bbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbd2:	f001 fecf 	bl	800d974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbd6:	1d3a      	adds	r2, r7, #4
 800bbd8:	f107 0314 	add.w	r3, r7, #20
 800bbdc:	4611      	mov	r1, r2
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f000 fff8 	bl	800cbd4 <xTaskCheckForTimeOut>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d124      	bne.n	800bc34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bbea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbec:	f000 faa2 	bl	800c134 <prvIsQueueFull>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d018      	beq.n	800bc28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf8:	3310      	adds	r3, #16
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	4611      	mov	r1, r2
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 ff1e 	bl	800ca40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bc04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc06:	f000 fa2d 	bl	800c064 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bc0a:	f000 fd53 	bl	800c6b4 <xTaskResumeAll>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f47f af7c 	bne.w	800bb0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bc16:	4b0c      	ldr	r3, [pc, #48]	; (800bc48 <xQueueGenericSend+0x1f8>)
 800bc18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	e772      	b.n	800bb0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc2a:	f000 fa1b 	bl	800c064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc2e:	f000 fd41 	bl	800c6b4 <xTaskResumeAll>
 800bc32:	e76c      	b.n	800bb0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc36:	f000 fa15 	bl	800c064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc3a:	f000 fd3b 	bl	800c6b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3738      	adds	r7, #56	; 0x38
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	e000ed04 	.word	0xe000ed04

0800bc4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b090      	sub	sp, #64	; 0x40
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d103      	bne.n	800bc88 <xQueueGenericSendFromISR+0x3c>
 800bc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d101      	bne.n	800bc8c <xQueueGenericSendFromISR+0x40>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e000      	b.n	800bc8e <xQueueGenericSendFromISR+0x42>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10a      	bne.n	800bca8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bca4:	bf00      	nop
 800bca6:	e7fe      	b.n	800bca6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d103      	bne.n	800bcb6 <xQueueGenericSendFromISR+0x6a>
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d101      	bne.n	800bcba <xQueueGenericSendFromISR+0x6e>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e000      	b.n	800bcbc <xQueueGenericSendFromISR+0x70>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10a      	bne.n	800bcd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	623b      	str	r3, [r7, #32]
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcd6:	f001 feff 	bl	800dad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bcda:	f3ef 8211 	mrs	r2, BASEPRI
 800bcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce2:	f383 8811 	msr	BASEPRI, r3
 800bce6:	f3bf 8f6f 	isb	sy
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	61fa      	str	r2, [r7, #28]
 800bcf0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bcf2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcf4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d302      	bcc.n	800bd08 <xQueueGenericSendFromISR+0xbc>
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d12f      	bne.n	800bd68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	68b9      	ldr	r1, [r7, #8]
 800bd1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd1e:	f000 f911 	bl	800bf44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2a:	d112      	bne.n	800bd52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d016      	beq.n	800bd62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd36:	3324      	adds	r3, #36	; 0x24
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f000 fed1 	bl	800cae0 <xTaskRemoveFromEventList>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00e      	beq.n	800bd62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00b      	beq.n	800bd62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	601a      	str	r2, [r3, #0]
 800bd50:	e007      	b.n	800bd62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd56:	3301      	adds	r3, #1
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	b25a      	sxtb	r2, r3
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd62:	2301      	movs	r3, #1
 800bd64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bd66:	e001      	b.n	800bd6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd6e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3740      	adds	r7, #64	; 0x40
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
	...

0800bd84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b08c      	sub	sp, #48	; 0x30
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd90:	2300      	movs	r3, #0
 800bd92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10a      	bne.n	800bdb4 <xQueueReceive+0x30>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	623b      	str	r3, [r7, #32]
}
 800bdb0:	bf00      	nop
 800bdb2:	e7fe      	b.n	800bdb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d103      	bne.n	800bdc2 <xQueueReceive+0x3e>
 800bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <xQueueReceive+0x42>
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e000      	b.n	800bdc8 <xQueueReceive+0x44>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10a      	bne.n	800bde2 <xQueueReceive+0x5e>
	__asm volatile
 800bdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd0:	f383 8811 	msr	BASEPRI, r3
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	61fb      	str	r3, [r7, #28]
}
 800bdde:	bf00      	nop
 800bde0:	e7fe      	b.n	800bde0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bde2:	f001 f83b 	bl	800ce5c <xTaskGetSchedulerState>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d102      	bne.n	800bdf2 <xQueueReceive+0x6e>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d101      	bne.n	800bdf6 <xQueueReceive+0x72>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e000      	b.n	800bdf8 <xQueueReceive+0x74>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <xQueueReceive+0x8e>
	__asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	61bb      	str	r3, [r7, #24]
}
 800be0e:	bf00      	nop
 800be10:	e7fe      	b.n	800be10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be12:	f001 fd7f 	bl	800d914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d01f      	beq.n	800be62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be22:	68b9      	ldr	r1, [r7, #8]
 800be24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be26:	f000 f8f7 	bl	800c018 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2c:	1e5a      	subs	r2, r3, #1
 800be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00f      	beq.n	800be5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	3310      	adds	r3, #16
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 fe4e 	bl	800cae0 <xTaskRemoveFromEventList>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d007      	beq.n	800be5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be4a:	4b3d      	ldr	r3, [pc, #244]	; (800bf40 <xQueueReceive+0x1bc>)
 800be4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be50:	601a      	str	r2, [r3, #0]
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be5a:	f001 fd8b 	bl	800d974 <vPortExitCritical>
				return pdPASS;
 800be5e:	2301      	movs	r3, #1
 800be60:	e069      	b.n	800bf36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d103      	bne.n	800be70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be68:	f001 fd84 	bl	800d974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be6c:	2300      	movs	r3, #0
 800be6e:	e062      	b.n	800bf36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be72:	2b00      	cmp	r3, #0
 800be74:	d106      	bne.n	800be84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be76:	f107 0310 	add.w	r3, r7, #16
 800be7a:	4618      	mov	r0, r3
 800be7c:	f000 fe94 	bl	800cba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be80:	2301      	movs	r3, #1
 800be82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be84:	f001 fd76 	bl	800d974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be88:	f000 fc06 	bl	800c698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be8c:	f001 fd42 	bl	800d914 <vPortEnterCritical>
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be96:	b25b      	sxtb	r3, r3
 800be98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9c:	d103      	bne.n	800bea6 <xQueueReceive+0x122>
 800be9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800beac:	b25b      	sxtb	r3, r3
 800beae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb2:	d103      	bne.n	800bebc <xQueueReceive+0x138>
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bebc:	f001 fd5a 	bl	800d974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bec0:	1d3a      	adds	r2, r7, #4
 800bec2:	f107 0310 	add.w	r3, r7, #16
 800bec6:	4611      	mov	r1, r2
 800bec8:	4618      	mov	r0, r3
 800beca:	f000 fe83 	bl	800cbd4 <xTaskCheckForTimeOut>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d123      	bne.n	800bf1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bed6:	f000 f917 	bl	800c108 <prvIsQueueEmpty>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d017      	beq.n	800bf10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee2:	3324      	adds	r3, #36	; 0x24
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	4611      	mov	r1, r2
 800bee8:	4618      	mov	r0, r3
 800beea:	f000 fda9 	bl	800ca40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800beee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef0:	f000 f8b8 	bl	800c064 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bef4:	f000 fbde 	bl	800c6b4 <xTaskResumeAll>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d189      	bne.n	800be12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800befe:	4b10      	ldr	r3, [pc, #64]	; (800bf40 <xQueueReceive+0x1bc>)
 800bf00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf04:	601a      	str	r2, [r3, #0]
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	f3bf 8f6f 	isb	sy
 800bf0e:	e780      	b.n	800be12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bf10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf12:	f000 f8a7 	bl	800c064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf16:	f000 fbcd 	bl	800c6b4 <xTaskResumeAll>
 800bf1a:	e77a      	b.n	800be12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bf1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf1e:	f000 f8a1 	bl	800c064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf22:	f000 fbc7 	bl	800c6b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf28:	f000 f8ee 	bl	800c108 <prvIsQueueEmpty>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f43f af6f 	beq.w	800be12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3730      	adds	r7, #48	; 0x30
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	e000ed04 	.word	0xe000ed04

0800bf44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf50:	2300      	movs	r3, #0
 800bf52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10d      	bne.n	800bf7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d14d      	bne.n	800c006 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 ff92 	bl	800ce98 <xTaskPriorityDisinherit>
 800bf74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	609a      	str	r2, [r3, #8]
 800bf7c:	e043      	b.n	800c006 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d119      	bne.n	800bfb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6858      	ldr	r0, [r3, #4]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	f002 f830 	bl	800dff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	685a      	ldr	r2, [r3, #4]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9c:	441a      	add	r2, r3
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	685a      	ldr	r2, [r3, #4]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d32b      	bcc.n	800c006 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	605a      	str	r2, [r3, #4]
 800bfb6:	e026      	b.n	800c006 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	68d8      	ldr	r0, [r3, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	68b9      	ldr	r1, [r7, #8]
 800bfc4:	f002 f816 	bl	800dff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	68da      	ldr	r2, [r3, #12]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd0:	425b      	negs	r3, r3
 800bfd2:	441a      	add	r2, r3
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	68da      	ldr	r2, [r3, #12]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d207      	bcs.n	800bff4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	689a      	ldr	r2, [r3, #8]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfec:	425b      	negs	r3, r3
 800bfee:	441a      	add	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d105      	bne.n	800c006 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	3b01      	subs	r3, #1
 800c004:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	1c5a      	adds	r2, r3, #1
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c00e:	697b      	ldr	r3, [r7, #20]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3718      	adds	r7, #24
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c026:	2b00      	cmp	r3, #0
 800c028:	d018      	beq.n	800c05c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68da      	ldr	r2, [r3, #12]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c032:	441a      	add	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68da      	ldr	r2, [r3, #12]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	429a      	cmp	r2, r3
 800c042:	d303      	bcc.n	800c04c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68d9      	ldr	r1, [r3, #12]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c054:	461a      	mov	r2, r3
 800c056:	6838      	ldr	r0, [r7, #0]
 800c058:	f001 ffcc 	bl	800dff4 <memcpy>
	}
}
 800c05c:	bf00      	nop
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c06c:	f001 fc52 	bl	800d914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c076:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c078:	e011      	b.n	800c09e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d012      	beq.n	800c0a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	3324      	adds	r3, #36	; 0x24
 800c086:	4618      	mov	r0, r3
 800c088:	f000 fd2a 	bl	800cae0 <xTaskRemoveFromEventList>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c092:	f000 fe01 	bl	800cc98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	3b01      	subs	r3, #1
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dce9      	bgt.n	800c07a <prvUnlockQueue+0x16>
 800c0a6:	e000      	b.n	800c0aa <prvUnlockQueue+0x46>
					break;
 800c0a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	22ff      	movs	r2, #255	; 0xff
 800c0ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c0b2:	f001 fc5f 	bl	800d974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c0b6:	f001 fc2d 	bl	800d914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0c2:	e011      	b.n	800c0e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d012      	beq.n	800c0f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	3310      	adds	r3, #16
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 fd05 	bl	800cae0 <xTaskRemoveFromEventList>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d001      	beq.n	800c0e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0dc:	f000 fddc 	bl	800cc98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	dce9      	bgt.n	800c0c4 <prvUnlockQueue+0x60>
 800c0f0:	e000      	b.n	800c0f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	22ff      	movs	r2, #255	; 0xff
 800c0f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0fc:	f001 fc3a 	bl	800d974 <vPortExitCritical>
}
 800c100:	bf00      	nop
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c110:	f001 fc00 	bl	800d914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d102      	bne.n	800c122 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c11c:	2301      	movs	r3, #1
 800c11e:	60fb      	str	r3, [r7, #12]
 800c120:	e001      	b.n	800c126 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c122:	2300      	movs	r3, #0
 800c124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c126:	f001 fc25 	bl	800d974 <vPortExitCritical>

	return xReturn;
 800c12a:	68fb      	ldr	r3, [r7, #12]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c13c:	f001 fbea 	bl	800d914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c148:	429a      	cmp	r2, r3
 800c14a:	d102      	bne.n	800c152 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c14c:	2301      	movs	r3, #1
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	e001      	b.n	800c156 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c152:	2300      	movs	r3, #0
 800c154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c156:	f001 fc0d 	bl	800d974 <vPortExitCritical>

	return xReturn;
 800c15a:	68fb      	ldr	r3, [r7, #12]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c16e:	2300      	movs	r3, #0
 800c170:	60fb      	str	r3, [r7, #12]
 800c172:	e014      	b.n	800c19e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c174:	4a0f      	ldr	r2, [pc, #60]	; (800c1b4 <vQueueAddToRegistry+0x50>)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10b      	bne.n	800c198 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c180:	490c      	ldr	r1, [pc, #48]	; (800c1b4 <vQueueAddToRegistry+0x50>)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	683a      	ldr	r2, [r7, #0]
 800c186:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c18a:	4a0a      	ldr	r2, [pc, #40]	; (800c1b4 <vQueueAddToRegistry+0x50>)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	4413      	add	r3, r2
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c196:	e006      	b.n	800c1a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	3301      	adds	r3, #1
 800c19c:	60fb      	str	r3, [r7, #12]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b07      	cmp	r3, #7
 800c1a2:	d9e7      	bls.n	800c174 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c1a4:	bf00      	nop
 800c1a6:	bf00      	nop
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	2400518c 	.word	0x2400518c

0800c1b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c1c8:	f001 fba4 	bl	800d914 <vPortEnterCritical>
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1d2:	b25b      	sxtb	r3, r3
 800c1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d8:	d103      	bne.n	800c1e2 <vQueueWaitForMessageRestricted+0x2a>
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1e8:	b25b      	sxtb	r3, r3
 800c1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ee:	d103      	bne.n	800c1f8 <vQueueWaitForMessageRestricted+0x40>
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1f8:	f001 fbbc 	bl	800d974 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	3324      	adds	r3, #36	; 0x24
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	68b9      	ldr	r1, [r7, #8]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 fc3b 	bl	800ca88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c212:	6978      	ldr	r0, [r7, #20]
 800c214:	f7ff ff26 	bl	800c064 <prvUnlockQueue>
	}
 800c218:	bf00      	nop
 800c21a:	3718      	adds	r7, #24
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c220:	b580      	push	{r7, lr}
 800c222:	b08e      	sub	sp, #56	; 0x38
 800c224:	af04      	add	r7, sp, #16
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
 800c22c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10a      	bne.n	800c24a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	623b      	str	r3, [r7, #32]
}
 800c246:	bf00      	nop
 800c248:	e7fe      	b.n	800c248 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d10a      	bne.n	800c266 <xTaskCreateStatic+0x46>
	__asm volatile
 800c250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	61fb      	str	r3, [r7, #28]
}
 800c262:	bf00      	nop
 800c264:	e7fe      	b.n	800c264 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c266:	235c      	movs	r3, #92	; 0x5c
 800c268:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	2b5c      	cmp	r3, #92	; 0x5c
 800c26e:	d00a      	beq.n	800c286 <xTaskCreateStatic+0x66>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	61bb      	str	r3, [r7, #24]
}
 800c282:	bf00      	nop
 800c284:	e7fe      	b.n	800c284 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c286:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d01e      	beq.n	800c2cc <xTaskCreateStatic+0xac>
 800c28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c290:	2b00      	cmp	r3, #0
 800c292:	d01b      	beq.n	800c2cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c296:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c29c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9303      	str	r3, [sp, #12]
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ac:	9302      	str	r3, [sp, #8]
 800c2ae:	f107 0314 	add.w	r3, r7, #20
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	68b9      	ldr	r1, [r7, #8]
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f000 f850 	bl	800c364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2c6:	f000 f8dd 	bl	800c484 <prvAddNewTaskToReadyList>
 800c2ca:	e001      	b.n	800c2d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2d0:	697b      	ldr	r3, [r7, #20]
	}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3728      	adds	r7, #40	; 0x28
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b08c      	sub	sp, #48	; 0x30
 800c2de:	af04      	add	r7, sp, #16
 800c2e0:	60f8      	str	r0, [r7, #12]
 800c2e2:	60b9      	str	r1, [r7, #8]
 800c2e4:	603b      	str	r3, [r7, #0]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c2ea:	88fb      	ldrh	r3, [r7, #6]
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f001 fc32 	bl	800db58 <pvPortMalloc>
 800c2f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00e      	beq.n	800c31a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c2fc:	205c      	movs	r0, #92	; 0x5c
 800c2fe:	f001 fc2b 	bl	800db58 <pvPortMalloc>
 800c302:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d003      	beq.n	800c312 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	697a      	ldr	r2, [r7, #20]
 800c30e:	631a      	str	r2, [r3, #48]	; 0x30
 800c310:	e005      	b.n	800c31e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c312:	6978      	ldr	r0, [r7, #20]
 800c314:	f001 fcec 	bl	800dcf0 <vPortFree>
 800c318:	e001      	b.n	800c31e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d017      	beq.n	800c354 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	2200      	movs	r2, #0
 800c328:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c32c:	88fa      	ldrh	r2, [r7, #6]
 800c32e:	2300      	movs	r3, #0
 800c330:	9303      	str	r3, [sp, #12]
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	9302      	str	r3, [sp, #8]
 800c336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	68b9      	ldr	r1, [r7, #8]
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f000 f80e 	bl	800c364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c348:	69f8      	ldr	r0, [r7, #28]
 800c34a:	f000 f89b 	bl	800c484 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c34e:	2301      	movs	r3, #1
 800c350:	61bb      	str	r3, [r7, #24]
 800c352:	e002      	b.n	800c35a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c354:	f04f 33ff 	mov.w	r3, #4294967295
 800c358:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c35a:	69bb      	ldr	r3, [r7, #24]
	}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3720      	adds	r7, #32
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b088      	sub	sp, #32
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	461a      	mov	r2, r3
 800c37c:	21a5      	movs	r1, #165	; 0xa5
 800c37e:	f001 fe47 	bl	800e010 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c386:	6879      	ldr	r1, [r7, #4]
 800c388:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c38c:	440b      	add	r3, r1
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	4413      	add	r3, r2
 800c392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	f023 0307 	bic.w	r3, r3, #7
 800c39a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	f003 0307 	and.w	r3, r3, #7
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00a      	beq.n	800c3bc <prvInitialiseNewTask+0x58>
	__asm volatile
 800c3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3aa:	f383 8811 	msr	BASEPRI, r3
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	f3bf 8f4f 	dsb	sy
 800c3b6:	617b      	str	r3, [r7, #20]
}
 800c3b8:	bf00      	nop
 800c3ba:	e7fe      	b.n	800c3ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d01f      	beq.n	800c402 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	61fb      	str	r3, [r7, #28]
 800c3c6:	e012      	b.n	800c3ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	7819      	ldrb	r1, [r3, #0]
 800c3d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	3334      	adds	r3, #52	; 0x34
 800c3d8:	460a      	mov	r2, r1
 800c3da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c3dc:	68ba      	ldr	r2, [r7, #8]
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d006      	beq.n	800c3f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	61fb      	str	r3, [r7, #28]
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	2b0f      	cmp	r3, #15
 800c3f2:	d9e9      	bls.n	800c3c8 <prvInitialiseNewTask+0x64>
 800c3f4:	e000      	b.n	800c3f8 <prvInitialiseNewTask+0x94>
			{
				break;
 800c3f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c400:	e003      	b.n	800c40a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c404:	2200      	movs	r2, #0
 800c406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40c:	2b37      	cmp	r3, #55	; 0x37
 800c40e:	d901      	bls.n	800c414 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c410:	2337      	movs	r3, #55	; 0x37
 800c412:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c418:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c41e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c422:	2200      	movs	r2, #0
 800c424:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c428:	3304      	adds	r3, #4
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7ff f978 	bl	800b720 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c432:	3318      	adds	r3, #24
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff f973 	bl	800b720 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c43e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c442:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c44e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c452:	2200      	movs	r2, #0
 800c454:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	2200      	movs	r2, #0
 800c45a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	68f9      	ldr	r1, [r7, #12]
 800c462:	69b8      	ldr	r0, [r7, #24]
 800c464:	f001 f928 	bl	800d6b8 <pxPortInitialiseStack>
 800c468:	4602      	mov	r2, r0
 800c46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c47a:	bf00      	nop
 800c47c:	3720      	adds	r7, #32
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
	...

0800c484 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c48c:	f001 fa42 	bl	800d914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c490:	4b2d      	ldr	r3, [pc, #180]	; (800c548 <prvAddNewTaskToReadyList+0xc4>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	3301      	adds	r3, #1
 800c496:	4a2c      	ldr	r2, [pc, #176]	; (800c548 <prvAddNewTaskToReadyList+0xc4>)
 800c498:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c49a:	4b2c      	ldr	r3, [pc, #176]	; (800c54c <prvAddNewTaskToReadyList+0xc8>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d109      	bne.n	800c4b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4a2:	4a2a      	ldr	r2, [pc, #168]	; (800c54c <prvAddNewTaskToReadyList+0xc8>)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c4a8:	4b27      	ldr	r3, [pc, #156]	; (800c548 <prvAddNewTaskToReadyList+0xc4>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d110      	bne.n	800c4d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c4b0:	f000 fc16 	bl	800cce0 <prvInitialiseTaskLists>
 800c4b4:	e00d      	b.n	800c4d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c4b6:	4b26      	ldr	r3, [pc, #152]	; (800c550 <prvAddNewTaskToReadyList+0xcc>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d109      	bne.n	800c4d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c4be:	4b23      	ldr	r3, [pc, #140]	; (800c54c <prvAddNewTaskToReadyList+0xc8>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d802      	bhi.n	800c4d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c4cc:	4a1f      	ldr	r2, [pc, #124]	; (800c54c <prvAddNewTaskToReadyList+0xc8>)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c4d2:	4b20      	ldr	r3, [pc, #128]	; (800c554 <prvAddNewTaskToReadyList+0xd0>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	4a1e      	ldr	r2, [pc, #120]	; (800c554 <prvAddNewTaskToReadyList+0xd0>)
 800c4da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c4dc:	4b1d      	ldr	r3, [pc, #116]	; (800c554 <prvAddNewTaskToReadyList+0xd0>)
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e8:	4b1b      	ldr	r3, [pc, #108]	; (800c558 <prvAddNewTaskToReadyList+0xd4>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d903      	bls.n	800c4f8 <prvAddNewTaskToReadyList+0x74>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f4:	4a18      	ldr	r2, [pc, #96]	; (800c558 <prvAddNewTaskToReadyList+0xd4>)
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	4413      	add	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4a15      	ldr	r2, [pc, #84]	; (800c55c <prvAddNewTaskToReadyList+0xd8>)
 800c506:	441a      	add	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	3304      	adds	r3, #4
 800c50c:	4619      	mov	r1, r3
 800c50e:	4610      	mov	r0, r2
 800c510:	f7ff f913 	bl	800b73a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c514:	f001 fa2e 	bl	800d974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c518:	4b0d      	ldr	r3, [pc, #52]	; (800c550 <prvAddNewTaskToReadyList+0xcc>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00e      	beq.n	800c53e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c520:	4b0a      	ldr	r3, [pc, #40]	; (800c54c <prvAddNewTaskToReadyList+0xc8>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d207      	bcs.n	800c53e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c52e:	4b0c      	ldr	r3, [pc, #48]	; (800c560 <prvAddNewTaskToReadyList+0xdc>)
 800c530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	24000c44 	.word	0x24000c44
 800c54c:	24000770 	.word	0x24000770
 800c550:	24000c50 	.word	0x24000c50
 800c554:	24000c60 	.word	0x24000c60
 800c558:	24000c4c 	.word	0x24000c4c
 800c55c:	24000774 	.word	0x24000774
 800c560:	e000ed04 	.word	0xe000ed04

0800c564 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c56c:	2300      	movs	r3, #0
 800c56e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d017      	beq.n	800c5a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c576:	4b13      	ldr	r3, [pc, #76]	; (800c5c4 <vTaskDelay+0x60>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00a      	beq.n	800c594 <vTaskDelay+0x30>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	60bb      	str	r3, [r7, #8]
}
 800c590:	bf00      	nop
 800c592:	e7fe      	b.n	800c592 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c594:	f000 f880 	bl	800c698 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c598:	2100      	movs	r1, #0
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 fcea 	bl	800cf74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c5a0:	f000 f888 	bl	800c6b4 <xTaskResumeAll>
 800c5a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d107      	bne.n	800c5bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c5ac:	4b06      	ldr	r3, [pc, #24]	; (800c5c8 <vTaskDelay+0x64>)
 800c5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5bc:	bf00      	nop
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	24000c6c 	.word	0x24000c6c
 800c5c8:	e000ed04 	.word	0xe000ed04

0800c5cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b08a      	sub	sp, #40	; 0x28
 800c5d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c5da:	463a      	mov	r2, r7
 800c5dc:	1d39      	adds	r1, r7, #4
 800c5de:	f107 0308 	add.w	r3, r7, #8
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7ff f848 	bl	800b678 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	9202      	str	r2, [sp, #8]
 800c5f0:	9301      	str	r3, [sp, #4]
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	460a      	mov	r2, r1
 800c5fa:	4921      	ldr	r1, [pc, #132]	; (800c680 <vTaskStartScheduler+0xb4>)
 800c5fc:	4821      	ldr	r0, [pc, #132]	; (800c684 <vTaskStartScheduler+0xb8>)
 800c5fe:	f7ff fe0f 	bl	800c220 <xTaskCreateStatic>
 800c602:	4603      	mov	r3, r0
 800c604:	4a20      	ldr	r2, [pc, #128]	; (800c688 <vTaskStartScheduler+0xbc>)
 800c606:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c608:	4b1f      	ldr	r3, [pc, #124]	; (800c688 <vTaskStartScheduler+0xbc>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c610:	2301      	movs	r3, #1
 800c612:	617b      	str	r3, [r7, #20]
 800c614:	e001      	b.n	800c61a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c616:	2300      	movs	r3, #0
 800c618:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d102      	bne.n	800c626 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c620:	f000 fcfc 	bl	800d01c <xTimerCreateTimerTask>
 800c624:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d116      	bne.n	800c65a <vTaskStartScheduler+0x8e>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	613b      	str	r3, [r7, #16]
}
 800c63e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c640:	4b12      	ldr	r3, [pc, #72]	; (800c68c <vTaskStartScheduler+0xc0>)
 800c642:	f04f 32ff 	mov.w	r2, #4294967295
 800c646:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c648:	4b11      	ldr	r3, [pc, #68]	; (800c690 <vTaskStartScheduler+0xc4>)
 800c64a:	2201      	movs	r2, #1
 800c64c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c64e:	4b11      	ldr	r3, [pc, #68]	; (800c694 <vTaskStartScheduler+0xc8>)
 800c650:	2200      	movs	r2, #0
 800c652:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c654:	f001 f8bc 	bl	800d7d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c658:	e00e      	b.n	800c678 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c660:	d10a      	bne.n	800c678 <vTaskStartScheduler+0xac>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	60fb      	str	r3, [r7, #12]
}
 800c674:	bf00      	nop
 800c676:	e7fe      	b.n	800c676 <vTaskStartScheduler+0xaa>
}
 800c678:	bf00      	nop
 800c67a:	3718      	adds	r7, #24
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	0800e2f4 	.word	0x0800e2f4
 800c684:	0800ccb1 	.word	0x0800ccb1
 800c688:	24000c68 	.word	0x24000c68
 800c68c:	24000c64 	.word	0x24000c64
 800c690:	24000c50 	.word	0x24000c50
 800c694:	24000c48 	.word	0x24000c48

0800c698 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c698:	b480      	push	{r7}
 800c69a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c69c:	4b04      	ldr	r3, [pc, #16]	; (800c6b0 <vTaskSuspendAll+0x18>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	4a03      	ldr	r2, [pc, #12]	; (800c6b0 <vTaskSuspendAll+0x18>)
 800c6a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c6a6:	bf00      	nop
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr
 800c6b0:	24000c6c 	.word	0x24000c6c

0800c6b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c6c2:	4b42      	ldr	r3, [pc, #264]	; (800c7cc <xTaskResumeAll+0x118>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d10a      	bne.n	800c6e0 <xTaskResumeAll+0x2c>
	__asm volatile
 800c6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ce:	f383 8811 	msr	BASEPRI, r3
 800c6d2:	f3bf 8f6f 	isb	sy
 800c6d6:	f3bf 8f4f 	dsb	sy
 800c6da:	603b      	str	r3, [r7, #0]
}
 800c6dc:	bf00      	nop
 800c6de:	e7fe      	b.n	800c6de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c6e0:	f001 f918 	bl	800d914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c6e4:	4b39      	ldr	r3, [pc, #228]	; (800c7cc <xTaskResumeAll+0x118>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	4a38      	ldr	r2, [pc, #224]	; (800c7cc <xTaskResumeAll+0x118>)
 800c6ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6ee:	4b37      	ldr	r3, [pc, #220]	; (800c7cc <xTaskResumeAll+0x118>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d162      	bne.n	800c7bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c6f6:	4b36      	ldr	r3, [pc, #216]	; (800c7d0 <xTaskResumeAll+0x11c>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d05e      	beq.n	800c7bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6fe:	e02f      	b.n	800c760 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c700:	4b34      	ldr	r3, [pc, #208]	; (800c7d4 <xTaskResumeAll+0x120>)
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	3318      	adds	r3, #24
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7ff f871 	bl	800b7f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	3304      	adds	r3, #4
 800c716:	4618      	mov	r0, r3
 800c718:	f7ff f86c 	bl	800b7f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c720:	4b2d      	ldr	r3, [pc, #180]	; (800c7d8 <xTaskResumeAll+0x124>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	429a      	cmp	r2, r3
 800c726:	d903      	bls.n	800c730 <xTaskResumeAll+0x7c>
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72c:	4a2a      	ldr	r2, [pc, #168]	; (800c7d8 <xTaskResumeAll+0x124>)
 800c72e:	6013      	str	r3, [r2, #0]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c734:	4613      	mov	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4413      	add	r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4a27      	ldr	r2, [pc, #156]	; (800c7dc <xTaskResumeAll+0x128>)
 800c73e:	441a      	add	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3304      	adds	r3, #4
 800c744:	4619      	mov	r1, r3
 800c746:	4610      	mov	r0, r2
 800c748:	f7fe fff7 	bl	800b73a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c750:	4b23      	ldr	r3, [pc, #140]	; (800c7e0 <xTaskResumeAll+0x12c>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c756:	429a      	cmp	r2, r3
 800c758:	d302      	bcc.n	800c760 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c75a:	4b22      	ldr	r3, [pc, #136]	; (800c7e4 <xTaskResumeAll+0x130>)
 800c75c:	2201      	movs	r2, #1
 800c75e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c760:	4b1c      	ldr	r3, [pc, #112]	; (800c7d4 <xTaskResumeAll+0x120>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1cb      	bne.n	800c700 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c76e:	f000 fb55 	bl	800ce1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c772:	4b1d      	ldr	r3, [pc, #116]	; (800c7e8 <xTaskResumeAll+0x134>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d010      	beq.n	800c7a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c77e:	f000 f847 	bl	800c810 <xTaskIncrementTick>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d002      	beq.n	800c78e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c788:	4b16      	ldr	r3, [pc, #88]	; (800c7e4 <xTaskResumeAll+0x130>)
 800c78a:	2201      	movs	r2, #1
 800c78c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	3b01      	subs	r3, #1
 800c792:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1f1      	bne.n	800c77e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c79a:	4b13      	ldr	r3, [pc, #76]	; (800c7e8 <xTaskResumeAll+0x134>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c7a0:	4b10      	ldr	r3, [pc, #64]	; (800c7e4 <xTaskResumeAll+0x130>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d009      	beq.n	800c7bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c7ac:	4b0f      	ldr	r3, [pc, #60]	; (800c7ec <xTaskResumeAll+0x138>)
 800c7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7b2:	601a      	str	r2, [r3, #0]
 800c7b4:	f3bf 8f4f 	dsb	sy
 800c7b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7bc:	f001 f8da 	bl	800d974 <vPortExitCritical>

	return xAlreadyYielded;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	24000c6c 	.word	0x24000c6c
 800c7d0:	24000c44 	.word	0x24000c44
 800c7d4:	24000c04 	.word	0x24000c04
 800c7d8:	24000c4c 	.word	0x24000c4c
 800c7dc:	24000774 	.word	0x24000774
 800c7e0:	24000770 	.word	0x24000770
 800c7e4:	24000c58 	.word	0x24000c58
 800c7e8:	24000c54 	.word	0x24000c54
 800c7ec:	e000ed04 	.word	0xe000ed04

0800c7f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c7f6:	4b05      	ldr	r3, [pc, #20]	; (800c80c <xTaskGetTickCount+0x1c>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c7fc:	687b      	ldr	r3, [r7, #4]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	370c      	adds	r7, #12
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	24000c48 	.word	0x24000c48

0800c810 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c816:	2300      	movs	r3, #0
 800c818:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c81a:	4b4f      	ldr	r3, [pc, #316]	; (800c958 <xTaskIncrementTick+0x148>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	f040 808f 	bne.w	800c942 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c824:	4b4d      	ldr	r3, [pc, #308]	; (800c95c <xTaskIncrementTick+0x14c>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	3301      	adds	r3, #1
 800c82a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c82c:	4a4b      	ldr	r2, [pc, #300]	; (800c95c <xTaskIncrementTick+0x14c>)
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d120      	bne.n	800c87a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c838:	4b49      	ldr	r3, [pc, #292]	; (800c960 <xTaskIncrementTick+0x150>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00a      	beq.n	800c858 <xTaskIncrementTick+0x48>
	__asm volatile
 800c842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c846:	f383 8811 	msr	BASEPRI, r3
 800c84a:	f3bf 8f6f 	isb	sy
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	603b      	str	r3, [r7, #0]
}
 800c854:	bf00      	nop
 800c856:	e7fe      	b.n	800c856 <xTaskIncrementTick+0x46>
 800c858:	4b41      	ldr	r3, [pc, #260]	; (800c960 <xTaskIncrementTick+0x150>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	60fb      	str	r3, [r7, #12]
 800c85e:	4b41      	ldr	r3, [pc, #260]	; (800c964 <xTaskIncrementTick+0x154>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a3f      	ldr	r2, [pc, #252]	; (800c960 <xTaskIncrementTick+0x150>)
 800c864:	6013      	str	r3, [r2, #0]
 800c866:	4a3f      	ldr	r2, [pc, #252]	; (800c964 <xTaskIncrementTick+0x154>)
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6013      	str	r3, [r2, #0]
 800c86c:	4b3e      	ldr	r3, [pc, #248]	; (800c968 <xTaskIncrementTick+0x158>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	3301      	adds	r3, #1
 800c872:	4a3d      	ldr	r2, [pc, #244]	; (800c968 <xTaskIncrementTick+0x158>)
 800c874:	6013      	str	r3, [r2, #0]
 800c876:	f000 fad1 	bl	800ce1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c87a:	4b3c      	ldr	r3, [pc, #240]	; (800c96c <xTaskIncrementTick+0x15c>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	693a      	ldr	r2, [r7, #16]
 800c880:	429a      	cmp	r2, r3
 800c882:	d349      	bcc.n	800c918 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c884:	4b36      	ldr	r3, [pc, #216]	; (800c960 <xTaskIncrementTick+0x150>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d104      	bne.n	800c898 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c88e:	4b37      	ldr	r3, [pc, #220]	; (800c96c <xTaskIncrementTick+0x15c>)
 800c890:	f04f 32ff 	mov.w	r2, #4294967295
 800c894:	601a      	str	r2, [r3, #0]
					break;
 800c896:	e03f      	b.n	800c918 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c898:	4b31      	ldr	r3, [pc, #196]	; (800c960 <xTaskIncrementTick+0x150>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d203      	bcs.n	800c8b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c8b0:	4a2e      	ldr	r2, [pc, #184]	; (800c96c <xTaskIncrementTick+0x15c>)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c8b6:	e02f      	b.n	800c918 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7fe ff99 	bl	800b7f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d004      	beq.n	800c8d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	3318      	adds	r3, #24
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fe ff90 	bl	800b7f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d8:	4b25      	ldr	r3, [pc, #148]	; (800c970 <xTaskIncrementTick+0x160>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d903      	bls.n	800c8e8 <xTaskIncrementTick+0xd8>
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e4:	4a22      	ldr	r2, [pc, #136]	; (800c970 <xTaskIncrementTick+0x160>)
 800c8e6:	6013      	str	r3, [r2, #0]
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	4a1f      	ldr	r2, [pc, #124]	; (800c974 <xTaskIncrementTick+0x164>)
 800c8f6:	441a      	add	r2, r3
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	4610      	mov	r0, r2
 800c900:	f7fe ff1b 	bl	800b73a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c908:	4b1b      	ldr	r3, [pc, #108]	; (800c978 <xTaskIncrementTick+0x168>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c90e:	429a      	cmp	r2, r3
 800c910:	d3b8      	bcc.n	800c884 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c912:	2301      	movs	r3, #1
 800c914:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c916:	e7b5      	b.n	800c884 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c918:	4b17      	ldr	r3, [pc, #92]	; (800c978 <xTaskIncrementTick+0x168>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c91e:	4915      	ldr	r1, [pc, #84]	; (800c974 <xTaskIncrementTick+0x164>)
 800c920:	4613      	mov	r3, r2
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	4413      	add	r3, r2
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	440b      	add	r3, r1
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d901      	bls.n	800c934 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c930:	2301      	movs	r3, #1
 800c932:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c934:	4b11      	ldr	r3, [pc, #68]	; (800c97c <xTaskIncrementTick+0x16c>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d007      	beq.n	800c94c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c93c:	2301      	movs	r3, #1
 800c93e:	617b      	str	r3, [r7, #20]
 800c940:	e004      	b.n	800c94c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c942:	4b0f      	ldr	r3, [pc, #60]	; (800c980 <xTaskIncrementTick+0x170>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3301      	adds	r3, #1
 800c948:	4a0d      	ldr	r2, [pc, #52]	; (800c980 <xTaskIncrementTick+0x170>)
 800c94a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c94c:	697b      	ldr	r3, [r7, #20]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3718      	adds	r7, #24
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	24000c6c 	.word	0x24000c6c
 800c95c:	24000c48 	.word	0x24000c48
 800c960:	24000bfc 	.word	0x24000bfc
 800c964:	24000c00 	.word	0x24000c00
 800c968:	24000c5c 	.word	0x24000c5c
 800c96c:	24000c64 	.word	0x24000c64
 800c970:	24000c4c 	.word	0x24000c4c
 800c974:	24000774 	.word	0x24000774
 800c978:	24000770 	.word	0x24000770
 800c97c:	24000c58 	.word	0x24000c58
 800c980:	24000c54 	.word	0x24000c54

0800c984 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c98a:	4b28      	ldr	r3, [pc, #160]	; (800ca2c <vTaskSwitchContext+0xa8>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d003      	beq.n	800c99a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c992:	4b27      	ldr	r3, [pc, #156]	; (800ca30 <vTaskSwitchContext+0xac>)
 800c994:	2201      	movs	r2, #1
 800c996:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c998:	e041      	b.n	800ca1e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c99a:	4b25      	ldr	r3, [pc, #148]	; (800ca30 <vTaskSwitchContext+0xac>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9a0:	4b24      	ldr	r3, [pc, #144]	; (800ca34 <vTaskSwitchContext+0xb0>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	60fb      	str	r3, [r7, #12]
 800c9a6:	e010      	b.n	800c9ca <vTaskSwitchContext+0x46>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10a      	bne.n	800c9c4 <vTaskSwitchContext+0x40>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	607b      	str	r3, [r7, #4]
}
 800c9c0:	bf00      	nop
 800c9c2:	e7fe      	b.n	800c9c2 <vTaskSwitchContext+0x3e>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	60fb      	str	r3, [r7, #12]
 800c9ca:	491b      	ldr	r1, [pc, #108]	; (800ca38 <vTaskSwitchContext+0xb4>)
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	4413      	add	r3, r2
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	440b      	add	r3, r1
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d0e4      	beq.n	800c9a8 <vTaskSwitchContext+0x24>
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	4413      	add	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4a13      	ldr	r2, [pc, #76]	; (800ca38 <vTaskSwitchContext+0xb4>)
 800c9ea:	4413      	add	r3, r2
 800c9ec:	60bb      	str	r3, [r7, #8]
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	605a      	str	r2, [r3, #4]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	3308      	adds	r3, #8
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d104      	bne.n	800ca0e <vTaskSwitchContext+0x8a>
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	685a      	ldr	r2, [r3, #4]
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	605a      	str	r2, [r3, #4]
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	4a09      	ldr	r2, [pc, #36]	; (800ca3c <vTaskSwitchContext+0xb8>)
 800ca16:	6013      	str	r3, [r2, #0]
 800ca18:	4a06      	ldr	r2, [pc, #24]	; (800ca34 <vTaskSwitchContext+0xb0>)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6013      	str	r3, [r2, #0]
}
 800ca1e:	bf00      	nop
 800ca20:	3714      	adds	r7, #20
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	24000c6c 	.word	0x24000c6c
 800ca30:	24000c58 	.word	0x24000c58
 800ca34:	24000c4c 	.word	0x24000c4c
 800ca38:	24000774 	.word	0x24000774
 800ca3c:	24000770 	.word	0x24000770

0800ca40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10a      	bne.n	800ca66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	60fb      	str	r3, [r7, #12]
}
 800ca62:	bf00      	nop
 800ca64:	e7fe      	b.n	800ca64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca66:	4b07      	ldr	r3, [pc, #28]	; (800ca84 <vTaskPlaceOnEventList+0x44>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	3318      	adds	r3, #24
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7fe fe87 	bl	800b782 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca74:	2101      	movs	r1, #1
 800ca76:	6838      	ldr	r0, [r7, #0]
 800ca78:	f000 fa7c 	bl	800cf74 <prvAddCurrentTaskToDelayedList>
}
 800ca7c:	bf00      	nop
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	24000770 	.word	0x24000770

0800ca88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b086      	sub	sp, #24
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10a      	bne.n	800cab0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	617b      	str	r3, [r7, #20]
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cab0:	4b0a      	ldr	r3, [pc, #40]	; (800cadc <vTaskPlaceOnEventListRestricted+0x54>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	3318      	adds	r3, #24
 800cab6:	4619      	mov	r1, r3
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f7fe fe3e 	bl	800b73a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cac4:	f04f 33ff 	mov.w	r3, #4294967295
 800cac8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800caca:	6879      	ldr	r1, [r7, #4]
 800cacc:	68b8      	ldr	r0, [r7, #8]
 800cace:	f000 fa51 	bl	800cf74 <prvAddCurrentTaskToDelayedList>
	}
 800cad2:	bf00      	nop
 800cad4:	3718      	adds	r7, #24
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	24000770 	.word	0x24000770

0800cae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b086      	sub	sp, #24
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10a      	bne.n	800cb0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800caf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafa:	f383 8811 	msr	BASEPRI, r3
 800cafe:	f3bf 8f6f 	isb	sy
 800cb02:	f3bf 8f4f 	dsb	sy
 800cb06:	60fb      	str	r3, [r7, #12]
}
 800cb08:	bf00      	nop
 800cb0a:	e7fe      	b.n	800cb0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	3318      	adds	r3, #24
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fe fe6f 	bl	800b7f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb16:	4b1e      	ldr	r3, [pc, #120]	; (800cb90 <xTaskRemoveFromEventList+0xb0>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d11d      	bne.n	800cb5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	3304      	adds	r3, #4
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fe fe66 	bl	800b7f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb2c:	4b19      	ldr	r3, [pc, #100]	; (800cb94 <xTaskRemoveFromEventList+0xb4>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d903      	bls.n	800cb3c <xTaskRemoveFromEventList+0x5c>
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb38:	4a16      	ldr	r2, [pc, #88]	; (800cb94 <xTaskRemoveFromEventList+0xb4>)
 800cb3a:	6013      	str	r3, [r2, #0]
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb40:	4613      	mov	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4a13      	ldr	r2, [pc, #76]	; (800cb98 <xTaskRemoveFromEventList+0xb8>)
 800cb4a:	441a      	add	r2, r3
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	3304      	adds	r3, #4
 800cb50:	4619      	mov	r1, r3
 800cb52:	4610      	mov	r0, r2
 800cb54:	f7fe fdf1 	bl	800b73a <vListInsertEnd>
 800cb58:	e005      	b.n	800cb66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	3318      	adds	r3, #24
 800cb5e:	4619      	mov	r1, r3
 800cb60:	480e      	ldr	r0, [pc, #56]	; (800cb9c <xTaskRemoveFromEventList+0xbc>)
 800cb62:	f7fe fdea 	bl	800b73a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb6a:	4b0d      	ldr	r3, [pc, #52]	; (800cba0 <xTaskRemoveFromEventList+0xc0>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d905      	bls.n	800cb80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cb74:	2301      	movs	r3, #1
 800cb76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cb78:	4b0a      	ldr	r3, [pc, #40]	; (800cba4 <xTaskRemoveFromEventList+0xc4>)
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	601a      	str	r2, [r3, #0]
 800cb7e:	e001      	b.n	800cb84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cb80:	2300      	movs	r3, #0
 800cb82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cb84:	697b      	ldr	r3, [r7, #20]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3718      	adds	r7, #24
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	24000c6c 	.word	0x24000c6c
 800cb94:	24000c4c 	.word	0x24000c4c
 800cb98:	24000774 	.word	0x24000774
 800cb9c:	24000c04 	.word	0x24000c04
 800cba0:	24000770 	.word	0x24000770
 800cba4:	24000c58 	.word	0x24000c58

0800cba8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cbb0:	4b06      	ldr	r3, [pc, #24]	; (800cbcc <vTaskInternalSetTimeOutState+0x24>)
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cbb8:	4b05      	ldr	r3, [pc, #20]	; (800cbd0 <vTaskInternalSetTimeOutState+0x28>)
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	605a      	str	r2, [r3, #4]
}
 800cbc0:	bf00      	nop
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	24000c5c 	.word	0x24000c5c
 800cbd0:	24000c48 	.word	0x24000c48

0800cbd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10a      	bne.n	800cbfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe8:	f383 8811 	msr	BASEPRI, r3
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	613b      	str	r3, [r7, #16]
}
 800cbf6:	bf00      	nop
 800cbf8:	e7fe      	b.n	800cbf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10a      	bne.n	800cc16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc04:	f383 8811 	msr	BASEPRI, r3
 800cc08:	f3bf 8f6f 	isb	sy
 800cc0c:	f3bf 8f4f 	dsb	sy
 800cc10:	60fb      	str	r3, [r7, #12]
}
 800cc12:	bf00      	nop
 800cc14:	e7fe      	b.n	800cc14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cc16:	f000 fe7d 	bl	800d914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cc1a:	4b1d      	ldr	r3, [pc, #116]	; (800cc90 <xTaskCheckForTimeOut+0xbc>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	69ba      	ldr	r2, [r7, #24]
 800cc26:	1ad3      	subs	r3, r2, r3
 800cc28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc32:	d102      	bne.n	800cc3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cc34:	2300      	movs	r3, #0
 800cc36:	61fb      	str	r3, [r7, #28]
 800cc38:	e023      	b.n	800cc82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	4b15      	ldr	r3, [pc, #84]	; (800cc94 <xTaskCheckForTimeOut+0xc0>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d007      	beq.n	800cc56 <xTaskCheckForTimeOut+0x82>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	69ba      	ldr	r2, [r7, #24]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d302      	bcc.n	800cc56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cc50:	2301      	movs	r3, #1
 800cc52:	61fb      	str	r3, [r7, #28]
 800cc54:	e015      	b.n	800cc82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	697a      	ldr	r2, [r7, #20]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d20b      	bcs.n	800cc78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	1ad2      	subs	r2, r2, r3
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7ff ff9b 	bl	800cba8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc72:	2300      	movs	r3, #0
 800cc74:	61fb      	str	r3, [r7, #28]
 800cc76:	e004      	b.n	800cc82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc82:	f000 fe77 	bl	800d974 <vPortExitCritical>

	return xReturn;
 800cc86:	69fb      	ldr	r3, [r7, #28]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3720      	adds	r7, #32
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	24000c48 	.word	0x24000c48
 800cc94:	24000c5c 	.word	0x24000c5c

0800cc98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc98:	b480      	push	{r7}
 800cc9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc9c:	4b03      	ldr	r3, [pc, #12]	; (800ccac <vTaskMissedYield+0x14>)
 800cc9e:	2201      	movs	r2, #1
 800cca0:	601a      	str	r2, [r3, #0]
}
 800cca2:	bf00      	nop
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	24000c58 	.word	0x24000c58

0800ccb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ccb8:	f000 f852 	bl	800cd60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ccbc:	4b06      	ldr	r3, [pc, #24]	; (800ccd8 <prvIdleTask+0x28>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d9f9      	bls.n	800ccb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ccc4:	4b05      	ldr	r3, [pc, #20]	; (800ccdc <prvIdleTask+0x2c>)
 800ccc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccca:	601a      	str	r2, [r3, #0]
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ccd4:	e7f0      	b.n	800ccb8 <prvIdleTask+0x8>
 800ccd6:	bf00      	nop
 800ccd8:	24000774 	.word	0x24000774
 800ccdc:	e000ed04 	.word	0xe000ed04

0800cce0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cce6:	2300      	movs	r3, #0
 800cce8:	607b      	str	r3, [r7, #4]
 800ccea:	e00c      	b.n	800cd06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	4413      	add	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	4a12      	ldr	r2, [pc, #72]	; (800cd40 <prvInitialiseTaskLists+0x60>)
 800ccf8:	4413      	add	r3, r2
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fe fcf0 	bl	800b6e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3301      	adds	r3, #1
 800cd04:	607b      	str	r3, [r7, #4]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b37      	cmp	r3, #55	; 0x37
 800cd0a:	d9ef      	bls.n	800ccec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cd0c:	480d      	ldr	r0, [pc, #52]	; (800cd44 <prvInitialiseTaskLists+0x64>)
 800cd0e:	f7fe fce7 	bl	800b6e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cd12:	480d      	ldr	r0, [pc, #52]	; (800cd48 <prvInitialiseTaskLists+0x68>)
 800cd14:	f7fe fce4 	bl	800b6e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cd18:	480c      	ldr	r0, [pc, #48]	; (800cd4c <prvInitialiseTaskLists+0x6c>)
 800cd1a:	f7fe fce1 	bl	800b6e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cd1e:	480c      	ldr	r0, [pc, #48]	; (800cd50 <prvInitialiseTaskLists+0x70>)
 800cd20:	f7fe fcde 	bl	800b6e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cd24:	480b      	ldr	r0, [pc, #44]	; (800cd54 <prvInitialiseTaskLists+0x74>)
 800cd26:	f7fe fcdb 	bl	800b6e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cd2a:	4b0b      	ldr	r3, [pc, #44]	; (800cd58 <prvInitialiseTaskLists+0x78>)
 800cd2c:	4a05      	ldr	r2, [pc, #20]	; (800cd44 <prvInitialiseTaskLists+0x64>)
 800cd2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cd30:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <prvInitialiseTaskLists+0x7c>)
 800cd32:	4a05      	ldr	r2, [pc, #20]	; (800cd48 <prvInitialiseTaskLists+0x68>)
 800cd34:	601a      	str	r2, [r3, #0]
}
 800cd36:	bf00      	nop
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	24000774 	.word	0x24000774
 800cd44:	24000bd4 	.word	0x24000bd4
 800cd48:	24000be8 	.word	0x24000be8
 800cd4c:	24000c04 	.word	0x24000c04
 800cd50:	24000c18 	.word	0x24000c18
 800cd54:	24000c30 	.word	0x24000c30
 800cd58:	24000bfc 	.word	0x24000bfc
 800cd5c:	24000c00 	.word	0x24000c00

0800cd60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd66:	e019      	b.n	800cd9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd68:	f000 fdd4 	bl	800d914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd6c:	4b10      	ldr	r3, [pc, #64]	; (800cdb0 <prvCheckTasksWaitingTermination+0x50>)
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	3304      	adds	r3, #4
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fe fd3b 	bl	800b7f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd7e:	4b0d      	ldr	r3, [pc, #52]	; (800cdb4 <prvCheckTasksWaitingTermination+0x54>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	3b01      	subs	r3, #1
 800cd84:	4a0b      	ldr	r2, [pc, #44]	; (800cdb4 <prvCheckTasksWaitingTermination+0x54>)
 800cd86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd88:	4b0b      	ldr	r3, [pc, #44]	; (800cdb8 <prvCheckTasksWaitingTermination+0x58>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	4a0a      	ldr	r2, [pc, #40]	; (800cdb8 <prvCheckTasksWaitingTermination+0x58>)
 800cd90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd92:	f000 fdef 	bl	800d974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f810 	bl	800cdbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd9c:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <prvCheckTasksWaitingTermination+0x58>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1e1      	bne.n	800cd68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop
 800cda8:	3708      	adds	r7, #8
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	24000c18 	.word	0x24000c18
 800cdb4:	24000c44 	.word	0x24000c44
 800cdb8:	24000c2c 	.word	0x24000c2c

0800cdbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d108      	bne.n	800cde0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f000 ff8c 	bl	800dcf0 <vPortFree>
				vPortFree( pxTCB );
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 ff89 	bl	800dcf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cdde:	e018      	b.n	800ce12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d103      	bne.n	800cdf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 ff80 	bl	800dcf0 <vPortFree>
	}
 800cdf0:	e00f      	b.n	800ce12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cdf8:	2b02      	cmp	r3, #2
 800cdfa:	d00a      	beq.n	800ce12 <prvDeleteTCB+0x56>
	__asm volatile
 800cdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce00:	f383 8811 	msr	BASEPRI, r3
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	60fb      	str	r3, [r7, #12]
}
 800ce0e:	bf00      	nop
 800ce10:	e7fe      	b.n	800ce10 <prvDeleteTCB+0x54>
	}
 800ce12:	bf00      	nop
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
	...

0800ce1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce22:	4b0c      	ldr	r3, [pc, #48]	; (800ce54 <prvResetNextTaskUnblockTime+0x38>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d104      	bne.n	800ce36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce2c:	4b0a      	ldr	r3, [pc, #40]	; (800ce58 <prvResetNextTaskUnblockTime+0x3c>)
 800ce2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ce34:	e008      	b.n	800ce48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce36:	4b07      	ldr	r3, [pc, #28]	; (800ce54 <prvResetNextTaskUnblockTime+0x38>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	4a04      	ldr	r2, [pc, #16]	; (800ce58 <prvResetNextTaskUnblockTime+0x3c>)
 800ce46:	6013      	str	r3, [r2, #0]
}
 800ce48:	bf00      	nop
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	24000bfc 	.word	0x24000bfc
 800ce58:	24000c64 	.word	0x24000c64

0800ce5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce62:	4b0b      	ldr	r3, [pc, #44]	; (800ce90 <xTaskGetSchedulerState+0x34>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d102      	bne.n	800ce70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	607b      	str	r3, [r7, #4]
 800ce6e:	e008      	b.n	800ce82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce70:	4b08      	ldr	r3, [pc, #32]	; (800ce94 <xTaskGetSchedulerState+0x38>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d102      	bne.n	800ce7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce78:	2302      	movs	r3, #2
 800ce7a:	607b      	str	r3, [r7, #4]
 800ce7c:	e001      	b.n	800ce82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce82:	687b      	ldr	r3, [r7, #4]
	}
 800ce84:	4618      	mov	r0, r3
 800ce86:	370c      	adds	r7, #12
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr
 800ce90:	24000c50 	.word	0x24000c50
 800ce94:	24000c6c 	.word	0x24000c6c

0800ce98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cea4:	2300      	movs	r3, #0
 800cea6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d056      	beq.n	800cf5c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ceae:	4b2e      	ldr	r3, [pc, #184]	; (800cf68 <xTaskPriorityDisinherit+0xd0>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d00a      	beq.n	800cece <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ceb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebc:	f383 8811 	msr	BASEPRI, r3
 800cec0:	f3bf 8f6f 	isb	sy
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	60fb      	str	r3, [r7, #12]
}
 800ceca:	bf00      	nop
 800cecc:	e7fe      	b.n	800cecc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10a      	bne.n	800ceec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ced6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceda:	f383 8811 	msr	BASEPRI, r3
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	60bb      	str	r3, [r7, #8]
}
 800cee8:	bf00      	nop
 800ceea:	e7fe      	b.n	800ceea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef0:	1e5a      	subs	r2, r3, #1
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d02c      	beq.n	800cf5c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d128      	bne.n	800cf5c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fe fc70 	bl	800b7f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2c:	4b0f      	ldr	r3, [pc, #60]	; (800cf6c <xTaskPriorityDisinherit+0xd4>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d903      	bls.n	800cf3c <xTaskPriorityDisinherit+0xa4>
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf38:	4a0c      	ldr	r2, [pc, #48]	; (800cf6c <xTaskPriorityDisinherit+0xd4>)
 800cf3a:	6013      	str	r3, [r2, #0]
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	4a09      	ldr	r2, [pc, #36]	; (800cf70 <xTaskPriorityDisinherit+0xd8>)
 800cf4a:	441a      	add	r2, r3
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	3304      	adds	r3, #4
 800cf50:	4619      	mov	r1, r3
 800cf52:	4610      	mov	r0, r2
 800cf54:	f7fe fbf1 	bl	800b73a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf5c:	697b      	ldr	r3, [r7, #20]
	}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3718      	adds	r7, #24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	24000770 	.word	0x24000770
 800cf6c:	24000c4c 	.word	0x24000c4c
 800cf70:	24000774 	.word	0x24000774

0800cf74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf7e:	4b21      	ldr	r3, [pc, #132]	; (800d004 <prvAddCurrentTaskToDelayedList+0x90>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf84:	4b20      	ldr	r3, [pc, #128]	; (800d008 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	3304      	adds	r3, #4
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fe fc32 	bl	800b7f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf96:	d10a      	bne.n	800cfae <prvAddCurrentTaskToDelayedList+0x3a>
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d007      	beq.n	800cfae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf9e:	4b1a      	ldr	r3, [pc, #104]	; (800d008 <prvAddCurrentTaskToDelayedList+0x94>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	4819      	ldr	r0, [pc, #100]	; (800d00c <prvAddCurrentTaskToDelayedList+0x98>)
 800cfa8:	f7fe fbc7 	bl	800b73a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cfac:	e026      	b.n	800cffc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cfb6:	4b14      	ldr	r3, [pc, #80]	; (800d008 <prvAddCurrentTaskToDelayedList+0x94>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	68ba      	ldr	r2, [r7, #8]
 800cfbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d209      	bcs.n	800cfda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfc6:	4b12      	ldr	r3, [pc, #72]	; (800d010 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	4b0f      	ldr	r3, [pc, #60]	; (800d008 <prvAddCurrentTaskToDelayedList+0x94>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	4610      	mov	r0, r2
 800cfd4:	f7fe fbd5 	bl	800b782 <vListInsert>
}
 800cfd8:	e010      	b.n	800cffc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfda:	4b0e      	ldr	r3, [pc, #56]	; (800d014 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	4b0a      	ldr	r3, [pc, #40]	; (800d008 <prvAddCurrentTaskToDelayedList+0x94>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3304      	adds	r3, #4
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	4610      	mov	r0, r2
 800cfe8:	f7fe fbcb 	bl	800b782 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cfec:	4b0a      	ldr	r3, [pc, #40]	; (800d018 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d202      	bcs.n	800cffc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cff6:	4a08      	ldr	r2, [pc, #32]	; (800d018 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	6013      	str	r3, [r2, #0]
}
 800cffc:	bf00      	nop
 800cffe:	3710      	adds	r7, #16
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	24000c48 	.word	0x24000c48
 800d008:	24000770 	.word	0x24000770
 800d00c:	24000c30 	.word	0x24000c30
 800d010:	24000c00 	.word	0x24000c00
 800d014:	24000bfc 	.word	0x24000bfc
 800d018:	24000c64 	.word	0x24000c64

0800d01c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b08a      	sub	sp, #40	; 0x28
 800d020:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d022:	2300      	movs	r3, #0
 800d024:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d026:	f000 fb07 	bl	800d638 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d02a:	4b1c      	ldr	r3, [pc, #112]	; (800d09c <xTimerCreateTimerTask+0x80>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d021      	beq.n	800d076 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d032:	2300      	movs	r3, #0
 800d034:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d036:	2300      	movs	r3, #0
 800d038:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d03a:	1d3a      	adds	r2, r7, #4
 800d03c:	f107 0108 	add.w	r1, r7, #8
 800d040:	f107 030c 	add.w	r3, r7, #12
 800d044:	4618      	mov	r0, r3
 800d046:	f7fe fb31 	bl	800b6ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d04a:	6879      	ldr	r1, [r7, #4]
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	9202      	str	r2, [sp, #8]
 800d052:	9301      	str	r3, [sp, #4]
 800d054:	2302      	movs	r3, #2
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	2300      	movs	r3, #0
 800d05a:	460a      	mov	r2, r1
 800d05c:	4910      	ldr	r1, [pc, #64]	; (800d0a0 <xTimerCreateTimerTask+0x84>)
 800d05e:	4811      	ldr	r0, [pc, #68]	; (800d0a4 <xTimerCreateTimerTask+0x88>)
 800d060:	f7ff f8de 	bl	800c220 <xTaskCreateStatic>
 800d064:	4603      	mov	r3, r0
 800d066:	4a10      	ldr	r2, [pc, #64]	; (800d0a8 <xTimerCreateTimerTask+0x8c>)
 800d068:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d06a:	4b0f      	ldr	r3, [pc, #60]	; (800d0a8 <xTimerCreateTimerTask+0x8c>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d001      	beq.n	800d076 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d072:	2301      	movs	r3, #1
 800d074:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d10a      	bne.n	800d092 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d080:	f383 8811 	msr	BASEPRI, r3
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	613b      	str	r3, [r7, #16]
}
 800d08e:	bf00      	nop
 800d090:	e7fe      	b.n	800d090 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d092:	697b      	ldr	r3, [r7, #20]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3718      	adds	r7, #24
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	24000ca0 	.word	0x24000ca0
 800d0a0:	0800e2fc 	.word	0x0800e2fc
 800d0a4:	0800d1e1 	.word	0x0800d1e1
 800d0a8:	24000ca4 	.word	0x24000ca4

0800d0ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b08a      	sub	sp, #40	; 0x28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
 800d0b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10a      	bne.n	800d0da <xTimerGenericCommand+0x2e>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	623b      	str	r3, [r7, #32]
}
 800d0d6:	bf00      	nop
 800d0d8:	e7fe      	b.n	800d0d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d0da:	4b1a      	ldr	r3, [pc, #104]	; (800d144 <xTimerGenericCommand+0x98>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d02a      	beq.n	800d138 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	2b05      	cmp	r3, #5
 800d0f2:	dc18      	bgt.n	800d126 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d0f4:	f7ff feb2 	bl	800ce5c <xTaskGetSchedulerState>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d109      	bne.n	800d112 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d0fe:	4b11      	ldr	r3, [pc, #68]	; (800d144 <xTimerGenericCommand+0x98>)
 800d100:	6818      	ldr	r0, [r3, #0]
 800d102:	f107 0110 	add.w	r1, r7, #16
 800d106:	2300      	movs	r3, #0
 800d108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d10a:	f7fe fca1 	bl	800ba50 <xQueueGenericSend>
 800d10e:	6278      	str	r0, [r7, #36]	; 0x24
 800d110:	e012      	b.n	800d138 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d112:	4b0c      	ldr	r3, [pc, #48]	; (800d144 <xTimerGenericCommand+0x98>)
 800d114:	6818      	ldr	r0, [r3, #0]
 800d116:	f107 0110 	add.w	r1, r7, #16
 800d11a:	2300      	movs	r3, #0
 800d11c:	2200      	movs	r2, #0
 800d11e:	f7fe fc97 	bl	800ba50 <xQueueGenericSend>
 800d122:	6278      	str	r0, [r7, #36]	; 0x24
 800d124:	e008      	b.n	800d138 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d126:	4b07      	ldr	r3, [pc, #28]	; (800d144 <xTimerGenericCommand+0x98>)
 800d128:	6818      	ldr	r0, [r3, #0]
 800d12a:	f107 0110 	add.w	r1, r7, #16
 800d12e:	2300      	movs	r3, #0
 800d130:	683a      	ldr	r2, [r7, #0]
 800d132:	f7fe fd8b 	bl	800bc4c <xQueueGenericSendFromISR>
 800d136:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3728      	adds	r7, #40	; 0x28
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	24000ca0 	.word	0x24000ca0

0800d148 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b088      	sub	sp, #32
 800d14c:	af02      	add	r7, sp, #8
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d152:	4b22      	ldr	r3, [pc, #136]	; (800d1dc <prvProcessExpiredTimer+0x94>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	3304      	adds	r3, #4
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe fb47 	bl	800b7f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d16c:	f003 0304 	and.w	r3, r3, #4
 800d170:	2b00      	cmp	r3, #0
 800d172:	d022      	beq.n	800d1ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	699a      	ldr	r2, [r3, #24]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	18d1      	adds	r1, r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	6978      	ldr	r0, [r7, #20]
 800d182:	f000 f8d1 	bl	800d328 <prvInsertTimerInActiveList>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d01f      	beq.n	800d1cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d18c:	2300      	movs	r3, #0
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	2300      	movs	r3, #0
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	2100      	movs	r1, #0
 800d196:	6978      	ldr	r0, [r7, #20]
 800d198:	f7ff ff88 	bl	800d0ac <xTimerGenericCommand>
 800d19c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d113      	bne.n	800d1cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	60fb      	str	r3, [r7, #12]
}
 800d1b6:	bf00      	nop
 800d1b8:	e7fe      	b.n	800d1b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1c0:	f023 0301 	bic.w	r3, r3, #1
 800d1c4:	b2da      	uxtb	r2, r3
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	6a1b      	ldr	r3, [r3, #32]
 800d1d0:	6978      	ldr	r0, [r7, #20]
 800d1d2:	4798      	blx	r3
}
 800d1d4:	bf00      	nop
 800d1d6:	3718      	adds	r7, #24
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	24000c98 	.word	0x24000c98

0800d1e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d1e8:	f107 0308 	add.w	r3, r7, #8
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f000 f857 	bl	800d2a0 <prvGetNextExpireTime>
 800d1f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f000 f803 	bl	800d204 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d1fe:	f000 f8d5 	bl	800d3ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d202:	e7f1      	b.n	800d1e8 <prvTimerTask+0x8>

0800d204 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d20e:	f7ff fa43 	bl	800c698 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d212:	f107 0308 	add.w	r3, r7, #8
 800d216:	4618      	mov	r0, r3
 800d218:	f000 f866 	bl	800d2e8 <prvSampleTimeNow>
 800d21c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d130      	bne.n	800d286 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d10a      	bne.n	800d240 <prvProcessTimerOrBlockTask+0x3c>
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d806      	bhi.n	800d240 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d232:	f7ff fa3f 	bl	800c6b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d236:	68f9      	ldr	r1, [r7, #12]
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f7ff ff85 	bl	800d148 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d23e:	e024      	b.n	800d28a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d008      	beq.n	800d258 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d246:	4b13      	ldr	r3, [pc, #76]	; (800d294 <prvProcessTimerOrBlockTask+0x90>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d101      	bne.n	800d254 <prvProcessTimerOrBlockTask+0x50>
 800d250:	2301      	movs	r3, #1
 800d252:	e000      	b.n	800d256 <prvProcessTimerOrBlockTask+0x52>
 800d254:	2300      	movs	r3, #0
 800d256:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d258:	4b0f      	ldr	r3, [pc, #60]	; (800d298 <prvProcessTimerOrBlockTask+0x94>)
 800d25a:	6818      	ldr	r0, [r3, #0]
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	683a      	ldr	r2, [r7, #0]
 800d264:	4619      	mov	r1, r3
 800d266:	f7fe ffa7 	bl	800c1b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d26a:	f7ff fa23 	bl	800c6b4 <xTaskResumeAll>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10a      	bne.n	800d28a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d274:	4b09      	ldr	r3, [pc, #36]	; (800d29c <prvProcessTimerOrBlockTask+0x98>)
 800d276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d27a:	601a      	str	r2, [r3, #0]
 800d27c:	f3bf 8f4f 	dsb	sy
 800d280:	f3bf 8f6f 	isb	sy
}
 800d284:	e001      	b.n	800d28a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d286:	f7ff fa15 	bl	800c6b4 <xTaskResumeAll>
}
 800d28a:	bf00      	nop
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	24000c9c 	.word	0x24000c9c
 800d298:	24000ca0 	.word	0x24000ca0
 800d29c:	e000ed04 	.word	0xe000ed04

0800d2a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d2a8:	4b0e      	ldr	r3, [pc, #56]	; (800d2e4 <prvGetNextExpireTime+0x44>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <prvGetNextExpireTime+0x16>
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	e000      	b.n	800d2b8 <prvGetNextExpireTime+0x18>
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d105      	bne.n	800d2d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2c4:	4b07      	ldr	r3, [pc, #28]	; (800d2e4 <prvGetNextExpireTime+0x44>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	60fb      	str	r3, [r7, #12]
 800d2ce:	e001      	b.n	800d2d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3714      	adds	r7, #20
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	24000c98 	.word	0x24000c98

0800d2e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d2f0:	f7ff fa7e 	bl	800c7f0 <xTaskGetTickCount>
 800d2f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d2f6:	4b0b      	ldr	r3, [pc, #44]	; (800d324 <prvSampleTimeNow+0x3c>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	68fa      	ldr	r2, [r7, #12]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d205      	bcs.n	800d30c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d300:	f000 f936 	bl	800d570 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2201      	movs	r2, #1
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	e002      	b.n	800d312 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2200      	movs	r2, #0
 800d310:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d312:	4a04      	ldr	r2, [pc, #16]	; (800d324 <prvSampleTimeNow+0x3c>)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d318:	68fb      	ldr	r3, [r7, #12]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	24000ca8 	.word	0x24000ca8

0800d328 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
 800d334:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d336:	2300      	movs	r3, #0
 800d338:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	68ba      	ldr	r2, [r7, #8]
 800d33e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d346:	68ba      	ldr	r2, [r7, #8]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d812      	bhi.n	800d374 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	1ad2      	subs	r2, r2, r3
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	699b      	ldr	r3, [r3, #24]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d302      	bcc.n	800d362 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d35c:	2301      	movs	r3, #1
 800d35e:	617b      	str	r3, [r7, #20]
 800d360:	e01b      	b.n	800d39a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d362:	4b10      	ldr	r3, [pc, #64]	; (800d3a4 <prvInsertTimerInActiveList+0x7c>)
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	3304      	adds	r3, #4
 800d36a:	4619      	mov	r1, r3
 800d36c:	4610      	mov	r0, r2
 800d36e:	f7fe fa08 	bl	800b782 <vListInsert>
 800d372:	e012      	b.n	800d39a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d206      	bcs.n	800d38a <prvInsertTimerInActiveList+0x62>
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	429a      	cmp	r2, r3
 800d382:	d302      	bcc.n	800d38a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d384:	2301      	movs	r3, #1
 800d386:	617b      	str	r3, [r7, #20]
 800d388:	e007      	b.n	800d39a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d38a:	4b07      	ldr	r3, [pc, #28]	; (800d3a8 <prvInsertTimerInActiveList+0x80>)
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3304      	adds	r3, #4
 800d392:	4619      	mov	r1, r3
 800d394:	4610      	mov	r0, r2
 800d396:	f7fe f9f4 	bl	800b782 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d39a:	697b      	ldr	r3, [r7, #20]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3718      	adds	r7, #24
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	24000c9c 	.word	0x24000c9c
 800d3a8:	24000c98 	.word	0x24000c98

0800d3ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b08e      	sub	sp, #56	; 0x38
 800d3b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d3b2:	e0ca      	b.n	800d54a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	da18      	bge.n	800d3ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d3ba:	1d3b      	adds	r3, r7, #4
 800d3bc:	3304      	adds	r3, #4
 800d3be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d10a      	bne.n	800d3dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ca:	f383 8811 	msr	BASEPRI, r3
 800d3ce:	f3bf 8f6f 	isb	sy
 800d3d2:	f3bf 8f4f 	dsb	sy
 800d3d6:	61fb      	str	r3, [r7, #28]
}
 800d3d8:	bf00      	nop
 800d3da:	e7fe      	b.n	800d3da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3e2:	6850      	ldr	r0, [r2, #4]
 800d3e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3e6:	6892      	ldr	r2, [r2, #8]
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f2c0 80aa 	blt.w	800d548 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d004      	beq.n	800d40a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d402:	3304      	adds	r3, #4
 800d404:	4618      	mov	r0, r3
 800d406:	f7fe f9f5 	bl	800b7f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d40a:	463b      	mov	r3, r7
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7ff ff6b 	bl	800d2e8 <prvSampleTimeNow>
 800d412:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b09      	cmp	r3, #9
 800d418:	f200 8097 	bhi.w	800d54a <prvProcessReceivedCommands+0x19e>
 800d41c:	a201      	add	r2, pc, #4	; (adr r2, 800d424 <prvProcessReceivedCommands+0x78>)
 800d41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d422:	bf00      	nop
 800d424:	0800d44d 	.word	0x0800d44d
 800d428:	0800d44d 	.word	0x0800d44d
 800d42c:	0800d44d 	.word	0x0800d44d
 800d430:	0800d4c1 	.word	0x0800d4c1
 800d434:	0800d4d5 	.word	0x0800d4d5
 800d438:	0800d51f 	.word	0x0800d51f
 800d43c:	0800d44d 	.word	0x0800d44d
 800d440:	0800d44d 	.word	0x0800d44d
 800d444:	0800d4c1 	.word	0x0800d4c1
 800d448:	0800d4d5 	.word	0x0800d4d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d452:	f043 0301 	orr.w	r3, r3, #1
 800d456:	b2da      	uxtb	r2, r3
 800d458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d45e:	68ba      	ldr	r2, [r7, #8]
 800d460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d462:	699b      	ldr	r3, [r3, #24]
 800d464:	18d1      	adds	r1, r2, r3
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d46a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d46c:	f7ff ff5c 	bl	800d328 <prvInsertTimerInActiveList>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d069      	beq.n	800d54a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d478:	6a1b      	ldr	r3, [r3, #32]
 800d47a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d47c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d484:	f003 0304 	and.w	r3, r3, #4
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d05e      	beq.n	800d54a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d490:	699b      	ldr	r3, [r3, #24]
 800d492:	441a      	add	r2, r3
 800d494:	2300      	movs	r3, #0
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	2300      	movs	r3, #0
 800d49a:	2100      	movs	r1, #0
 800d49c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d49e:	f7ff fe05 	bl	800d0ac <xTimerGenericCommand>
 800d4a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d4a4:	6a3b      	ldr	r3, [r7, #32]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d14f      	bne.n	800d54a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	61bb      	str	r3, [r7, #24]
}
 800d4bc:	bf00      	nop
 800d4be:	e7fe      	b.n	800d4be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4c6:	f023 0301 	bic.w	r3, r3, #1
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d4d2:	e03a      	b.n	800d54a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4da:	f043 0301 	orr.w	r3, r3, #1
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d4e6:	68ba      	ldr	r2, [r7, #8]
 800d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ee:	699b      	ldr	r3, [r3, #24]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10a      	bne.n	800d50a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	617b      	str	r3, [r7, #20]
}
 800d506:	bf00      	nop
 800d508:	e7fe      	b.n	800d508 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	699a      	ldr	r2, [r3, #24]
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	18d1      	adds	r1, r2, r3
 800d512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d518:	f7ff ff06 	bl	800d328 <prvInsertTimerInActiveList>
					break;
 800d51c:	e015      	b.n	800d54a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d524:	f003 0302 	and.w	r3, r3, #2
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d103      	bne.n	800d534 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d52c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d52e:	f000 fbdf 	bl	800dcf0 <vPortFree>
 800d532:	e00a      	b.n	800d54a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d53a:	f023 0301 	bic.w	r3, r3, #1
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d546:	e000      	b.n	800d54a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d548:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d54a:	4b08      	ldr	r3, [pc, #32]	; (800d56c <prvProcessReceivedCommands+0x1c0>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	1d39      	adds	r1, r7, #4
 800d550:	2200      	movs	r2, #0
 800d552:	4618      	mov	r0, r3
 800d554:	f7fe fc16 	bl	800bd84 <xQueueReceive>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f47f af2a 	bne.w	800d3b4 <prvProcessReceivedCommands+0x8>
	}
}
 800d560:	bf00      	nop
 800d562:	bf00      	nop
 800d564:	3730      	adds	r7, #48	; 0x30
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	24000ca0 	.word	0x24000ca0

0800d570 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b088      	sub	sp, #32
 800d574:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d576:	e048      	b.n	800d60a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d578:	4b2d      	ldr	r3, [pc, #180]	; (800d630 <prvSwitchTimerLists+0xc0>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d582:	4b2b      	ldr	r3, [pc, #172]	; (800d630 <prvSwitchTimerLists+0xc0>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	68db      	ldr	r3, [r3, #12]
 800d58a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	3304      	adds	r3, #4
 800d590:	4618      	mov	r0, r3
 800d592:	f7fe f92f 	bl	800b7f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6a1b      	ldr	r3, [r3, #32]
 800d59a:	68f8      	ldr	r0, [r7, #12]
 800d59c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5a4:	f003 0304 	and.w	r3, r3, #4
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d02e      	beq.n	800d60a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	699b      	ldr	r3, [r3, #24]
 800d5b0:	693a      	ldr	r2, [r7, #16]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d5b6:	68ba      	ldr	r2, [r7, #8]
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d90e      	bls.n	800d5dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5ca:	4b19      	ldr	r3, [pc, #100]	; (800d630 <prvSwitchTimerLists+0xc0>)
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	4610      	mov	r0, r2
 800d5d6:	f7fe f8d4 	bl	800b782 <vListInsert>
 800d5da:	e016      	b.n	800d60a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5dc:	2300      	movs	r3, #0
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	693a      	ldr	r2, [r7, #16]
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f7ff fd60 	bl	800d0ac <xTimerGenericCommand>
 800d5ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10a      	bne.n	800d60a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	603b      	str	r3, [r7, #0]
}
 800d606:	bf00      	nop
 800d608:	e7fe      	b.n	800d608 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d60a:	4b09      	ldr	r3, [pc, #36]	; (800d630 <prvSwitchTimerLists+0xc0>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1b1      	bne.n	800d578 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d614:	4b06      	ldr	r3, [pc, #24]	; (800d630 <prvSwitchTimerLists+0xc0>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d61a:	4b06      	ldr	r3, [pc, #24]	; (800d634 <prvSwitchTimerLists+0xc4>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a04      	ldr	r2, [pc, #16]	; (800d630 <prvSwitchTimerLists+0xc0>)
 800d620:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d622:	4a04      	ldr	r2, [pc, #16]	; (800d634 <prvSwitchTimerLists+0xc4>)
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	6013      	str	r3, [r2, #0]
}
 800d628:	bf00      	nop
 800d62a:	3718      	adds	r7, #24
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	24000c98 	.word	0x24000c98
 800d634:	24000c9c 	.word	0x24000c9c

0800d638 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d63e:	f000 f969 	bl	800d914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d642:	4b15      	ldr	r3, [pc, #84]	; (800d698 <prvCheckForValidListAndQueue+0x60>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d120      	bne.n	800d68c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d64a:	4814      	ldr	r0, [pc, #80]	; (800d69c <prvCheckForValidListAndQueue+0x64>)
 800d64c:	f7fe f848 	bl	800b6e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d650:	4813      	ldr	r0, [pc, #76]	; (800d6a0 <prvCheckForValidListAndQueue+0x68>)
 800d652:	f7fe f845 	bl	800b6e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d656:	4b13      	ldr	r3, [pc, #76]	; (800d6a4 <prvCheckForValidListAndQueue+0x6c>)
 800d658:	4a10      	ldr	r2, [pc, #64]	; (800d69c <prvCheckForValidListAndQueue+0x64>)
 800d65a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d65c:	4b12      	ldr	r3, [pc, #72]	; (800d6a8 <prvCheckForValidListAndQueue+0x70>)
 800d65e:	4a10      	ldr	r2, [pc, #64]	; (800d6a0 <prvCheckForValidListAndQueue+0x68>)
 800d660:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d662:	2300      	movs	r3, #0
 800d664:	9300      	str	r3, [sp, #0]
 800d666:	4b11      	ldr	r3, [pc, #68]	; (800d6ac <prvCheckForValidListAndQueue+0x74>)
 800d668:	4a11      	ldr	r2, [pc, #68]	; (800d6b0 <prvCheckForValidListAndQueue+0x78>)
 800d66a:	2110      	movs	r1, #16
 800d66c:	200a      	movs	r0, #10
 800d66e:	f7fe f953 	bl	800b918 <xQueueGenericCreateStatic>
 800d672:	4603      	mov	r3, r0
 800d674:	4a08      	ldr	r2, [pc, #32]	; (800d698 <prvCheckForValidListAndQueue+0x60>)
 800d676:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d678:	4b07      	ldr	r3, [pc, #28]	; (800d698 <prvCheckForValidListAndQueue+0x60>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d005      	beq.n	800d68c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d680:	4b05      	ldr	r3, [pc, #20]	; (800d698 <prvCheckForValidListAndQueue+0x60>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	490b      	ldr	r1, [pc, #44]	; (800d6b4 <prvCheckForValidListAndQueue+0x7c>)
 800d686:	4618      	mov	r0, r3
 800d688:	f7fe fd6c 	bl	800c164 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d68c:	f000 f972 	bl	800d974 <vPortExitCritical>
}
 800d690:	bf00      	nop
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	24000ca0 	.word	0x24000ca0
 800d69c:	24000c70 	.word	0x24000c70
 800d6a0:	24000c84 	.word	0x24000c84
 800d6a4:	24000c98 	.word	0x24000c98
 800d6a8:	24000c9c 	.word	0x24000c9c
 800d6ac:	24000d4c 	.word	0x24000d4c
 800d6b0:	24000cac 	.word	0x24000cac
 800d6b4:	0800e304 	.word	0x0800e304

0800d6b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	3b04      	subs	r3, #4
 800d6c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d6d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	3b04      	subs	r3, #4
 800d6d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	f023 0201 	bic.w	r2, r3, #1
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	3b04      	subs	r3, #4
 800d6e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d6e8:	4a0c      	ldr	r2, [pc, #48]	; (800d71c <pxPortInitialiseStack+0x64>)
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	3b14      	subs	r3, #20
 800d6f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	3b04      	subs	r3, #4
 800d6fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f06f 0202 	mvn.w	r2, #2
 800d706:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	3b20      	subs	r3, #32
 800d70c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d70e:	68fb      	ldr	r3, [r7, #12]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3714      	adds	r7, #20
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr
 800d71c:	0800d721 	.word	0x0800d721

0800d720 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d726:	2300      	movs	r3, #0
 800d728:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d72a:	4b12      	ldr	r3, [pc, #72]	; (800d774 <prvTaskExitError+0x54>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d732:	d00a      	beq.n	800d74a <prvTaskExitError+0x2a>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	60fb      	str	r3, [r7, #12]
}
 800d746:	bf00      	nop
 800d748:	e7fe      	b.n	800d748 <prvTaskExitError+0x28>
	__asm volatile
 800d74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	60bb      	str	r3, [r7, #8]
}
 800d75c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d75e:	bf00      	nop
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d0fc      	beq.n	800d760 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d766:	bf00      	nop
 800d768:	bf00      	nop
 800d76a:	3714      	adds	r7, #20
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr
 800d774:	24000010 	.word	0x24000010
	...

0800d780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d780:	4b07      	ldr	r3, [pc, #28]	; (800d7a0 <pxCurrentTCBConst2>)
 800d782:	6819      	ldr	r1, [r3, #0]
 800d784:	6808      	ldr	r0, [r1, #0]
 800d786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78a:	f380 8809 	msr	PSP, r0
 800d78e:	f3bf 8f6f 	isb	sy
 800d792:	f04f 0000 	mov.w	r0, #0
 800d796:	f380 8811 	msr	BASEPRI, r0
 800d79a:	4770      	bx	lr
 800d79c:	f3af 8000 	nop.w

0800d7a0 <pxCurrentTCBConst2>:
 800d7a0:	24000770 	.word	0x24000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d7a4:	bf00      	nop
 800d7a6:	bf00      	nop

0800d7a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d7a8:	4808      	ldr	r0, [pc, #32]	; (800d7cc <prvPortStartFirstTask+0x24>)
 800d7aa:	6800      	ldr	r0, [r0, #0]
 800d7ac:	6800      	ldr	r0, [r0, #0]
 800d7ae:	f380 8808 	msr	MSP, r0
 800d7b2:	f04f 0000 	mov.w	r0, #0
 800d7b6:	f380 8814 	msr	CONTROL, r0
 800d7ba:	b662      	cpsie	i
 800d7bc:	b661      	cpsie	f
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	df00      	svc	0
 800d7c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d7ca:	bf00      	nop
 800d7cc:	e000ed08 	.word	0xe000ed08

0800d7d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d7d6:	4b46      	ldr	r3, [pc, #280]	; (800d8f0 <xPortStartScheduler+0x120>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a46      	ldr	r2, [pc, #280]	; (800d8f4 <xPortStartScheduler+0x124>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d10a      	bne.n	800d7f6 <xPortStartScheduler+0x26>
	__asm volatile
 800d7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	613b      	str	r3, [r7, #16]
}
 800d7f2:	bf00      	nop
 800d7f4:	e7fe      	b.n	800d7f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d7f6:	4b3e      	ldr	r3, [pc, #248]	; (800d8f0 <xPortStartScheduler+0x120>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a3f      	ldr	r2, [pc, #252]	; (800d8f8 <xPortStartScheduler+0x128>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d10a      	bne.n	800d816 <xPortStartScheduler+0x46>
	__asm volatile
 800d800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	60fb      	str	r3, [r7, #12]
}
 800d812:	bf00      	nop
 800d814:	e7fe      	b.n	800d814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d816:	4b39      	ldr	r3, [pc, #228]	; (800d8fc <xPortStartScheduler+0x12c>)
 800d818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	22ff      	movs	r2, #255	; 0xff
 800d826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d830:	78fb      	ldrb	r3, [r7, #3]
 800d832:	b2db      	uxtb	r3, r3
 800d834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	4b31      	ldr	r3, [pc, #196]	; (800d900 <xPortStartScheduler+0x130>)
 800d83c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d83e:	4b31      	ldr	r3, [pc, #196]	; (800d904 <xPortStartScheduler+0x134>)
 800d840:	2207      	movs	r2, #7
 800d842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d844:	e009      	b.n	800d85a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d846:	4b2f      	ldr	r3, [pc, #188]	; (800d904 <xPortStartScheduler+0x134>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3b01      	subs	r3, #1
 800d84c:	4a2d      	ldr	r2, [pc, #180]	; (800d904 <xPortStartScheduler+0x134>)
 800d84e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d850:	78fb      	ldrb	r3, [r7, #3]
 800d852:	b2db      	uxtb	r3, r3
 800d854:	005b      	lsls	r3, r3, #1
 800d856:	b2db      	uxtb	r3, r3
 800d858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d85a:	78fb      	ldrb	r3, [r7, #3]
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d862:	2b80      	cmp	r3, #128	; 0x80
 800d864:	d0ef      	beq.n	800d846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d866:	4b27      	ldr	r3, [pc, #156]	; (800d904 <xPortStartScheduler+0x134>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f1c3 0307 	rsb	r3, r3, #7
 800d86e:	2b04      	cmp	r3, #4
 800d870:	d00a      	beq.n	800d888 <xPortStartScheduler+0xb8>
	__asm volatile
 800d872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	60bb      	str	r3, [r7, #8]
}
 800d884:	bf00      	nop
 800d886:	e7fe      	b.n	800d886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d888:	4b1e      	ldr	r3, [pc, #120]	; (800d904 <xPortStartScheduler+0x134>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	021b      	lsls	r3, r3, #8
 800d88e:	4a1d      	ldr	r2, [pc, #116]	; (800d904 <xPortStartScheduler+0x134>)
 800d890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d892:	4b1c      	ldr	r3, [pc, #112]	; (800d904 <xPortStartScheduler+0x134>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d89a:	4a1a      	ldr	r2, [pc, #104]	; (800d904 <xPortStartScheduler+0x134>)
 800d89c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	b2da      	uxtb	r2, r3
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d8a6:	4b18      	ldr	r3, [pc, #96]	; (800d908 <xPortStartScheduler+0x138>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a17      	ldr	r2, [pc, #92]	; (800d908 <xPortStartScheduler+0x138>)
 800d8ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d8b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d8b2:	4b15      	ldr	r3, [pc, #84]	; (800d908 <xPortStartScheduler+0x138>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a14      	ldr	r2, [pc, #80]	; (800d908 <xPortStartScheduler+0x138>)
 800d8b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d8bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d8be:	f000 f8dd 	bl	800da7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d8c2:	4b12      	ldr	r3, [pc, #72]	; (800d90c <xPortStartScheduler+0x13c>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d8c8:	f000 f8fc 	bl	800dac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d8cc:	4b10      	ldr	r3, [pc, #64]	; (800d910 <xPortStartScheduler+0x140>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a0f      	ldr	r2, [pc, #60]	; (800d910 <xPortStartScheduler+0x140>)
 800d8d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d8d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d8d8:	f7ff ff66 	bl	800d7a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d8dc:	f7ff f852 	bl	800c984 <vTaskSwitchContext>
	prvTaskExitError();
 800d8e0:	f7ff ff1e 	bl	800d720 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d8e4:	2300      	movs	r3, #0
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3718      	adds	r7, #24
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	e000ed00 	.word	0xe000ed00
 800d8f4:	410fc271 	.word	0x410fc271
 800d8f8:	410fc270 	.word	0x410fc270
 800d8fc:	e000e400 	.word	0xe000e400
 800d900:	24000d9c 	.word	0x24000d9c
 800d904:	24000da0 	.word	0x24000da0
 800d908:	e000ed20 	.word	0xe000ed20
 800d90c:	24000010 	.word	0x24000010
 800d910:	e000ef34 	.word	0xe000ef34

0800d914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
	__asm volatile
 800d91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91e:	f383 8811 	msr	BASEPRI, r3
 800d922:	f3bf 8f6f 	isb	sy
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	607b      	str	r3, [r7, #4]
}
 800d92c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d92e:	4b0f      	ldr	r3, [pc, #60]	; (800d96c <vPortEnterCritical+0x58>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	3301      	adds	r3, #1
 800d934:	4a0d      	ldr	r2, [pc, #52]	; (800d96c <vPortEnterCritical+0x58>)
 800d936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d938:	4b0c      	ldr	r3, [pc, #48]	; (800d96c <vPortEnterCritical+0x58>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d10f      	bne.n	800d960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d940:	4b0b      	ldr	r3, [pc, #44]	; (800d970 <vPortEnterCritical+0x5c>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	b2db      	uxtb	r3, r3
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <vPortEnterCritical+0x4c>
	__asm volatile
 800d94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94e:	f383 8811 	msr	BASEPRI, r3
 800d952:	f3bf 8f6f 	isb	sy
 800d956:	f3bf 8f4f 	dsb	sy
 800d95a:	603b      	str	r3, [r7, #0]
}
 800d95c:	bf00      	nop
 800d95e:	e7fe      	b.n	800d95e <vPortEnterCritical+0x4a>
	}
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr
 800d96c:	24000010 	.word	0x24000010
 800d970:	e000ed04 	.word	0xe000ed04

0800d974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d97a:	4b12      	ldr	r3, [pc, #72]	; (800d9c4 <vPortExitCritical+0x50>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d10a      	bne.n	800d998 <vPortExitCritical+0x24>
	__asm volatile
 800d982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d986:	f383 8811 	msr	BASEPRI, r3
 800d98a:	f3bf 8f6f 	isb	sy
 800d98e:	f3bf 8f4f 	dsb	sy
 800d992:	607b      	str	r3, [r7, #4]
}
 800d994:	bf00      	nop
 800d996:	e7fe      	b.n	800d996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d998:	4b0a      	ldr	r3, [pc, #40]	; (800d9c4 <vPortExitCritical+0x50>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	3b01      	subs	r3, #1
 800d99e:	4a09      	ldr	r2, [pc, #36]	; (800d9c4 <vPortExitCritical+0x50>)
 800d9a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d9a2:	4b08      	ldr	r3, [pc, #32]	; (800d9c4 <vPortExitCritical+0x50>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d105      	bne.n	800d9b6 <vPortExitCritical+0x42>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	f383 8811 	msr	BASEPRI, r3
}
 800d9b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d9b6:	bf00      	nop
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	24000010 	.word	0x24000010
	...

0800d9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d9d0:	f3ef 8009 	mrs	r0, PSP
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	4b15      	ldr	r3, [pc, #84]	; (800da30 <pxCurrentTCBConst>)
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	f01e 0f10 	tst.w	lr, #16
 800d9e0:	bf08      	it	eq
 800d9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ea:	6010      	str	r0, [r2, #0]
 800d9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d9f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d9f4:	f380 8811 	msr	BASEPRI, r0
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	f7fe ffc0 	bl	800c984 <vTaskSwitchContext>
 800da04:	f04f 0000 	mov.w	r0, #0
 800da08:	f380 8811 	msr	BASEPRI, r0
 800da0c:	bc09      	pop	{r0, r3}
 800da0e:	6819      	ldr	r1, [r3, #0]
 800da10:	6808      	ldr	r0, [r1, #0]
 800da12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da16:	f01e 0f10 	tst.w	lr, #16
 800da1a:	bf08      	it	eq
 800da1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da20:	f380 8809 	msr	PSP, r0
 800da24:	f3bf 8f6f 	isb	sy
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	f3af 8000 	nop.w

0800da30 <pxCurrentTCBConst>:
 800da30:	24000770 	.word	0x24000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da34:	bf00      	nop
 800da36:	bf00      	nop

0800da38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	607b      	str	r3, [r7, #4]
}
 800da50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800da52:	f7fe fedd 	bl	800c810 <xTaskIncrementTick>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d003      	beq.n	800da64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da5c:	4b06      	ldr	r3, [pc, #24]	; (800da78 <xPortSysTickHandler+0x40>)
 800da5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	2300      	movs	r3, #0
 800da66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	f383 8811 	msr	BASEPRI, r3
}
 800da6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800da70:	bf00      	nop
 800da72:	3708      	adds	r7, #8
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}
 800da78:	e000ed04 	.word	0xe000ed04

0800da7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da7c:	b480      	push	{r7}
 800da7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da80:	4b0b      	ldr	r3, [pc, #44]	; (800dab0 <vPortSetupTimerInterrupt+0x34>)
 800da82:	2200      	movs	r2, #0
 800da84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da86:	4b0b      	ldr	r3, [pc, #44]	; (800dab4 <vPortSetupTimerInterrupt+0x38>)
 800da88:	2200      	movs	r2, #0
 800da8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da8c:	4b0a      	ldr	r3, [pc, #40]	; (800dab8 <vPortSetupTimerInterrupt+0x3c>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a0a      	ldr	r2, [pc, #40]	; (800dabc <vPortSetupTimerInterrupt+0x40>)
 800da92:	fba2 2303 	umull	r2, r3, r2, r3
 800da96:	099b      	lsrs	r3, r3, #6
 800da98:	4a09      	ldr	r2, [pc, #36]	; (800dac0 <vPortSetupTimerInterrupt+0x44>)
 800da9a:	3b01      	subs	r3, #1
 800da9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da9e:	4b04      	ldr	r3, [pc, #16]	; (800dab0 <vPortSetupTimerInterrupt+0x34>)
 800daa0:	2207      	movs	r2, #7
 800daa2:	601a      	str	r2, [r3, #0]
}
 800daa4:	bf00      	nop
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	e000e010 	.word	0xe000e010
 800dab4:	e000e018 	.word	0xe000e018
 800dab8:	24000000 	.word	0x24000000
 800dabc:	10624dd3 	.word	0x10624dd3
 800dac0:	e000e014 	.word	0xe000e014

0800dac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dad4 <vPortEnableVFP+0x10>
 800dac8:	6801      	ldr	r1, [r0, #0]
 800daca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dace:	6001      	str	r1, [r0, #0]
 800dad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dad2:	bf00      	nop
 800dad4:	e000ed88 	.word	0xe000ed88

0800dad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dade:	f3ef 8305 	mrs	r3, IPSR
 800dae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2b0f      	cmp	r3, #15
 800dae8:	d914      	bls.n	800db14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800daea:	4a17      	ldr	r2, [pc, #92]	; (800db48 <vPortValidateInterruptPriority+0x70>)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	4413      	add	r3, r2
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800daf4:	4b15      	ldr	r3, [pc, #84]	; (800db4c <vPortValidateInterruptPriority+0x74>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	7afa      	ldrb	r2, [r7, #11]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d20a      	bcs.n	800db14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	607b      	str	r3, [r7, #4]
}
 800db10:	bf00      	nop
 800db12:	e7fe      	b.n	800db12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db14:	4b0e      	ldr	r3, [pc, #56]	; (800db50 <vPortValidateInterruptPriority+0x78>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db1c:	4b0d      	ldr	r3, [pc, #52]	; (800db54 <vPortValidateInterruptPriority+0x7c>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	429a      	cmp	r2, r3
 800db22:	d90a      	bls.n	800db3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800db24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db28:	f383 8811 	msr	BASEPRI, r3
 800db2c:	f3bf 8f6f 	isb	sy
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	603b      	str	r3, [r7, #0]
}
 800db36:	bf00      	nop
 800db38:	e7fe      	b.n	800db38 <vPortValidateInterruptPriority+0x60>
	}
 800db3a:	bf00      	nop
 800db3c:	3714      	adds	r7, #20
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop
 800db48:	e000e3f0 	.word	0xe000e3f0
 800db4c:	24000d9c 	.word	0x24000d9c
 800db50:	e000ed0c 	.word	0xe000ed0c
 800db54:	24000da0 	.word	0x24000da0

0800db58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b08a      	sub	sp, #40	; 0x28
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800db60:	2300      	movs	r3, #0
 800db62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800db64:	f7fe fd98 	bl	800c698 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800db68:	4b5b      	ldr	r3, [pc, #364]	; (800dcd8 <pvPortMalloc+0x180>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d101      	bne.n	800db74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db70:	f000 f920 	bl	800ddb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db74:	4b59      	ldr	r3, [pc, #356]	; (800dcdc <pvPortMalloc+0x184>)
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	4013      	ands	r3, r2
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f040 8093 	bne.w	800dca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d01d      	beq.n	800dbc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800db88:	2208      	movs	r2, #8
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	4413      	add	r3, r2
 800db8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f003 0307 	and.w	r3, r3, #7
 800db96:	2b00      	cmp	r3, #0
 800db98:	d014      	beq.n	800dbc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f023 0307 	bic.w	r3, r3, #7
 800dba0:	3308      	adds	r3, #8
 800dba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f003 0307 	and.w	r3, r3, #7
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00a      	beq.n	800dbc4 <pvPortMalloc+0x6c>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	617b      	str	r3, [r7, #20]
}
 800dbc0:	bf00      	nop
 800dbc2:	e7fe      	b.n	800dbc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d06e      	beq.n	800dca8 <pvPortMalloc+0x150>
 800dbca:	4b45      	ldr	r3, [pc, #276]	; (800dce0 <pvPortMalloc+0x188>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d869      	bhi.n	800dca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dbd4:	4b43      	ldr	r3, [pc, #268]	; (800dce4 <pvPortMalloc+0x18c>)
 800dbd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dbd8:	4b42      	ldr	r3, [pc, #264]	; (800dce4 <pvPortMalloc+0x18c>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbde:	e004      	b.n	800dbea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d903      	bls.n	800dbfc <pvPortMalloc+0xa4>
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d1f1      	bne.n	800dbe0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dbfc:	4b36      	ldr	r3, [pc, #216]	; (800dcd8 <pvPortMalloc+0x180>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d050      	beq.n	800dca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc06:	6a3b      	ldr	r3, [r7, #32]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2208      	movs	r2, #8
 800dc0c:	4413      	add	r3, r2
 800dc0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	6a3b      	ldr	r3, [r7, #32]
 800dc16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1a:	685a      	ldr	r2, [r3, #4]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	1ad2      	subs	r2, r2, r3
 800dc20:	2308      	movs	r3, #8
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d91f      	bls.n	800dc68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	f003 0307 	and.w	r3, r3, #7
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00a      	beq.n	800dc50 <pvPortMalloc+0xf8>
	__asm volatile
 800dc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	613b      	str	r3, [r7, #16]
}
 800dc4c:	bf00      	nop
 800dc4e:	e7fe      	b.n	800dc4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	685a      	ldr	r2, [r3, #4]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	1ad2      	subs	r2, r2, r3
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dc62:	69b8      	ldr	r0, [r7, #24]
 800dc64:	f000 f908 	bl	800de78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc68:	4b1d      	ldr	r3, [pc, #116]	; (800dce0 <pvPortMalloc+0x188>)
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	4a1b      	ldr	r2, [pc, #108]	; (800dce0 <pvPortMalloc+0x188>)
 800dc74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc76:	4b1a      	ldr	r3, [pc, #104]	; (800dce0 <pvPortMalloc+0x188>)
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	4b1b      	ldr	r3, [pc, #108]	; (800dce8 <pvPortMalloc+0x190>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d203      	bcs.n	800dc8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc82:	4b17      	ldr	r3, [pc, #92]	; (800dce0 <pvPortMalloc+0x188>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4a18      	ldr	r2, [pc, #96]	; (800dce8 <pvPortMalloc+0x190>)
 800dc88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8c:	685a      	ldr	r2, [r3, #4]
 800dc8e:	4b13      	ldr	r3, [pc, #76]	; (800dcdc <pvPortMalloc+0x184>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	431a      	orrs	r2, r3
 800dc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dc9e:	4b13      	ldr	r3, [pc, #76]	; (800dcec <pvPortMalloc+0x194>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	3301      	adds	r3, #1
 800dca4:	4a11      	ldr	r2, [pc, #68]	; (800dcec <pvPortMalloc+0x194>)
 800dca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dca8:	f7fe fd04 	bl	800c6b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	f003 0307 	and.w	r3, r3, #7
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00a      	beq.n	800dccc <pvPortMalloc+0x174>
	__asm volatile
 800dcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcba:	f383 8811 	msr	BASEPRI, r3
 800dcbe:	f3bf 8f6f 	isb	sy
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	60fb      	str	r3, [r7, #12]
}
 800dcc8:	bf00      	nop
 800dcca:	e7fe      	b.n	800dcca <pvPortMalloc+0x172>
	return pvReturn;
 800dccc:	69fb      	ldr	r3, [r7, #28]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3728      	adds	r7, #40	; 0x28
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	240049ac 	.word	0x240049ac
 800dcdc:	240049c0 	.word	0x240049c0
 800dce0:	240049b0 	.word	0x240049b0
 800dce4:	240049a4 	.word	0x240049a4
 800dce8:	240049b4 	.word	0x240049b4
 800dcec:	240049b8 	.word	0x240049b8

0800dcf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b086      	sub	sp, #24
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d04d      	beq.n	800dd9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd02:	2308      	movs	r3, #8
 800dd04:	425b      	negs	r3, r3
 800dd06:	697a      	ldr	r2, [r7, #20]
 800dd08:	4413      	add	r3, r2
 800dd0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	685a      	ldr	r2, [r3, #4]
 800dd14:	4b24      	ldr	r3, [pc, #144]	; (800dda8 <vPortFree+0xb8>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4013      	ands	r3, r2
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10a      	bne.n	800dd34 <vPortFree+0x44>
	__asm volatile
 800dd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	60fb      	str	r3, [r7, #12]
}
 800dd30:	bf00      	nop
 800dd32:	e7fe      	b.n	800dd32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00a      	beq.n	800dd52 <vPortFree+0x62>
	__asm volatile
 800dd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd40:	f383 8811 	msr	BASEPRI, r3
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	60bb      	str	r3, [r7, #8]
}
 800dd4e:	bf00      	nop
 800dd50:	e7fe      	b.n	800dd50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	685a      	ldr	r2, [r3, #4]
 800dd56:	4b14      	ldr	r3, [pc, #80]	; (800dda8 <vPortFree+0xb8>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4013      	ands	r3, r2
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d01e      	beq.n	800dd9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d11a      	bne.n	800dd9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	685a      	ldr	r2, [r3, #4]
 800dd6c:	4b0e      	ldr	r3, [pc, #56]	; (800dda8 <vPortFree+0xb8>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	43db      	mvns	r3, r3
 800dd72:	401a      	ands	r2, r3
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dd78:	f7fe fc8e 	bl	800c698 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	685a      	ldr	r2, [r3, #4]
 800dd80:	4b0a      	ldr	r3, [pc, #40]	; (800ddac <vPortFree+0xbc>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4413      	add	r3, r2
 800dd86:	4a09      	ldr	r2, [pc, #36]	; (800ddac <vPortFree+0xbc>)
 800dd88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd8a:	6938      	ldr	r0, [r7, #16]
 800dd8c:	f000 f874 	bl	800de78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dd90:	4b07      	ldr	r3, [pc, #28]	; (800ddb0 <vPortFree+0xc0>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	3301      	adds	r3, #1
 800dd96:	4a06      	ldr	r2, [pc, #24]	; (800ddb0 <vPortFree+0xc0>)
 800dd98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dd9a:	f7fe fc8b 	bl	800c6b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dd9e:	bf00      	nop
 800dda0:	3718      	adds	r7, #24
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	240049c0 	.word	0x240049c0
 800ddac:	240049b0 	.word	0x240049b0
 800ddb0:	240049bc 	.word	0x240049bc

0800ddb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ddba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ddbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ddc0:	4b27      	ldr	r3, [pc, #156]	; (800de60 <prvHeapInit+0xac>)
 800ddc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f003 0307 	and.w	r3, r3, #7
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00c      	beq.n	800dde8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	3307      	adds	r3, #7
 800ddd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f023 0307 	bic.w	r3, r3, #7
 800ddda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	4a1f      	ldr	r2, [pc, #124]	; (800de60 <prvHeapInit+0xac>)
 800dde4:	4413      	add	r3, r2
 800dde6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ddec:	4a1d      	ldr	r2, [pc, #116]	; (800de64 <prvHeapInit+0xb0>)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ddf2:	4b1c      	ldr	r3, [pc, #112]	; (800de64 <prvHeapInit+0xb0>)
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	68ba      	ldr	r2, [r7, #8]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de00:	2208      	movs	r2, #8
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	1a9b      	subs	r3, r3, r2
 800de06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f023 0307 	bic.w	r3, r3, #7
 800de0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	4a15      	ldr	r2, [pc, #84]	; (800de68 <prvHeapInit+0xb4>)
 800de14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de16:	4b14      	ldr	r3, [pc, #80]	; (800de68 <prvHeapInit+0xb4>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2200      	movs	r2, #0
 800de1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de1e:	4b12      	ldr	r3, [pc, #72]	; (800de68 <prvHeapInit+0xb4>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2200      	movs	r2, #0
 800de24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	1ad2      	subs	r2, r2, r3
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de34:	4b0c      	ldr	r3, [pc, #48]	; (800de68 <prvHeapInit+0xb4>)
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	4a0a      	ldr	r2, [pc, #40]	; (800de6c <prvHeapInit+0xb8>)
 800de42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	4a09      	ldr	r2, [pc, #36]	; (800de70 <prvHeapInit+0xbc>)
 800de4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800de4c:	4b09      	ldr	r3, [pc, #36]	; (800de74 <prvHeapInit+0xc0>)
 800de4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800de52:	601a      	str	r2, [r3, #0]
}
 800de54:	bf00      	nop
 800de56:	3714      	adds	r7, #20
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr
 800de60:	24000da4 	.word	0x24000da4
 800de64:	240049a4 	.word	0x240049a4
 800de68:	240049ac 	.word	0x240049ac
 800de6c:	240049b4 	.word	0x240049b4
 800de70:	240049b0 	.word	0x240049b0
 800de74:	240049c0 	.word	0x240049c0

0800de78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800de80:	4b28      	ldr	r3, [pc, #160]	; (800df24 <prvInsertBlockIntoFreeList+0xac>)
 800de82:	60fb      	str	r3, [r7, #12]
 800de84:	e002      	b.n	800de8c <prvInsertBlockIntoFreeList+0x14>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	60fb      	str	r3, [r7, #12]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	429a      	cmp	r2, r3
 800de94:	d8f7      	bhi.n	800de86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	68ba      	ldr	r2, [r7, #8]
 800dea0:	4413      	add	r3, r2
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d108      	bne.n	800deba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	685a      	ldr	r2, [r3, #4]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	441a      	add	r2, r3
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	68ba      	ldr	r2, [r7, #8]
 800dec4:	441a      	add	r2, r3
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	429a      	cmp	r2, r3
 800decc:	d118      	bne.n	800df00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	4b15      	ldr	r3, [pc, #84]	; (800df28 <prvInsertBlockIntoFreeList+0xb0>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d00d      	beq.n	800def6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	685a      	ldr	r2, [r3, #4]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	441a      	add	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	601a      	str	r2, [r3, #0]
 800def4:	e008      	b.n	800df08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800def6:	4b0c      	ldr	r3, [pc, #48]	; (800df28 <prvInsertBlockIntoFreeList+0xb0>)
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	601a      	str	r2, [r3, #0]
 800defe:	e003      	b.n	800df08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d002      	beq.n	800df16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df16:	bf00      	nop
 800df18:	3714      	adds	r7, #20
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	240049a4 	.word	0x240049a4
 800df28:	240049ac 	.word	0x240049ac

0800df2c <_ZdlPv>:
 800df2c:	f000 b85a 	b.w	800dfe4 <free>

0800df30 <_Znwj>:
 800df30:	2801      	cmp	r0, #1
 800df32:	bf38      	it	cc
 800df34:	2001      	movcc	r0, #1
 800df36:	b510      	push	{r4, lr}
 800df38:	4604      	mov	r4, r0
 800df3a:	4620      	mov	r0, r4
 800df3c:	f000 f84a 	bl	800dfd4 <malloc>
 800df40:	b930      	cbnz	r0, 800df50 <_Znwj+0x20>
 800df42:	f000 f80d 	bl	800df60 <_ZSt15get_new_handlerv>
 800df46:	b908      	cbnz	r0, 800df4c <_Znwj+0x1c>
 800df48:	f000 f812 	bl	800df70 <abort>
 800df4c:	4780      	blx	r0
 800df4e:	e7f4      	b.n	800df3a <_Znwj+0xa>
 800df50:	bd10      	pop	{r4, pc}

0800df52 <_ZSt17__throw_bad_allocv>:
 800df52:	b508      	push	{r3, lr}
 800df54:	f000 f80c 	bl	800df70 <abort>

0800df58 <_ZSt20__throw_length_errorPKc>:
 800df58:	b508      	push	{r3, lr}
 800df5a:	f000 f809 	bl	800df70 <abort>
	...

0800df60 <_ZSt15get_new_handlerv>:
 800df60:	4b02      	ldr	r3, [pc, #8]	; (800df6c <_ZSt15get_new_handlerv+0xc>)
 800df62:	6818      	ldr	r0, [r3, #0]
 800df64:	f3bf 8f5b 	dmb	ish
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	240049c4 	.word	0x240049c4

0800df70 <abort>:
 800df70:	b508      	push	{r3, lr}
 800df72:	2006      	movs	r0, #6
 800df74:	f000 f936 	bl	800e1e4 <raise>
 800df78:	2001      	movs	r0, #1
 800df7a:	f7f4 fa8f 	bl	800249c <_exit>
	...

0800df80 <__errno>:
 800df80:	4b01      	ldr	r3, [pc, #4]	; (800df88 <__errno+0x8>)
 800df82:	6818      	ldr	r0, [r3, #0]
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	24000014 	.word	0x24000014

0800df8c <__libc_init_array>:
 800df8c:	b570      	push	{r4, r5, r6, lr}
 800df8e:	4d0d      	ldr	r5, [pc, #52]	; (800dfc4 <__libc_init_array+0x38>)
 800df90:	4c0d      	ldr	r4, [pc, #52]	; (800dfc8 <__libc_init_array+0x3c>)
 800df92:	1b64      	subs	r4, r4, r5
 800df94:	10a4      	asrs	r4, r4, #2
 800df96:	2600      	movs	r6, #0
 800df98:	42a6      	cmp	r6, r4
 800df9a:	d109      	bne.n	800dfb0 <__libc_init_array+0x24>
 800df9c:	4d0b      	ldr	r5, [pc, #44]	; (800dfcc <__libc_init_array+0x40>)
 800df9e:	4c0c      	ldr	r4, [pc, #48]	; (800dfd0 <__libc_init_array+0x44>)
 800dfa0:	f000 f94a 	bl	800e238 <_init>
 800dfa4:	1b64      	subs	r4, r4, r5
 800dfa6:	10a4      	asrs	r4, r4, #2
 800dfa8:	2600      	movs	r6, #0
 800dfaa:	42a6      	cmp	r6, r4
 800dfac:	d105      	bne.n	800dfba <__libc_init_array+0x2e>
 800dfae:	bd70      	pop	{r4, r5, r6, pc}
 800dfb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfb4:	4798      	blx	r3
 800dfb6:	3601      	adds	r6, #1
 800dfb8:	e7ee      	b.n	800df98 <__libc_init_array+0xc>
 800dfba:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfbe:	4798      	blx	r3
 800dfc0:	3601      	adds	r6, #1
 800dfc2:	e7f2      	b.n	800dfaa <__libc_init_array+0x1e>
 800dfc4:	0800e38c 	.word	0x0800e38c
 800dfc8:	0800e38c 	.word	0x0800e38c
 800dfcc:	0800e38c 	.word	0x0800e38c
 800dfd0:	0800e394 	.word	0x0800e394

0800dfd4 <malloc>:
 800dfd4:	4b02      	ldr	r3, [pc, #8]	; (800dfe0 <malloc+0xc>)
 800dfd6:	4601      	mov	r1, r0
 800dfd8:	6818      	ldr	r0, [r3, #0]
 800dfda:	f000 b871 	b.w	800e0c0 <_malloc_r>
 800dfde:	bf00      	nop
 800dfe0:	24000014 	.word	0x24000014

0800dfe4 <free>:
 800dfe4:	4b02      	ldr	r3, [pc, #8]	; (800dff0 <free+0xc>)
 800dfe6:	4601      	mov	r1, r0
 800dfe8:	6818      	ldr	r0, [r3, #0]
 800dfea:	f000 b819 	b.w	800e020 <_free_r>
 800dfee:	bf00      	nop
 800dff0:	24000014 	.word	0x24000014

0800dff4 <memcpy>:
 800dff4:	440a      	add	r2, r1
 800dff6:	4291      	cmp	r1, r2
 800dff8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dffc:	d100      	bne.n	800e000 <memcpy+0xc>
 800dffe:	4770      	bx	lr
 800e000:	b510      	push	{r4, lr}
 800e002:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e00a:	4291      	cmp	r1, r2
 800e00c:	d1f9      	bne.n	800e002 <memcpy+0xe>
 800e00e:	bd10      	pop	{r4, pc}

0800e010 <memset>:
 800e010:	4402      	add	r2, r0
 800e012:	4603      	mov	r3, r0
 800e014:	4293      	cmp	r3, r2
 800e016:	d100      	bne.n	800e01a <memset+0xa>
 800e018:	4770      	bx	lr
 800e01a:	f803 1b01 	strb.w	r1, [r3], #1
 800e01e:	e7f9      	b.n	800e014 <memset+0x4>

0800e020 <_free_r>:
 800e020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e022:	2900      	cmp	r1, #0
 800e024:	d048      	beq.n	800e0b8 <_free_r+0x98>
 800e026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e02a:	9001      	str	r0, [sp, #4]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f1a1 0404 	sub.w	r4, r1, #4
 800e032:	bfb8      	it	lt
 800e034:	18e4      	addlt	r4, r4, r3
 800e036:	f000 f8f1 	bl	800e21c <__malloc_lock>
 800e03a:	4a20      	ldr	r2, [pc, #128]	; (800e0bc <_free_r+0x9c>)
 800e03c:	9801      	ldr	r0, [sp, #4]
 800e03e:	6813      	ldr	r3, [r2, #0]
 800e040:	4615      	mov	r5, r2
 800e042:	b933      	cbnz	r3, 800e052 <_free_r+0x32>
 800e044:	6063      	str	r3, [r4, #4]
 800e046:	6014      	str	r4, [r2, #0]
 800e048:	b003      	add	sp, #12
 800e04a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e04e:	f000 b8eb 	b.w	800e228 <__malloc_unlock>
 800e052:	42a3      	cmp	r3, r4
 800e054:	d90b      	bls.n	800e06e <_free_r+0x4e>
 800e056:	6821      	ldr	r1, [r4, #0]
 800e058:	1862      	adds	r2, r4, r1
 800e05a:	4293      	cmp	r3, r2
 800e05c:	bf04      	itt	eq
 800e05e:	681a      	ldreq	r2, [r3, #0]
 800e060:	685b      	ldreq	r3, [r3, #4]
 800e062:	6063      	str	r3, [r4, #4]
 800e064:	bf04      	itt	eq
 800e066:	1852      	addeq	r2, r2, r1
 800e068:	6022      	streq	r2, [r4, #0]
 800e06a:	602c      	str	r4, [r5, #0]
 800e06c:	e7ec      	b.n	800e048 <_free_r+0x28>
 800e06e:	461a      	mov	r2, r3
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	b10b      	cbz	r3, 800e078 <_free_r+0x58>
 800e074:	42a3      	cmp	r3, r4
 800e076:	d9fa      	bls.n	800e06e <_free_r+0x4e>
 800e078:	6811      	ldr	r1, [r2, #0]
 800e07a:	1855      	adds	r5, r2, r1
 800e07c:	42a5      	cmp	r5, r4
 800e07e:	d10b      	bne.n	800e098 <_free_r+0x78>
 800e080:	6824      	ldr	r4, [r4, #0]
 800e082:	4421      	add	r1, r4
 800e084:	1854      	adds	r4, r2, r1
 800e086:	42a3      	cmp	r3, r4
 800e088:	6011      	str	r1, [r2, #0]
 800e08a:	d1dd      	bne.n	800e048 <_free_r+0x28>
 800e08c:	681c      	ldr	r4, [r3, #0]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	6053      	str	r3, [r2, #4]
 800e092:	4421      	add	r1, r4
 800e094:	6011      	str	r1, [r2, #0]
 800e096:	e7d7      	b.n	800e048 <_free_r+0x28>
 800e098:	d902      	bls.n	800e0a0 <_free_r+0x80>
 800e09a:	230c      	movs	r3, #12
 800e09c:	6003      	str	r3, [r0, #0]
 800e09e:	e7d3      	b.n	800e048 <_free_r+0x28>
 800e0a0:	6825      	ldr	r5, [r4, #0]
 800e0a2:	1961      	adds	r1, r4, r5
 800e0a4:	428b      	cmp	r3, r1
 800e0a6:	bf04      	itt	eq
 800e0a8:	6819      	ldreq	r1, [r3, #0]
 800e0aa:	685b      	ldreq	r3, [r3, #4]
 800e0ac:	6063      	str	r3, [r4, #4]
 800e0ae:	bf04      	itt	eq
 800e0b0:	1949      	addeq	r1, r1, r5
 800e0b2:	6021      	streq	r1, [r4, #0]
 800e0b4:	6054      	str	r4, [r2, #4]
 800e0b6:	e7c7      	b.n	800e048 <_free_r+0x28>
 800e0b8:	b003      	add	sp, #12
 800e0ba:	bd30      	pop	{r4, r5, pc}
 800e0bc:	240049c8 	.word	0x240049c8

0800e0c0 <_malloc_r>:
 800e0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0c2:	1ccd      	adds	r5, r1, #3
 800e0c4:	f025 0503 	bic.w	r5, r5, #3
 800e0c8:	3508      	adds	r5, #8
 800e0ca:	2d0c      	cmp	r5, #12
 800e0cc:	bf38      	it	cc
 800e0ce:	250c      	movcc	r5, #12
 800e0d0:	2d00      	cmp	r5, #0
 800e0d2:	4606      	mov	r6, r0
 800e0d4:	db01      	blt.n	800e0da <_malloc_r+0x1a>
 800e0d6:	42a9      	cmp	r1, r5
 800e0d8:	d903      	bls.n	800e0e2 <_malloc_r+0x22>
 800e0da:	230c      	movs	r3, #12
 800e0dc:	6033      	str	r3, [r6, #0]
 800e0de:	2000      	movs	r0, #0
 800e0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0e2:	f000 f89b 	bl	800e21c <__malloc_lock>
 800e0e6:	4921      	ldr	r1, [pc, #132]	; (800e16c <_malloc_r+0xac>)
 800e0e8:	680a      	ldr	r2, [r1, #0]
 800e0ea:	4614      	mov	r4, r2
 800e0ec:	b99c      	cbnz	r4, 800e116 <_malloc_r+0x56>
 800e0ee:	4f20      	ldr	r7, [pc, #128]	; (800e170 <_malloc_r+0xb0>)
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	b923      	cbnz	r3, 800e0fe <_malloc_r+0x3e>
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	f000 f83c 	bl	800e174 <_sbrk_r>
 800e0fc:	6038      	str	r0, [r7, #0]
 800e0fe:	4629      	mov	r1, r5
 800e100:	4630      	mov	r0, r6
 800e102:	f000 f837 	bl	800e174 <_sbrk_r>
 800e106:	1c43      	adds	r3, r0, #1
 800e108:	d123      	bne.n	800e152 <_malloc_r+0x92>
 800e10a:	230c      	movs	r3, #12
 800e10c:	6033      	str	r3, [r6, #0]
 800e10e:	4630      	mov	r0, r6
 800e110:	f000 f88a 	bl	800e228 <__malloc_unlock>
 800e114:	e7e3      	b.n	800e0de <_malloc_r+0x1e>
 800e116:	6823      	ldr	r3, [r4, #0]
 800e118:	1b5b      	subs	r3, r3, r5
 800e11a:	d417      	bmi.n	800e14c <_malloc_r+0x8c>
 800e11c:	2b0b      	cmp	r3, #11
 800e11e:	d903      	bls.n	800e128 <_malloc_r+0x68>
 800e120:	6023      	str	r3, [r4, #0]
 800e122:	441c      	add	r4, r3
 800e124:	6025      	str	r5, [r4, #0]
 800e126:	e004      	b.n	800e132 <_malloc_r+0x72>
 800e128:	6863      	ldr	r3, [r4, #4]
 800e12a:	42a2      	cmp	r2, r4
 800e12c:	bf0c      	ite	eq
 800e12e:	600b      	streq	r3, [r1, #0]
 800e130:	6053      	strne	r3, [r2, #4]
 800e132:	4630      	mov	r0, r6
 800e134:	f000 f878 	bl	800e228 <__malloc_unlock>
 800e138:	f104 000b 	add.w	r0, r4, #11
 800e13c:	1d23      	adds	r3, r4, #4
 800e13e:	f020 0007 	bic.w	r0, r0, #7
 800e142:	1ac2      	subs	r2, r0, r3
 800e144:	d0cc      	beq.n	800e0e0 <_malloc_r+0x20>
 800e146:	1a1b      	subs	r3, r3, r0
 800e148:	50a3      	str	r3, [r4, r2]
 800e14a:	e7c9      	b.n	800e0e0 <_malloc_r+0x20>
 800e14c:	4622      	mov	r2, r4
 800e14e:	6864      	ldr	r4, [r4, #4]
 800e150:	e7cc      	b.n	800e0ec <_malloc_r+0x2c>
 800e152:	1cc4      	adds	r4, r0, #3
 800e154:	f024 0403 	bic.w	r4, r4, #3
 800e158:	42a0      	cmp	r0, r4
 800e15a:	d0e3      	beq.n	800e124 <_malloc_r+0x64>
 800e15c:	1a21      	subs	r1, r4, r0
 800e15e:	4630      	mov	r0, r6
 800e160:	f000 f808 	bl	800e174 <_sbrk_r>
 800e164:	3001      	adds	r0, #1
 800e166:	d1dd      	bne.n	800e124 <_malloc_r+0x64>
 800e168:	e7cf      	b.n	800e10a <_malloc_r+0x4a>
 800e16a:	bf00      	nop
 800e16c:	240049c8 	.word	0x240049c8
 800e170:	240049cc 	.word	0x240049cc

0800e174 <_sbrk_r>:
 800e174:	b538      	push	{r3, r4, r5, lr}
 800e176:	4d06      	ldr	r5, [pc, #24]	; (800e190 <_sbrk_r+0x1c>)
 800e178:	2300      	movs	r3, #0
 800e17a:	4604      	mov	r4, r0
 800e17c:	4608      	mov	r0, r1
 800e17e:	602b      	str	r3, [r5, #0]
 800e180:	f7f4 f996 	bl	80024b0 <_sbrk>
 800e184:	1c43      	adds	r3, r0, #1
 800e186:	d102      	bne.n	800e18e <_sbrk_r+0x1a>
 800e188:	682b      	ldr	r3, [r5, #0]
 800e18a:	b103      	cbz	r3, 800e18e <_sbrk_r+0x1a>
 800e18c:	6023      	str	r3, [r4, #0]
 800e18e:	bd38      	pop	{r3, r4, r5, pc}
 800e190:	240051cc 	.word	0x240051cc

0800e194 <_raise_r>:
 800e194:	291f      	cmp	r1, #31
 800e196:	b538      	push	{r3, r4, r5, lr}
 800e198:	4604      	mov	r4, r0
 800e19a:	460d      	mov	r5, r1
 800e19c:	d904      	bls.n	800e1a8 <_raise_r+0x14>
 800e19e:	2316      	movs	r3, #22
 800e1a0:	6003      	str	r3, [r0, #0]
 800e1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e1aa:	b112      	cbz	r2, 800e1b2 <_raise_r+0x1e>
 800e1ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1b0:	b94b      	cbnz	r3, 800e1c6 <_raise_r+0x32>
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f000 f830 	bl	800e218 <_getpid_r>
 800e1b8:	462a      	mov	r2, r5
 800e1ba:	4601      	mov	r1, r0
 800e1bc:	4620      	mov	r0, r4
 800e1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1c2:	f000 b817 	b.w	800e1f4 <_kill_r>
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d00a      	beq.n	800e1e0 <_raise_r+0x4c>
 800e1ca:	1c59      	adds	r1, r3, #1
 800e1cc:	d103      	bne.n	800e1d6 <_raise_r+0x42>
 800e1ce:	2316      	movs	r3, #22
 800e1d0:	6003      	str	r3, [r0, #0]
 800e1d2:	2001      	movs	r0, #1
 800e1d4:	e7e7      	b.n	800e1a6 <_raise_r+0x12>
 800e1d6:	2400      	movs	r4, #0
 800e1d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e1dc:	4628      	mov	r0, r5
 800e1de:	4798      	blx	r3
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	e7e0      	b.n	800e1a6 <_raise_r+0x12>

0800e1e4 <raise>:
 800e1e4:	4b02      	ldr	r3, [pc, #8]	; (800e1f0 <raise+0xc>)
 800e1e6:	4601      	mov	r1, r0
 800e1e8:	6818      	ldr	r0, [r3, #0]
 800e1ea:	f7ff bfd3 	b.w	800e194 <_raise_r>
 800e1ee:	bf00      	nop
 800e1f0:	24000014 	.word	0x24000014

0800e1f4 <_kill_r>:
 800e1f4:	b538      	push	{r3, r4, r5, lr}
 800e1f6:	4d07      	ldr	r5, [pc, #28]	; (800e214 <_kill_r+0x20>)
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	4608      	mov	r0, r1
 800e1fe:	4611      	mov	r1, r2
 800e200:	602b      	str	r3, [r5, #0]
 800e202:	f7f4 f93b 	bl	800247c <_kill>
 800e206:	1c43      	adds	r3, r0, #1
 800e208:	d102      	bne.n	800e210 <_kill_r+0x1c>
 800e20a:	682b      	ldr	r3, [r5, #0]
 800e20c:	b103      	cbz	r3, 800e210 <_kill_r+0x1c>
 800e20e:	6023      	str	r3, [r4, #0]
 800e210:	bd38      	pop	{r3, r4, r5, pc}
 800e212:	bf00      	nop
 800e214:	240051cc 	.word	0x240051cc

0800e218 <_getpid_r>:
 800e218:	f7f4 b928 	b.w	800246c <_getpid>

0800e21c <__malloc_lock>:
 800e21c:	4801      	ldr	r0, [pc, #4]	; (800e224 <__malloc_lock+0x8>)
 800e21e:	f000 b809 	b.w	800e234 <__retarget_lock_acquire_recursive>
 800e222:	bf00      	nop
 800e224:	240051d4 	.word	0x240051d4

0800e228 <__malloc_unlock>:
 800e228:	4801      	ldr	r0, [pc, #4]	; (800e230 <__malloc_unlock+0x8>)
 800e22a:	f000 b804 	b.w	800e236 <__retarget_lock_release_recursive>
 800e22e:	bf00      	nop
 800e230:	240051d4 	.word	0x240051d4

0800e234 <__retarget_lock_acquire_recursive>:
 800e234:	4770      	bx	lr

0800e236 <__retarget_lock_release_recursive>:
 800e236:	4770      	bx	lr

0800e238 <_init>:
 800e238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e23a:	bf00      	nop
 800e23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e23e:	bc08      	pop	{r3}
 800e240:	469e      	mov	lr, r3
 800e242:	4770      	bx	lr

0800e244 <_fini>:
 800e244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e246:	bf00      	nop
 800e248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e24a:	bc08      	pop	{r3}
 800e24c:	469e      	mov	lr, r3
 800e24e:	4770      	bx	lr
