
Sparkbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010770  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08010a10  08010a10  00020a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010c1c  08010c1c  00020c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010c24  08010c24  00020c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010c28  08010c28  00020c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08010c2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005348  24000078  08010ca4  00030078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240053c0  08010ca4  000353c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00054881  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008cc8  00000000  00000000  00084927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002840  00000000  00000000  0008d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002528  00000000  00000000  0008fe30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000369ef  00000000  00000000  00092358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017ed5e  00000000  00000000  000c8d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00247aa5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000add8  00000000  00000000  00247af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003e67e  00000000  00000000  002528d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080109f8 	.word	0x080109f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	080109f8 	.word	0x080109f8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2224      	movs	r2, #36	; 0x24
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f00f fd39 	bl	801005c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_DAC1_Init+0x70>)
 80005ec:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_DAC1_Init+0x74>)
 80005ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005f0:	4815      	ldr	r0, [pc, #84]	; (8000648 <MX_DAC1_Init+0x70>)
 80005f2:	f001 fb23 	bl	8001c3c <HAL_DAC_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005fc:	f000 fc2e 	bl	8000e5c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000604:	2316      	movs	r3, #22
 8000606:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800060c:	2301      	movs	r3, #1
 800060e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	4619      	mov	r1, r3
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <MX_DAC1_Init+0x70>)
 800061c:	f001 fb94 	bl	8001d48 <HAL_DAC_ConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000626:	f000 fc19 	bl	8000e5c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2210      	movs	r2, #16
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_DAC1_Init+0x70>)
 8000632:	f001 fb89 	bl	8001d48 <HAL_DAC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800063c:	f000 fc0e 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	240049ec 	.word	0x240049ec
 800064c:	40007400 	.word	0x40007400

08000650 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <HAL_DAC_MspInit+0x90>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d131      	bne.n	80006d6 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_DAC_MspInit+0x94>)
 8000674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000678:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <HAL_DAC_MspInit+0x94>)
 800067a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800067e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <HAL_DAC_MspInit+0x94>)
 8000684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_DAC_MspInit+0x94>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <HAL_DAC_MspInit+0x94>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <HAL_DAC_MspInit+0x94>)
 80006a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006ae:	2330      	movs	r3, #48	; 0x30
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <HAL_DAC_MspInit+0x98>)
 80006c2:	f001 fc7b 	bl	8001fbc <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2105      	movs	r1, #5
 80006ca:	2036      	movs	r0, #54	; 0x36
 80006cc:	f001 fa8e 	bl	8001bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006d0:	2036      	movs	r0, #54	; 0x36
 80006d2:	f001 faa5 	bl	8001c20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40007400 	.word	0x40007400
 80006e4:	58024400 	.word	0x58024400
 80006e8:	58020000 	.word	0x58020000

080006ec <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08e      	sub	sp, #56	; 0x38
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
 8000702:	615a      	str	r2, [r3, #20]
 8000704:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]
 8000716:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000718:	4b45      	ldr	r3, [pc, #276]	; (8000830 <MX_FMC_Init+0x144>)
 800071a:	4a46      	ldr	r2, [pc, #280]	; (8000834 <MX_FMC_Init+0x148>)
 800071c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800071e:	4b44      	ldr	r3, [pc, #272]	; (8000830 <MX_FMC_Init+0x144>)
 8000720:	4a45      	ldr	r2, [pc, #276]	; (8000838 <MX_FMC_Init+0x14c>)
 8000722:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000724:	4b42      	ldr	r3, [pc, #264]	; (8000830 <MX_FMC_Init+0x144>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800072a:	4b41      	ldr	r3, [pc, #260]	; (8000830 <MX_FMC_Init+0x144>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000730:	4b3f      	ldr	r3, [pc, #252]	; (8000830 <MX_FMC_Init+0x144>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000736:	4b3e      	ldr	r3, [pc, #248]	; (8000830 <MX_FMC_Init+0x144>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800073c:	4b3c      	ldr	r3, [pc, #240]	; (8000830 <MX_FMC_Init+0x144>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000742:	4b3b      	ldr	r3, [pc, #236]	; (8000830 <MX_FMC_Init+0x144>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000748:	4b39      	ldr	r3, [pc, #228]	; (8000830 <MX_FMC_Init+0x144>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <MX_FMC_Init+0x144>)
 8000750:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000756:	4b36      	ldr	r3, [pc, #216]	; (8000830 <MX_FMC_Init+0x144>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800075c:	4b34      	ldr	r3, [pc, #208]	; (8000830 <MX_FMC_Init+0x144>)
 800075e:	2200      	movs	r2, #0
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000762:	4b33      	ldr	r3, [pc, #204]	; (8000830 <MX_FMC_Init+0x144>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000768:	4b31      	ldr	r3, [pc, #196]	; (8000830 <MX_FMC_Init+0x144>)
 800076a:	2200      	movs	r2, #0
 800076c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800076e:	4b30      	ldr	r3, [pc, #192]	; (8000830 <MX_FMC_Init+0x144>)
 8000770:	2200      	movs	r2, #0
 8000772:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000774:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <MX_FMC_Init+0x144>)
 8000776:	2200      	movs	r2, #0
 8000778:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_FMC_Init+0x144>)
 800077c:	2200      	movs	r2, #0
 800077e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000780:	230f      	movs	r3, #15
 8000782:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000784:	230f      	movs	r3, #15
 8000786:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8000788:	23ff      	movs	r3, #255	; 0xff
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 800078c:	230f      	movs	r3, #15
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000790:	2310      	movs	r3, #16
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000794:	2311      	movs	r3, #17
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000798:	2300      	movs	r3, #0
 800079a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	2200      	movs	r2, #0
 80007a2:	4619      	mov	r1, r3
 80007a4:	4822      	ldr	r0, [pc, #136]	; (8000830 <MX_FMC_Init+0x144>)
 80007a6:	f006 ffe9 	bl	800777c <HAL_SRAM_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_FMC_Init+0xc8>
  {
    Error_Handler( );
 80007b0:	f000 fb54 	bl	8000e5c <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_FMC_Init+0x150>)
 80007b6:	4a22      	ldr	r2, [pc, #136]	; (8000840 <MX_FMC_Init+0x154>)
 80007b8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_FMC_Init+0x150>)
 80007bc:	2200      	movs	r2, #0
 80007be:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_FMC_Init+0x150>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_FMC_Init+0x150>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_FMC_Init+0x150>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_FMC_Init+0x150>)
 80007d4:	2240      	movs	r2, #64	; 0x40
 80007d6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_FMC_Init+0x150>)
 80007da:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80007de:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_FMC_Init+0x150>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_FMC_Init+0x150>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_FMC_Init+0x150>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_FMC_Init+0x150>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80007f8:	2310      	movs	r3, #16
 80007fa:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80007fc:	2310      	movs	r3, #16
 80007fe:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 8000800:	2310      	movs	r3, #16
 8000802:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 8000804:	2310      	movs	r3, #16
 8000806:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 8000808:	2310      	movs	r3, #16
 800080a:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 800080c:	2310      	movs	r3, #16
 800080e:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 8000810:	2310      	movs	r3, #16
 8000812:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <MX_FMC_Init+0x150>)
 800081a:	f006 fe1d 	bl	8007458 <HAL_SDRAM_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_FMC_Init+0x13c>
  {
    Error_Handler( );
 8000824:	f000 fb1a 	bl	8000e5c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000828:	bf00      	nop
 800082a:	3738      	adds	r7, #56	; 0x38
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	24004a00 	.word	0x24004a00
 8000834:	52004000 	.word	0x52004000
 8000838:	52004104 	.word	0x52004104
 800083c:	24004a4c 	.word	0x24004a4c
 8000840:	52004140 	.word	0x52004140

08000844 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000858:	4b3c      	ldr	r3, [pc, #240]	; (800094c <HAL_FMC_MspInit+0x108>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d170      	bne.n	8000942 <HAL_FMC_MspInit+0xfe>
    return;
  }
  FMC_Initialized = 1;
 8000860:	4b3a      	ldr	r3, [pc, #232]	; (800094c <HAL_FMC_MspInit+0x108>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000866:	4b3a      	ldr	r3, [pc, #232]	; (8000950 <HAL_FMC_MspInit+0x10c>)
 8000868:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800086c:	4a38      	ldr	r2, [pc, #224]	; (8000950 <HAL_FMC_MspInit+0x10c>)
 800086e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000872:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000876:	4b36      	ldr	r3, [pc, #216]	; (8000950 <HAL_FMC_MspInit+0x10c>)
 8000878:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800087c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PG15   ------> FMC_SDNCAS
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000884:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000888:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000896:	230c      	movs	r3, #12
 8000898:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4619      	mov	r1, r3
 800089e:	482d      	ldr	r0, [pc, #180]	; (8000954 <HAL_FMC_MspInit+0x110>)
 80008a0:	f001 fb8c 	bl	8001fbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80008a4:	2319      	movs	r3, #25
 80008a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b4:	230c      	movs	r3, #12
 80008b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4826      	ldr	r0, [pc, #152]	; (8000958 <HAL_FMC_MspInit+0x114>)
 80008be:	f001 fb7d 	bl	8001fbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80008c2:	f248 1333 	movw	r3, #33075	; 0x8133
 80008c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008d4:	230c      	movs	r3, #12
 80008d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	481f      	ldr	r0, [pc, #124]	; (800095c <HAL_FMC_MspInit+0x118>)
 80008de:	f001 fb6d 	bl	8001fbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80008e2:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80008e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008f4:	230c      	movs	r3, #12
 80008f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4818      	ldr	r0, [pc, #96]	; (8000960 <HAL_FMC_MspInit+0x11c>)
 80008fe:	f001 fb5d 	bl	8001fbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000902:	f24c 0333 	movw	r3, #49203	; 0xc033
 8000906:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000914:	230c      	movs	r3, #12
 8000916:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	4619      	mov	r1, r3
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <HAL_FMC_MspInit+0x120>)
 800091e:	f001 fb4d 	bl	8001fbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000922:	2380      	movs	r3, #128	; 0x80
 8000924:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8000932:	2309      	movs	r3, #9
 8000934:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <HAL_FMC_MspInit+0x114>)
 800093c:	f001 fb3e 	bl	8001fbc <HAL_GPIO_Init>
 8000940:	e000      	b.n	8000944 <HAL_FMC_MspInit+0x100>
    return;
 8000942:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	24000094 	.word	0x24000094
 8000950:	58024400 	.word	0x58024400
 8000954:	58021400 	.word	0x58021400
 8000958:	58020800 	.word	0x58020800
 800095c:	58021800 	.word	0x58021800
 8000960:	58021000 	.word	0x58021000
 8000964:	58020c00 	.word	0x58020c00

08000968 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000970:	f7ff ff68 	bl	8000844 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000984:	f7ff ff5e 	bl	8000844 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000994:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <MX_FREERTOS_Init+0x28>)
 8000996:	2100      	movs	r1, #0
 8000998:	4808      	ldr	r0, [pc, #32]	; (80009bc <MX_FREERTOS_Init+0x2c>)
 800099a:	f00b ffb8 	bl	800c90e <osThreadNew>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <MX_FREERTOS_Init+0x30>)
 80009a2:	6013      	str	r3, [r2, #0]

  /* creation of sdCardTask */
  sdCardTaskHandle = osThreadNew(sdCardTaskFcn, NULL, &sdCardTask_attributes);
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <MX_FREERTOS_Init+0x34>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <MX_FREERTOS_Init+0x38>)
 80009aa:	f00b ffb0 	bl	800c90e <osThreadNew>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <MX_FREERTOS_Init+0x3c>)
 80009b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	08010aa4 	.word	0x08010aa4
 80009bc:	080009d1 	.word	0x080009d1
 80009c0:	24004a98 	.word	0x24004a98
 80009c4:	08010ac8 	.word	0x08010ac8
 80009c8:	080009ed 	.word	0x080009ed
 80009cc:	24004a94 	.word	0x24004a94

080009d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	printf("Hello world\r\n");
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <StartDefaultTask+0x18>)
 80009da:	f00f fbb5 	bl	8010148 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009de:	2001      	movs	r0, #1
 80009e0:	f00c f827 	bl	800ca32 <osDelay>
 80009e4:	e7fb      	b.n	80009de <StartDefaultTask+0xe>
 80009e6:	bf00      	nop
 80009e8:	08010a28 	.word	0x08010a28

080009ec <sdCardTaskFcn>:
uint32_t bytesWritten, bytesRead;
uint8_t wtext[] = "Maybe this will work";
uint8_t rtext[100];
/* USER CODE END Header_sdCardTaskFcn */
void sdCardTaskFcn(void *argument)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sdCardTaskFcn */
	f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	4919      	ldr	r1, [pc, #100]	; (8000a5c <sdCardTaskFcn+0x70>)
 80009f8:	4819      	ldr	r0, [pc, #100]	; (8000a60 <sdCardTaskFcn+0x74>)
 80009fa:	f00b fb41 	bl	800c080 <f_mount>

	retSD = f_open(&SDFile, "textFile.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80009fe:	220a      	movs	r2, #10
 8000a00:	4918      	ldr	r1, [pc, #96]	; (8000a64 <sdCardTaskFcn+0x78>)
 8000a02:	4819      	ldr	r0, [pc, #100]	; (8000a68 <sdCardTaskFcn+0x7c>)
 8000a04:	f00b fba0 	bl	800c148 <f_open>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <sdCardTaskFcn+0x80>)
 8000a0e:	701a      	strb	r2, [r3, #0]
	if (retSD != FR_OK)
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <sdCardTaskFcn+0x80>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d01a      	beq.n	8000a4e <sdCardTaskFcn+0x62>
	{
		while (retSD-- > 0)
 8000a18:	e011      	b.n	8000a3e <sdCardTaskFcn+0x52>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4814      	ldr	r0, [pc, #80]	; (8000a70 <sdCardTaskFcn+0x84>)
 8000a20:	f001 fc94 	bl	800234c <HAL_GPIO_WritePin>
			osDelay(300);
 8000a24:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a28:	f00c f803 	bl	800ca32 <osDelay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2102      	movs	r1, #2
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <sdCardTaskFcn+0x84>)
 8000a32:	f001 fc8b 	bl	800234c <HAL_GPIO_WritePin>
			osDelay(300);
 8000a36:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a3a:	f00b fffa 	bl	800ca32 <osDelay>
		while (retSD-- > 0)
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <sdCardTaskFcn+0x80>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	1e5a      	subs	r2, r3, #1
 8000a44:	b2d1      	uxtb	r1, r2
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <sdCardTaskFcn+0x80>)
 8000a48:	7011      	strb	r1, [r2, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1e5      	bne.n	8000a1a <sdCardTaskFcn+0x2e>
		}
	}


	f_close(&SDFile);
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <sdCardTaskFcn+0x7c>)
 8000a50:	f00b fdc8 	bl	800c5e4 <f_close>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f00b ffec 	bl	800ca32 <osDelay>
 8000a5a:	e7fb      	b.n	8000a54 <sdCardTaskFcn+0x68>
 8000a5c:	24004f08 	.word	0x24004f08
 8000a60:	2400513c 	.word	0x2400513c
 8000a64:	08010a38 	.word	0x08010a38
 8000a68:	24004f0c 	.word	0x24004f0c
 8000a6c:	24004f04 	.word	0x24004f04
 8000a70:	58021000 	.word	0x58021000

08000a74 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b75      	ldr	r3, [pc, #468]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	4a73      	ldr	r2, [pc, #460]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9a:	4b71      	ldr	r3, [pc, #452]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	623b      	str	r3, [r7, #32]
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa8:	4b6d      	ldr	r3, [pc, #436]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	4a6c      	ldr	r2, [pc, #432]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000ab0:	f043 0320 	orr.w	r3, r3, #32
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab8:	4b69      	ldr	r3, [pc, #420]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	f003 0320 	and.w	r3, r3, #32
 8000ac2:	61fb      	str	r3, [r7, #28]
 8000ac4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	4b66      	ldr	r3, [pc, #408]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a64      	ldr	r2, [pc, #400]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b62      	ldr	r3, [pc, #392]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b5e      	ldr	r3, [pc, #376]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a5d      	ldr	r2, [pc, #372]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b5a      	ldr	r3, [pc, #360]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b57      	ldr	r3, [pc, #348]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a55      	ldr	r2, [pc, #340]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b53      	ldr	r3, [pc, #332]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b20:	4b4f      	ldr	r3, [pc, #316]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a4e      	ldr	r2, [pc, #312]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b4b      	ldr	r3, [pc, #300]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3e:	4b48      	ldr	r3, [pc, #288]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a46      	ldr	r2, [pc, #280]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b44      	ldr	r3, [pc, #272]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f003 0310 	and.w	r3, r3, #16
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5c:	4b40      	ldr	r3, [pc, #256]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	4a3f      	ldr	r2, [pc, #252]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6c:	4b3c      	ldr	r3, [pc, #240]	; (8000c60 <MX_GPIO_Init+0x1ec>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b80:	4838      	ldr	r0, [pc, #224]	; (8000c64 <MX_GPIO_Init+0x1f0>)
 8000b82:	f001 fbe3 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000b8c:	4836      	ldr	r0, [pc, #216]	; (8000c68 <MX_GPIO_Init+0x1f4>)
 8000b8e:	f001 fbdd 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2102      	movs	r1, #2
 8000b96:	4835      	ldr	r0, [pc, #212]	; (8000c6c <MX_GPIO_Init+0x1f8>)
 8000b98:	f001 fbd8 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	482f      	ldr	r0, [pc, #188]	; (8000c70 <MX_GPIO_Init+0x1fc>)
 8000bb2:	f001 fa03 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bb6:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4825      	ldr	r0, [pc, #148]	; (8000c64 <MX_GPIO_Init+0x1f0>)
 8000bd0:	f001 f9f4 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPI1_CS_Pin;
 8000bd4:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	481e      	ldr	r0, [pc, #120]	; (8000c68 <MX_GPIO_Init+0x1f4>)
 8000bee:	f001 f9e5 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC1_DET_Pin;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SDMMC1_DET_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	481b      	ldr	r0, [pc, #108]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000c06:	f001 f9d9 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_GPIO_Init+0x204>)
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4815      	ldr	r0, [pc, #84]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000c1e:	f001 f9cd 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CD_Pin;
 8000c22:	2308      	movs	r3, #8
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_CD_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <MX_GPIO_Init+0x1f4>)
 8000c36:	f001 f9c1 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4806      	ldr	r0, [pc, #24]	; (8000c6c <MX_GPIO_Init+0x1f8>)
 8000c52:	f001 f9b3 	bl	8001fbc <HAL_GPIO_Init>

}
 8000c56:	bf00      	nop
 8000c58:	3738      	adds	r7, #56	; 0x38
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024400 	.word	0x58024400
 8000c64:	58020400 	.word	0x58020400
 8000c68:	58020c00 	.word	0x58020c00
 8000c6c:	58021000 	.word	0x58021000
 8000c70:	58020800 	.word	0x58020800
 8000c74:	58021800 	.word	0x58021800
 8000c78:	11110000 	.word	0x11110000

08000c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c80:	f000 fe70 	bl	8001964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c84:	f000 f81e 	bl	8000cc4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c88:	f000 f8a4 	bl	8000dd4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8c:	f7ff fef2 	bl	8000a74 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c90:	f000 fd96 	bl	80017c0 <MX_USART3_UART_Init>
  MX_DAC1_Init();
 8000c94:	f7ff fca0 	bl	80005d8 <MX_DAC1_Init>
  MX_FMC_Init();
 8000c98:	f7ff fd28 	bl	80006ec <MX_FMC_Init>
  MX_RNG_Init();
 8000c9c:	f000 f972 	bl	8000f84 <MX_RNG_Init>
  MX_SDMMC1_SD_Init();
 8000ca0:	f000 f9be 	bl	8001020 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000ca4:	f000 fa4e 	bl	8001144 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000ca8:	f009 fa2e 	bl	800a108 <MX_FATFS_Init>
  MX_MDMA_Init();
 8000cac:	f000 f8dc 	bl	8000e68 <MX_MDMA_Init>
  MX_TIM6_Init();
 8000cb0:	f000 fd28 	bl	8001704 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000cb4:	f00b fdaa 	bl	800c80c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000cb8:	f7ff fe6a 	bl	8000990 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000cbc:	f00b fdec 	bl	800c898 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <main+0x44>
	...

08000cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b09c      	sub	sp, #112	; 0x70
 8000cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	224c      	movs	r2, #76	; 0x4c
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f00f f9c2 	bl	801005c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2220      	movs	r2, #32
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f00f f9bc 	bl	801005c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f001 fd85 	bl	80027f4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <SystemClock_Config+0x104>)
 8000cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf2:	4a35      	ldr	r2, [pc, #212]	; (8000dc8 <SystemClock_Config+0x104>)
 8000cf4:	f023 0301 	bic.w	r3, r3, #1
 8000cf8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cfa:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <SystemClock_Config+0x104>)
 8000cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <SystemClock_Config+0x108>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d0c:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <SystemClock_Config+0x108>)
 8000d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <SystemClock_Config+0x108>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d20:	bf00      	nop
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <SystemClock_Config+0x108>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d2e:	d1f8      	bne.n	8000d22 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <SystemClock_Config+0x10c>)
 8000d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d34:	f023 0303 	bic.w	r3, r3, #3
 8000d38:	4a25      	ldr	r2, [pc, #148]	; (8000dd0 <SystemClock_Config+0x10c>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000d40:	2321      	movs	r3, #33	; 0x21
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d52:	2302      	movs	r3, #2
 8000d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000d5a:	2378      	movs	r3, #120	; 0x78
 8000d5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d62:	2304      	movs	r3, #4
 8000d64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fd74 	bl	8002868 <HAL_RCC_OscConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d86:	f000 f869 	bl	8000e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	233f      	movs	r3, #63	; 0x3f
 8000d8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d96:	2308      	movs	r3, #8
 8000d98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2102      	movs	r1, #2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 f96a 	bl	8003088 <HAL_RCC_ClockConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000dba:	f000 f84f 	bl	8000e5c <Error_Handler>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3770      	adds	r7, #112	; 0x70
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	58000400 	.word	0x58000400
 8000dcc:	58024800 	.word	0x58024800
 8000dd0:	58024400 	.word	0x58024400

08000dd4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b0b0      	sub	sp, #192	; 0xc0
 8000dd8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	22bc      	movs	r2, #188	; 0xbc
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f00f f93b 	bl	801005c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <PeriphCommonClock_Config+0x60>)
 8000de8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 48;
 8000dee:	2330      	movs	r3, #48	; 0x30
 8000df0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8000df6:	2304      	movs	r3, #4
 8000df8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e12:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000e14:	2301      	movs	r3, #1
 8000e16:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 fd02 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000e26:	f000 f819 	bl	8000e5c <Error_Handler>
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	37c0      	adds	r7, #192	; 0xc0
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	01010002 	.word	0x01010002

08000e38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d101      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e4a:	f000 fdc7 	bl	80019dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40001400 	.word	0x40001400

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <MX_MDMA_Init>:
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sw_0
  *   hmdma_mdma_channel41_sw_0
  */
void MX_MDMA_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e6e:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <MX_MDMA_Init+0x108>)
 8000e70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e74:	4a3e      	ldr	r2, [pc, #248]	; (8000f70 <MX_MDMA_Init+0x108>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000e7e:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <MX_MDMA_Init+0x108>)
 8000e80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sw_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sw_0.Instance = MDMA_Channel0;
 8000e8c:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000e8e:	4a3a      	ldr	r2, [pc, #232]	; (8000f78 <MX_MDMA_Init+0x110>)
 8000e90:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sw_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000e92:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sw_0.Init.Priority = MDMA_PRIORITY_HIGH;
 8000e98:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sw_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000e9e:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sw_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000ea4:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sw_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000eaa:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000eac:	2208      	movs	r2, #8
 8000eae:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sw_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000eb0:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sw_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sw_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000ebe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sw_0.Init.BufferTransferLength = 1;
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sw_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sw_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sw_0.Init.SourceBlockAddressOffset = 0;
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sw_0.Init.DestBlockAddressOffset = 0;
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sw_0) != HAL_OK)
 8000ee2:	4824      	ldr	r0, [pc, #144]	; (8000f74 <MX_MDMA_Init+0x10c>)
 8000ee4:	f001 fa4b 	bl	800237e <HAL_MDMA_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_MDMA_Init+0x8a>
  {
    Error_Handler();
 8000eee:	f7ff ffb5 	bl	8000e5c <Error_Handler>
  }

  /* Configure MDMA channel MDMA_Channel1 */
  /* Configure MDMA request hmdma_mdma_channel41_sw_0 on MDMA_Channel1 */
  hmdma_mdma_channel41_sw_0.Instance = MDMA_Channel1;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000ef4:	4a22      	ldr	r2, [pc, #136]	; (8000f80 <MX_MDMA_Init+0x118>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel41_sw_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000ef8:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel41_sw_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel41_sw_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel41_sw_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel41_sw_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f12:	2208      	movs	r2, #8
 8000f14:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel41_sw_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel41_sw_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel41_sw_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel41_sw_0.Init.BufferTransferLength = 1;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel41_sw_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel41_sw_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel41_sw_0.Init.SourceBlockAddressOffset = 0;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel41_sw_0.Init.DestBlockAddressOffset = 0;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel41_sw_0) != HAL_OK)
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_MDMA_Init+0x114>)
 8000f4a:	f001 fa18 	bl	800237e <HAL_MDMA_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_MDMA_Init+0xf0>
  {
    Error_Handler();
 8000f54:	f7ff ff82 	bl	8000e5c <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2105      	movs	r1, #5
 8000f5c:	207a      	movs	r0, #122	; 0x7a
 8000f5e:	f000 fe45 	bl	8001bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000f62:	207a      	movs	r0, #122	; 0x7a
 8000f64:	f000 fe5c 	bl	8001c20 <HAL_NVIC_EnableIRQ>

}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58024400 	.word	0x58024400
 8000f74:	24004b74 	.word	0x24004b74
 8000f78:	52000040 	.word	0x52000040
 8000f7c:	24004b08 	.word	0x24004b08
 8000f80:	52000080 	.word	0x52000080

08000f84 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_RNG_Init+0x24>)
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <MX_RNG_Init+0x28>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_RNG_Init+0x24>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_RNG_Init+0x24>)
 8000f96:	f004 fdcb 	bl	8005b30 <HAL_RNG_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000fa0:	f7ff ff5c 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	24004be0 	.word	0x24004be0
 8000fac:	48021800 	.word	0x48021800

08000fb0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0b2      	sub	sp, #200	; 0xc8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	22bc      	movs	r2, #188	; 0xbc
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00f f84b 	bl	801005c <memset>
  if(rngHandle->Instance==RNG)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a13      	ldr	r2, [pc, #76]	; (8001018 <HAL_RNG_MspInit+0x68>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d11e      	bne.n	800100e <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 fc1f 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000fec:	f7ff ff36 	bl	8000e5c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_RNG_MspInit+0x6c>)
 8000ff2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_RNG_MspInit+0x6c>)
 8000ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ffc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_RNG_MspInit+0x6c>)
 8001002:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	37c8      	adds	r7, #200	; 0xc8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	48021800 	.word	0x48021800
 800101c:	58024400 	.word	0x58024400

08001020 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_SDMMC1_SD_Init+0x34>)
 8001026:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <MX_SDMMC1_SD_Init+0x38>)
 8001028:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_SDMMC1_SD_Init+0x34>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_SDMMC1_SD_Init+0x34>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_SDMMC1_SD_Init+0x34>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <MX_SDMMC1_SD_Init+0x34>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <MX_SDMMC1_SD_Init+0x34>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	24004bf4 	.word	0x24004bf4
 8001058:	52007000 	.word	0x52007000

0800105c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a2e      	ldr	r2, [pc, #184]	; (8001134 <HAL_SD_MspInit+0xd8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d155      	bne.n	800112a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <HAL_SD_MspInit+0xdc>)
 8001080:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001084:	4a2c      	ldr	r2, [pc, #176]	; (8001138 <HAL_SD_MspInit+0xdc>)
 8001086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800108e:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <HAL_SD_MspInit+0xdc>)
 8001090:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_SD_MspInit+0xdc>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	4a25      	ldr	r2, [pc, #148]	; (8001138 <HAL_SD_MspInit+0xdc>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <HAL_SD_MspInit+0xdc>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <HAL_SD_MspInit+0xdc>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_SD_MspInit+0xdc>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_SD_MspInit+0xdc>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80010d8:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80010ea:	230c      	movs	r3, #12
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4811      	ldr	r0, [pc, #68]	; (800113c <HAL_SD_MspInit+0xe0>)
 80010f6:	f000 ff61 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010fa:	2304      	movs	r3, #4
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800110a:	230c      	movs	r3, #12
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	480a      	ldr	r0, [pc, #40]	; (8001140 <HAL_SD_MspInit+0xe4>)
 8001116:	f000 ff51 	bl	8001fbc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2105      	movs	r1, #5
 800111e:	2031      	movs	r0, #49	; 0x31
 8001120:	f000 fd64 	bl	8001bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001124:	2031      	movs	r0, #49	; 0x31
 8001126:	f000 fd7b 	bl	8001c20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	52007000 	.word	0x52007000
 8001138:	58024400 	.word	0x58024400
 800113c:	58020800 	.word	0x58020800
 8001140:	58020c00 	.word	0x58020c00

08001144 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <MX_SPI1_Init+0xa4>)
 800114a:	4a28      	ldr	r2, [pc, #160]	; (80011ec <MX_SPI1_Init+0xa8>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <MX_SPI1_Init+0xa4>)
 8001150:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001154:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <MX_SPI1_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_SPI1_Init+0xa4>)
 800115e:	2207      	movs	r2, #7
 8001160:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_SPI1_Init+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_SPI1_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_SPI1_Init+0xa4>)
 8001170:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001174:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_SPI1_Init+0xa4>)
 8001178:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800117c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_SPI1_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_SPI1_Init+0xa4>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_SPI1_Init+0xa4>)
 800118c:	2200      	movs	r2, #0
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_SPI1_Init+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_SPI1_Init+0xa4>)
 8001198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_SPI1_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_SPI1_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_SPI1_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <MX_SPI1_Init+0xa4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_SPI1_Init+0xa4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_SPI1_Init+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_SPI1_Init+0xa4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_SPI1_Init+0xa4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_SPI1_Init+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_SPI1_Init+0xa4>)
 80011d6:	f006 f9b3 	bl	8007540 <HAL_SPI_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80011e0:	f7ff fe3c 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	24004c70 	.word	0x24004c70
 80011ec:	40013000 	.word	0x40013000

080011f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0ba      	sub	sp, #232	; 0xe8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	22bc      	movs	r2, #188	; 0xbc
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f00e ff23 	bl	801005c <memset>
  if(spiHandle->Instance==SPI1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <HAL_SPI_MspInit+0x104>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d165      	bne.n	80012ec <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001224:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001226:	2300      	movs	r3, #0
 8001228:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	4618      	mov	r0, r3
 8001230:	f002 faf8 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800123a:	f7ff fe0f 	bl	8000e5c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <HAL_SPI_MspInit+0x108>)
 8001240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001244:	4a2c      	ldr	r2, [pc, #176]	; (80012f8 <HAL_SPI_MspInit+0x108>)
 8001246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800124a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <HAL_SPI_MspInit+0x108>)
 8001250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <HAL_SPI_MspInit+0x108>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <HAL_SPI_MspInit+0x108>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_SPI_MspInit+0x108>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_SPI_MspInit+0x108>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <HAL_SPI_MspInit+0x108>)
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_SPI_MspInit+0x108>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012b0:	2305      	movs	r3, #5
 80012b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ba:	4619      	mov	r1, r3
 80012bc:	480f      	ldr	r0, [pc, #60]	; (80012fc <HAL_SPI_MspInit+0x10c>)
 80012be:	f000 fe7d 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80012c2:	2318      	movs	r3, #24
 80012c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012da:	2305      	movs	r3, #5
 80012dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <HAL_SPI_MspInit+0x110>)
 80012e8:	f000 fe68 	bl	8001fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012ec:	bf00      	nop
 80012ee:	37e8      	adds	r7, #232	; 0xe8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40013000 	.word	0x40013000
 80012f8:	58024400 	.word	0x58024400
 80012fc:	58020c00 	.word	0x58020c00
 8001300:	58020400 	.word	0x58020400

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_MspInit+0x38>)
 800130c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_MspInit+0x38>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_MspInit+0x38>)
 800131c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	210f      	movs	r1, #15
 800132c:	f06f 0001 	mvn.w	r0, #1
 8001330:	f000 fc5c 	bl	8001bec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	58024400 	.word	0x58024400

08001340 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b090      	sub	sp, #64	; 0x40
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	d827      	bhi.n	800139e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 800134e:	2200      	movs	r2, #0
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	2037      	movs	r0, #55	; 0x37
 8001354:	f000 fc4a 	bl	8001bec <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001358:	2037      	movs	r0, #55	; 0x37
 800135a:	f000 fc61 	bl	8001c20 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800135e:	4a29      	ldr	r2, [pc, #164]	; (8001404 <HAL_InitTick+0xc4>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001364:	4b28      	ldr	r3, [pc, #160]	; (8001408 <HAL_InitTick+0xc8>)
 8001366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800136a:	4a27      	ldr	r2, [pc, #156]	; (8001408 <HAL_InitTick+0xc8>)
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001374:	4b24      	ldr	r3, [pc, #144]	; (8001408 <HAL_InitTick+0xc8>)
 8001376:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800137a:	f003 0320 	and.w	r3, r3, #32
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001382:	f107 0210 	add.w	r2, r7, #16
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fa07 	bl	80037a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001394:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001398:	2b00      	cmp	r3, #0
 800139a:	d106      	bne.n	80013aa <HAL_InitTick+0x6a>
 800139c:	e001      	b.n	80013a2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e02b      	b.n	80013fa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013a2:	f002 f9d1 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 80013a6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80013a8:	e004      	b.n	80013b4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013aa:	f002 f9cd 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 80013ae:	4603      	mov	r3, r0
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013b6:	4a15      	ldr	r2, [pc, #84]	; (800140c <HAL_InitTick+0xcc>)
 80013b8:	fba2 2303 	umull	r2, r3, r2, r3
 80013bc:	0c9b      	lsrs	r3, r3, #18
 80013be:	3b01      	subs	r3, #1
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_InitTick+0xd0>)
 80013c4:	4a13      	ldr	r2, [pc, #76]	; (8001414 <HAL_InitTick+0xd4>)
 80013c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_InitTick+0xd0>)
 80013ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ce:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80013d0:	4a0f      	ldr	r2, [pc, #60]	; (8001410 <HAL_InitTick+0xd0>)
 80013d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_InitTick+0xd0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_InitTick+0xd0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80013e2:	480b      	ldr	r0, [pc, #44]	; (8001410 <HAL_InitTick+0xd0>)
 80013e4:	f006 fa1a 	bl	800781c <HAL_TIM_Base_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d104      	bne.n	80013f8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80013ee:	4808      	ldr	r0, [pc, #32]	; (8001410 <HAL_InitTick+0xd0>)
 80013f0:	f006 fa78 	bl	80078e4 <HAL_TIM_Base_Start_IT>
 80013f4:	4603      	mov	r3, r0
 80013f6:	e000      	b.n	80013fa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3740      	adds	r7, #64	; 0x40
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	24000008 	.word	0x24000008
 8001408:	58024400 	.word	0x58024400
 800140c:	431bde83 	.word	0x431bde83
 8001410:	24004cf8 	.word	0x24004cf8
 8001414:	40001400 	.word	0x40001400

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <SDMMC1_IRQHandler+0x10>)
 800144a:	f004 fe33 	bl	80060b4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	24004bf4 	.word	0x24004bf4

08001458 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <TIM6_DAC_IRQHandler+0x14>)
 800145e:	f000 fc0f 	bl	8001c80 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001462:	4803      	ldr	r0, [pc, #12]	; (8001470 <TIM6_DAC_IRQHandler+0x18>)
 8001464:	f006 faae 	bl	80079c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	240049ec 	.word	0x240049ec
 8001470:	24004db4 	.word	0x24004db4

08001474 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <TIM7_IRQHandler+0x10>)
 800147a:	f006 faa3 	bl	80079c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	24004cf8 	.word	0x24004cf8

08001488 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sw_0);
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <MDMA_IRQHandler+0x14>)
 800148e:	f000 ffc3 	bl	8002418 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel41_sw_0);
 8001492:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MDMA_IRQHandler+0x18>)
 8001494:	f000 ffc0 	bl	8002418 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	24004b74 	.word	0x24004b74
 80014a0:	24004b08 	.word	0x24004b08

080014a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	e00a      	b.n	80014cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014b6:	f3af 8000 	nop.w
 80014ba:	4601      	mov	r1, r0
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	b2ca      	uxtb	r2, r1
 80014c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf0      	blt.n	80014b6 <_read+0x12>
	}

return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e009      	b.n	8001504 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f9f7 	bl	80018ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	dbf1      	blt.n	80014f0 <_write+0x12>
	}
	return len;
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_close>:

int _close(int file)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
	return -1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800153e:	605a      	str	r2, [r3, #4]
	return 0;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_isatty>:

int _isatty(int file)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
	return 1;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
	return 0;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001588:	4a14      	ldr	r2, [pc, #80]	; (80015dc <_sbrk+0x5c>)
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <_sbrk+0x60>)
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <_sbrk+0x64>)
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <_sbrk+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d207      	bcs.n	80015c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b0:	f00e fd1c 	bl	800ffec <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	220c      	movs	r2, #12
 80015b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	e009      	b.n	80015d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <_sbrk+0x64>)
 80015d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	24080000 	.word	0x24080000
 80015e0:	00000400 	.word	0x00000400
 80015e4:	24000098 	.word	0x24000098
 80015e8:	240053c0 	.word	0x240053c0

080015ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015f0:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <SystemInit+0xec>)
 80015f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f6:	4a38      	ldr	r2, [pc, #224]	; (80016d8 <SystemInit+0xec>)
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001600:	4b36      	ldr	r3, [pc, #216]	; (80016dc <SystemInit+0xf0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	2b06      	cmp	r3, #6
 800160a:	d807      	bhi.n	800161c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <SystemInit+0xf0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 030f 	bic.w	r3, r3, #15
 8001614:	4a31      	ldr	r2, [pc, #196]	; (80016dc <SystemInit+0xf0>)
 8001616:	f043 0307 	orr.w	r3, r3, #7
 800161a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800161c:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <SystemInit+0xf4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <SystemInit+0xf4>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <SystemInit+0xf4>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800162e:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <SystemInit+0xf4>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	492b      	ldr	r1, [pc, #172]	; (80016e0 <SystemInit+0xf4>)
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <SystemInit+0xf8>)
 8001636:	4013      	ands	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800163a:	4b28      	ldr	r3, [pc, #160]	; (80016dc <SystemInit+0xf0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001646:	4b25      	ldr	r3, [pc, #148]	; (80016dc <SystemInit+0xf0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 030f 	bic.w	r3, r3, #15
 800164e:	4a23      	ldr	r2, [pc, #140]	; (80016dc <SystemInit+0xf0>)
 8001650:	f043 0307 	orr.w	r3, r3, #7
 8001654:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <SystemInit+0xf4>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <SystemInit+0xf4>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <SystemInit+0xf4>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <SystemInit+0xf4>)
 800166a:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <SystemInit+0xfc>)
 800166c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <SystemInit+0xf4>)
 8001670:	4a1e      	ldr	r2, [pc, #120]	; (80016ec <SystemInit+0x100>)
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <SystemInit+0xf4>)
 8001676:	4a1e      	ldr	r2, [pc, #120]	; (80016f0 <SystemInit+0x104>)
 8001678:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <SystemInit+0xf4>)
 800167c:	2200      	movs	r2, #0
 800167e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <SystemInit+0xf4>)
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <SystemInit+0x104>)
 8001684:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <SystemInit+0xf4>)
 8001688:	2200      	movs	r2, #0
 800168a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <SystemInit+0xf4>)
 800168e:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <SystemInit+0x104>)
 8001690:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <SystemInit+0xf4>)
 8001694:	2200      	movs	r2, #0
 8001696:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <SystemInit+0xf4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <SystemInit+0xf4>)
 800169e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <SystemInit+0xf4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <SystemInit+0x108>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <SystemInit+0x10c>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016b6:	d202      	bcs.n	80016be <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <SystemInit+0x110>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <SystemInit+0x114>)
 80016c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016c4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SystemInit+0xec>)
 80016c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016cc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00
 80016dc:	52002000 	.word	0x52002000
 80016e0:	58024400 	.word	0x58024400
 80016e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80016e8:	02020200 	.word	0x02020200
 80016ec:	01ff0000 	.word	0x01ff0000
 80016f0:	01010280 	.word	0x01010280
 80016f4:	5c001000 	.word	0x5c001000
 80016f8:	ffff0000 	.word	0xffff0000
 80016fc:	51008108 	.word	0x51008108
 8001700:	52004000 	.word	0x52004000

08001704 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_TIM6_Init+0x64>)
 8001716:	4a15      	ldr	r2, [pc, #84]	; (800176c <MX_TIM6_Init+0x68>)
 8001718:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_TIM6_Init+0x64>)
 800171c:	2263      	movs	r2, #99	; 0x63
 800171e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_TIM6_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 24;
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_TIM6_Init+0x64>)
 8001728:	2218      	movs	r2, #24
 800172a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_TIM6_Init+0x64>)
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <MX_TIM6_Init+0x64>)
 8001734:	f006 f872 	bl	800781c <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800173e:	f7ff fb8d 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001742:	2320      	movs	r3, #32
 8001744:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <MX_TIM6_Init+0x64>)
 8001750:	f006 fbcc 	bl	8007eec <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800175a:	f7ff fb7f 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	24004db4 	.word	0x24004db4
 800176c:	40001000 	.word	0x40001000

08001770 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <HAL_TIM_Base_MspInit+0x48>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d116      	bne.n	80017b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_TIM_Base_MspInit+0x4c>)
 8001784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001788:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <HAL_TIM_Base_MspInit+0x4c>)
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_TIM_Base_MspInit+0x4c>)
 8001794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2105      	movs	r1, #5
 80017a4:	2036      	movs	r0, #54	; 0x36
 80017a6:	f000 fa21 	bl	8001bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017aa:	2036      	movs	r0, #54	; 0x36
 80017ac:	f000 fa38 	bl	8001c20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40001000 	.word	0x40001000
 80017bc:	58024400 	.word	0x58024400

080017c0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <MX_USART3_UART_Init+0x90>)
 80017c6:	4a23      	ldr	r2, [pc, #140]	; (8001854 <MX_USART3_UART_Init+0x94>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <MX_USART3_UART_Init+0x90>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_USART3_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_USART3_UART_Init+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <MX_USART3_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_USART3_UART_Init+0x90>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <MX_USART3_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_USART3_UART_Init+0x90>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <MX_USART3_UART_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_USART3_UART_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <MX_USART3_UART_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001808:	4811      	ldr	r0, [pc, #68]	; (8001850 <MX_USART3_UART_Init+0x90>)
 800180a:	f006 fc1f 	bl	800804c <HAL_UART_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001814:	f7ff fb22 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001818:	2100      	movs	r1, #0
 800181a:	480d      	ldr	r0, [pc, #52]	; (8001850 <MX_USART3_UART_Init+0x90>)
 800181c:	f007 fc02 	bl	8009024 <HAL_UARTEx_SetTxFifoThreshold>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001826:	f7ff fb19 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800182a:	2100      	movs	r1, #0
 800182c:	4808      	ldr	r0, [pc, #32]	; (8001850 <MX_USART3_UART_Init+0x90>)
 800182e:	f007 fc37 	bl	80090a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001838:	f7ff fb10 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <MX_USART3_UART_Init+0x90>)
 800183e:	f007 fbb8 	bl	8008fb2 <HAL_UARTEx_DisableFifoMode>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001848:	f7ff fb08 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	24004e70 	.word	0x24004e70
 8001854:	40004800 	.word	0x40004800

08001858 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a1a      	ldr	r2, [pc, #104]	; (80018e0 <HAL_UART_MspInit+0x88>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d12e      	bne.n	80018d8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_UART_MspInit+0x8c>)
 800187c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001880:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <HAL_UART_MspInit+0x8c>)
 8001882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001886:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_UART_MspInit+0x8c>)
 800188c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_UART_MspInit+0x8c>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189e:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_UART_MspInit+0x8c>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_UART_MspInit+0x8c>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018c8:	2307      	movs	r3, #7
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_UART_MspInit+0x90>)
 80018d4:	f000 fb72 	bl	8001fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40004800 	.word	0x40004800
 80018e4:	58024400 	.word	0x58024400
 80018e8:	58020c00 	.word	0x58020c00

080018ec <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
PUTCHAR_PROTOTYPE
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xFFFF);
 80018f4:	1d39      	adds	r1, r7, #4
 80018f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018fa:	2201      	movs	r2, #1
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <__io_putchar+0x20>)
 80018fe:	f006 fbf5 	bl	80080ec <HAL_UART_Transmit>
	return ch;
 8001902:	687b      	ldr	r3, [r7, #4]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	24004e70 	.word	0x24004e70

08001910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001948 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001914:	f7ff fe6a 	bl	80015ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001918:	480c      	ldr	r0, [pc, #48]	; (800194c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800191a:	490d      	ldr	r1, [pc, #52]	; (8001950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001930:	4c0a      	ldr	r4, [pc, #40]	; (800195c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800193e:	f00e fb5b 	bl	800fff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001942:	f7ff f99b 	bl	8000c7c <main>
  bx  lr
 8001946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001948:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800194c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001950:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001954:	08010c2c 	.word	0x08010c2c
  ldr r2, =_sbss
 8001958:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800195c:	240053c0 	.word	0x240053c0

08001960 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC3_IRQHandler>
	...

08001964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196a:	2003      	movs	r0, #3
 800196c:	f000 f933 	bl	8001bd6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001970:	f001 fd40 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_Init+0x68>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	4913      	ldr	r1, [pc, #76]	; (80019d0 <HAL_Init+0x6c>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
 800198c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_Init+0x68>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_Init+0x6c>)
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <HAL_Init+0x70>)
 80019a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019a8:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_Init+0x74>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ae:	200f      	movs	r0, #15
 80019b0:	f7ff fcc6 	bl	8001340 <HAL_InitTick>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e002      	b.n	80019c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019be:	f7ff fca1 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58024400 	.word	0x58024400
 80019d0:	08010aec 	.word	0x08010aec
 80019d4:	24000004 	.word	0x24000004
 80019d8:	24000000 	.word	0x24000000

080019dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x20>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x24>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_IncTick+0x24>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	2400000c 	.word	0x2400000c
 8001a00:	24004f00 	.word	0x24004f00

08001a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_GetTick+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	24004f00 	.word	0x24004f00

08001a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a24:	f7ff ffee 	bl	8001a04 <HAL_GetTick>
 8001a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a34:	d005      	beq.n	8001a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_Delay+0x44>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a42:	bf00      	nop
 8001a44:	f7ff ffde 	bl	8001a04 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d8f7      	bhi.n	8001a44 <HAL_Delay+0x28>
  {
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2400000c 	.word	0x2400000c

08001a64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_GetREVID+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0c1b      	lsrs	r3, r3, #16
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	5c001000 	.word	0x5c001000

08001a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <__NVIC_SetPriorityGrouping+0x40>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <__NVIC_SetPriorityGrouping+0x40>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00
 8001ac0:	05fa0000 	.word	0x05fa0000

08001ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <__NVIC_GetPriorityGrouping+0x18>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	f003 0307 	and.w	r3, r3, #7
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	db0b      	blt.n	8001b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	4907      	ldr	r1, [pc, #28]	; (8001b18 <__NVIC_EnableIRQ+0x38>)
 8001afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	2001      	movs	r0, #1
 8001b02:	fa00 f202 	lsl.w	r2, r0, r2
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	; (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ff4c 	bl	8001a7c <__NVIC_SetPriorityGrouping>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfa:	f7ff ff63 	bl	8001ac4 <__NVIC_GetPriorityGrouping>
 8001bfe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	6978      	ldr	r0, [r7, #20]
 8001c06:	f7ff ffb3 	bl	8001b70 <NVIC_EncodePriority>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff82 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff56 	bl	8001ae0 <__NVIC_EnableIRQ>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e014      	b.n	8001c78 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	791b      	ldrb	r3, [r3, #4]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fcf6 	bl	8000650 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c96:	d120      	bne.n	8001cda <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ca6:	d118      	bne.n	8001cda <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2204      	movs	r2, #4
 8001cac:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f82d 	bl	8001d34 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ce8:	d120      	bne.n	8001d2c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cf8:	d118      	bne.n	8001d2c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f043 0202 	orr.w	r2, r3, #2
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001d24:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f93e 	bl	8001fa8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	795b      	ldrb	r3, [r3, #5]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_DAC_ConfigChannel+0x18>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e11d      	b.n	8001f9c <HAL_DAC_ConfigChannel+0x254>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d174      	bne.n	8001e5e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001d74:	f7ff fe46 	bl	8001a04 <HAL_GetTick>
 8001d78:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d134      	bne.n	8001dea <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d80:	e011      	b.n	8001da6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d82:	f7ff fe3f 	bl	8001a04 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d90a      	bls.n	8001da6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f043 0208 	orr.w	r2, r3, #8
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2203      	movs	r2, #3
 8001da0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0fa      	b.n	8001f9c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dac:	4b7d      	ldr	r3, [pc, #500]	; (8001fa4 <HAL_DAC_ConfigChannel+0x25c>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e6      	bne.n	8001d82 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f7ff fe31 	bl	8001a1c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	6992      	ldr	r2, [r2, #24]
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8001dc4:	e01e      	b.n	8001e04 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001dc6:	f7ff fe1d 	bl	8001a04 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d90a      	bls.n	8001dea <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	f043 0208 	orr.w	r2, r3, #8
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2203      	movs	r2, #3
 8001de4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0d8      	b.n	8001f9c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	dbe8      	blt.n	8001dc6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f7ff fe11 	bl	8001a1c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	6992      	ldr	r2, [r2, #24]
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	ea02 0103 	and.w	r1, r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	69da      	ldr	r2, [r3, #28]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	21ff      	movs	r1, #255	; 0xff
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	ea02 0103 	and.w	r1, r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	6a1a      	ldr	r2, [r3, #32]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	409a      	lsls	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d11d      	bne.n	8001ea2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	221f      	movs	r2, #31
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e00f      	b.n	8001eec <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d102      	bne.n	8001eda <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	e008      	b.n	8001eec <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e001      	b.n	8001eec <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6819      	ldr	r1, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	400a      	ands	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6819      	ldr	r1, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	22c0      	movs	r2, #192	; 0xc0
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43da      	mvns	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20008000 	.word	0x20008000

08001fa8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fca:	4b89      	ldr	r3, [pc, #548]	; (80021f0 <HAL_GPIO_Init+0x234>)
 8001fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fce:	e194      	b.n	80022fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8186 	beq.w	80022f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d00b      	beq.n	8002008 <HAL_GPIO_Init+0x4c>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d007      	beq.n	8002008 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ffc:	2b11      	cmp	r3, #17
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b12      	cmp	r3, #18
 8002006:	d130      	bne.n	800206a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800203e:	2201      	movs	r2, #1
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0201 	and.w	r2, r3, #1
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0xee>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b12      	cmp	r3, #18
 80020a8:	d123      	bne.n	80020f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	08da      	lsrs	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3208      	adds	r2, #8
 80020b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	220f      	movs	r2, #15
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	69b9      	ldr	r1, [r7, #24]
 80020ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0203 	and.w	r2, r3, #3
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80e0 	beq.w	80022f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002134:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_GPIO_Init+0x238>)
 8002136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800213a:	4a2e      	ldr	r2, [pc, #184]	; (80021f4 <HAL_GPIO_Init+0x238>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_GPIO_Init+0x238>)
 8002146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002152:	4a29      	ldr	r2, [pc, #164]	; (80021f8 <HAL_GPIO_Init+0x23c>)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a20      	ldr	r2, [pc, #128]	; (80021fc <HAL_GPIO_Init+0x240>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d052      	beq.n	8002224 <HAL_GPIO_Init+0x268>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <HAL_GPIO_Init+0x244>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d031      	beq.n	80021ea <HAL_GPIO_Init+0x22e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_GPIO_Init+0x248>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02b      	beq.n	80021e6 <HAL_GPIO_Init+0x22a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_GPIO_Init+0x24c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d025      	beq.n	80021e2 <HAL_GPIO_Init+0x226>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a1c      	ldr	r2, [pc, #112]	; (800220c <HAL_GPIO_Init+0x250>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <HAL_GPIO_Init+0x222>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <HAL_GPIO_Init+0x254>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d019      	beq.n	80021da <HAL_GPIO_Init+0x21e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <HAL_GPIO_Init+0x258>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_GPIO_Init+0x21a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a19      	ldr	r2, [pc, #100]	; (8002218 <HAL_GPIO_Init+0x25c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00d      	beq.n	80021d2 <HAL_GPIO_Init+0x216>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a18      	ldr	r2, [pc, #96]	; (800221c <HAL_GPIO_Init+0x260>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x212>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_GPIO_Init+0x264>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_GPIO_Init+0x20e>
 80021c6:	2309      	movs	r3, #9
 80021c8:	e02d      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021ca:	230a      	movs	r3, #10
 80021cc:	e02b      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021ce:	2308      	movs	r3, #8
 80021d0:	e029      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021d2:	2307      	movs	r3, #7
 80021d4:	e027      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021d6:	2306      	movs	r3, #6
 80021d8:	e025      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021da:	2305      	movs	r3, #5
 80021dc:	e023      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021de:	2304      	movs	r3, #4
 80021e0:	e021      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e01f      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e01d      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e01b      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021ee:	bf00      	nop
 80021f0:	58000080 	.word	0x58000080
 80021f4:	58024400 	.word	0x58024400
 80021f8:	58000400 	.word	0x58000400
 80021fc:	58020000 	.word	0x58020000
 8002200:	58020400 	.word	0x58020400
 8002204:	58020800 	.word	0x58020800
 8002208:	58020c00 	.word	0x58020c00
 800220c:	58021000 	.word	0x58021000
 8002210:	58021400 	.word	0x58021400
 8002214:	58021800 	.word	0x58021800
 8002218:	58021c00 	.word	0x58021c00
 800221c:	58022000 	.word	0x58022000
 8002220:	58022400 	.word	0x58022400
 8002224:	2300      	movs	r3, #0
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	f002 0203 	and.w	r2, r2, #3
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	4093      	lsls	r3, r2
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002236:	4938      	ldr	r1, [pc, #224]	; (8002318 <HAL_GPIO_Init+0x35c>)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	3301      	adds	r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	f47f ae63 	bne.w	8001fd0 <HAL_GPIO_Init+0x14>
  }
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	3724      	adds	r7, #36	; 0x24
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	58000400 	.word	0x58000400

0800231c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e001      	b.n	800233e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002368:	e003      	b.n	8002372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	619a      	str	r2, [r3, #24]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002386:	f7ff fb3d 	bl	8001a04 <HAL_GetTick>
 800238a:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e03b      	b.n	800240e <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2202      	movs	r2, #2
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80023b6:	e00f      	b.n	80023d8 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80023b8:	f7ff fb24 	bl	8001a04 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d908      	bls.n	80023d8 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2203      	movs	r2, #3
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e01a      	b.n	800240e <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1e8      	bne.n	80023b8 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f96c 	bl	80026c4 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002424:	4b9a      	ldr	r3, [pc, #616]	; (8002690 <HAL_MDMA_IRQHandler+0x278>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a9a      	ldr	r2, [pc, #616]	; (8002694 <HAL_MDMA_IRQHandler+0x27c>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	0a9b      	lsrs	r3, r3, #10
 8002430:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	4b97      	ldr	r3, [pc, #604]	; (8002698 <HAL_MDMA_IRQHandler+0x280>)
 800243a:	4413      	add	r3, r2
 800243c:	099b      	lsrs	r3, r3, #6
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	2201      	movs	r2, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800244a:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 812e 	beq.w	80026b6 <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d054      	beq.n	8002512 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d04d      	beq.n	8002512 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0202 	bic.w	r2, r2, #2
 8002484:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	669a      	str	r2, [r3, #104]	; 0x68
 80024a4:	e005      	b.n	80024b2 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024aa:	f043 0202 	orr.w	r2, r3, #2
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024c0:	f043 0204 	orr.w	r2, r3, #4
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024d6:	f043 0208 	orr.w	r2, r3, #8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ec:	f043 0210 	orr.w	r2, r3, #16
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002502:	f043 0220 	orr.w	r2, r3, #32
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2201      	movs	r2, #1
 8002510:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	d012      	beq.n	8002546 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2210      	movs	r2, #16
 8002534:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d012      	beq.n	800257a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2208      	movs	r2, #8
 8002568:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d012      	beq.n	80025ae <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2204      	movs	r2, #4
 800259c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d039      	beq.n	8002630 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d032      	beq.n	8002630 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80025d8:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d110      	bne.n	8002608 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d05d      	beq.n	80026ba <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
        }
        return;
 8002606:	e058      	b.n	80026ba <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2202      	movs	r2, #2
 800260e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002634:	2b00      	cmp	r3, #0
 8002636:	d041      	beq.n	80026bc <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2204      	movs	r2, #4
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	3301      	adds	r3, #1
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	429a      	cmp	r2, r3
 800265a:	d307      	bcc.n	800266c <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f2      	bne.n	8002650 <HAL_MDMA_IRQHandler+0x238>
 800266a:	e000      	b.n	800266e <HAL_MDMA_IRQHandler+0x256>
        break;
 800266c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2203      	movs	r2, #3
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800268c:	e00a      	b.n	80026a4 <HAL_MDMA_IRQHandler+0x28c>
 800268e:	bf00      	nop
 8002690:	24000000 	.word	0x24000000
 8002694:	1b4e81b5 	.word	0x1b4e81b5
 8002698:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
 80026b4:	e002      	b.n	80026bc <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80026b6:	bf00      	nop
 80026b8:	e000      	b.n	80026bc <HAL_MDMA_IRQHandler+0x2a4>
        return;
 80026ba:	bf00      	nop
    }
  }
}
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop

080026c4 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80026ea:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80026f6:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8002702:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	3b01      	subs	r3, #1
 800270a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800270c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8002718:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800271a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002724:	d107      	bne.n	8002736 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002734:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2200      	movs	r2, #0
 800273c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002742:	2b00      	cmp	r3, #0
 8002744:	da11      	bge.n	800276a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002754:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275a:	425b      	negs	r3, r3
 800275c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	b292      	uxth	r2, r2
 8002766:	621a      	str	r2, [r3, #32]
 8002768:	e006      	b.n	8002778 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	461a      	mov	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b292      	uxth	r2, r2
 8002776:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	2b00      	cmp	r3, #0
 800277e:	da15      	bge.n	80027ac <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800278e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	425b      	negs	r3, r3
 8002796:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a19      	ldr	r1, [r3, #32]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	041a      	lsls	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	621a      	str	r2, [r3, #32]
 80027aa:	e009      	b.n	80027c0 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6a19      	ldr	r1, [r3, #32]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	041a      	lsls	r2, r3, #16
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c8:	d006      	beq.n	80027d8 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
 80027d6:	e003      	b.n	80027e0 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2200      	movs	r2, #0
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2200      	movs	r2, #0
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_PWREx_ConfigSupply+0x70>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b04      	cmp	r3, #4
 8002806:	d00a      	beq.n	800281e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002808:	4b16      	ldr	r3, [pc, #88]	; (8002864 <HAL_PWREx_ConfigSupply+0x70>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	d001      	beq.n	800281a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e01f      	b.n	800285a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e01d      	b.n	800285a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_PWREx_ConfigSupply+0x70>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f023 0207 	bic.w	r2, r3, #7
 8002826:	490f      	ldr	r1, [pc, #60]	; (8002864 <HAL_PWREx_ConfigSupply+0x70>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4313      	orrs	r3, r2
 800282c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800282e:	f7ff f8e9 	bl	8001a04 <HAL_GetTick>
 8002832:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002834:	e009      	b.n	800284a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002836:	f7ff f8e5 	bl	8001a04 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002844:	d901      	bls.n	800284a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e007      	b.n	800285a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_PWREx_ConfigSupply+0x70>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002856:	d1ee      	bne.n	8002836 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	58024800 	.word	0x58024800

08002868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08c      	sub	sp, #48	; 0x30
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e3ff      	b.n	800307a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8087 	beq.w	8002996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002888:	4b99      	ldr	r3, [pc, #612]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002892:	4b97      	ldr	r3, [pc, #604]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	2b10      	cmp	r3, #16
 800289c:	d007      	beq.n	80028ae <HAL_RCC_OscConfig+0x46>
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	2b18      	cmp	r3, #24
 80028a2:	d110      	bne.n	80028c6 <HAL_RCC_OscConfig+0x5e>
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d10b      	bne.n	80028c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ae:	4b90      	ldr	r3, [pc, #576]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d06c      	beq.n	8002994 <HAL_RCC_OscConfig+0x12c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d168      	bne.n	8002994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e3d9      	b.n	800307a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ce:	d106      	bne.n	80028de <HAL_RCC_OscConfig+0x76>
 80028d0:	4b87      	ldr	r3, [pc, #540]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a86      	ldr	r2, [pc, #536]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	e02e      	b.n	800293c <HAL_RCC_OscConfig+0xd4>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x98>
 80028e6:	4b82      	ldr	r3, [pc, #520]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a81      	ldr	r2, [pc, #516]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b7f      	ldr	r3, [pc, #508]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7e      	ldr	r2, [pc, #504]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80028f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e01d      	b.n	800293c <HAL_RCC_OscConfig+0xd4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0xbc>
 800290a:	4b79      	ldr	r3, [pc, #484]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a78      	ldr	r2, [pc, #480]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a75      	ldr	r2, [pc, #468]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0xd4>
 8002924:	4b72      	ldr	r3, [pc, #456]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a71      	ldr	r2, [pc, #452]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7ff f85e 	bl	8001a04 <HAL_GetTick>
 8002948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294c:	f7ff f85a 	bl	8001a04 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e38d      	b.n	800307a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800295e:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0xe4>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7ff f84a 	bl	8001a04 <HAL_GetTick>
 8002970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002974:	f7ff f846 	bl	8001a04 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e379      	b.n	800307a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002986:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x10c>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 80ae 	beq.w	8002b00 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a4:	4b52      	ldr	r3, [pc, #328]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029ae:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_RCC_OscConfig+0x162>
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	2b18      	cmp	r3, #24
 80029be:	d13a      	bne.n	8002a36 <HAL_RCC_OscConfig+0x1ce>
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d135      	bne.n	8002a36 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ca:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_RCC_OscConfig+0x17a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e34b      	b.n	800307a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	f7ff f83f 	bl	8001a64 <HAL_GetREVID>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d817      	bhi.n	8002a20 <HAL_RCC_OscConfig+0x1b8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d108      	bne.n	8002a0a <HAL_RCC_OscConfig+0x1a2>
 80029f8:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a00:	4a3b      	ldr	r2, [pc, #236]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a06:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a08:	e07a      	b.n	8002b00 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	031b      	lsls	r3, r3, #12
 8002a18:	4935      	ldr	r1, [pc, #212]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a1e:	e06f      	b.n	8002b00 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b33      	ldr	r3, [pc, #204]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	4930      	ldr	r1, [pc, #192]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a34:	e064      	b.n	8002b00 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d045      	beq.n	8002aca <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a3e:	4b2c      	ldr	r3, [pc, #176]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0219 	bic.w	r2, r3, #25
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	4929      	ldr	r1, [pc, #164]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe ffd8 	bl	8001a04 <HAL_GetTick>
 8002a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a58:	f7fe ffd4 	bl	8001a04 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e307      	b.n	800307a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	f7fe fff5 	bl	8001a64 <HAL_GetREVID>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d817      	bhi.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d108      	bne.n	8002a9e <HAL_RCC_OscConfig+0x236>
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a94:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9a:	6053      	str	r3, [r2, #4]
 8002a9c:	e030      	b.n	8002b00 <HAL_RCC_OscConfig+0x298>
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	031b      	lsls	r3, r3, #12
 8002aac:	4910      	ldr	r1, [pc, #64]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
 8002ab2:	e025      	b.n	8002b00 <HAL_RCC_OscConfig+0x298>
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	490b      	ldr	r1, [pc, #44]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
 8002ac8:	e01a      	b.n	8002b00 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_RCC_OscConfig+0x288>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe ff95 	bl	8001a04 <HAL_GetTick>
 8002ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ade:	f7fe ff91 	bl	8001a04 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d903      	bls.n	8002af4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e2c4      	b.n	800307a <HAL_RCC_OscConfig+0x812>
 8002af0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002af4:	4ba4      	ldr	r3, [pc, #656]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ee      	bne.n	8002ade <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80a9 	beq.w	8002c60 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0e:	4b9e      	ldr	r3, [pc, #632]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b18:	4b9b      	ldr	r3, [pc, #620]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d007      	beq.n	8002b34 <HAL_RCC_OscConfig+0x2cc>
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b18      	cmp	r3, #24
 8002b28:	d13a      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x338>
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d135      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b34:	4b94      	ldr	r3, [pc, #592]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_OscConfig+0x2e4>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e296      	b.n	800307a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b4c:	f7fe ff8a 	bl	8001a64 <HAL_GetREVID>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d817      	bhi.n	8002b8a <HAL_RCC_OscConfig+0x322>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d108      	bne.n	8002b74 <HAL_RCC_OscConfig+0x30c>
 8002b62:	4b89      	ldr	r3, [pc, #548]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b6a:	4a87      	ldr	r2, [pc, #540]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b70:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b72:	e075      	b.n	8002c60 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b74:	4b84      	ldr	r3, [pc, #528]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	069b      	lsls	r3, r3, #26
 8002b82:	4981      	ldr	r1, [pc, #516]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b88:	e06a      	b.n	8002c60 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b8a:	4b7f      	ldr	r3, [pc, #508]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	061b      	lsls	r3, r3, #24
 8002b98:	497b      	ldr	r1, [pc, #492]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b9e:	e05f      	b.n	8002c60 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d042      	beq.n	8002c2e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ba8:	4b77      	ldr	r3, [pc, #476]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a76      	ldr	r2, [pc, #472]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe ff26 	bl	8001a04 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bbc:	f7fe ff22 	bl	8001a04 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e255      	b.n	800307a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bce:	4b6e      	ldr	r3, [pc, #440]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bda:	f7fe ff43 	bl	8001a64 <HAL_GetREVID>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d817      	bhi.n	8002c18 <HAL_RCC_OscConfig+0x3b0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d108      	bne.n	8002c02 <HAL_RCC_OscConfig+0x39a>
 8002bf0:	4b65      	ldr	r3, [pc, #404]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002bf8:	4a63      	ldr	r2, [pc, #396]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002bfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bfe:	6053      	str	r3, [r2, #4]
 8002c00:	e02e      	b.n	8002c60 <HAL_RCC_OscConfig+0x3f8>
 8002c02:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	069b      	lsls	r3, r3, #26
 8002c10:	495d      	ldr	r1, [pc, #372]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
 8002c16:	e023      	b.n	8002c60 <HAL_RCC_OscConfig+0x3f8>
 8002c18:	4b5b      	ldr	r3, [pc, #364]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	061b      	lsls	r3, r3, #24
 8002c26:	4958      	ldr	r1, [pc, #352]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60cb      	str	r3, [r1, #12]
 8002c2c:	e018      	b.n	8002c60 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c2e:	4b56      	ldr	r3, [pc, #344]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a55      	ldr	r2, [pc, #340]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fee3 	bl	8001a04 <HAL_GetTick>
 8002c3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c42:	f7fe fedf 	bl	8001a04 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e212      	b.n	800307a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c54:	4b4c      	ldr	r3, [pc, #304]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d036      	beq.n	8002cda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d019      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c74:	4b44      	ldr	r3, [pc, #272]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c78:	4a43      	ldr	r2, [pc, #268]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c80:	f7fe fec0 	bl	8001a04 <HAL_GetTick>
 8002c84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c88:	f7fe febc 	bl	8001a04 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1ef      	b.n	800307a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x420>
 8002ca6:	e018      	b.n	8002cda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca8:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cac:	4a36      	ldr	r2, [pc, #216]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fea6 	bl	8001a04 <HAL_GetTick>
 8002cb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fea2 	bl	8001a04 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e1d5      	b.n	800307a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cce:	4b2e      	ldr	r3, [pc, #184]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d036      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d019      	beq.n	8002d22 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe fe83 	bl	8001a04 <HAL_GetTick>
 8002cfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d02:	f7fe fe7f 	bl	8001a04 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1b2      	b.n	800307a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d14:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x49a>
 8002d20:	e018      	b.n	8002d54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d22:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d2e:	f7fe fe69 	bl	8001a04 <HAL_GetTick>
 8002d32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d36:	f7fe fe65 	bl	8001a04 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e198      	b.n	800307a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d48:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <HAL_RCC_OscConfig+0x520>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8085 	beq.w	8002e6c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_RCC_OscConfig+0x524>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <HAL_RCC_OscConfig+0x524>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d6e:	f7fe fe49 	bl	8001a04 <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d74:	e00c      	b.n	8002d90 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d76:	f7fe fe45 	bl	8001a04 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b64      	cmp	r3, #100	; 0x64
 8002d82:	d905      	bls.n	8002d90 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e178      	b.n	800307a <HAL_RCC_OscConfig+0x812>
 8002d88:	58024400 	.word	0x58024400
 8002d8c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d90:	4b96      	ldr	r3, [pc, #600]	; (8002fec <HAL_RCC_OscConfig+0x784>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0ec      	beq.n	8002d76 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x54a>
 8002da4:	4b92      	ldr	r3, [pc, #584]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a91      	ldr	r2, [pc, #580]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
 8002db0:	e02d      	b.n	8002e0e <HAL_RCC_OscConfig+0x5a6>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x56c>
 8002dba:	4b8d      	ldr	r3, [pc, #564]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a8c      	ldr	r2, [pc, #560]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc6:	4b8a      	ldr	r3, [pc, #552]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a89      	ldr	r2, [pc, #548]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002dcc:	f023 0304 	bic.w	r3, r3, #4
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd2:	e01c      	b.n	8002e0e <HAL_RCC_OscConfig+0x5a6>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCC_OscConfig+0x58e>
 8002ddc:	4b84      	ldr	r3, [pc, #528]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4a83      	ldr	r2, [pc, #524]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	6713      	str	r3, [r2, #112]	; 0x70
 8002de8:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a80      	ldr	r2, [pc, #512]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	e00b      	b.n	8002e0e <HAL_RCC_OscConfig+0x5a6>
 8002df6:	4b7e      	ldr	r3, [pc, #504]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a7d      	ldr	r2, [pc, #500]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	4b7b      	ldr	r3, [pc, #492]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a7a      	ldr	r2, [pc, #488]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d015      	beq.n	8002e42 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7fe fdf5 	bl	8001a04 <HAL_GetTick>
 8002e1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe fdf1 	bl	8001a04 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e122      	b.n	800307a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e34:	4b6e      	ldr	r3, [pc, #440]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ee      	beq.n	8002e1e <HAL_RCC_OscConfig+0x5b6>
 8002e40:	e014      	b.n	8002e6c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e42:	f7fe fddf 	bl	8001a04 <HAL_GetTick>
 8002e46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fe fddb 	bl	8001a04 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e10c      	b.n	800307a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e60:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8101 	beq.w	8003078 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e76:	4b5e      	ldr	r3, [pc, #376]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e7e:	2b18      	cmp	r3, #24
 8002e80:	f000 80bc 	beq.w	8002ffc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	f040 8095 	bne.w	8002fb8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8e:	4b58      	ldr	r3, [pc, #352]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a57      	ldr	r2, [pc, #348]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7fe fdb3 	bl	8001a04 <HAL_GetTick>
 8002e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea2:	f7fe fdaf 	bl	8001a04 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e0e2      	b.n	800307a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eb4:	4b4e      	ldr	r3, [pc, #312]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f0      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec0:	4b4b      	ldr	r3, [pc, #300]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec4:	4b4b      	ldr	r3, [pc, #300]	; (8002ff4 <HAL_RCC_OscConfig+0x78c>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ed0:	0112      	lsls	r2, r2, #4
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	4946      	ldr	r1, [pc, #280]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	628b      	str	r3, [r1, #40]	; 0x28
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	025b      	lsls	r3, r3, #9
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	3b01      	subs	r3, #1
 8002f04:	061b      	lsls	r3, r3, #24
 8002f06:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f0a:	4939      	ldr	r1, [pc, #228]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f10:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	4a36      	ldr	r2, [pc, #216]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f1c:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f20:	4b35      	ldr	r3, [pc, #212]	; (8002ff8 <HAL_RCC_OscConfig+0x790>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f28:	00d2      	lsls	r2, r2, #3
 8002f2a:	4931      	ldr	r1, [pc, #196]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f30:	4b2f      	ldr	r3, [pc, #188]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	f023 020c 	bic.w	r2, r3, #12
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	492c      	ldr	r1, [pc, #176]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f42:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	f023 0202 	bic.w	r2, r3, #2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	4928      	ldr	r1, [pc, #160]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f54:	4b26      	ldr	r3, [pc, #152]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f60:	4b23      	ldr	r3, [pc, #140]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	4a22      	ldr	r2, [pc, #136]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f6c:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	4a1f      	ldr	r2, [pc, #124]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a19      	ldr	r2, [pc, #100]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fd38 	bl	8001a04 <HAL_GetTick>
 8002f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fe fd34 	bl	8001a04 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e067      	b.n	800307a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002faa:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x730>
 8002fb6:	e05f      	b.n	8003078 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fd1e 	bl	8001a04 <HAL_GetTick>
 8002fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe fd1a 	bl	8001a04 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e04d      	b.n	800307a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_RCC_OscConfig+0x788>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x764>
 8002fea:	e045      	b.n	8003078 <HAL_RCC_OscConfig+0x810>
 8002fec:	58024800 	.word	0x58024800
 8002ff0:	58024400 	.word	0x58024400
 8002ff4:	fffffc0c 	.word	0xfffffc0c
 8002ff8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ffc:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_RCC_OscConfig+0x81c>)
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_RCC_OscConfig+0x81c>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	2b01      	cmp	r3, #1
 800300e:	d031      	beq.n	8003074 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f003 0203 	and.w	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d12a      	bne.n	8003074 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d122      	bne.n	8003074 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d11a      	bne.n	8003074 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	0a5b      	lsrs	r3, r3, #9
 8003042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d111      	bne.n	8003074 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	0c1b      	lsrs	r3, r3, #16
 8003054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d108      	bne.n	8003074 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	0e1b      	lsrs	r3, r3, #24
 8003066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3730      	adds	r7, #48	; 0x30
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	58024400 	.word	0x58024400

08003088 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e19c      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b8a      	ldr	r3, [pc, #552]	; (80032c8 <HAL_RCC_ClockConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d910      	bls.n	80030cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b87      	ldr	r3, [pc, #540]	; (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 020f 	bic.w	r2, r3, #15
 80030b2:	4985      	ldr	r1, [pc, #532]	; (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b83      	ldr	r3, [pc, #524]	; (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e184      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d010      	beq.n	80030fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	4b7b      	ldr	r3, [pc, #492]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d908      	bls.n	80030fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030e8:	4b78      	ldr	r3, [pc, #480]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	4975      	ldr	r1, [pc, #468]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d010      	beq.n	8003128 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	4b70      	ldr	r3, [pc, #448]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003112:	429a      	cmp	r2, r3
 8003114:	d908      	bls.n	8003128 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003116:	4b6d      	ldr	r3, [pc, #436]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	496a      	ldr	r1, [pc, #424]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003124:	4313      	orrs	r3, r2
 8003126:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d010      	beq.n	8003156 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	4b64      	ldr	r3, [pc, #400]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003140:	429a      	cmp	r2, r3
 8003142:	d908      	bls.n	8003156 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003144:	4b61      	ldr	r3, [pc, #388]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	495e      	ldr	r1, [pc, #376]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003152:	4313      	orrs	r3, r2
 8003154:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	4b59      	ldr	r3, [pc, #356]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800316e:	429a      	cmp	r2, r3
 8003170:	d908      	bls.n	8003184 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003172:	4b56      	ldr	r3, [pc, #344]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4953      	ldr	r1, [pc, #332]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003180:	4313      	orrs	r3, r2
 8003182:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d010      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	4b4d      	ldr	r3, [pc, #308]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	429a      	cmp	r2, r3
 800319e:	d908      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a0:	4b4a      	ldr	r3, [pc, #296]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f023 020f 	bic.w	r2, r3, #15
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4947      	ldr	r1, [pc, #284]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d055      	beq.n	800326a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031be:	4b43      	ldr	r3, [pc, #268]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	4940      	ldr	r1, [pc, #256]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d107      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031d8:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d121      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0f6      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031f0:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d115      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0ea      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d107      	bne.n	8003218 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003208:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0de      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003218:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0d6      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003228:	4b28      	ldr	r3, [pc, #160]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f023 0207 	bic.w	r2, r3, #7
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4925      	ldr	r1, [pc, #148]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003236:	4313      	orrs	r3, r2
 8003238:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323a:	f7fe fbe3 	bl	8001a04 <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003240:	e00a      	b.n	8003258 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003242:	f7fe fbdf 	bl	8001a04 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0be      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003258:	4b1c      	ldr	r3, [pc, #112]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	429a      	cmp	r2, r3
 8003268:	d1eb      	bne.n	8003242 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d010      	beq.n	8003298 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	429a      	cmp	r2, r3
 8003284:	d208      	bcs.n	8003298 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f023 020f 	bic.w	r2, r3, #15
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	490e      	ldr	r1, [pc, #56]	; (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003294:	4313      	orrs	r3, r2
 8003296:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_ClockConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d214      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 020f 	bic.w	r2, r3, #15
 80032ae:	4906      	ldr	r1, [pc, #24]	; (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e086      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
 80032c8:	52002000 	.word	0x52002000
 80032cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d208      	bcs.n	80032fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032ec:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	4939      	ldr	r1, [pc, #228]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d010      	beq.n	800332c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	4b34      	ldr	r3, [pc, #208]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003316:	429a      	cmp	r2, r3
 8003318:	d208      	bcs.n	800332c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800331a:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	492e      	ldr	r1, [pc, #184]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003328:	4313      	orrs	r3, r2
 800332a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003344:	429a      	cmp	r2, r3
 8003346:	d208      	bcs.n	800335a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003348:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	4922      	ldr	r1, [pc, #136]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003356:	4313      	orrs	r3, r2
 8003358:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d010      	beq.n	8003388 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69da      	ldr	r2, [r3, #28]
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003372:	429a      	cmp	r2, r3
 8003374:	d208      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003376:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	4917      	ldr	r1, [pc, #92]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003384:	4313      	orrs	r3, r2
 8003386:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003388:	f000 f834 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	4912      	ldr	r1, [pc, #72]	; (80033e4 <HAL_RCC_ClockConfig+0x35c>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033a6:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_RCC_ClockConfig+0x358>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <HAL_RCC_ClockConfig+0x35c>)
 80033b0:	5cd3      	ldrb	r3, [r2, r3]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
 80033bc:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_RCC_ClockConfig+0x360>)
 80033be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033c0:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <HAL_RCC_ClockConfig+0x364>)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_RCC_ClockConfig+0x368>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd ffb8 	bl	8001340 <HAL_InitTick>
 80033d0:	4603      	mov	r3, r0
 80033d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	58024400 	.word	0x58024400
 80033e4:	08010aec 	.word	0x08010aec
 80033e8:	24000004 	.word	0x24000004
 80033ec:	24000000 	.word	0x24000000
 80033f0:	24000008 	.word	0x24000008

080033f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033fa:	4bb3      	ldr	r3, [pc, #716]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003402:	2b18      	cmp	r3, #24
 8003404:	f200 8155 	bhi.w	80036b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <HAL_RCC_GetSysClockFreq+0x1c>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003475 	.word	0x08003475
 8003414:	080036b3 	.word	0x080036b3
 8003418:	080036b3 	.word	0x080036b3
 800341c:	080036b3 	.word	0x080036b3
 8003420:	080036b3 	.word	0x080036b3
 8003424:	080036b3 	.word	0x080036b3
 8003428:	080036b3 	.word	0x080036b3
 800342c:	080036b3 	.word	0x080036b3
 8003430:	0800349b 	.word	0x0800349b
 8003434:	080036b3 	.word	0x080036b3
 8003438:	080036b3 	.word	0x080036b3
 800343c:	080036b3 	.word	0x080036b3
 8003440:	080036b3 	.word	0x080036b3
 8003444:	080036b3 	.word	0x080036b3
 8003448:	080036b3 	.word	0x080036b3
 800344c:	080036b3 	.word	0x080036b3
 8003450:	080034a1 	.word	0x080034a1
 8003454:	080036b3 	.word	0x080036b3
 8003458:	080036b3 	.word	0x080036b3
 800345c:	080036b3 	.word	0x080036b3
 8003460:	080036b3 	.word	0x080036b3
 8003464:	080036b3 	.word	0x080036b3
 8003468:	080036b3 	.word	0x080036b3
 800346c:	080036b3 	.word	0x080036b3
 8003470:	080034a7 	.word	0x080034a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003474:	4b94      	ldr	r3, [pc, #592]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003480:	4b91      	ldr	r3, [pc, #580]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	08db      	lsrs	r3, r3, #3
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	4a90      	ldr	r2, [pc, #576]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
 8003490:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003492:	e111      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003494:	4b8d      	ldr	r3, [pc, #564]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003496:	61bb      	str	r3, [r7, #24]
    break;
 8003498:	e10e      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800349a:	4b8d      	ldr	r3, [pc, #564]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800349c:	61bb      	str	r3, [r7, #24]
    break;
 800349e:	e10b      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80034a0:	4b8c      	ldr	r3, [pc, #560]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034a2:	61bb      	str	r3, [r7, #24]
    break;
 80034a4:	e108      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034a6:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034b0:	4b85      	ldr	r3, [pc, #532]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034bc:	4b82      	ldr	r3, [pc, #520]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034c6:	4b80      	ldr	r3, [pc, #512]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ca:	08db      	lsrs	r3, r3, #3
 80034cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80e1 	beq.w	80036ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	f000 8083 	beq.w	80035f8 <HAL_RCC_GetSysClockFreq+0x204>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	f200 80a1 	bhi.w	800363c <HAL_RCC_GetSysClockFreq+0x248>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x114>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d056      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003506:	e099      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003508:	4b6f      	ldr	r3, [pc, #444]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d02d      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003514:	4b6c      	ldr	r3, [pc, #432]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	08db      	lsrs	r3, r3, #3
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	4a6b      	ldr	r2, [pc, #428]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
 8003524:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353e:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003552:	eddf 5a61 	vldr	s11, [pc, #388]	; 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800355a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800356e:	e087      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80036dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800357e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003582:	4b51      	ldr	r3, [pc, #324]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003592:	ed97 6a02 	vldr	s12, [r7, #8]
 8003596:	eddf 5a50 	vldr	s11, [pc, #320]	; 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800359a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800359e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035b2:	e065      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80036e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c6:	4b40      	ldr	r3, [pc, #256]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ce:	ee07 3a90 	vmov	s15, r3
 80035d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035f6:	e043      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003602:	eddf 6a38 	vldr	s13, [pc, #224]	; 80036e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361a:	ed97 6a02 	vldr	s12, [r7, #8]
 800361e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800362e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800363a:	e021      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003646:	eddf 6a26 	vldr	s13, [pc, #152]	; 80036e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800364a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364e:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003662:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800366a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800367e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	0a5b      	lsrs	r3, r3, #9
 8003686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800368a:	3301      	adds	r3, #1
 800368c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	ee07 3a90 	vmov	s15, r3
 8003694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003698:	edd7 6a07 	vldr	s13, [r7, #28]
 800369c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a4:	ee17 3a90 	vmov	r3, s15
 80036a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80036aa:	e005      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61bb      	str	r3, [r7, #24]
    break;
 80036b0:	e002      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80036b2:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036b4:	61bb      	str	r3, [r7, #24]
    break;
 80036b6:	bf00      	nop
  }

  return sysclockfreq;
 80036b8:	69bb      	ldr	r3, [r7, #24]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3724      	adds	r7, #36	; 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	58024400 	.word	0x58024400
 80036cc:	03d09000 	.word	0x03d09000
 80036d0:	003d0900 	.word	0x003d0900
 80036d4:	007a1200 	.word	0x007a1200
 80036d8:	46000000 	.word	0x46000000
 80036dc:	4c742400 	.word	0x4c742400
 80036e0:	4a742400 	.word	0x4a742400
 80036e4:	4af42400 	.word	0x4af42400

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80036ee:	f7ff fe81 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80036f2:	4602      	mov	r2, r0
 80036f4:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_RCC_GetHCLKFreq+0x50>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	490f      	ldr	r1, [pc, #60]	; (800373c <HAL_RCC_GetHCLKFreq+0x54>)
 8003700:	5ccb      	ldrb	r3, [r1, r3]
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	fa22 f303 	lsr.w	r3, r2, r3
 800370a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_RCC_GetHCLKFreq+0x50>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	4a09      	ldr	r2, [pc, #36]	; (800373c <HAL_RCC_GetHCLKFreq+0x54>)
 8003716:	5cd3      	ldrb	r3, [r2, r3]
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	4a07      	ldr	r2, [pc, #28]	; (8003740 <HAL_RCC_GetHCLKFreq+0x58>)
 8003724:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003726:	4a07      	ldr	r2, [pc, #28]	; (8003744 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <HAL_RCC_GetHCLKFreq+0x58>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	58024400 	.word	0x58024400
 800373c:	08010aec 	.word	0x08010aec
 8003740:	24000004 	.word	0x24000004
 8003744:	24000000 	.word	0x24000000

08003748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800374c:	f7ff ffcc 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4904      	ldr	r1, [pc, #16]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x28>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	58024400 	.word	0x58024400
 8003770:	08010aec 	.word	0x08010aec

08003774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003778:	f7ff ffb6 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4904      	ldr	r1, [pc, #16]	; (800379c <HAL_RCC_GetPCLK2Freq+0x28>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	58024400 	.word	0x58024400
 800379c:	08010aec 	.word	0x08010aec

080037a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	223f      	movs	r2, #63	; 0x3f
 80037ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037b0:	4b1a      	ldr	r3, [pc, #104]	; (800381c <HAL_RCC_GetClockConfig+0x7c>)
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f003 0207 	and.w	r2, r3, #7
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80037bc:	4b17      	ldr	r3, [pc, #92]	; (800381c <HAL_RCC_GetClockConfig+0x7c>)
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80037c8:	4b14      	ldr	r3, [pc, #80]	; (800381c <HAL_RCC_GetClockConfig+0x7c>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f003 020f 	and.w	r2, r3, #15
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_RCC_GetClockConfig+0x7c>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <HAL_RCC_GetClockConfig+0x7c>)
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_RCC_GetClockConfig+0x7c>)
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <HAL_RCC_GetClockConfig+0x7c>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCC_GetClockConfig+0x80>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 020f 	and.w	r2, r3, #15
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	601a      	str	r2, [r3, #0]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	58024400 	.word	0x58024400
 8003820:	52002000 	.word	0x52002000

08003824 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800382c:	2300      	movs	r3, #0
 800382e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003830:	2300      	movs	r3, #0
 8003832:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d03f      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003844:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003848:	d02a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800384a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800384e:	d824      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003854:	d018      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800385a:	d81e      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003864:	d007      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003866:	e018      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003868:	4bab      	ldr	r3, [pc, #684]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	4aaa      	ldr	r2, [pc, #680]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800386e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003872:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003874:	e015      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	2102      	movs	r1, #2
 800387c:	4618      	mov	r0, r3
 800387e:	f001 fff3 	bl	8005868 <RCCEx_PLL2_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003886:	e00c      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3324      	adds	r3, #36	; 0x24
 800388c:	2102      	movs	r1, #2
 800388e:	4618      	mov	r0, r3
 8003890:	f002 f89c 	bl	80059cc <RCCEx_PLL3_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003898:	e003      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	75fb      	strb	r3, [r7, #23]
      break;
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038a8:	4b9b      	ldr	r3, [pc, #620]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b4:	4998      	ldr	r1, [pc, #608]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	650b      	str	r3, [r1, #80]	; 0x50
 80038ba:	e001      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d03d      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d826      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038d4:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	080038f1 	.word	0x080038f1
 80038e0:	080038ff 	.word	0x080038ff
 80038e4:	08003911 	.word	0x08003911
 80038e8:	08003929 	.word	0x08003929
 80038ec:	08003929 	.word	0x08003929
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f0:	4b89      	ldr	r3, [pc, #548]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	4a88      	ldr	r2, [pc, #544]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038fc:	e015      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f001 ffaf 	bl	8005868 <RCCEx_PLL2_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800390e:	e00c      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3324      	adds	r3, #36	; 0x24
 8003914:	2100      	movs	r1, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f002 f858 	bl	80059cc <RCCEx_PLL3_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	75fb      	strb	r3, [r7, #23]
      break;
 8003926:	e000      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003930:	4b79      	ldr	r3, [pc, #484]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003934:	f023 0207 	bic.w	r2, r3, #7
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	4976      	ldr	r1, [pc, #472]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	650b      	str	r3, [r1, #80]	; 0x50
 8003942:	e001      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	7dfb      	ldrb	r3, [r7, #23]
 8003946:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003950:	2b00      	cmp	r3, #0
 8003952:	d042      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395c:	d02b      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800395e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003962:	d825      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003964:	2bc0      	cmp	r3, #192	; 0xc0
 8003966:	d028      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003968:	2bc0      	cmp	r3, #192	; 0xc0
 800396a:	d821      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	d016      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d81d      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d007      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800397c:	e018      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800397e:	4b66      	ldr	r3, [pc, #408]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	4a65      	ldr	r2, [pc, #404]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003988:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800398a:	e017      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f001 ff68 	bl	8005868 <RCCEx_PLL2_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800399c:	e00e      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3324      	adds	r3, #36	; 0x24
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f002 f811 	bl	80059cc <RCCEx_PLL3_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039ae:	e005      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	75fb      	strb	r3, [r7, #23]
      break;
 80039b4:	e002      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80039ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039c2:	4b55      	ldr	r3, [pc, #340]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	4952      	ldr	r1, [pc, #328]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	650b      	str	r3, [r1, #80]	; 0x50
 80039d4:	e001      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
 80039d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d049      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039f0:	d030      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80039f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039f6:	d82a      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039fc:	d02c      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80039fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a02:	d824      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a08:	d018      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a0e:	d81e      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003a14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a18:	d007      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003a1a:	e018      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a1c:	4b3e      	ldr	r3, [pc, #248]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	4a3d      	ldr	r2, [pc, #244]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a28:	e017      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 ff19 	bl	8005868 <RCCEx_PLL2_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a3a:	e00e      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3324      	adds	r3, #36	; 0x24
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 ffc2 	bl	80059cc <RCCEx_PLL3_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a4c:	e005      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	75fb      	strb	r3, [r7, #23]
      break;
 8003a52:	e002      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a54:	bf00      	nop
 8003a56:	e000      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a60:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a6e:	492a      	ldr	r1, [pc, #168]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	658b      	str	r3, [r1, #88]	; 0x58
 8003a74:	e001      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d04c      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a90:	d030      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a96:	d82a      	bhi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a9c:	d02c      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003a9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003aa2:	d824      	bhi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003aa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aa8:	d018      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003aaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aae:	d81e      	bhi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ab8:	d007      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003aba:	e018      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003abc:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ac8:	e017      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3304      	adds	r3, #4
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 fec9 	bl	8005868 <RCCEx_PLL2_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ada:	e00e      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3324      	adds	r3, #36	; 0x24
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 ff72 	bl	80059cc <RCCEx_PLL3_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003aec:	e005      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
      break;
 8003af2:	e002      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003af4:	bf00      	nop
 8003af6:	e000      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10d      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b0e:	4902      	ldr	r1, [pc, #8]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	658b      	str	r3, [r1, #88]	; 0x58
 8003b14:	e004      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003b16:	bf00      	nop
 8003b18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d032      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b30:	2b30      	cmp	r3, #48	; 0x30
 8003b32:	d01c      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003b34:	2b30      	cmp	r3, #48	; 0x30
 8003b36:	d817      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d00c      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d813      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d016      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d10f      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b48:	4baf      	ldr	r3, [pc, #700]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	4aae      	ldr	r2, [pc, #696]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b54:	e00e      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 fe83 	bl	8005868 <RCCEx_PLL2_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b66:	e005      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b6c:	e002      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e000      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b7a:	4ba3      	ldr	r3, [pc, #652]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b86:	49a0      	ldr	r1, [pc, #640]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b8c:	e001      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d047      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba6:	d030      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bac:	d82a      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003bae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bb2:	d02c      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003bb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bb8:	d824      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbe:	d018      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc4:	d81e      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bce:	d007      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003bd0:	e018      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd2:	4b8d      	ldr	r3, [pc, #564]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	4a8c      	ldr	r2, [pc, #560]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bde:	e017      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 fe3e 	bl	8005868 <RCCEx_PLL2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bf0:	e00e      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3324      	adds	r3, #36	; 0x24
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 fee7 	bl	80059cc <RCCEx_PLL3_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c02:	e005      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	75fb      	strb	r3, [r7, #23]
      break;
 8003c08:	e002      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c16:	4b7c      	ldr	r3, [pc, #496]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c22:	4979      	ldr	r1, [pc, #484]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	650b      	str	r3, [r1, #80]	; 0x50
 8003c28:	e001      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d049      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c42:	d02e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c48:	d828      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c4e:	d02a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003c50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c54:	d822      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c5a:	d026      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c60:	d81c      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c66:	d010      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c6c:	d816      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01d      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c76:	d111      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 fdf2 	bl	8005868 <RCCEx_PLL2_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c88:	e012      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3324      	adds	r3, #36	; 0x24
 8003c8e:	2101      	movs	r1, #1
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 fe9b 	bl	80059cc <RCCEx_PLL3_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c9a:	e009      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca0:	e006      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e004      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e002      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003cae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cb6:	4b54      	ldr	r3, [pc, #336]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc2:	4951      	ldr	r1, [pc, #324]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	650b      	str	r3, [r1, #80]	; 0x50
 8003cc8:	e001      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
 8003ccc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d04b      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ce4:	d02e      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cea:	d828      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d02a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf6:	d822      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003cf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cfc:	d026      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003cfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d02:	d81c      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d08:	d010      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d0e:	d816      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01d      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d18:	d111      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 fda1 	bl	8005868 <RCCEx_PLL2_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d2a:	e012      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3324      	adds	r3, #36	; 0x24
 8003d30:	2101      	movs	r1, #1
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 fe4a 	bl	80059cc <RCCEx_PLL3_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d3c:	e009      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75fb      	strb	r3, [r7, #23]
      break;
 8003d42:	e006      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003d44:	bf00      	nop
 8003d46:	e004      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003d48:	bf00      	nop
 8003d4a:	e002      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003d4c:	bf00      	nop
 8003d4e:	e000      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d58:	4b2b      	ldr	r3, [pc, #172]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d66:	4928      	ldr	r1, [pc, #160]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	658b      	str	r3, [r1, #88]	; 0x58
 8003d6c:	e001      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d02f      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d86:	d00e      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d8c:	d814      	bhi.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d015      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d96:	d10f      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a1a      	ldr	r2, [pc, #104]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003da4:	e00c      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	2101      	movs	r1, #1
 8003dac:	4618      	mov	r0, r3
 8003dae:	f001 fd5b 	bl	8005868 <RCCEx_PLL2_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003db6:	e003      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	75fb      	strb	r3, [r7, #23]
      break;
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd2:	490d      	ldr	r1, [pc, #52]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	650b      	str	r3, [r1, #80]	; 0x50
 8003dd8:	e001      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d033      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d81c      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e33 	.word	0x08003e33
 8003dfc:	08003e0d 	.word	0x08003e0d
 8003e00:	08003e1b 	.word	0x08003e1b
 8003e04:	08003e33 	.word	0x08003e33
 8003e08:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e0c:	4bb8      	ldr	r3, [pc, #736]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	4ab7      	ldr	r2, [pc, #732]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e18:	e00c      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	2102      	movs	r1, #2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 fd21 	bl	8005868 <RCCEx_PLL2_Config>
 8003e26:	4603      	mov	r3, r0
 8003e28:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e2a:	e003      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e30:	e000      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e3a:	4bad      	ldr	r3, [pc, #692]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3e:	f023 0203 	bic.w	r2, r3, #3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	49aa      	ldr	r1, [pc, #680]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e4c:	e001      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
 8003e50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8086 	beq.w	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e60:	4ba4      	ldr	r3, [pc, #656]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4aa3      	ldr	r2, [pc, #652]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e6c:	f7fd fdca 	bl	8001a04 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e72:	e009      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e74:	f7fd fdc6 	bl	8001a04 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d902      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	75fb      	strb	r3, [r7, #23]
        break;
 8003e86:	e005      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e88:	4b9a      	ldr	r3, [pc, #616]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ef      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d166      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e9a:	4b95      	ldr	r3, [pc, #596]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ea4:	4053      	eors	r3, r2
 8003ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d013      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eae:	4b90      	ldr	r3, [pc, #576]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eb8:	4b8d      	ldr	r3, [pc, #564]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4a8c      	ldr	r2, [pc, #560]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec4:	4b8a      	ldr	r3, [pc, #552]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a89      	ldr	r2, [pc, #548]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ed0:	4a87      	ldr	r2, [pc, #540]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee0:	d115      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fd fd8f 	bl	8001a04 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ee8:	e00b      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fd fd8b 	bl	8001a04 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d902      	bls.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	75fb      	strb	r3, [r7, #23]
            break;
 8003f00:	e005      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f02:	4b7b      	ldr	r3, [pc, #492]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ed      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d126      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f22:	d10d      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003f24:	4b72      	ldr	r3, [pc, #456]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f32:	0919      	lsrs	r1, r3, #4
 8003f34:	4b70      	ldr	r3, [pc, #448]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003f36:	400b      	ands	r3, r1
 8003f38:	496d      	ldr	r1, [pc, #436]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	610b      	str	r3, [r1, #16]
 8003f3e:	e005      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003f40:	4b6b      	ldr	r3, [pc, #428]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	4a6a      	ldr	r2, [pc, #424]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f4a:	6113      	str	r3, [r2, #16]
 8003f4c:	4b68      	ldr	r3, [pc, #416]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5a:	4965      	ldr	r1, [pc, #404]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	670b      	str	r3, [r1, #112]	; 0x70
 8003f60:	e004      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	75bb      	strb	r3, [r7, #22]
 8003f66:	e001      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d07e      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7c:	2b28      	cmp	r3, #40	; 0x28
 8003f7e:	d867      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08004057 	.word	0x08004057
 8003f8c:	08004051 	.word	0x08004051
 8003f90:	08004051 	.word	0x08004051
 8003f94:	08004051 	.word	0x08004051
 8003f98:	08004051 	.word	0x08004051
 8003f9c:	08004051 	.word	0x08004051
 8003fa0:	08004051 	.word	0x08004051
 8003fa4:	08004051 	.word	0x08004051
 8003fa8:	0800402d 	.word	0x0800402d
 8003fac:	08004051 	.word	0x08004051
 8003fb0:	08004051 	.word	0x08004051
 8003fb4:	08004051 	.word	0x08004051
 8003fb8:	08004051 	.word	0x08004051
 8003fbc:	08004051 	.word	0x08004051
 8003fc0:	08004051 	.word	0x08004051
 8003fc4:	08004051 	.word	0x08004051
 8003fc8:	0800403f 	.word	0x0800403f
 8003fcc:	08004051 	.word	0x08004051
 8003fd0:	08004051 	.word	0x08004051
 8003fd4:	08004051 	.word	0x08004051
 8003fd8:	08004051 	.word	0x08004051
 8003fdc:	08004051 	.word	0x08004051
 8003fe0:	08004051 	.word	0x08004051
 8003fe4:	08004051 	.word	0x08004051
 8003fe8:	08004057 	.word	0x08004057
 8003fec:	08004051 	.word	0x08004051
 8003ff0:	08004051 	.word	0x08004051
 8003ff4:	08004051 	.word	0x08004051
 8003ff8:	08004051 	.word	0x08004051
 8003ffc:	08004051 	.word	0x08004051
 8004000:	08004051 	.word	0x08004051
 8004004:	08004051 	.word	0x08004051
 8004008:	08004057 	.word	0x08004057
 800400c:	08004051 	.word	0x08004051
 8004010:	08004051 	.word	0x08004051
 8004014:	08004051 	.word	0x08004051
 8004018:	08004051 	.word	0x08004051
 800401c:	08004051 	.word	0x08004051
 8004020:	08004051 	.word	0x08004051
 8004024:	08004051 	.word	0x08004051
 8004028:	08004057 	.word	0x08004057
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	2101      	movs	r1, #1
 8004032:	4618      	mov	r0, r3
 8004034:	f001 fc18 	bl	8005868 <RCCEx_PLL2_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800403c:	e00c      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3324      	adds	r3, #36	; 0x24
 8004042:	2101      	movs	r1, #1
 8004044:	4618      	mov	r0, r3
 8004046:	f001 fcc1 	bl	80059cc <RCCEx_PLL3_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800404e:	e003      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	75fb      	strb	r3, [r7, #23]
      break;
 8004054:	e000      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800405e:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406a:	4921      	ldr	r1, [pc, #132]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	654b      	str	r3, [r1, #84]	; 0x54
 8004070:	e001      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d03e      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004086:	2b05      	cmp	r3, #5
 8004088:	d820      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040d3 	.word	0x080040d3
 8004094:	080040a9 	.word	0x080040a9
 8004098:	080040bb 	.word	0x080040bb
 800409c:	080040d3 	.word	0x080040d3
 80040a0:	080040d3 	.word	0x080040d3
 80040a4:	080040d3 	.word	0x080040d3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	2101      	movs	r1, #1
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 fbda 	bl	8005868 <RCCEx_PLL2_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040b8:	e00c      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3324      	adds	r3, #36	; 0x24
 80040be:	2101      	movs	r1, #1
 80040c0:	4618      	mov	r0, r3
 80040c2:	f001 fc83 	bl	80059cc <RCCEx_PLL3_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040ca:	e003      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	75fb      	strb	r3, [r7, #23]
      break;
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80040d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d110      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040de:	f023 0207 	bic.w	r2, r3, #7
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e6:	4902      	ldr	r1, [pc, #8]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	654b      	str	r3, [r1, #84]	; 0x54
 80040ec:	e008      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80040ee:	bf00      	nop
 80040f0:	58024400 	.word	0x58024400
 80040f4:	58024800 	.word	0x58024800
 80040f8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d039      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004112:	2b05      	cmp	r3, #5
 8004114:	d820      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	0800415f 	.word	0x0800415f
 8004120:	08004135 	.word	0x08004135
 8004124:	08004147 	.word	0x08004147
 8004128:	0800415f 	.word	0x0800415f
 800412c:	0800415f 	.word	0x0800415f
 8004130:	0800415f 	.word	0x0800415f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	2101      	movs	r1, #1
 800413a:	4618      	mov	r0, r3
 800413c:	f001 fb94 	bl	8005868 <RCCEx_PLL2_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004144:	e00c      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3324      	adds	r3, #36	; 0x24
 800414a:	2101      	movs	r1, #1
 800414c:	4618      	mov	r0, r3
 800414e:	f001 fc3d 	bl	80059cc <RCCEx_PLL3_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004156:	e003      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	75fb      	strb	r3, [r7, #23]
      break;
 800415c:	e000      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800415e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004160:	7dfb      	ldrb	r3, [r7, #23]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10a      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004166:	4bb7      	ldr	r3, [pc, #732]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	f023 0207 	bic.w	r2, r3, #7
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004174:	49b3      	ldr	r1, [pc, #716]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004176:	4313      	orrs	r3, r2
 8004178:	658b      	str	r3, [r1, #88]	; 0x58
 800417a:	e001      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b00      	cmp	r3, #0
 800418a:	d04b      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004192:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004196:	d02e      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800419c:	d828      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800419e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a2:	d02a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80041a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a8:	d822      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80041aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041ae:	d026      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80041b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041b4:	d81c      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80041b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ba:	d010      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80041bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c0:	d816      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01d      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80041c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ca:	d111      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	2100      	movs	r1, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	f001 fb48 	bl	8005868 <RCCEx_PLL2_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041dc:	e012      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3324      	adds	r3, #36	; 0x24
 80041e2:	2102      	movs	r1, #2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fbf1 	bl	80059cc <RCCEx_PLL3_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041ee:	e009      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	75fb      	strb	r3, [r7, #23]
      break;
 80041f4:	e006      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80041f6:	bf00      	nop
 80041f8:	e004      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80041fa:	bf00      	nop
 80041fc:	e002      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800420a:	4b8e      	ldr	r3, [pc, #568]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004218:	498a      	ldr	r1, [pc, #552]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800421a:	4313      	orrs	r3, r2
 800421c:	654b      	str	r3, [r1, #84]	; 0x54
 800421e:	e001      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d04b      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004236:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800423a:	d02e      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800423c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004240:	d828      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004246:	d02a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424c:	d822      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800424e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004252:	d026      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004258:	d81c      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800425a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425e:	d010      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004264:	d816      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01d      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800426a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426e:	d111      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	2100      	movs	r1, #0
 8004276:	4618      	mov	r0, r3
 8004278:	f001 faf6 	bl	8005868 <RCCEx_PLL2_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004280:	e012      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3324      	adds	r3, #36	; 0x24
 8004286:	2102      	movs	r1, #2
 8004288:	4618      	mov	r0, r3
 800428a:	f001 fb9f 	bl	80059cc <RCCEx_PLL3_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004292:	e009      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	75fb      	strb	r3, [r7, #23]
      break;
 8004298:	e006      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800429a:	bf00      	nop
 800429c:	e004      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80042a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042ae:	4b65      	ldr	r3, [pc, #404]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042bc:	4961      	ldr	r1, [pc, #388]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	658b      	str	r3, [r1, #88]	; 0x58
 80042c2:	e001      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d04b      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042de:	d02e      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80042e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042e4:	d828      	bhi.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ea:	d02a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80042ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f0:	d822      	bhi.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80042f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042f6:	d026      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80042f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042fc:	d81c      	bhi.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80042fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004302:	d010      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004308:	d816      	bhi.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01d      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800430e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004312:	d111      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3304      	adds	r3, #4
 8004318:	2100      	movs	r1, #0
 800431a:	4618      	mov	r0, r3
 800431c:	f001 faa4 	bl	8005868 <RCCEx_PLL2_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004324:	e012      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3324      	adds	r3, #36	; 0x24
 800432a:	2102      	movs	r1, #2
 800432c:	4618      	mov	r0, r3
 800432e:	f001 fb4d 	bl	80059cc <RCCEx_PLL3_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004336:	e009      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	75fb      	strb	r3, [r7, #23]
      break;
 800433c:	e006      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800433e:	bf00      	nop
 8004340:	e004      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004342:	bf00      	nop
 8004344:	e002      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004346:	bf00      	nop
 8004348:	e000      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800434a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800434c:	7dfb      	ldrb	r3, [r7, #23]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004352:	4b3c      	ldr	r3, [pc, #240]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004360:	4938      	ldr	r1, [pc, #224]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004362:	4313      	orrs	r3, r2
 8004364:	658b      	str	r3, [r1, #88]	; 0x58
 8004366:	e001      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800437e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004382:	d10a      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3324      	adds	r3, #36	; 0x24
 8004388:	2102      	movs	r1, #2
 800438a:	4618      	mov	r0, r3
 800438c:	f001 fb1e 	bl	80059cc <RCCEx_PLL3_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800439a:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a8:	4926      	ldr	r1, [pc, #152]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c4:	d10a      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3324      	adds	r3, #36	; 0x24
 80043ca:	2102      	movs	r1, #2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 fafd 	bl	80059cc <RCCEx_PLL3_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043dc:	4b19      	ldr	r3, [pc, #100]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ea:	4916      	ldr	r1, [pc, #88]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d036      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004406:	d01f      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800440c:	d817      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004416:	d009      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004418:	e011      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3304      	adds	r3, #4
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f001 fa21 	bl	8005868 <RCCEx_PLL2_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800442a:	e00e      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3324      	adds	r3, #36	; 0x24
 8004430:	2102      	movs	r1, #2
 8004432:	4618      	mov	r0, r3
 8004434:	f001 faca 	bl	80059cc <RCCEx_PLL3_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800443c:	e005      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	75fb      	strb	r3, [r7, #23]
      break;
 8004442:	e002      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004444:	58024400 	.word	0x58024400
      break;
 8004448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004450:	4b93      	ldr	r3, [pc, #588]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800445e:	4990      	ldr	r1, [pc, #576]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004460:	4313      	orrs	r3, r2
 8004462:	658b      	str	r3, [r1, #88]	; 0x58
 8004464:	e001      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004466:	7dfb      	ldrb	r3, [r7, #23]
 8004468:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d033      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004480:	d01c      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004482:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004486:	d816      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800448c:	d003      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800448e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004492:	d007      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004494:	e00f      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004496:	4b82      	ldr	r3, [pc, #520]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	4a81      	ldr	r2, [pc, #516]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800449c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80044a2:	e00c      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3324      	adds	r3, #36	; 0x24
 80044a8:	2101      	movs	r1, #1
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 fa8e 	bl	80059cc <RCCEx_PLL3_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80044b4:	e003      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ba:	e000      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80044bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044c4:	4b76      	ldr	r3, [pc, #472]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d2:	4973      	ldr	r1, [pc, #460]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	654b      	str	r3, [r1, #84]	; 0x54
 80044d8:	e001      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044da:	7dfb      	ldrb	r3, [r7, #23]
 80044dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d029      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80044f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f6:	d007      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80044f8:	e00f      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fa:	4b69      	ldr	r3, [pc, #420]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	4a68      	ldr	r2, [pc, #416]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004506:	e00b      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3304      	adds	r3, #4
 800450c:	2102      	movs	r1, #2
 800450e:	4618      	mov	r0, r3
 8004510:	f001 f9aa 	bl	8005868 <RCCEx_PLL2_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004518:	e002      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	75fb      	strb	r3, [r7, #23]
      break;
 800451e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004526:	4b5e      	ldr	r3, [pc, #376]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004532:	495b      	ldr	r1, [pc, #364]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004538:	e001      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3324      	adds	r3, #36	; 0x24
 800454e:	2102      	movs	r1, #2
 8004550:	4618      	mov	r0, r3
 8004552:	f001 fa3b 	bl	80059cc <RCCEx_PLL3_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d030      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004574:	d017      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800457a:	d811      	bhi.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800457c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004580:	d013      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004586:	d80b      	bhi.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d010      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800458c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004590:	d106      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004592:	4b43      	ldr	r3, [pc, #268]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	4a42      	ldr	r2, [pc, #264]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800459e:	e007      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	75fb      	strb	r3, [r7, #23]
      break;
 80045a4:	e004      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80045a6:	bf00      	nop
 80045a8:	e002      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80045aa:	bf00      	nop
 80045ac:	e000      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80045ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d109      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045b6:	4b3a      	ldr	r3, [pc, #232]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c2:	4937      	ldr	r1, [pc, #220]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	654b      	str	r3, [r1, #84]	; 0x54
 80045c8:	e001      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045da:	4b31      	ldr	r3, [pc, #196]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	492e      	ldr	r1, [pc, #184]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045f8:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004606:	4926      	ldr	r1, [pc, #152]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004608:	4313      	orrs	r3, r2
 800460a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004618:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800461a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004624:	491e      	ldr	r1, [pc, #120]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004626:	4313      	orrs	r3, r2
 8004628:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00d      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004636:	4b1a      	ldr	r3, [pc, #104]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800463c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004640:	6113      	str	r3, [r2, #16]
 8004642:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800464c:	4914      	ldr	r1, [pc, #80]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800464e:	4313      	orrs	r3, r2
 8004650:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	da08      	bge.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800465c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004666:	490e      	ldr	r1, [pc, #56]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	4906      	ldr	r1, [pc, #24]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004688:	4313      	orrs	r3, r2
 800468a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800468c:	7dbb      	ldrb	r3, [r7, #22]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e000      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	58024400 	.word	0x58024400

080046a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b090      	sub	sp, #64	; 0x40
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b2:	f040 8095 	bne.w	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80046b6:	4bae      	ldr	r3, [pc, #696]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80046b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	633b      	str	r3, [r7, #48]	; 0x30
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	f200 8088 	bhi.w	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	080046e5 	.word	0x080046e5
 80046d4:	0800470d 	.word	0x0800470d
 80046d8:	08004735 	.word	0x08004735
 80046dc:	080047d1 	.word	0x080047d1
 80046e0:	0800475d 	.word	0x0800475d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80046e4:	4ba2      	ldr	r3, [pc, #648]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f0:	d108      	bne.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 ff64 	bl	80055c4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004700:	f000 bc95 	b.w	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004708:	f000 bc91 	b.w	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800470c:	4b98      	ldr	r3, [pc, #608]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004718:	d108      	bne.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800471a:	f107 0318 	add.w	r3, r7, #24
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fca8 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004728:	f000 bc81 	b.w	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004730:	f000 bc7d 	b.w	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004734:	4b8e      	ldr	r3, [pc, #568]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800473c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004740:	d108      	bne.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004742:	f107 030c 	add.w	r3, r7, #12
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fde8 	bl	800531c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004750:	f000 bc6d 	b.w	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004758:	f000 bc69 	b.w	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800475c:	4b84      	ldr	r3, [pc, #528]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800475e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004764:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004766:	4b82      	ldr	r3, [pc, #520]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b04      	cmp	r3, #4
 8004770:	d10c      	bne.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004774:	2b00      	cmp	r3, #0
 8004776:	d109      	bne.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004778:	4b7d      	ldr	r3, [pc, #500]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	08db      	lsrs	r3, r3, #3
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	4a7c      	ldr	r2, [pc, #496]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
 8004788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800478a:	e01f      	b.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800478c:	4b78      	ldr	r3, [pc, #480]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004798:	d106      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800479a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047a0:	d102      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80047a2:	4b75      	ldr	r3, [pc, #468]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80047a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047a6:	e011      	b.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80047a8:	4b71      	ldr	r3, [pc, #452]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047b4:	d106      	bne.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047bc:	d102      	bne.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80047be:	4b6f      	ldr	r3, [pc, #444]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80047c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c2:	e003      	b.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80047c8:	f000 bc31 	b.w	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80047cc:	f000 bc2f 	b.w	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80047d0:	4b6b      	ldr	r3, [pc, #428]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80047d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047d4:	f000 bc2b 	b.w	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047dc:	f000 bc27 	b.w	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e6:	f040 8095 	bne.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80047ea:	4b61      	ldr	r3, [pc, #388]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fa:	d04d      	beq.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004802:	f200 8084 	bhi.w	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	2bc0      	cmp	r3, #192	; 0xc0
 800480a:	d07d      	beq.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	2bc0      	cmp	r3, #192	; 0xc0
 8004810:	d87d      	bhi.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	2b80      	cmp	r3, #128	; 0x80
 8004816:	d02d      	beq.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	2b80      	cmp	r3, #128	; 0x80
 800481c:	d877      	bhi.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	2b40      	cmp	r3, #64	; 0x40
 8004828:	d012      	beq.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800482a:	e070      	b.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800482c:	4b50      	ldr	r3, [pc, #320]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004834:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004838:	d107      	bne.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800483a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fec0 	bl	80055c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004848:	e3f1      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800484e:	e3ee      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004850:	4b47      	ldr	r3, [pc, #284]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800485c:	d107      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800485e:	f107 0318 	add.w	r3, r7, #24
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fc06 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800486c:	e3df      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004872:	e3dc      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004874:	4b3e      	ldr	r3, [pc, #248]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800487c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004880:	d107      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004882:	f107 030c 	add.w	r3, r7, #12
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fd48 	bl	800531c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004890:	e3cd      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004896:	e3ca      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004898:	4b35      	ldr	r3, [pc, #212]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800489a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048a0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80048a2:	4b33      	ldr	r3, [pc, #204]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80048ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048b4:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	08db      	lsrs	r3, r3, #3
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	4a2d      	ldr	r2, [pc, #180]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
 80048c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c6:	e01e      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80048c8:	4b29      	ldr	r3, [pc, #164]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d4:	d106      	bne.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80048d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048dc:	d102      	bne.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80048e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e2:	e010      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048e4:	4b22      	ldr	r3, [pc, #136]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048f0:	d106      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80048f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048f8:	d102      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80048fa:	4b20      	ldr	r3, [pc, #128]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80048fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fe:	e002      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004904:	e393      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004906:	e392      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004908:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800490a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800490c:	e38f      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004912:	e38c      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	f040 80a7 	bne.w	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800491e:	4b14      	ldr	r3, [pc, #80]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004926:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800492e:	d05f      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004936:	f200 8096 	bhi.w	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004940:	f000 808e 	beq.w	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800494a:	f200 808c 	bhi.w	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004954:	d03a      	beq.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800495c:	f200 8083 	bhi.w	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00e      	beq.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800496c:	d01c      	beq.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800496e:	e07a      	b.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004970:	58024400 	.word	0x58024400
 8004974:	03d09000 	.word	0x03d09000
 8004978:	003d0900 	.word	0x003d0900
 800497c:	007a1200 	.word	0x007a1200
 8004980:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004984:	4baa      	ldr	r3, [pc, #680]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004990:	d107      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fe14 	bl	80055c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049a0:	e345      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049a6:	e342      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049a8:	4ba1      	ldr	r3, [pc, #644]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b4:	d107      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049b6:	f107 0318 	add.w	r3, r7, #24
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fb5a 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049c4:	e333      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049ca:	e330      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049cc:	4b98      	ldr	r3, [pc, #608]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d8:	d107      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049da:	f107 030c 	add.w	r3, r7, #12
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fc9c 	bl	800531c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049e8:	e321      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049ee:	e31e      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80049f0:	4b8f      	ldr	r3, [pc, #572]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80049f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049fa:	4b8d      	ldr	r3, [pc, #564]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d109      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a0c:	4b88      	ldr	r3, [pc, #544]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	08db      	lsrs	r3, r3, #3
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	4a87      	ldr	r2, [pc, #540]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1e:	e01e      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a20:	4b83      	ldr	r3, [pc, #524]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a34:	d102      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004a36:	4b80      	ldr	r3, [pc, #512]	; (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3a:	e010      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a3c:	4b7c      	ldr	r3, [pc, #496]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8004a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a50:	d102      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004a52:	4b7a      	ldr	r3, [pc, #488]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a56:	e002      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004a5c:	e2e7      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004a5e:	e2e6      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a60:	4b77      	ldr	r3, [pc, #476]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a64:	e2e3      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a6a:	e2e0      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a72:	f040 809c 	bne.w	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004a76:	4b6e      	ldr	r3, [pc, #440]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004a7e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a86:	d054      	beq.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a8e:	f200 808b 	bhi.w	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a98:	f000 8083 	beq.w	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aa2:	f200 8081 	bhi.w	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aac:	d02f      	beq.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ab4:	d878      	bhi.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac2:	d012      	beq.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8004ac4:	e070      	b.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ac6:	4b5a      	ldr	r3, [pc, #360]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fd73 	bl	80055c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ae2:	e2a4      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ae8:	e2a1      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004aea:	4b51      	ldr	r3, [pc, #324]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af6:	d107      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004af8:	f107 0318 	add.w	r3, r7, #24
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 fab9 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004b06:	e292      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b0c:	e28f      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b0e:	4b48      	ldr	r3, [pc, #288]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b1a:	d107      	bne.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b1c:	f107 030c 	add.w	r3, r7, #12
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fbfb 	bl	800531c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b2a:	e280      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b30:	e27d      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b32:	4b3f      	ldr	r3, [pc, #252]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b3a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b3c:	4b3c      	ldr	r3, [pc, #240]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d10c      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d109      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b4e:	4b38      	ldr	r3, [pc, #224]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	08db      	lsrs	r3, r3, #3
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	4a36      	ldr	r2, [pc, #216]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b60:	e01e      	b.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b62:	4b33      	ldr	r3, [pc, #204]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b6e:	d106      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8004b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b76:	d102      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b78:	4b2f      	ldr	r3, [pc, #188]	; (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b7c:	e010      	b.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b7e:	4b2c      	ldr	r3, [pc, #176]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b92:	d102      	bne.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b94:	4b29      	ldr	r3, [pc, #164]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b98:	e002      	b.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b9e:	e246      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004ba0:	e245      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ba2:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ba6:	e242      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bac:	e23f      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb4:	f040 80a8 	bne.w	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004bc0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc8:	d060      	beq.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bd0:	f200 8097 	bhi.w	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bda:	f000 808f 	beq.w	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004be4:	f200 808d 	bhi.w	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bee:	d03b      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf6:	f200 8084 	bhi.w	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c06:	d01d      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8004c08:	e07b      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c16:	d107      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fcd1 	bl	80055c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c26:	e202      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c2c:	e1ff      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004c2e:	bf00      	nop
 8004c30:	58024400 	.word	0x58024400
 8004c34:	03d09000 	.word	0x03d09000
 8004c38:	003d0900 	.word	0x003d0900
 8004c3c:	007a1200 	.word	0x007a1200
 8004c40:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c44:	4ba3      	ldr	r3, [pc, #652]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c50:	d107      	bne.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c52:	f107 0318 	add.w	r3, r7, #24
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fa0c 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c60:	e1e5      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c66:	e1e2      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c68:	4b9a      	ldr	r3, [pc, #616]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c74:	d107      	bne.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c76:	f107 030c 	add.w	r3, r7, #12
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fb4e 	bl	800531c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c84:	e1d3      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c8a:	e1d0      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c8c:	4b91      	ldr	r3, [pc, #580]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c96:	4b8f      	ldr	r3, [pc, #572]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d109      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ca8:	4b8a      	ldr	r3, [pc, #552]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	08db      	lsrs	r3, r3, #3
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	4a89      	ldr	r2, [pc, #548]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cba:	e01e      	b.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cbc:	4b85      	ldr	r3, [pc, #532]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc8:	d106      	bne.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8004cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cd0:	d102      	bne.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004cd2:	4b82      	ldr	r3, [pc, #520]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd6:	e010      	b.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cd8:	4b7e      	ldr	r3, [pc, #504]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce4:	d106      	bne.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cec:	d102      	bne.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004cee:	4b7c      	ldr	r3, [pc, #496]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf2:	e002      	b.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004cf8:	e199      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004cfa:	e198      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cfc:	4b79      	ldr	r3, [pc, #484]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d00:	e195      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d06:	e192      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d0e:	d173      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004d10:	4b70      	ldr	r3, [pc, #448]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d20:	d02f      	beq.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d28:	d863      	bhi.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d36:	d012      	beq.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8004d38:	e05b      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d3a:	4b66      	ldr	r3, [pc, #408]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d46:	d107      	bne.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d48:	f107 0318 	add.w	r3, r7, #24
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 f991 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d56:	e16a      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d5c:	e167      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d5e:	4b5d      	ldr	r3, [pc, #372]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d6c:	f107 030c 	add.w	r3, r7, #12
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fad3 	bl	800531c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d7a:	e158      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d80:	e155      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d82:	4b54      	ldr	r3, [pc, #336]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d8c:	4b51      	ldr	r3, [pc, #324]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d10c      	bne.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8004d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d9e:	4b4d      	ldr	r3, [pc, #308]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	08db      	lsrs	r3, r3, #3
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	4a4b      	ldr	r2, [pc, #300]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004daa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db0:	e01e      	b.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004db2:	4b48      	ldr	r3, [pc, #288]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dbe:	d106      	bne.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dc6:	d102      	bne.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004dc8:	4b44      	ldr	r3, [pc, #272]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dcc:	e010      	b.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004dce:	4b41      	ldr	r3, [pc, #260]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dda:	d106      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8004ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de2:	d102      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004de4:	4b3e      	ldr	r3, [pc, #248]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de8:	e002      	b.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004dee:	e11e      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004df0:	e11d      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004df6:	e11a      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfe:	d133      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004e00:	4b34      	ldr	r3, [pc, #208]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8004e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e16:	d012      	beq.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8004e18:	e023      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e1a:	4b2e      	ldr	r3, [pc, #184]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e26:	d107      	bne.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fbc9 	bl	80055c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e36:	e0fa      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e3c:	e0f7      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e3e:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e4a:	d107      	bne.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e4c:	f107 0318 	add.w	r3, r7, #24
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f90f 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e5a:	e0e8      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e60:	e0e5      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e66:	e0e2      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e6e:	f040 808f 	bne.w	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004e72:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004e7a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e82:	d075      	beq.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8004e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e8a:	d87e      	bhi.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e92:	d060      	beq.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9a:	d876      	bhi.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ea2:	d045      	beq.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004eaa:	d86e      	bhi.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb2:	d02b      	beq.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eba:	d866      	bhi.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d004      	beq.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004eca:	e05e      	b.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004ecc:	f000 f8bc 	bl	8005048 <HAL_RCCEx_GetD3PCLK1Freq>
 8004ed0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004ed2:	e0ac      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004ed4:	58024400 	.word	0x58024400
 8004ed8:	03d09000 	.word	0x03d09000
 8004edc:	003d0900 	.word	0x003d0900
 8004ee0:	007a1200 	.word	0x007a1200
 8004ee4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ee8:	4b53      	ldr	r3, [pc, #332]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ef6:	f107 0318 	add.w	r3, r7, #24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f8ba 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f04:	e093      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0a:	e090      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f0c:	4b4a      	ldr	r3, [pc, #296]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f18:	d107      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f1a:	f107 030c 	add.w	r3, r7, #12
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f9fc 	bl	800531c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f28:	e081      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f2e:	e07e      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f30:	4b41      	ldr	r3, [pc, #260]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d109      	bne.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f3c:	4b3e      	ldr	r3, [pc, #248]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	08db      	lsrs	r3, r3, #3
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	4a3d      	ldr	r2, [pc, #244]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f4e:	e06e      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f54:	e06b      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004f56:	4b38      	ldr	r3, [pc, #224]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f62:	d102      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8004f64:	4b36      	ldr	r3, [pc, #216]	; (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f68:	e061      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f6e:	e05e      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f70:	4b31      	ldr	r3, [pc, #196]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f7c:	d102      	bne.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8004f7e:	4b31      	ldr	r3, [pc, #196]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f82:	e054      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f88:	e051      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f8e:	e04e      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f96:	d148      	bne.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004f98:	4b27      	ldr	r3, [pc, #156]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fa0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa8:	d02a      	beq.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb0:	d838      	bhi.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fbe:	d00d      	beq.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8004fc0:	e030      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fce:	d102      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8004fd0:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fd4:	e02b      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fda:	e028      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fdc:	4b16      	ldr	r3, [pc, #88]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fe8:	d107      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fae8 	bl	80055c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ff8:	e019      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ffe:	e016      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005000:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800500c:	d107      	bne.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800500e:	f107 0318 	add.w	r3, r7, #24
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f82e 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800501c:	e007      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005022:	e004      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005028:	e001      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800502a:	2300      	movs	r3, #0
 800502c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005030:	4618      	mov	r0, r3
 8005032:	3740      	adds	r7, #64	; 0x40
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	58024400 	.word	0x58024400
 800503c:	03d09000 	.word	0x03d09000
 8005040:	003d0900 	.word	0x003d0900
 8005044:	007a1200 	.word	0x007a1200

08005048 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800504c:	f7fe fb4c 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8005050:	4602      	mov	r2, r0
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	091b      	lsrs	r3, r3, #4
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	4904      	ldr	r1, [pc, #16]	; (8005070 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800505e:	5ccb      	ldrb	r3, [r1, r3]
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005068:	4618      	mov	r0, r3
 800506a:	bd80      	pop	{r7, pc}
 800506c:	58024400 	.word	0x58024400
 8005070:	08010aec 	.word	0x08010aec

08005074 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005074:	b480      	push	{r7}
 8005076:	b089      	sub	sp, #36	; 0x24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800507c:	4ba1      	ldr	r3, [pc, #644]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005086:	4b9f      	ldr	r3, [pc, #636]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	0b1b      	lsrs	r3, r3, #12
 800508c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005090:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005092:	4b9c      	ldr	r3, [pc, #624]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	091b      	lsrs	r3, r3, #4
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800509e:	4b99      	ldr	r3, [pc, #612]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	08db      	lsrs	r3, r3, #3
 80050a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8111 	beq.w	80052e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	f000 8083 	beq.w	80051d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	f200 80a1 	bhi.w	8005214 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d056      	beq.n	800518c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80050de:	e099      	b.n	8005214 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050e0:	4b88      	ldr	r3, [pc, #544]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d02d      	beq.n	8005148 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050ec:	4b85      	ldr	r3, [pc, #532]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	08db      	lsrs	r3, r3, #3
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	4a84      	ldr	r2, [pc, #528]	; (8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
 80050fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	ee07 3a90 	vmov	s15, r3
 8005104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005116:	4b7b      	ldr	r3, [pc, #492]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005126:	ed97 6a03 	vldr	s12, [r7, #12]
 800512a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800530c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800512e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005142:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005146:	e087      	b.n	8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005152:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005310 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515a:	4b6a      	ldr	r3, [pc, #424]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516a:	ed97 6a03 	vldr	s12, [r7, #12]
 800516e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800530c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800518a:	e065      	b.n	8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005314 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800519a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519e:	4b59      	ldr	r3, [pc, #356]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800530c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ce:	e043      	b.n	8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80051de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e2:	4b48      	ldr	r3, [pc, #288]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800530c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005212:	e021      	b.n	8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005314 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005226:	4b37      	ldr	r3, [pc, #220]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005236:	ed97 6a03 	vldr	s12, [r7, #12]
 800523a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800530c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800523e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005252:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005256:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005258:	4b2a      	ldr	r3, [pc, #168]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	0a5b      	lsrs	r3, r3, #9
 800525e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800526e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005272:	edd7 6a07 	vldr	s13, [r7, #28]
 8005276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800527a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800527e:	ee17 2a90 	vmov	r2, s15
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005286:	4b1f      	ldr	r3, [pc, #124]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	0c1b      	lsrs	r3, r3, #16
 800528c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005290:	ee07 3a90 	vmov	s15, r3
 8005294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800529c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80052a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ac:	ee17 2a90 	vmov	r2, s15
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80052b4:	4b13      	ldr	r3, [pc, #76]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	0e1b      	lsrs	r3, r3, #24
 80052ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80052d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052da:	ee17 2a90 	vmov	r2, s15
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80052e2:	e008      	b.n	80052f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	609a      	str	r2, [r3, #8]
}
 80052f6:	bf00      	nop
 80052f8:	3724      	adds	r7, #36	; 0x24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	58024400 	.word	0x58024400
 8005308:	03d09000 	.word	0x03d09000
 800530c:	46000000 	.word	0x46000000
 8005310:	4c742400 	.word	0x4c742400
 8005314:	4a742400 	.word	0x4a742400
 8005318:	4af42400 	.word	0x4af42400

0800531c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800531c:	b480      	push	{r7}
 800531e:	b089      	sub	sp, #36	; 0x24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005324:	4ba1      	ldr	r3, [pc, #644]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800532e:	4b9f      	ldr	r3, [pc, #636]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	0d1b      	lsrs	r3, r3, #20
 8005334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005338:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800533a:	4b9c      	ldr	r3, [pc, #624]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	0a1b      	lsrs	r3, r3, #8
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005346:	4b99      	ldr	r3, [pc, #612]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	08db      	lsrs	r3, r3, #3
 800534c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 8111 	beq.w	800558c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b02      	cmp	r3, #2
 800536e:	f000 8083 	beq.w	8005478 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b02      	cmp	r3, #2
 8005376:	f200 80a1 	bhi.w	80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d056      	beq.n	8005434 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005386:	e099      	b.n	80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005388:	4b88      	ldr	r3, [pc, #544]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d02d      	beq.n	80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005394:	4b85      	ldr	r3, [pc, #532]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	08db      	lsrs	r3, r3, #3
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	4a84      	ldr	r2, [pc, #528]	; (80055b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
 80053a4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053be:	4b7b      	ldr	r3, [pc, #492]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80053d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80055b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053ee:	e087      	b.n	8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80055b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005402:	4b6a      	ldr	r3, [pc, #424]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005412:	ed97 6a03 	vldr	s12, [r7, #12]
 8005416:	eddf 5a67 	vldr	s11, [pc, #412]	; 80055b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800541a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005432:	e065      	b.n	8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80055bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005446:	4b59      	ldr	r3, [pc, #356]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005456:	ed97 6a03 	vldr	s12, [r7, #12]
 800545a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80055b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800545e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800546a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005476:	e043      	b.n	8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548a:	4b48      	ldr	r3, [pc, #288]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549a:	ed97 6a03 	vldr	s12, [r7, #12]
 800549e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80055b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054ba:	e021      	b.n	8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80055bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ce:	4b37      	ldr	r3, [pc, #220]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054de:	ed97 6a03 	vldr	s12, [r7, #12]
 80054e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80055b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005500:	4b2a      	ldr	r3, [pc, #168]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	0a5b      	lsrs	r3, r3, #9
 8005506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800551a:	edd7 6a07 	vldr	s13, [r7, #28]
 800551e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005526:	ee17 2a90 	vmov	r2, s15
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800552e:	4b1f      	ldr	r3, [pc, #124]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	0c1b      	lsrs	r3, r3, #16
 8005534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005538:	ee07 3a90 	vmov	s15, r3
 800553c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005544:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005548:	edd7 6a07 	vldr	s13, [r7, #28]
 800554c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005554:	ee17 2a90 	vmov	r2, s15
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800555c:	4b13      	ldr	r3, [pc, #76]	; (80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	0e1b      	lsrs	r3, r3, #24
 8005562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005572:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005576:	edd7 6a07 	vldr	s13, [r7, #28]
 800557a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800557e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005582:	ee17 2a90 	vmov	r2, s15
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800558a:	e008      	b.n	800559e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	609a      	str	r2, [r3, #8]
}
 800559e:	bf00      	nop
 80055a0:	3724      	adds	r7, #36	; 0x24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	58024400 	.word	0x58024400
 80055b0:	03d09000 	.word	0x03d09000
 80055b4:	46000000 	.word	0x46000000
 80055b8:	4c742400 	.word	0x4c742400
 80055bc:	4a742400 	.word	0x4a742400
 80055c0:	4af42400 	.word	0x4af42400

080055c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b089      	sub	sp, #36	; 0x24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055cc:	4ba0      	ldr	r3, [pc, #640]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	f003 0303 	and.w	r3, r3, #3
 80055d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80055d6:	4b9e      	ldr	r3, [pc, #632]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	091b      	lsrs	r3, r3, #4
 80055dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80055e2:	4b9b      	ldr	r3, [pc, #620]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055ec:	4b98      	ldr	r3, [pc, #608]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f0:	08db      	lsrs	r3, r3, #3
 80055f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	fb02 f303 	mul.w	r3, r2, r3
 80055fc:	ee07 3a90 	vmov	s15, r3
 8005600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005604:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8111 	beq.w	8005832 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b02      	cmp	r3, #2
 8005614:	f000 8083 	beq.w	800571e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b02      	cmp	r3, #2
 800561c:	f200 80a1 	bhi.w	8005762 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d056      	beq.n	80056da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800562c:	e099      	b.n	8005762 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800562e:	4b88      	ldr	r3, [pc, #544]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d02d      	beq.n	8005696 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800563a:	4b85      	ldr	r3, [pc, #532]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	08db      	lsrs	r3, r3, #3
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	4a83      	ldr	r2, [pc, #524]	; (8005854 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005646:	fa22 f303 	lsr.w	r3, r2, r3
 800564a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005664:	4b7a      	ldr	r3, [pc, #488]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005674:	ed97 6a03 	vldr	s12, [r7, #12]
 8005678:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800567c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800568c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005690:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005694:	e087      	b.n	80057a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800585c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80056a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a8:	4b69      	ldr	r3, [pc, #420]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b0:	ee07 3a90 	vmov	s15, r3
 80056b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80056bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056d8:	e065      	b.n	80057a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005860 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80056e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ec:	4b58      	ldr	r3, [pc, #352]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f4:	ee07 3a90 	vmov	s15, r3
 80056f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005700:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800570c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005718:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800571c:	e043      	b.n	80057a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	ee07 3a90 	vmov	s15, r3
 8005724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005728:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005864 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800572c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005730:	4b47      	ldr	r3, [pc, #284]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005738:	ee07 3a90 	vmov	s15, r3
 800573c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005740:	ed97 6a03 	vldr	s12, [r7, #12]
 8005744:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005748:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005754:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005760:	e021      	b.n	80057a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800585c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005774:	4b36      	ldr	r3, [pc, #216]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577c:	ee07 3a90 	vmov	s15, r3
 8005780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005784:	ed97 6a03 	vldr	s12, [r7, #12]
 8005788:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800578c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800579c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80057a6:	4b2a      	ldr	r3, [pc, #168]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	0a5b      	lsrs	r3, r3, #9
 80057ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057cc:	ee17 2a90 	vmov	r2, s15
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80057d4:	4b1e      	ldr	r3, [pc, #120]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	0c1b      	lsrs	r3, r3, #16
 80057da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80057f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fa:	ee17 2a90 	vmov	r2, s15
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	0e1b      	lsrs	r3, r3, #24
 8005808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800580c:	ee07 3a90 	vmov	s15, r3
 8005810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800581c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005828:	ee17 2a90 	vmov	r2, s15
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005830:	e008      	b.n	8005844 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	609a      	str	r2, [r3, #8]
}
 8005844:	bf00      	nop
 8005846:	3724      	adds	r7, #36	; 0x24
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	58024400 	.word	0x58024400
 8005854:	03d09000 	.word	0x03d09000
 8005858:	46000000 	.word	0x46000000
 800585c:	4c742400 	.word	0x4c742400
 8005860:	4a742400 	.word	0x4a742400
 8005864:	4af42400 	.word	0x4af42400

08005868 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005876:	4b53      	ldr	r3, [pc, #332]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	2b03      	cmp	r3, #3
 8005880:	d101      	bne.n	8005886 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e099      	b.n	80059ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005886:	4b4f      	ldr	r3, [pc, #316]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a4e      	ldr	r2, [pc, #312]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800588c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005892:	f7fc f8b7 	bl	8001a04 <HAL_GetTick>
 8005896:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005898:	e008      	b.n	80058ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800589a:	f7fc f8b3 	bl	8001a04 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e086      	b.n	80059ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058ac:	4b45      	ldr	r3, [pc, #276]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f0      	bne.n	800589a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058b8:	4b42      	ldr	r3, [pc, #264]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	031b      	lsls	r3, r3, #12
 80058c6:	493f      	ldr	r1, [pc, #252]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	628b      	str	r3, [r1, #40]	; 0x28
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	3b01      	subs	r3, #1
 80058dc:	025b      	lsls	r3, r3, #9
 80058de:	b29b      	uxth	r3, r3
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	041b      	lsls	r3, r3, #16
 80058ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	061b      	lsls	r3, r3, #24
 80058f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058fc:	4931      	ldr	r1, [pc, #196]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005902:	4b30      	ldr	r3, [pc, #192]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	492d      	ldr	r1, [pc, #180]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005910:	4313      	orrs	r3, r2
 8005912:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005914:	4b2b      	ldr	r3, [pc, #172]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	f023 0220 	bic.w	r2, r3, #32
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	4928      	ldr	r1, [pc, #160]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005922:	4313      	orrs	r3, r2
 8005924:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005926:	4b27      	ldr	r3, [pc, #156]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	4a26      	ldr	r2, [pc, #152]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800592c:	f023 0310 	bic.w	r3, r3, #16
 8005930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005932:	4b24      	ldr	r3, [pc, #144]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005936:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <RCCEx_PLL2_Config+0x160>)
 8005938:	4013      	ands	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	69d2      	ldr	r2, [r2, #28]
 800593e:	00d2      	lsls	r2, r2, #3
 8005940:	4920      	ldr	r1, [pc, #128]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005942:	4313      	orrs	r3, r2
 8005944:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005946:	4b1f      	ldr	r3, [pc, #124]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	4a1e      	ldr	r2, [pc, #120]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800594c:	f043 0310 	orr.w	r3, r3, #16
 8005950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005958:	4b1a      	ldr	r3, [pc, #104]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800595e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005962:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005964:	e00f      	b.n	8005986 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d106      	bne.n	800597a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800596c:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	4a14      	ldr	r2, [pc, #80]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005976:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005978:	e005      	b.n	8005986 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800597a:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	4a11      	ldr	r2, [pc, #68]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005980:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005984:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005986:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a0e      	ldr	r2, [pc, #56]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800598c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005992:	f7fc f837 	bl	8001a04 <HAL_GetTick>
 8005996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005998:	e008      	b.n	80059ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800599a:	f7fc f833 	bl	8001a04 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e006      	b.n	80059ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	58024400 	.word	0x58024400
 80059c8:	ffff0007 	.word	0xffff0007

080059cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059da:	4b53      	ldr	r3, [pc, #332]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d101      	bne.n	80059ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e099      	b.n	8005b1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059ea:	4b4f      	ldr	r3, [pc, #316]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a4e      	ldr	r2, [pc, #312]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 80059f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f6:	f7fc f805 	bl	8001a04 <HAL_GetTick>
 80059fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059fc:	e008      	b.n	8005a10 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80059fe:	f7fc f801 	bl	8001a04 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e086      	b.n	8005b1e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a10:	4b45      	ldr	r3, [pc, #276]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f0      	bne.n	80059fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a1c:	4b42      	ldr	r3, [pc, #264]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	051b      	lsls	r3, r3, #20
 8005a2a:	493f      	ldr	r1, [pc, #252]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	628b      	str	r3, [r1, #40]	; 0x28
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	025b      	lsls	r3, r3, #9
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	041b      	lsls	r3, r3, #16
 8005a4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	061b      	lsls	r3, r3, #24
 8005a5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a60:	4931      	ldr	r1, [pc, #196]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a66:	4b30      	ldr	r3, [pc, #192]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	492d      	ldr	r1, [pc, #180]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a78:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	4928      	ldr	r1, [pc, #160]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a8a:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	4a26      	ldr	r2, [pc, #152]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a96:	4b24      	ldr	r3, [pc, #144]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a9a:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <RCCEx_PLL3_Config+0x160>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	69d2      	ldr	r2, [r2, #28]
 8005aa2:	00d2      	lsls	r2, r2, #3
 8005aa4:	4920      	ldr	r1, [pc, #128]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005aaa:	4b1f      	ldr	r3, [pc, #124]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	4a1e      	ldr	r2, [pc, #120]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d106      	bne.n	8005aca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005abc:	4b1a      	ldr	r3, [pc, #104]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	4a19      	ldr	r2, [pc, #100]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005ac2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ac6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ac8:	e00f      	b.n	8005aea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d106      	bne.n	8005ade <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ad0:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	4a14      	ldr	r2, [pc, #80]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005ad6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ada:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005adc:	e005      	b.n	8005aea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ade:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	4a11      	ldr	r2, [pc, #68]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005ae4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ae8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005aea:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a0e      	ldr	r2, [pc, #56]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af6:	f7fb ff85 	bl	8001a04 <HAL_GetTick>
 8005afa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005afc:	e008      	b.n	8005b10 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005afe:	f7fb ff81 	bl	8001a04 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e006      	b.n	8005b1e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f0      	beq.n	8005afe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	58024400 	.word	0x58024400
 8005b2c:	ffff0007 	.word	0xffff0007

08005b30 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e04d      	b.n	8005bde <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	7a5b      	ldrb	r3, [r3, #9]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d105      	bne.n	8005b58 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fb fa2c 	bl	8000fb0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f023 0120 	bic.w	r1, r3, #32
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0204 	orr.w	r2, r2, #4
 8005b82:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d104      	bne.n	8005b9c <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2204      	movs	r2, #4
 8005b96:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e020      	b.n	8005bde <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005b9c:	f7fb ff32 	bl	8001a04 <HAL_GetTick>
 8005ba0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005ba2:	e00e      	b.n	8005bc2 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005ba4:	f7fb ff2e 	bl	8001a04 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d907      	bls.n	8005bc2 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e00d      	b.n	8005bde <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d0e9      	beq.n	8005ba4 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b08a      	sub	sp, #40	; 0x28
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e075      	b.n	8005ce4 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d105      	bne.n	8005c10 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fb fa26 	bl	800105c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2203      	movs	r2, #3
 8005c14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f867 	bl	8005cec <HAL_SD_InitCard>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e05d      	b.n	8005ce4 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005c28:	f107 0308 	add.w	r3, r7, #8
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fda4 	bl	800677c <HAL_SD_GetCardStatus>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e052      	b.n	8005ce4 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005c3e:	7e3b      	ldrb	r3, [r7, #24]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005c44:	7e7b      	ldrb	r3, [r7, #25]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d10a      	bne.n	8005c68 <HAL_SD_Init+0x82>
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <HAL_SD_Init+0x78>
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c64:	659a      	str	r2, [r3, #88]	; 0x58
 8005c66:	e00b      	b.n	8005c80 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d104      	bne.n	8005c7a <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c76:	659a      	str	r2, [r3, #88]	; 0x58
 8005c78:	e002      	b.n	8005c80 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fe5a 	bl	8006940 <HAL_SD_ConfigWideBusOperation>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e026      	b.n	8005ce4 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005c96:	f7fb feb5 	bl	8001a04 <HAL_GetTick>
 8005c9a:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005c9c:	e011      	b.n	8005cc2 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005c9e:	f7fb feb1 	bl	8001a04 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d109      	bne.n	8005cc2 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cb4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e010      	b.n	8005ce4 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 ff4c 	bl	8006b60 <HAL_SD_GetCardState>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d1e7      	bne.n	8005c9e <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3728      	adds	r7, #40	; 0x28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b08d      	sub	sp, #52	; 0x34
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005d04:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005d08:	f7fe fccc 	bl	80046a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d0c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d22:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e06a      	b.n	8005dfe <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	4a36      	ldr	r2, [pc, #216]	; (8005e08 <HAL_SD_InitCard+0x11c>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	091b      	lsrs	r3, r3, #4
 8005d34:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681c      	ldr	r4, [r3, #0]
 8005d3a:	466a      	mov	r2, sp
 8005d3c:	f107 0318 	add.w	r3, r7, #24
 8005d40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d44:	e882 0003 	stmia.w	r2, {r0, r1}
 8005d48:	f107 030c 	add.w	r3, r7, #12
 8005d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f003 fc10 	bl	8009574 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f003 fc53 	bl	8009604 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005d6a:	4a28      	ldr	r2, [pc, #160]	; (8005e0c <HAL_SD_InitCard+0x120>)
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d72:	3301      	adds	r3, #1
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fb fe51 	bl	8001a1c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 ffcc 	bl	8006d18 <SD_PowerON>
 8005d80:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00b      	beq.n	8005da0 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e02e      	b.n	8005dfe <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fefd 	bl	8006ba0 <SD_InitCard>
 8005da6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e01b      	b.n	8005dfe <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f003 fcae 	bl	8009730 <SDMMC_CmdBlockLength>
 8005dd4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00f      	beq.n	8005dfc <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0b      	ldr	r2, [pc, #44]	; (8005e10 <HAL_SD_InitCard+0x124>)
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	372c      	adds	r7, #44	; 0x2c
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd90      	pop	{r4, r7, pc}
 8005e06:	bf00      	nop
 8005e08:	014f8b59 	.word	0x014f8b59
 8005e0c:	00012110 	.word	0x00012110
 8005e10:	1fe00fff 	.word	0x1fe00fff

08005e14 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08c      	sub	sp, #48	; 0x30
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d107      	bne.n	8005e3c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e08d      	b.n	8005f58 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	f040 8086 	bne.w	8005f56 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	441a      	add	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d907      	bls.n	8005e6e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e074      	b.n	8005f58 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2203      	movs	r2, #3
 8005e72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	025a      	lsls	r2, r3, #9
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d002      	beq.n	8005e9a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	025b      	lsls	r3, r3, #9
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	025b      	lsls	r3, r3, #9
 8005ea4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005ea6:	2390      	movs	r3, #144	; 0x90
 8005ea8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f107 0210 	add.w	r2, r7, #16
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f003 fc09 	bl	80096d8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ed4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d90a      	bls.n	8005f02 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2282      	movs	r2, #130	; 0x82
 8005ef0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f003 fc5f 	bl	80097bc <SDMMC_CmdReadMultiBlock>
 8005efe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005f00:	e009      	b.n	8005f16 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2281      	movs	r2, #129	; 0x81
 8005f06:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f003 fc31 	bl	8009776 <SDMMC_CmdReadSingleBlock>
 8005f14:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d012      	beq.n	8005f42 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0f      	ldr	r2, [pc, #60]	; (8005f60 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8005f22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e00a      	b.n	8005f58 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005f50:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	e000      	b.n	8005f58 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005f56:	2302      	movs	r3, #2
  }
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3730      	adds	r7, #48	; 0x30
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	1fe00fff 	.word	0x1fe00fff

08005f64 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08c      	sub	sp, #48	; 0x30
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d107      	bne.n	8005f8c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e08d      	b.n	80060a8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	f040 8086 	bne.w	80060a6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d907      	bls.n	8005fbe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e074      	b.n	80060a8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	025a      	lsls	r2, r3, #9
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d002      	beq.n	8005fea <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	025b      	lsls	r3, r3, #9
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
 8005fee:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	025b      	lsls	r3, r3, #9
 8005ff4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005ff6:	2390      	movs	r3, #144	; 0x90
 8005ff8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006002:	2300      	movs	r3, #0
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f107 0210 	add.w	r2, r7, #16
 800600e:	4611      	mov	r1, r2
 8006010:	4618      	mov	r0, r3
 8006012:	f003 fb61 	bl	80096d8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006024:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2201      	movs	r2, #1
 8006034:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d90a      	bls.n	8006052 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	22a0      	movs	r2, #160	; 0xa0
 8006040:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006048:	4618      	mov	r0, r3
 800604a:	f003 fbfd 	bl	8009848 <SDMMC_CmdWriteMultiBlock>
 800604e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006050:	e009      	b.n	8006066 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2290      	movs	r2, #144	; 0x90
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800605e:	4618      	mov	r0, r3
 8006060:	f003 fbcf 	bl	8009802 <SDMMC_CmdWriteSingleBlock>
 8006064:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d012      	beq.n	8006092 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a0f      	ldr	r2, [pc, #60]	; (80060b0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006072:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	431a      	orrs	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e00a      	b.n	80060a8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80060a0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e000      	b.n	80060a8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80060a6:	2302      	movs	r3, #2
  }
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3730      	adds	r7, #48	; 0x30
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	1fe00fff 	.word	0x1fe00fff

080060b4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_SD_IRQHandler+0x2e>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f001 f904 	bl	80072e8 <SD_Read_IT>
 80060e0:	e19a      	b.n	8006418 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80ac 	beq.w	800624a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b9d      	ldr	r3, [pc, #628]	; (800637c <HAL_SD_IRQHandler+0x2c8>)
 8006108:	400b      	ands	r3, r1
 800610a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800611a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800612a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d038      	beq.n	80061a8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <HAL_SD_IRQHandler+0x96>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d011      	beq.n	800616e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f003 fb9e 	bl	8009890 <SDMMC_CmdStopTransfer>
 8006154:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d008      	beq.n	800616e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f959 	bl	8006420 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a83      	ldr	r2, [pc, #524]	; (8006380 <HAL_SD_IRQHandler+0x2cc>)
 8006174:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <HAL_SD_IRQHandler+0xe4>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f004 f843 	bl	800a224 <HAL_SD_RxCpltCallback>
 800619e:	e13b      	b.n	8006418 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f004 f835 	bl	800a210 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80061a6:	e137      	b.n	8006418 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8132 	beq.w	8006418 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2200      	movs	r2, #0
 80061ba:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2200      	movs	r2, #0
 80061c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2200      	movs	r2, #0
 80061ca:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <HAL_SD_IRQHandler+0x12c>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d011      	beq.n	8006204 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f003 fb53 	bl	8009890 <SDMMC_CmdStopTransfer>
 80061ea:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d008      	beq.n	8006204 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f90e 	bl	8006420 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <HAL_SD_IRQHandler+0x172>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f003 fff2 	bl	800a210 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d105      	bne.n	8006242 <HAL_SD_IRQHandler+0x18e>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80eb 	beq.w	8006418 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f003 ffee 	bl	800a224 <HAL_SD_RxCpltCallback>
}
 8006248:	e0e6      	b.n	8006418 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <HAL_SD_IRQHandler+0x1b6>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 f886 	bl	8007374 <SD_Write_IT>
 8006268:	e0d6      	b.n	8006418 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006270:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 80a2 	beq.w	80063be <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628c:	f043 0202 	orr.w	r2, r3, #2
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a6:	f043 0208 	orr.w	r2, r3, #8
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	f043 0220 	orr.w	r2, r3, #32
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d005      	beq.n	80062e2 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062da:	f043 0210 	orr.w	r2, r3, #16
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a26      	ldr	r2, [pc, #152]	; (8006380 <HAL_SD_IRQHandler+0x2cc>)
 80062e8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80062f8:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006308:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006318:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006328:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f003 faae 	bl	8009890 <SDMMC_CmdStopTransfer>
 8006334:	4602      	mov	r2, r0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800634e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006358:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00f      	beq.n	8006384 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f854 	bl	8006420 <HAL_SD_ErrorCallback>
}
 8006378:	e04e      	b.n	8006418 <HAL_SD_IRQHandler+0x364>
 800637a:	bf00      	nop
 800637c:	ffff3ec5 	.word	0xffff3ec5
 8006380:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b00      	cmp	r3, #0
 800638c:	d044      	beq.n	8006418 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006392:	2b00      	cmp	r3, #0
 8006394:	d040      	beq.n	8006418 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80063a4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2200      	movs	r2, #0
 80063ac:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f832 	bl	8006420 <HAL_SD_ErrorCallback>
}
 80063bc:	e02c      	b.n	8006418 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d025      	beq.n	8006418 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10c      	bne.n	80063fe <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 f828 	bl	8007444 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80063f4:	e010      	b.n	8006418 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 f810 	bl	800741c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80063fc:	e00c      	b.n	8006418 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 f811 	bl	8007430 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800640e:	e003      	b.n	8006418 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fff9 	bl	8007408 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006416:	e7ff      	b.n	8006418 <HAL_SD_IRQHandler+0x364>
 8006418:	bf00      	nop
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006442:	0f9b      	lsrs	r3, r3, #30
 8006444:	b2da      	uxtb	r2, r3
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800644e:	0e9b      	lsrs	r3, r3, #26
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	b2da      	uxtb	r2, r3
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006460:	0e1b      	lsrs	r3, r3, #24
 8006462:	b2db      	uxtb	r3, r3
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	b2da      	uxtb	r2, r3
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006472:	0c1b      	lsrs	r3, r3, #16
 8006474:	b2da      	uxtb	r2, r3
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647e:	0a1b      	lsrs	r3, r3, #8
 8006480:	b2da      	uxtb	r2, r3
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648a:	b2da      	uxtb	r2, r3
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006494:	0d1b      	lsrs	r3, r3, #20
 8006496:	b29a      	uxth	r2, r3
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a0:	0c1b      	lsrs	r3, r3, #16
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b2:	0bdb      	lsrs	r3, r3, #15
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c4:	0b9b      	lsrs	r3, r3, #14
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d6:	0b5b      	lsrs	r3, r3, #13
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e8:	0b1b      	lsrs	r3, r3, #12
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2200      	movs	r2, #0
 80064fa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	2b00      	cmp	r3, #0
 8006502:	d163      	bne.n	80065cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006508:	009a      	lsls	r2, r3, #2
 800650a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800650e:	4013      	ands	r3, r2
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006514:	0f92      	lsrs	r2, r2, #30
 8006516:	431a      	orrs	r2, r3
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006520:	0edb      	lsrs	r3, r3, #27
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	b2da      	uxtb	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006532:	0e1b      	lsrs	r3, r3, #24
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	b2da      	uxtb	r2, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006544:	0d5b      	lsrs	r3, r3, #21
 8006546:	b2db      	uxtb	r3, r3
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	b2da      	uxtb	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006556:	0c9b      	lsrs	r3, r3, #18
 8006558:	b2db      	uxtb	r3, r3
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	b2da      	uxtb	r2, r3
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006568:	0bdb      	lsrs	r3, r3, #15
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	b2da      	uxtb	r2, r3
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	7e1b      	ldrb	r3, [r3, #24]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	3302      	adds	r3, #2
 800658c:	2201      	movs	r2, #1
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006596:	fb02 f203 	mul.w	r2, r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	7a1b      	ldrb	r3, [r3, #8]
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	2201      	movs	r2, #1
 80065aa:	409a      	lsls	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80065b8:	0a52      	lsrs	r2, r2, #9
 80065ba:	fb02 f203 	mul.w	r2, r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065c8:	655a      	str	r2, [r3, #84]	; 0x54
 80065ca:	e031      	b.n	8006630 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d11d      	bne.n	8006610 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d8:	041b      	lsls	r3, r3, #16
 80065da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065e2:	0c1b      	lsrs	r3, r3, #16
 80065e4:	431a      	orrs	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	3301      	adds	r3, #1
 80065f0:	029a      	lsls	r2, r3, #10
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006604:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	655a      	str	r2, [r3, #84]	; 0x54
 800660e:	e00f      	b.n	8006630 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a58      	ldr	r2, [pc, #352]	; (8006778 <HAL_SD_GetCardCSD+0x344>)
 8006616:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e09d      	b.n	800676c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006634:	0b9b      	lsrs	r3, r3, #14
 8006636:	b2db      	uxtb	r3, r3
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	b2da      	uxtb	r2, r3
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006646:	09db      	lsrs	r3, r3, #7
 8006648:	b2db      	uxtb	r3, r3
 800664a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800664e:	b2da      	uxtb	r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006658:	b2db      	uxtb	r3, r3
 800665a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800665e:	b2da      	uxtb	r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006668:	0fdb      	lsrs	r3, r3, #31
 800666a:	b2da      	uxtb	r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006674:	0f5b      	lsrs	r3, r3, #29
 8006676:	b2db      	uxtb	r3, r3
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	b2da      	uxtb	r2, r3
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006686:	0e9b      	lsrs	r3, r3, #26
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	b2da      	uxtb	r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006698:	0d9b      	lsrs	r3, r3, #22
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f003 030f 	and.w	r3, r3, #15
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066aa:	0d5b      	lsrs	r3, r3, #21
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c6:	0c1b      	lsrs	r3, r3, #16
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066da:	0bdb      	lsrs	r3, r3, #15
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ee:	0b9b      	lsrs	r3, r3, #14
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006702:	0b5b      	lsrs	r3, r3, #13
 8006704:	b2db      	uxtb	r3, r3
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006716:	0b1b      	lsrs	r3, r3, #12
 8006718:	b2db      	uxtb	r3, r3
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	b2da      	uxtb	r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800672a:	0a9b      	lsrs	r3, r3, #10
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	b2da      	uxtb	r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	b2db      	uxtb	r3, r3
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	b2da      	uxtb	r2, r3
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006752:	085b      	lsrs	r3, r3, #1
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800675a:	b2da      	uxtb	r2, r3
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	1fe00fff 	.word	0x1fe00fff

0800677c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b094      	sub	sp, #80	; 0x50
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800678c:	f107 0308 	add.w	r3, r7, #8
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fb4a 	bl	8006e2c <SD_SendSDStatus>
 8006798:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800679a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800679c:	2b00      	cmp	r3, #0
 800679e:	d011      	beq.n	80067c4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a4f      	ldr	r2, [pc, #316]	; (80068e4 <HAL_SD_GetCardStatus+0x168>)
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80067c2:	e070      	b.n	80068a6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	099b      	lsrs	r3, r3, #6
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	0a1b      	lsrs	r3, r3, #8
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	0e1b      	lsrs	r3, r3, #24
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	4313      	orrs	r3, r2
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	061a      	lsls	r2, r3, #24
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	021b      	lsls	r3, r3, #8
 8006806:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800680a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	0a1b      	lsrs	r3, r3, #8
 8006810:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006814:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	0e1b      	lsrs	r3, r3, #24
 800681a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	0a1b      	lsrs	r3, r3, #8
 800682c:	b2da      	uxtb	r2, r3
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	0d1b      	lsrs	r3, r3, #20
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f003 030f 	and.w	r3, r3, #15
 800683c:	b2da      	uxtb	r2, r3
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	b29b      	uxth	r3, r3
 8006848:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800684c:	b29a      	uxth	r2, r3
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	b29b      	uxth	r3, r3
 8006852:	b2db      	uxtb	r3, r3
 8006854:	b29b      	uxth	r3, r3
 8006856:	4313      	orrs	r3, r2
 8006858:	b29a      	uxth	r2, r3
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	0a9b      	lsrs	r3, r3, #10
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006868:	b2da      	uxtb	r2, r3
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	0a1b      	lsrs	r3, r3, #8
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 0303 	and.w	r3, r3, #3
 8006878:	b2da      	uxtb	r2, r3
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	091b      	lsrs	r3, r3, #4
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	b2da      	uxtb	r2, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	b2da      	uxtb	r2, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	0e1b      	lsrs	r3, r3, #24
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068ae:	4618      	mov	r0, r3
 80068b0:	f002 ff3e 	bl	8009730 <SDMMC_CmdBlockLength>
 80068b4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80068b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00d      	beq.n	80068d8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a08      	ldr	r2, [pc, #32]	; (80068e4 <HAL_SD_GetCardStatus+0x168>)
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068c8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80068d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3750      	adds	r7, #80	; 0x50
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	1fe00fff 	.word	0x1fe00fff

080068e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006940:	b590      	push	{r4, r7, lr}
 8006942:	b08d      	sub	sp, #52	; 0x34
 8006944:	af02      	add	r7, sp, #8
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2203      	movs	r2, #3
 8006954:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	2b03      	cmp	r3, #3
 800695e:	d02e      	beq.n	80069be <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006966:	d106      	bne.n	8006976 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	635a      	str	r2, [r3, #52]	; 0x34
 8006974:	e029      	b.n	80069ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800697c:	d10a      	bne.n	8006994 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fb4c 	bl	800701c <SD_WideBus_Enable>
 8006984:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	431a      	orrs	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	635a      	str	r2, [r3, #52]	; 0x34
 8006992:	e01a      	b.n	80069ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fb89 	bl	80070b2 <SD_WideBus_Disable>
 80069a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	635a      	str	r2, [r3, #52]	; 0x34
 80069ae:	e00c      	b.n	80069ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	635a      	str	r2, [r3, #52]	; 0x34
 80069bc:	e005      	b.n	80069ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a5e      	ldr	r2, [pc, #376]	; (8006b50 <HAL_SD_ConfigWideBusOperation+0x210>)
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069e0:	e094      	b.n	8006b0c <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80069e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80069e6:	f7fd fe5d 	bl	80046a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80069ea:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 8083 	beq.w	8006afa <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695a      	ldr	r2, [r3, #20]
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4950      	ldr	r1, [pc, #320]	; (8006b54 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006a12:	fba1 1303 	umull	r1, r3, r1, r3
 8006a16:	0e1b      	lsrs	r3, r3, #24
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d303      	bcc.n	8006a24 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	61bb      	str	r3, [r7, #24]
 8006a22:	e05a      	b.n	8006ada <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2c:	d103      	bne.n	8006a36 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	e051      	b.n	8006ada <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3e:	d126      	bne.n	8006a8e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10e      	bne.n	8006a66 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	4a43      	ldr	r2, [pc, #268]	; (8006b58 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d906      	bls.n	8006a5e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	4a40      	ldr	r2, [pc, #256]	; (8006b54 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006a54:	fba2 2303 	umull	r2, r3, r2, r3
 8006a58:	0e5b      	lsrs	r3, r3, #25
 8006a5a:	61bb      	str	r3, [r7, #24]
 8006a5c:	e03d      	b.n	8006ada <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	61bb      	str	r3, [r7, #24]
 8006a64:	e039      	b.n	8006ada <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a72:	4a39      	ldr	r2, [pc, #228]	; (8006b58 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d906      	bls.n	8006a86 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	4a36      	ldr	r2, [pc, #216]	; (8006b54 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a80:	0e5b      	lsrs	r3, r3, #25
 8006a82:	61bb      	str	r3, [r7, #24]
 8006a84:	e029      	b.n	8006ada <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	61bb      	str	r3, [r7, #24]
 8006a8c:	e025      	b.n	8006ada <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10e      	bne.n	8006ab4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4a30      	ldr	r2, [pc, #192]	; (8006b5c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d906      	bls.n	8006aac <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4a2c      	ldr	r2, [pc, #176]	; (8006b54 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa6:	0e1b      	lsrs	r3, r3, #24
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	e016      	b.n	8006ada <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	e012      	b.n	8006ada <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac0:	4a26      	ldr	r2, [pc, #152]	; (8006b5c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d906      	bls.n	8006ad4 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4a22      	ldr	r2, [pc, #136]	; (8006b54 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006aca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ace:	0e1b      	lsrs	r3, r3, #24
 8006ad0:	61bb      	str	r3, [r7, #24]
 8006ad2:	e002      	b.n	8006ada <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681c      	ldr	r4, [r3, #0]
 8006ade:	466a      	mov	r2, sp
 8006ae0:	f107 0314 	add.w	r3, r7, #20
 8006ae4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006ae8:	e882 0003 	stmia.w	r2, {r0, r1}
 8006aec:	f107 0308 	add.w	r3, r7, #8
 8006af0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006af2:	4620      	mov	r0, r4
 8006af4:	f002 fd3e 	bl	8009574 <SDMMC_Init>
 8006af8:	e008      	b.n	8006b0c <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b14:	4618      	mov	r0, r3
 8006b16:	f002 fe0b 	bl	8009730 <SDMMC_CmdBlockLength>
 8006b1a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00c      	beq.n	8006b3c <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a0a      	ldr	r2, [pc, #40]	; (8006b50 <HAL_SD_ConfigWideBusOperation+0x210>)
 8006b28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	372c      	adds	r7, #44	; 0x2c
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd90      	pop	{r4, r7, pc}
 8006b50:	1fe00fff 	.word	0x1fe00fff
 8006b54:	55e63b89 	.word	0x55e63b89
 8006b58:	02faf080 	.word	0x02faf080
 8006b5c:	017d7840 	.word	0x017d7840

08006b60 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006b6c:	f107 030c 	add.w	r3, r7, #12
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa2a 	bl	8006fcc <SD_SendStatus>
 8006b78:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	431a      	orrs	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	0a5b      	lsrs	r3, r3, #9
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006b96:	693b      	ldr	r3, [r7, #16]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b090      	sub	sp, #64	; 0x40
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f002 fd38 	bl	8009626 <SDMMC_GetPowerState>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006bbc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006bc0:	e0a5      	b.n	8006d0e <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d02e      	beq.n	8006c28 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f002 ff83 	bl	8009ada <SDMMC_CmdSendCID>
 8006bd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <SD_InitCard+0x40>
    {
      return errorstate;
 8006bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bde:	e096      	b.n	8006d0e <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f002 fd63 	bl	80096b2 <SDMMC_GetResponse>
 8006bec:	4602      	mov	r2, r0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2104      	movs	r1, #4
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f002 fd5a 	bl	80096b2 <SDMMC_GetResponse>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2108      	movs	r1, #8
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f002 fd51 	bl	80096b2 <SDMMC_GetResponse>
 8006c10:	4602      	mov	r2, r0
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	210c      	movs	r1, #12
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f002 fd48 	bl	80096b2 <SDMMC_GetResponse>
 8006c22:	4602      	mov	r2, r0
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d00d      	beq.n	8006c4c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f107 020e 	add.w	r2, r7, #14
 8006c38:	4611      	mov	r1, r2
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f002 ff8c 	bl	8009b58 <SDMMC_CmdSetRelAdd>
 8006c40:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <SD_InitCard+0xac>
    {
      return errorstate;
 8006c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4a:	e060      	b.n	8006d0e <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d036      	beq.n	8006cc2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006c54:	89fb      	ldrh	r3, [r7, #14]
 8006c56:	461a      	mov	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c64:	041b      	lsls	r3, r3, #16
 8006c66:	4619      	mov	r1, r3
 8006c68:	4610      	mov	r0, r2
 8006c6a:	f002 ff55 	bl	8009b18 <SDMMC_CmdSendCSD>
 8006c6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <SD_InitCard+0xda>
    {
      return errorstate;
 8006c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c78:	e049      	b.n	8006d0e <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f002 fd16 	bl	80096b2 <SDMMC_GetResponse>
 8006c86:	4602      	mov	r2, r0
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2104      	movs	r1, #4
 8006c92:	4618      	mov	r0, r3
 8006c94:	f002 fd0d 	bl	80096b2 <SDMMC_GetResponse>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2108      	movs	r1, #8
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f002 fd04 	bl	80096b2 <SDMMC_GetResponse>
 8006caa:	4602      	mov	r2, r0
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	210c      	movs	r1, #12
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f002 fcfb 	bl	80096b2 <SDMMC_GetResponse>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2104      	movs	r1, #4
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f002 fcf2 	bl	80096b2 <SDMMC_GetResponse>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	0d1a      	lsrs	r2, r3, #20
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006cd6:	f107 0310 	add.w	r3, r7, #16
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff fba9 	bl	8006434 <HAL_SD_GetCardCSD>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ce8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006cec:	e00f      	b.n	8006d0e <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf6:	041b      	lsls	r3, r3, #16
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	f002 fe04 	bl	8009908 <SDMMC_CmdSelDesel>
 8006d00:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <SD_InitCard+0x16c>
  {
    return errorstate;
 8006d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0a:	e000      	b.n	8006d0e <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3740      	adds	r7, #64	; 0x40
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f002 fe0c 	bl	800994e <SDMMC_CmdGoIdleState>
 8006d36:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	e06e      	b.n	8006e20 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f002 fe1f 	bl	800998a <SDMMC_CmdOperCond>
 8006d4c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00d      	beq.n	8006d70 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f002 fdf5 	bl	800994e <SDMMC_CmdGoIdleState>
 8006d64:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	e057      	b.n	8006e20 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d137      	bne.n	8006dee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2100      	movs	r1, #0
 8006d84:	4618      	mov	r0, r3
 8006d86:	f002 fe20 	bl	80099ca <SDMMC_CmdAppCommand>
 8006d8a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d02d      	beq.n	8006dee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d96:	e043      	b.n	8006e20 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f002 fe13 	bl	80099ca <SDMMC_CmdAppCommand>
 8006da4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <SD_PowerON+0x98>
    {
      return errorstate;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	e037      	b.n	8006e20 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	491c      	ldr	r1, [pc, #112]	; (8006e28 <SD_PowerON+0x110>)
 8006db6:	4618      	mov	r0, r3
 8006db8:	f002 fe2a 	bl	8009a10 <SDMMC_CmdAppOperCommand>
 8006dbc:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dc8:	e02a      	b.n	8006e20 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2100      	movs	r1, #0
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f002 fc6e 	bl	80096b2 <SDMMC_GetResponse>
 8006dd6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	0fdb      	lsrs	r3, r3, #31
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <SD_PowerON+0xcc>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <SD_PowerON+0xce>
 8006de4:	2300      	movs	r3, #0
 8006de6:	613b      	str	r3, [r7, #16]

    count++;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	3301      	adds	r3, #1
 8006dec:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d802      	bhi.n	8006dfe <SD_PowerON+0xe6>
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0cc      	beq.n	8006d98 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d902      	bls.n	8006e0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e0c:	e008      	b.n	8006e20 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	c1100000 	.word	0xc1100000

08006e2c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08c      	sub	sp, #48	; 0x30
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e36:	f7fa fde5 	bl	8001a04 <HAL_GetTick>
 8006e3a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2100      	movs	r1, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f002 fc33 	bl	80096b2 <SDMMC_GetResponse>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e56:	d102      	bne.n	8006e5e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e5c:	e0b0      	b.n	8006fc0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2140      	movs	r1, #64	; 0x40
 8006e64:	4618      	mov	r0, r3
 8006e66:	f002 fc63 	bl	8009730 <SDMMC_CmdBlockLength>
 8006e6a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	e0a0      	b.n	8006fc0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e86:	041b      	lsls	r3, r3, #16
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	f002 fd9d 	bl	80099ca <SDMMC_CmdAppCommand>
 8006e90:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	e08d      	b.n	8006fc0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006eaa:	2340      	movs	r3, #64	; 0x40
 8006eac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006eae:	2360      	movs	r3, #96	; 0x60
 8006eb0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f107 0208 	add.w	r2, r7, #8
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f002 fc05 	bl	80096d8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f002 fe85 	bl	8009be2 <SDMMC_CmdStatusRegister>
 8006ed8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d02b      	beq.n	8006f38 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	e069      	b.n	8006fc0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d013      	beq.n	8006f22 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006efa:	2300      	movs	r3, #0
 8006efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006efe:	e00d      	b.n	8006f1c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f002 fb5f 	bl	80095c8 <SDMMC_ReadFIFO>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	601a      	str	r2, [r3, #0]
        pData++;
 8006f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f12:	3304      	adds	r3, #4
 8006f14:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f18:	3301      	adds	r3, #1
 8006f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1e:	2b07      	cmp	r3, #7
 8006f20:	d9ee      	bls.n	8006f00 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006f22:	f7fa fd6f 	bl	8001a04 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f30:	d102      	bne.n	8006f38 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006f32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f36:	e043      	b.n	8006fc0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0d2      	beq.n	8006eec <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006f54:	2308      	movs	r3, #8
 8006f56:	e033      	b.n	8006fc0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f66:	2302      	movs	r3, #2
 8006f68:	e02a      	b.n	8006fc0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d017      	beq.n	8006fa8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006f78:	2320      	movs	r3, #32
 8006f7a:	e021      	b.n	8006fc0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f002 fb21 	bl	80095c8 <SDMMC_ReadFIFO>
 8006f86:	4602      	mov	r2, r0
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	601a      	str	r2, [r3, #0]
    pData++;
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	3304      	adds	r3, #4
 8006f90:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006f92:	f7fa fd37 	bl	8001a04 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d102      	bne.n	8006fa8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006fa2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fa6:	e00b      	b.n	8006fc0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1e2      	bne.n	8006f7c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a03      	ldr	r2, [pc, #12]	; (8006fc8 <SD_SendSDStatus+0x19c>)
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3730      	adds	r7, #48	; 0x30
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	18000f3a 	.word	0x18000f3a

08006fcc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d102      	bne.n	8006fe2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006fdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fe0:	e018      	b.n	8007014 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fea:	041b      	lsls	r3, r3, #16
 8006fec:	4619      	mov	r1, r3
 8006fee:	4610      	mov	r0, r2
 8006ff0:	f002 fdd4 	bl	8009b9c <SDMMC_CmdSendStatus>
 8006ff4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	e009      	b.n	8007014 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f002 fb53 	bl	80096b2 <SDMMC_GetResponse>
 800700c:	4602      	mov	r2, r0
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	2300      	movs	r3, #0
 800702a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2100      	movs	r1, #0
 8007032:	4618      	mov	r0, r3
 8007034:	f002 fb3d 	bl	80096b2 <SDMMC_GetResponse>
 8007038:	4603      	mov	r3, r0
 800703a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007042:	d102      	bne.n	800704a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007044:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007048:	e02f      	b.n	80070aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800704a:	f107 030c 	add.w	r3, r7, #12
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f879 	bl	8007148 <SD_FindSCR>
 8007056:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	e023      	b.n	80070aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01c      	beq.n	80070a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007074:	041b      	lsls	r3, r3, #16
 8007076:	4619      	mov	r1, r3
 8007078:	4610      	mov	r0, r2
 800707a:	f002 fca6 	bl	80099ca <SDMMC_CmdAppCommand>
 800707e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	e00f      	b.n	80070aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2102      	movs	r1, #2
 8007090:	4618      	mov	r0, r3
 8007092:	f002 fcdd 	bl	8009a50 <SDMMC_CmdBusWidth>
 8007096:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	e003      	b.n	80070aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e001      	b.n	80070aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b086      	sub	sp, #24
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	2300      	movs	r3, #0
 80070c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2100      	movs	r1, #0
 80070c8:	4618      	mov	r0, r3
 80070ca:	f002 faf2 	bl	80096b2 <SDMMC_GetResponse>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070d8:	d102      	bne.n	80070e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80070da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070de:	e02f      	b.n	8007140 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80070e0:	f107 030c 	add.w	r3, r7, #12
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f82e 	bl	8007148 <SD_FindSCR>
 80070ec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	e023      	b.n	8007140 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d01c      	beq.n	800713c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710a:	041b      	lsls	r3, r3, #16
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f002 fc5b 	bl	80099ca <SDMMC_CmdAppCommand>
 8007114:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	e00f      	b.n	8007140 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2100      	movs	r1, #0
 8007126:	4618      	mov	r0, r3
 8007128:	f002 fc92 	bl	8009a50 <SDMMC_CmdBusWidth>
 800712c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	e003      	b.n	8007140 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007138:	2300      	movs	r3, #0
 800713a:	e001      	b.n	8007140 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800713c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08e      	sub	sp, #56	; 0x38
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007152:	f7fa fc57 	bl	8001a04 <HAL_GetTick>
 8007156:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800715c:	2300      	movs	r3, #0
 800715e:	60bb      	str	r3, [r7, #8]
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2108      	movs	r1, #8
 800716e:	4618      	mov	r0, r3
 8007170:	f002 fade 	bl	8009730 <SDMMC_CmdBlockLength>
 8007174:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <SD_FindSCR+0x38>
  {
    return errorstate;
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	e0ad      	b.n	80072dc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007188:	041b      	lsls	r3, r3, #16
 800718a:	4619      	mov	r1, r3
 800718c:	4610      	mov	r0, r2
 800718e:	f002 fc1c 	bl	80099ca <SDMMC_CmdAppCommand>
 8007192:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <SD_FindSCR+0x56>
  {
    return errorstate;
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	e09e      	b.n	80072dc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800719e:	f04f 33ff 	mov.w	r3, #4294967295
 80071a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80071a4:	2308      	movs	r3, #8
 80071a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80071a8:	2330      	movs	r3, #48	; 0x30
 80071aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80071ac:	2302      	movs	r3, #2
 80071ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80071b4:	2301      	movs	r3, #1
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f107 0210 	add.w	r2, r7, #16
 80071c0:	4611      	mov	r1, r2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f002 fa88 	bl	80096d8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f002 fc62 	bl	8009a96 <SDMMC_CmdSendSCR>
 80071d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d027      	beq.n	800722a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	e07e      	b.n	80072dc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d113      	bne.n	8007214 <SD_FindSCR+0xcc>
 80071ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d110      	bne.n	8007214 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f002 f9e6 	bl	80095c8 <SDMMC_ReadFIFO>
 80071fc:	4603      	mov	r3, r0
 80071fe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4618      	mov	r0, r3
 8007206:	f002 f9df 	bl	80095c8 <SDMMC_ReadFIFO>
 800720a:	4603      	mov	r3, r0
 800720c:	60fb      	str	r3, [r7, #12]
      index++;
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	3301      	adds	r3, #1
 8007212:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007214:	f7fa fbf6 	bl	8001a04 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007222:	d102      	bne.n	800722a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007224:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007228:	e058      	b.n	80072dc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007230:	f240 532a 	movw	r3, #1322	; 0x52a
 8007234:	4013      	ands	r3, r2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0d1      	beq.n	80071de <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	2b00      	cmp	r3, #0
 8007246:	d005      	beq.n	8007254 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2208      	movs	r2, #8
 800724e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007250:	2308      	movs	r3, #8
 8007252:	e043      	b.n	80072dc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d005      	beq.n	800726e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2202      	movs	r2, #2
 8007268:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800726a:	2302      	movs	r3, #2
 800726c:	e036      	b.n	80072dc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2220      	movs	r2, #32
 8007282:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007284:	2320      	movs	r3, #32
 8007286:	e029      	b.n	80072dc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <SD_FindSCR+0x19c>)
 800728e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	061a      	lsls	r2, r3, #24
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	021b      	lsls	r3, r3, #8
 8007298:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800729c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	0a1b      	lsrs	r3, r3, #8
 80072a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80072a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	0e1b      	lsrs	r3, r3, #24
 80072ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	601a      	str	r2, [r3, #0]
    scr++;
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	3304      	adds	r3, #4
 80072b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	061a      	lsls	r2, r3, #24
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	0a1b      	lsrs	r3, r3, #8
 80072ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80072ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	0e1b      	lsrs	r3, r3, #24
 80072d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3738      	adds	r7, #56	; 0x38
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	18000f3a 	.word	0x18000f3a

080072e8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fa:	2b1f      	cmp	r3, #31
 80072fc:	d936      	bls.n	800736c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e027      	b.n	8007354 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4618      	mov	r0, r3
 800730a:	f002 f95d 	bl	80095c8 <SDMMC_ReadFIFO>
 800730e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	3301      	adds	r3, #1
 800731c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	0a1b      	lsrs	r3, r3, #8
 8007322:	b2da      	uxtb	r2, r3
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	3301      	adds	r3, #1
 800732c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	b2da      	uxtb	r2, r3
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	3301      	adds	r3, #1
 800733c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	0e1b      	lsrs	r3, r3, #24
 8007342:	b2da      	uxtb	r2, r3
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	3301      	adds	r3, #1
 800734c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	3301      	adds	r3, #1
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	2b07      	cmp	r3, #7
 8007358:	d9d4      	bls.n	8007304 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007364:	f1a3 0220 	sub.w	r2, r3, #32
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800736c:	bf00      	nop
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	2b1f      	cmp	r3, #31
 8007388:	d93a      	bls.n	8007400 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800738a:	2300      	movs	r3, #0
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	e02b      	b.n	80073e8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	3301      	adds	r3, #1
 800739a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	021a      	lsls	r2, r3, #8
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	3301      	adds	r3, #1
 80073ac:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	041a      	lsls	r2, r3, #16
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]
      tmp++;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	3301      	adds	r3, #1
 80073be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	061a      	lsls	r2, r3, #24
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
      tmp++;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	3301      	adds	r3, #1
 80073d0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f107 020c 	add.w	r2, r7, #12
 80073da:	4611      	mov	r1, r2
 80073dc:	4618      	mov	r0, r3
 80073de:	f002 f900 	bl	80095e2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	3301      	adds	r3, #1
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2b07      	cmp	r3, #7
 80073ec:	d9d0      	bls.n	8007390 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	f1a3 0220 	sub.w	r2, r3, #32
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	621a      	str	r2, [r3, #32]
  }
}
 8007400:	bf00      	nop
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e03c      	b.n	80074e6 <HAL_SDRAM_Init+0x8e>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d117      	bne.n	80074a8 <HAL_SDRAM_Init+0x50>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    if (hsdram->MspInitCallback == NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007484:	2b00      	cmp	r3, #0
 8007486:	d102      	bne.n	800748e <HAL_SDRAM_Init+0x36>
    {
      hsdram->MspInitCallback = HAL_SDRAM_MspInit;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a19      	ldr	r2, [pc, #100]	; (80074f0 <HAL_SDRAM_Init+0x98>)
 800748c:	635a      	str	r2, [r3, #52]	; 0x34
    }
    hsdram->RefreshErrorCallback = HAL_SDRAM_RefreshErrorCallback;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a18      	ldr	r2, [pc, #96]	; (80074f4 <HAL_SDRAM_Init+0x9c>)
 8007492:	63da      	str	r2, [r3, #60]	; 0x3c
    hsdram->DmaXferCpltCallback = HAL_SDRAM_DMA_XferCpltCallback;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <HAL_SDRAM_Init+0xa0>)
 8007498:	641a      	str	r2, [r3, #64]	; 0x40
    hsdram->DmaXferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a17      	ldr	r2, [pc, #92]	; (80074fc <HAL_SDRAM_Init+0xa4>)
 800749e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	4798      	blx	r3
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3304      	adds	r3, #4
 80074b8:	4619      	mov	r1, r3
 80074ba:	4610      	mov	r0, r2
 80074bc:	f001 ff94 	bl	80093e8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6818      	ldr	r0, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	f001 ffe8 	bl	80094a0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <HAL_SDRAM_Init+0xa8>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a0a      	ldr	r2, [pc, #40]	; (8007500 <HAL_SDRAM_Init+0xa8>)
 80074d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074da:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	0800097d 	.word	0x0800097d
 80074f4:	08007505 	.word	0x08007505
 80074f8:	08007519 	.word	0x08007519
 80074fc:	0800752d 	.word	0x0800752d
 8007500:	52004000 	.word	0x52004000

08007504 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_SDRAM_DMA_XferCpltCallback>:
  * @param  hmdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SDRAM_DMA_XferCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(hmdma);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_DMA_XferCpltCallback could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_SDRAM_DMA_XferErrorCallback>:
  * @brief  DMA transfer complete error callback.
  * @param  hmdma DMA handle
  * @retval None
  */
__weak void HAL_SDRAM_DMA_XferErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(hmdma);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_DMA_XferErrorCallback could be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007548:	2300      	movs	r3, #0
 800754a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e0eb      	b.n	800772e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a75      	ldr	r2, [pc, #468]	; (8007738 <HAL_SPI_Init+0x1f8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00f      	beq.n	8007586 <HAL_SPI_Init+0x46>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a74      	ldr	r2, [pc, #464]	; (800773c <HAL_SPI_Init+0x1fc>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00a      	beq.n	8007586 <HAL_SPI_Init+0x46>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a72      	ldr	r2, [pc, #456]	; (8007740 <HAL_SPI_Init+0x200>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d005      	beq.n	8007586 <HAL_SPI_Init+0x46>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	2b0f      	cmp	r3, #15
 8007580:	d901      	bls.n	8007586 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e0d3      	b.n	800772e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8dc 	bl	8007744 <SPI_GetPacketSize>
 800758c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a69      	ldr	r2, [pc, #420]	; (8007738 <HAL_SPI_Init+0x1f8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00c      	beq.n	80075b2 <HAL_SPI_Init+0x72>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a67      	ldr	r2, [pc, #412]	; (800773c <HAL_SPI_Init+0x1fc>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d007      	beq.n	80075b2 <HAL_SPI_Init+0x72>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a66      	ldr	r2, [pc, #408]	; (8007740 <HAL_SPI_Init+0x200>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d002      	beq.n	80075b2 <HAL_SPI_Init+0x72>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	d811      	bhi.n	80075d6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075b6:	4a60      	ldr	r2, [pc, #384]	; (8007738 <HAL_SPI_Init+0x1f8>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d009      	beq.n	80075d0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a5e      	ldr	r2, [pc, #376]	; (800773c <HAL_SPI_Init+0x1fc>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d004      	beq.n	80075d0 <HAL_SPI_Init+0x90>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a5d      	ldr	r2, [pc, #372]	; (8007740 <HAL_SPI_Init+0x200>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d104      	bne.n	80075da <HAL_SPI_Init+0x9a>
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b10      	cmp	r3, #16
 80075d4:	d901      	bls.n	80075da <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e0a9      	b.n	800772e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7f9 fdfe 	bl	80011f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0201 	bic.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007614:	d119      	bne.n	800764a <HAL_SPI_Init+0x10a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800761e:	d103      	bne.n	8007628 <HAL_SPI_Init+0xe8>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	2b00      	cmp	r3, #0
 8007626:	d008      	beq.n	800763a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10c      	bne.n	800764a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007638:	d107      	bne.n	800764a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007648:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69da      	ldr	r2, [r3, #28]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	431a      	orrs	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765c:	ea42 0103 	orr.w	r1, r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	431a      	orrs	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076aa:	ea42 0103 	orr.w	r1, r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d113      	bne.n	80076ea <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0201 	bic.w	r2, r2, #1
 80076f8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40013000 	.word	0x40013000
 800773c:	40003800 	.word	0x40003800
 8007740:	40003c00 	.word	0x40003c00

08007744 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	3301      	adds	r3, #1
 8007754:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	3301      	adds	r3, #1
 800775c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	3307      	adds	r3, #7
 8007762:	08db      	lsrs	r3, r3, #3
 8007764:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	fb02 f303 	mul.w	r3, r2, r3
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
	...

0800777c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e03e      	b.n	8007810 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f7f9 f8de 	bl	8000968 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3308      	adds	r3, #8
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f001 fcfe 	bl	80091b8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	461a      	mov	r2, r3
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	f001 fd86 	bl	80092d8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6858      	ldr	r0, [r3, #4]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	f001 fdcd 	bl	8009378 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	6892      	ldr	r2, [r2, #8]
 80077e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	6892      	ldr	r2, [r2, #8]
 80077f2:	f041 0101 	orr.w	r1, r1, #1
 80077f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80077fa:	4b07      	ldr	r3, [pc, #28]	; (8007818 <HAL_SRAM_Init+0x9c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a06      	ldr	r2, [pc, #24]	; (8007818 <HAL_SRAM_Init+0x9c>)
 8007800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007804:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	52004000 	.word	0x52004000

0800781c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e054      	b.n	80078d8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d111      	bne.n	800785e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 faf4 	bl	8007e30 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a23      	ldr	r2, [pc, #140]	; (80078e0 <HAL_TIM_Base_Init+0xc4>)
 8007854:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2202      	movs	r2, #2
 8007862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3304      	adds	r3, #4
 800786e:	4619      	mov	r1, r3
 8007870:	4610      	mov	r0, r2
 8007872:	f000 fa43 	bl	8007cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	08001771 	.word	0x08001771

080078e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d001      	beq.n	80078fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e04f      	b.n	800799c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0201 	orr.w	r2, r2, #1
 8007912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a23      	ldr	r2, [pc, #140]	; (80079a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d01d      	beq.n	800795a <HAL_TIM_Base_Start_IT+0x76>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007926:	d018      	beq.n	800795a <HAL_TIM_Base_Start_IT+0x76>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1f      	ldr	r2, [pc, #124]	; (80079ac <HAL_TIM_Base_Start_IT+0xc8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d013      	beq.n	800795a <HAL_TIM_Base_Start_IT+0x76>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a1e      	ldr	r2, [pc, #120]	; (80079b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d00e      	beq.n	800795a <HAL_TIM_Base_Start_IT+0x76>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a1c      	ldr	r2, [pc, #112]	; (80079b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d009      	beq.n	800795a <HAL_TIM_Base_Start_IT+0x76>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a1b      	ldr	r2, [pc, #108]	; (80079b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d004      	beq.n	800795a <HAL_TIM_Base_Start_IT+0x76>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a19      	ldr	r2, [pc, #100]	; (80079bc <HAL_TIM_Base_Start_IT+0xd8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d115      	bne.n	8007986 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	4b17      	ldr	r3, [pc, #92]	; (80079c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007962:	4013      	ands	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b06      	cmp	r3, #6
 800796a:	d015      	beq.n	8007998 <HAL_TIM_Base_Start_IT+0xb4>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007972:	d011      	beq.n	8007998 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007984:	e008      	b.n	8007998 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f042 0201 	orr.w	r2, r2, #1
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	e000      	b.n	800799a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007998:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	40010000 	.word	0x40010000
 80079ac:	40000400 	.word	0x40000400
 80079b0:	40000800 	.word	0x40000800
 80079b4:	40000c00 	.word	0x40000c00
 80079b8:	40010400 	.word	0x40010400
 80079bc:	40001800 	.word	0x40001800
 80079c0:	00010007 	.word	0x00010007

080079c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d128      	bne.n	8007a2c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d121      	bne.n	8007a2c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f06f 0202 	mvn.w	r2, #2
 80079f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d005      	beq.n	8007a12 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
 8007a10:	e009      	b.n	8007a26 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0304 	and.w	r3, r3, #4
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d128      	bne.n	8007a8c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d121      	bne.n	8007a8c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f06f 0204 	mvn.w	r2, #4
 8007a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2202      	movs	r2, #2
 8007a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3
 8007a70:	e009      	b.n	8007a86 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d128      	bne.n	8007aec <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f003 0308 	and.w	r3, r3, #8
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d121      	bne.n	8007aec <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f06f 0208 	mvn.w	r2, #8
 8007ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2204      	movs	r2, #4
 8007ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	f003 0303 	and.w	r3, r3, #3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	4798      	blx	r3
 8007ad0:	e009      	b.n	8007ae6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0310 	and.w	r3, r3, #16
 8007af6:	2b10      	cmp	r3, #16
 8007af8:	d128      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 0310 	and.w	r3, r3, #16
 8007b04:	2b10      	cmp	r3, #16
 8007b06:	d121      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0210 	mvn.w	r2, #16
 8007b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2208      	movs	r2, #8
 8007b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d005      	beq.n	8007b32 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
 8007b30:	e009      	b.n	8007b46 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d110      	bne.n	8007b7c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d109      	bne.n	8007b7c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f06f 0201 	mvn.w	r2, #1
 8007b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b86:	2b80      	cmp	r3, #128	; 0x80
 8007b88:	d110      	bne.n	8007bac <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b94:	2b80      	cmp	r3, #128	; 0x80
 8007b96:	d109      	bne.n	8007bac <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bba:	d110      	bne.n	8007bde <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc6:	2b80      	cmp	r3, #128	; 0x80
 8007bc8:	d109      	bne.n	8007bde <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be8:	2b40      	cmp	r3, #64	; 0x40
 8007bea:	d110      	bne.n	8007c0e <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf6:	2b40      	cmp	r3, #64	; 0x40
 8007bf8:	d109      	bne.n	8007c0e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b20      	cmp	r3, #32
 8007c1a:	d110      	bne.n	8007c3e <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d109      	bne.n	8007c3e <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f06f 0220 	mvn.w	r2, #32
 8007c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
	...

08007cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a40      	ldr	r2, [pc, #256]	; (8007e10 <TIM_Base_SetConfig+0x114>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d013      	beq.n	8007d3c <TIM_Base_SetConfig+0x40>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d1a:	d00f      	beq.n	8007d3c <TIM_Base_SetConfig+0x40>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a3d      	ldr	r2, [pc, #244]	; (8007e14 <TIM_Base_SetConfig+0x118>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00b      	beq.n	8007d3c <TIM_Base_SetConfig+0x40>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a3c      	ldr	r2, [pc, #240]	; (8007e18 <TIM_Base_SetConfig+0x11c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d007      	beq.n	8007d3c <TIM_Base_SetConfig+0x40>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a3b      	ldr	r2, [pc, #236]	; (8007e1c <TIM_Base_SetConfig+0x120>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d003      	beq.n	8007d3c <TIM_Base_SetConfig+0x40>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a3a      	ldr	r2, [pc, #232]	; (8007e20 <TIM_Base_SetConfig+0x124>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d108      	bne.n	8007d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a2f      	ldr	r2, [pc, #188]	; (8007e10 <TIM_Base_SetConfig+0x114>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d01f      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d5c:	d01b      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a2c      	ldr	r2, [pc, #176]	; (8007e14 <TIM_Base_SetConfig+0x118>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d017      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a2b      	ldr	r2, [pc, #172]	; (8007e18 <TIM_Base_SetConfig+0x11c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d013      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a2a      	ldr	r2, [pc, #168]	; (8007e1c <TIM_Base_SetConfig+0x120>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d00f      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a29      	ldr	r2, [pc, #164]	; (8007e20 <TIM_Base_SetConfig+0x124>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00b      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a28      	ldr	r2, [pc, #160]	; (8007e24 <TIM_Base_SetConfig+0x128>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d007      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a27      	ldr	r2, [pc, #156]	; (8007e28 <TIM_Base_SetConfig+0x12c>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d003      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a26      	ldr	r2, [pc, #152]	; (8007e2c <TIM_Base_SetConfig+0x130>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d108      	bne.n	8007da8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a10      	ldr	r2, [pc, #64]	; (8007e10 <TIM_Base_SetConfig+0x114>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d00f      	beq.n	8007df4 <TIM_Base_SetConfig+0xf8>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a12      	ldr	r2, [pc, #72]	; (8007e20 <TIM_Base_SetConfig+0x124>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d00b      	beq.n	8007df4 <TIM_Base_SetConfig+0xf8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a11      	ldr	r2, [pc, #68]	; (8007e24 <TIM_Base_SetConfig+0x128>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d007      	beq.n	8007df4 <TIM_Base_SetConfig+0xf8>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a10      	ldr	r2, [pc, #64]	; (8007e28 <TIM_Base_SetConfig+0x12c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d003      	beq.n	8007df4 <TIM_Base_SetConfig+0xf8>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a0f      	ldr	r2, [pc, #60]	; (8007e2c <TIM_Base_SetConfig+0x130>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d103      	bne.n	8007dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	691a      	ldr	r2, [r3, #16]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	615a      	str	r2, [r3, #20]
}
 8007e02:	bf00      	nop
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	40010000 	.word	0x40010000
 8007e14:	40000400 	.word	0x40000400
 8007e18:	40000800 	.word	0x40000800
 8007e1c:	40000c00 	.word	0x40000c00
 8007e20:	40010400 	.word	0x40010400
 8007e24:	40014000 	.word	0x40014000
 8007e28:	40014400 	.word	0x40014400
 8007e2c:	40014800 	.word	0x40014800

08007e30 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a1e      	ldr	r2, [pc, #120]	; (8007eb4 <TIM_ResetCallback+0x84>)
 8007e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a1d      	ldr	r2, [pc, #116]	; (8007eb8 <TIM_ResetCallback+0x88>)
 8007e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a1c      	ldr	r2, [pc, #112]	; (8007ebc <TIM_ResetCallback+0x8c>)
 8007e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a1b      	ldr	r2, [pc, #108]	; (8007ec0 <TIM_ResetCallback+0x90>)
 8007e54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a1a      	ldr	r2, [pc, #104]	; (8007ec4 <TIM_ResetCallback+0x94>)
 8007e5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a19      	ldr	r2, [pc, #100]	; (8007ec8 <TIM_ResetCallback+0x98>)
 8007e64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a18      	ldr	r2, [pc, #96]	; (8007ecc <TIM_ResetCallback+0x9c>)
 8007e6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a17      	ldr	r2, [pc, #92]	; (8007ed0 <TIM_ResetCallback+0xa0>)
 8007e74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a16      	ldr	r2, [pc, #88]	; (8007ed4 <TIM_ResetCallback+0xa4>)
 8007e7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a15      	ldr	r2, [pc, #84]	; (8007ed8 <TIM_ResetCallback+0xa8>)
 8007e84:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a14      	ldr	r2, [pc, #80]	; (8007edc <TIM_ResetCallback+0xac>)
 8007e8c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a13      	ldr	r2, [pc, #76]	; (8007ee0 <TIM_ResetCallback+0xb0>)
 8007e94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a12      	ldr	r2, [pc, #72]	; (8007ee4 <TIM_ResetCallback+0xb4>)
 8007e9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a11      	ldr	r2, [pc, #68]	; (8007ee8 <TIM_ResetCallback+0xb8>)
 8007ea4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	08000e39 	.word	0x08000e39
 8007eb8:	08007c47 	.word	0x08007c47
 8007ebc:	08007cbf 	.word	0x08007cbf
 8007ec0:	08007cd3 	.word	0x08007cd3
 8007ec4:	08007c6f 	.word	0x08007c6f
 8007ec8:	08007c83 	.word	0x08007c83
 8007ecc:	08007c5b 	.word	0x08007c5b
 8007ed0:	08007c97 	.word	0x08007c97
 8007ed4:	08007cab 	.word	0x08007cab
 8007ed8:	08007ce7 	.word	0x08007ce7
 8007edc:	08007ffd 	.word	0x08007ffd
 8007ee0:	08008011 	.word	0x08008011
 8007ee4:	08008025 	.word	0x08008025
 8007ee8:	08008039 	.word	0x08008039

08007eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e068      	b.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a2e      	ldr	r2, [pc, #184]	; (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d004      	beq.n	8007f38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a2d      	ldr	r2, [pc, #180]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d108      	bne.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a1e      	ldr	r2, [pc, #120]	; (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d01d      	beq.n	8007faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f76:	d018      	beq.n	8007faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1b      	ldr	r2, [pc, #108]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d013      	beq.n	8007faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1a      	ldr	r2, [pc, #104]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d00e      	beq.n	8007faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a18      	ldr	r2, [pc, #96]	; (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d009      	beq.n	8007faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a13      	ldr	r2, [pc, #76]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d004      	beq.n	8007faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a14      	ldr	r2, [pc, #80]	; (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d10c      	bne.n	8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	40010000 	.word	0x40010000
 8007fe8:	40010400 	.word	0x40010400
 8007fec:	40000400 	.word	0x40000400
 8007ff0:	40000800 	.word	0x40000800
 8007ff4:	40000c00 	.word	0x40000c00
 8007ff8:	40001800 	.word	0x40001800

08007ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e042      	b.n	80080e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008064:	2b00      	cmp	r3, #0
 8008066:	d106      	bne.n	8008076 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7f9 fbf1 	bl	8001858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2224      	movs	r2, #36	; 0x24
 800807a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0201 	bic.w	r2, r2, #1
 800808c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f8c2 	bl	8008218 <UART_SetConfig>
 8008094:	4603      	mov	r3, r0
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e022      	b.n	80080e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fe16 	bl	8008cd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689a      	ldr	r2, [r3, #8]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f042 0201 	orr.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fe9d 	bl	8008e1c <UART_CheckIdleState>
 80080e2:	4603      	mov	r3, r0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	4613      	mov	r3, r2
 80080fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008102:	2b20      	cmp	r3, #32
 8008104:	f040 8083 	bne.w	800820e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d002      	beq.n	8008114 <HAL_UART_Transmit+0x28>
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e07b      	b.n	8008210 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800811e:	2b01      	cmp	r3, #1
 8008120:	d101      	bne.n	8008126 <HAL_UART_Transmit+0x3a>
 8008122:	2302      	movs	r3, #2
 8008124:	e074      	b.n	8008210 <HAL_UART_Transmit+0x124>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2221      	movs	r2, #33	; 0x21
 800813a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800813e:	f7f9 fc61 	bl	8001a04 <HAL_GetTick>
 8008142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	88fa      	ldrh	r2, [r7, #6]
 8008148:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	88fa      	ldrh	r2, [r7, #6]
 8008150:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815c:	d108      	bne.n	8008170 <HAL_UART_Transmit+0x84>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008166:	2300      	movs	r3, #0
 8008168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	61bb      	str	r3, [r7, #24]
 800816e:	e003      	b.n	8008178 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008174:	2300      	movs	r3, #0
 8008176:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008180:	e02c      	b.n	80081dc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2200      	movs	r2, #0
 800818a:	2180      	movs	r1, #128	; 0x80
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 fe90 	bl	8008eb2 <UART_WaitOnFlagUntilTimeout>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e039      	b.n	8008210 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10b      	bne.n	80081ba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	3302      	adds	r3, #2
 80081b6:	61bb      	str	r3, [r7, #24]
 80081b8:	e007      	b.n	80081ca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	781a      	ldrb	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	3301      	adds	r3, #1
 80081c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	3b01      	subs	r3, #1
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1cc      	bne.n	8008182 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2200      	movs	r2, #0
 80081f0:	2140      	movs	r1, #64	; 0x40
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 fe5d 	bl	8008eb2 <UART_WaitOnFlagUntilTimeout>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e006      	b.n	8008210 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	e000      	b.n	8008210 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800820e:	2302      	movs	r3, #2
  }
}
 8008210:	4618      	mov	r0, r3
 8008212:	3720      	adds	r7, #32
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008218:	b5b0      	push	{r4, r5, r7, lr}
 800821a:	b08e      	sub	sp, #56	; 0x38
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	431a      	orrs	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	431a      	orrs	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	4313      	orrs	r3, r2
 800823c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	4bbf      	ldr	r3, [pc, #764]	; (8008544 <UART_SetConfig+0x32c>)
 8008246:	4013      	ands	r3, r2
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6812      	ldr	r2, [r2, #0]
 800824c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800824e:	430b      	orrs	r3, r1
 8008250:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4ab5      	ldr	r2, [pc, #724]	; (8008548 <UART_SetConfig+0x330>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d004      	beq.n	8008282 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800827e:	4313      	orrs	r3, r2
 8008280:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	4bb0      	ldr	r3, [pc, #704]	; (800854c <UART_SetConfig+0x334>)
 800828a:	4013      	ands	r3, r2
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	6812      	ldr	r2, [r2, #0]
 8008290:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008292:	430b      	orrs	r3, r1
 8008294:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	f023 010f 	bic.w	r1, r3, #15
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4aa7      	ldr	r2, [pc, #668]	; (8008550 <UART_SetConfig+0x338>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d176      	bne.n	80083a4 <UART_SetConfig+0x18c>
 80082b6:	4ba7      	ldr	r3, [pc, #668]	; (8008554 <UART_SetConfig+0x33c>)
 80082b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082be:	2b28      	cmp	r3, #40	; 0x28
 80082c0:	d86c      	bhi.n	800839c <UART_SetConfig+0x184>
 80082c2:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <UART_SetConfig+0xb0>)
 80082c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c8:	0800836d 	.word	0x0800836d
 80082cc:	0800839d 	.word	0x0800839d
 80082d0:	0800839d 	.word	0x0800839d
 80082d4:	0800839d 	.word	0x0800839d
 80082d8:	0800839d 	.word	0x0800839d
 80082dc:	0800839d 	.word	0x0800839d
 80082e0:	0800839d 	.word	0x0800839d
 80082e4:	0800839d 	.word	0x0800839d
 80082e8:	08008375 	.word	0x08008375
 80082ec:	0800839d 	.word	0x0800839d
 80082f0:	0800839d 	.word	0x0800839d
 80082f4:	0800839d 	.word	0x0800839d
 80082f8:	0800839d 	.word	0x0800839d
 80082fc:	0800839d 	.word	0x0800839d
 8008300:	0800839d 	.word	0x0800839d
 8008304:	0800839d 	.word	0x0800839d
 8008308:	0800837d 	.word	0x0800837d
 800830c:	0800839d 	.word	0x0800839d
 8008310:	0800839d 	.word	0x0800839d
 8008314:	0800839d 	.word	0x0800839d
 8008318:	0800839d 	.word	0x0800839d
 800831c:	0800839d 	.word	0x0800839d
 8008320:	0800839d 	.word	0x0800839d
 8008324:	0800839d 	.word	0x0800839d
 8008328:	08008385 	.word	0x08008385
 800832c:	0800839d 	.word	0x0800839d
 8008330:	0800839d 	.word	0x0800839d
 8008334:	0800839d 	.word	0x0800839d
 8008338:	0800839d 	.word	0x0800839d
 800833c:	0800839d 	.word	0x0800839d
 8008340:	0800839d 	.word	0x0800839d
 8008344:	0800839d 	.word	0x0800839d
 8008348:	0800838d 	.word	0x0800838d
 800834c:	0800839d 	.word	0x0800839d
 8008350:	0800839d 	.word	0x0800839d
 8008354:	0800839d 	.word	0x0800839d
 8008358:	0800839d 	.word	0x0800839d
 800835c:	0800839d 	.word	0x0800839d
 8008360:	0800839d 	.word	0x0800839d
 8008364:	0800839d 	.word	0x0800839d
 8008368:	08008395 	.word	0x08008395
 800836c:	2301      	movs	r3, #1
 800836e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008372:	e222      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008374:	2304      	movs	r3, #4
 8008376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800837a:	e21e      	b.n	80087ba <UART_SetConfig+0x5a2>
 800837c:	2308      	movs	r3, #8
 800837e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008382:	e21a      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008384:	2310      	movs	r3, #16
 8008386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800838a:	e216      	b.n	80087ba <UART_SetConfig+0x5a2>
 800838c:	2320      	movs	r3, #32
 800838e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008392:	e212      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008394:	2340      	movs	r3, #64	; 0x40
 8008396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800839a:	e20e      	b.n	80087ba <UART_SetConfig+0x5a2>
 800839c:	2380      	movs	r3, #128	; 0x80
 800839e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083a2:	e20a      	b.n	80087ba <UART_SetConfig+0x5a2>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a6b      	ldr	r2, [pc, #428]	; (8008558 <UART_SetConfig+0x340>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d130      	bne.n	8008410 <UART_SetConfig+0x1f8>
 80083ae:	4b69      	ldr	r3, [pc, #420]	; (8008554 <UART_SetConfig+0x33c>)
 80083b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b2:	f003 0307 	and.w	r3, r3, #7
 80083b6:	2b05      	cmp	r3, #5
 80083b8:	d826      	bhi.n	8008408 <UART_SetConfig+0x1f0>
 80083ba:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <UART_SetConfig+0x1a8>)
 80083bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c0:	080083d9 	.word	0x080083d9
 80083c4:	080083e1 	.word	0x080083e1
 80083c8:	080083e9 	.word	0x080083e9
 80083cc:	080083f1 	.word	0x080083f1
 80083d0:	080083f9 	.word	0x080083f9
 80083d4:	08008401 	.word	0x08008401
 80083d8:	2300      	movs	r3, #0
 80083da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083de:	e1ec      	b.n	80087ba <UART_SetConfig+0x5a2>
 80083e0:	2304      	movs	r3, #4
 80083e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083e6:	e1e8      	b.n	80087ba <UART_SetConfig+0x5a2>
 80083e8:	2308      	movs	r3, #8
 80083ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ee:	e1e4      	b.n	80087ba <UART_SetConfig+0x5a2>
 80083f0:	2310      	movs	r3, #16
 80083f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083f6:	e1e0      	b.n	80087ba <UART_SetConfig+0x5a2>
 80083f8:	2320      	movs	r3, #32
 80083fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083fe:	e1dc      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008400:	2340      	movs	r3, #64	; 0x40
 8008402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008406:	e1d8      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008408:	2380      	movs	r3, #128	; 0x80
 800840a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800840e:	e1d4      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a51      	ldr	r2, [pc, #324]	; (800855c <UART_SetConfig+0x344>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d130      	bne.n	800847c <UART_SetConfig+0x264>
 800841a:	4b4e      	ldr	r3, [pc, #312]	; (8008554 <UART_SetConfig+0x33c>)
 800841c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	2b05      	cmp	r3, #5
 8008424:	d826      	bhi.n	8008474 <UART_SetConfig+0x25c>
 8008426:	a201      	add	r2, pc, #4	; (adr r2, 800842c <UART_SetConfig+0x214>)
 8008428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842c:	08008445 	.word	0x08008445
 8008430:	0800844d 	.word	0x0800844d
 8008434:	08008455 	.word	0x08008455
 8008438:	0800845d 	.word	0x0800845d
 800843c:	08008465 	.word	0x08008465
 8008440:	0800846d 	.word	0x0800846d
 8008444:	2300      	movs	r3, #0
 8008446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800844a:	e1b6      	b.n	80087ba <UART_SetConfig+0x5a2>
 800844c:	2304      	movs	r3, #4
 800844e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008452:	e1b2      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008454:	2308      	movs	r3, #8
 8008456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800845a:	e1ae      	b.n	80087ba <UART_SetConfig+0x5a2>
 800845c:	2310      	movs	r3, #16
 800845e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008462:	e1aa      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008464:	2320      	movs	r3, #32
 8008466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800846a:	e1a6      	b.n	80087ba <UART_SetConfig+0x5a2>
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008472:	e1a2      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008474:	2380      	movs	r3, #128	; 0x80
 8008476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800847a:	e19e      	b.n	80087ba <UART_SetConfig+0x5a2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a37      	ldr	r2, [pc, #220]	; (8008560 <UART_SetConfig+0x348>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d130      	bne.n	80084e8 <UART_SetConfig+0x2d0>
 8008486:	4b33      	ldr	r3, [pc, #204]	; (8008554 <UART_SetConfig+0x33c>)
 8008488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	2b05      	cmp	r3, #5
 8008490:	d826      	bhi.n	80084e0 <UART_SetConfig+0x2c8>
 8008492:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <UART_SetConfig+0x280>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084b1 	.word	0x080084b1
 800849c:	080084b9 	.word	0x080084b9
 80084a0:	080084c1 	.word	0x080084c1
 80084a4:	080084c9 	.word	0x080084c9
 80084a8:	080084d1 	.word	0x080084d1
 80084ac:	080084d9 	.word	0x080084d9
 80084b0:	2300      	movs	r3, #0
 80084b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084b6:	e180      	b.n	80087ba <UART_SetConfig+0x5a2>
 80084b8:	2304      	movs	r3, #4
 80084ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084be:	e17c      	b.n	80087ba <UART_SetConfig+0x5a2>
 80084c0:	2308      	movs	r3, #8
 80084c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084c6:	e178      	b.n	80087ba <UART_SetConfig+0x5a2>
 80084c8:	2310      	movs	r3, #16
 80084ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ce:	e174      	b.n	80087ba <UART_SetConfig+0x5a2>
 80084d0:	2320      	movs	r3, #32
 80084d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084d6:	e170      	b.n	80087ba <UART_SetConfig+0x5a2>
 80084d8:	2340      	movs	r3, #64	; 0x40
 80084da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084de:	e16c      	b.n	80087ba <UART_SetConfig+0x5a2>
 80084e0:	2380      	movs	r3, #128	; 0x80
 80084e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084e6:	e168      	b.n	80087ba <UART_SetConfig+0x5a2>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a1d      	ldr	r2, [pc, #116]	; (8008564 <UART_SetConfig+0x34c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d142      	bne.n	8008578 <UART_SetConfig+0x360>
 80084f2:	4b18      	ldr	r3, [pc, #96]	; (8008554 <UART_SetConfig+0x33c>)
 80084f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b05      	cmp	r3, #5
 80084fc:	d838      	bhi.n	8008570 <UART_SetConfig+0x358>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <UART_SetConfig+0x2ec>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	0800851d 	.word	0x0800851d
 8008508:	08008525 	.word	0x08008525
 800850c:	0800852d 	.word	0x0800852d
 8008510:	08008535 	.word	0x08008535
 8008514:	0800853d 	.word	0x0800853d
 8008518:	08008569 	.word	0x08008569
 800851c:	2300      	movs	r3, #0
 800851e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008522:	e14a      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008524:	2304      	movs	r3, #4
 8008526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800852a:	e146      	b.n	80087ba <UART_SetConfig+0x5a2>
 800852c:	2308      	movs	r3, #8
 800852e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008532:	e142      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008534:	2310      	movs	r3, #16
 8008536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800853a:	e13e      	b.n	80087ba <UART_SetConfig+0x5a2>
 800853c:	2320      	movs	r3, #32
 800853e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008542:	e13a      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008544:	cfff69f3 	.word	0xcfff69f3
 8008548:	58000c00 	.word	0x58000c00
 800854c:	11fff4ff 	.word	0x11fff4ff
 8008550:	40011000 	.word	0x40011000
 8008554:	58024400 	.word	0x58024400
 8008558:	40004400 	.word	0x40004400
 800855c:	40004800 	.word	0x40004800
 8008560:	40004c00 	.word	0x40004c00
 8008564:	40005000 	.word	0x40005000
 8008568:	2340      	movs	r3, #64	; 0x40
 800856a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800856e:	e124      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008570:	2380      	movs	r3, #128	; 0x80
 8008572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008576:	e120      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4acc      	ldr	r2, [pc, #816]	; (80088b0 <UART_SetConfig+0x698>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d176      	bne.n	8008670 <UART_SetConfig+0x458>
 8008582:	4bcc      	ldr	r3, [pc, #816]	; (80088b4 <UART_SetConfig+0x69c>)
 8008584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800858a:	2b28      	cmp	r3, #40	; 0x28
 800858c:	d86c      	bhi.n	8008668 <UART_SetConfig+0x450>
 800858e:	a201      	add	r2, pc, #4	; (adr r2, 8008594 <UART_SetConfig+0x37c>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	08008639 	.word	0x08008639
 8008598:	08008669 	.word	0x08008669
 800859c:	08008669 	.word	0x08008669
 80085a0:	08008669 	.word	0x08008669
 80085a4:	08008669 	.word	0x08008669
 80085a8:	08008669 	.word	0x08008669
 80085ac:	08008669 	.word	0x08008669
 80085b0:	08008669 	.word	0x08008669
 80085b4:	08008641 	.word	0x08008641
 80085b8:	08008669 	.word	0x08008669
 80085bc:	08008669 	.word	0x08008669
 80085c0:	08008669 	.word	0x08008669
 80085c4:	08008669 	.word	0x08008669
 80085c8:	08008669 	.word	0x08008669
 80085cc:	08008669 	.word	0x08008669
 80085d0:	08008669 	.word	0x08008669
 80085d4:	08008649 	.word	0x08008649
 80085d8:	08008669 	.word	0x08008669
 80085dc:	08008669 	.word	0x08008669
 80085e0:	08008669 	.word	0x08008669
 80085e4:	08008669 	.word	0x08008669
 80085e8:	08008669 	.word	0x08008669
 80085ec:	08008669 	.word	0x08008669
 80085f0:	08008669 	.word	0x08008669
 80085f4:	08008651 	.word	0x08008651
 80085f8:	08008669 	.word	0x08008669
 80085fc:	08008669 	.word	0x08008669
 8008600:	08008669 	.word	0x08008669
 8008604:	08008669 	.word	0x08008669
 8008608:	08008669 	.word	0x08008669
 800860c:	08008669 	.word	0x08008669
 8008610:	08008669 	.word	0x08008669
 8008614:	08008659 	.word	0x08008659
 8008618:	08008669 	.word	0x08008669
 800861c:	08008669 	.word	0x08008669
 8008620:	08008669 	.word	0x08008669
 8008624:	08008669 	.word	0x08008669
 8008628:	08008669 	.word	0x08008669
 800862c:	08008669 	.word	0x08008669
 8008630:	08008669 	.word	0x08008669
 8008634:	08008661 	.word	0x08008661
 8008638:	2301      	movs	r3, #1
 800863a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800863e:	e0bc      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008640:	2304      	movs	r3, #4
 8008642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008646:	e0b8      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008648:	2308      	movs	r3, #8
 800864a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800864e:	e0b4      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008650:	2310      	movs	r3, #16
 8008652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008656:	e0b0      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008658:	2320      	movs	r3, #32
 800865a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800865e:	e0ac      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008660:	2340      	movs	r3, #64	; 0x40
 8008662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008666:	e0a8      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008668:	2380      	movs	r3, #128	; 0x80
 800866a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800866e:	e0a4      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a90      	ldr	r2, [pc, #576]	; (80088b8 <UART_SetConfig+0x6a0>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d130      	bne.n	80086dc <UART_SetConfig+0x4c4>
 800867a:	4b8e      	ldr	r3, [pc, #568]	; (80088b4 <UART_SetConfig+0x69c>)
 800867c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867e:	f003 0307 	and.w	r3, r3, #7
 8008682:	2b05      	cmp	r3, #5
 8008684:	d826      	bhi.n	80086d4 <UART_SetConfig+0x4bc>
 8008686:	a201      	add	r2, pc, #4	; (adr r2, 800868c <UART_SetConfig+0x474>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	080086a5 	.word	0x080086a5
 8008690:	080086ad 	.word	0x080086ad
 8008694:	080086b5 	.word	0x080086b5
 8008698:	080086bd 	.word	0x080086bd
 800869c:	080086c5 	.word	0x080086c5
 80086a0:	080086cd 	.word	0x080086cd
 80086a4:	2300      	movs	r3, #0
 80086a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086aa:	e086      	b.n	80087ba <UART_SetConfig+0x5a2>
 80086ac:	2304      	movs	r3, #4
 80086ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086b2:	e082      	b.n	80087ba <UART_SetConfig+0x5a2>
 80086b4:	2308      	movs	r3, #8
 80086b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ba:	e07e      	b.n	80087ba <UART_SetConfig+0x5a2>
 80086bc:	2310      	movs	r3, #16
 80086be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086c2:	e07a      	b.n	80087ba <UART_SetConfig+0x5a2>
 80086c4:	2320      	movs	r3, #32
 80086c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ca:	e076      	b.n	80087ba <UART_SetConfig+0x5a2>
 80086cc:	2340      	movs	r3, #64	; 0x40
 80086ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086d2:	e072      	b.n	80087ba <UART_SetConfig+0x5a2>
 80086d4:	2380      	movs	r3, #128	; 0x80
 80086d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086da:	e06e      	b.n	80087ba <UART_SetConfig+0x5a2>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a76      	ldr	r2, [pc, #472]	; (80088bc <UART_SetConfig+0x6a4>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d130      	bne.n	8008748 <UART_SetConfig+0x530>
 80086e6:	4b73      	ldr	r3, [pc, #460]	; (80088b4 <UART_SetConfig+0x69c>)
 80086e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ea:	f003 0307 	and.w	r3, r3, #7
 80086ee:	2b05      	cmp	r3, #5
 80086f0:	d826      	bhi.n	8008740 <UART_SetConfig+0x528>
 80086f2:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <UART_SetConfig+0x4e0>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	08008711 	.word	0x08008711
 80086fc:	08008719 	.word	0x08008719
 8008700:	08008721 	.word	0x08008721
 8008704:	08008729 	.word	0x08008729
 8008708:	08008731 	.word	0x08008731
 800870c:	08008739 	.word	0x08008739
 8008710:	2300      	movs	r3, #0
 8008712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008716:	e050      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008718:	2304      	movs	r3, #4
 800871a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800871e:	e04c      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008720:	2308      	movs	r3, #8
 8008722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008726:	e048      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008728:	2310      	movs	r3, #16
 800872a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800872e:	e044      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008730:	2320      	movs	r3, #32
 8008732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008736:	e040      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008738:	2340      	movs	r3, #64	; 0x40
 800873a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800873e:	e03c      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008740:	2380      	movs	r3, #128	; 0x80
 8008742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008746:	e038      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a5c      	ldr	r2, [pc, #368]	; (80088c0 <UART_SetConfig+0x6a8>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d130      	bne.n	80087b4 <UART_SetConfig+0x59c>
 8008752:	4b58      	ldr	r3, [pc, #352]	; (80088b4 <UART_SetConfig+0x69c>)
 8008754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b05      	cmp	r3, #5
 800875c:	d826      	bhi.n	80087ac <UART_SetConfig+0x594>
 800875e:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <UART_SetConfig+0x54c>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	0800877d 	.word	0x0800877d
 8008768:	08008785 	.word	0x08008785
 800876c:	0800878d 	.word	0x0800878d
 8008770:	08008795 	.word	0x08008795
 8008774:	0800879d 	.word	0x0800879d
 8008778:	080087a5 	.word	0x080087a5
 800877c:	2302      	movs	r3, #2
 800877e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008782:	e01a      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008784:	2304      	movs	r3, #4
 8008786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800878a:	e016      	b.n	80087ba <UART_SetConfig+0x5a2>
 800878c:	2308      	movs	r3, #8
 800878e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008792:	e012      	b.n	80087ba <UART_SetConfig+0x5a2>
 8008794:	2310      	movs	r3, #16
 8008796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800879a:	e00e      	b.n	80087ba <UART_SetConfig+0x5a2>
 800879c:	2320      	movs	r3, #32
 800879e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087a2:	e00a      	b.n	80087ba <UART_SetConfig+0x5a2>
 80087a4:	2340      	movs	r3, #64	; 0x40
 80087a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087aa:	e006      	b.n	80087ba <UART_SetConfig+0x5a2>
 80087ac:	2380      	movs	r3, #128	; 0x80
 80087ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087b2:	e002      	b.n	80087ba <UART_SetConfig+0x5a2>
 80087b4:	2380      	movs	r3, #128	; 0x80
 80087b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a40      	ldr	r2, [pc, #256]	; (80088c0 <UART_SetConfig+0x6a8>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	f040 80ef 	bne.w	80089a4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	dc46      	bgt.n	800885c <UART_SetConfig+0x644>
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	f2c0 8081 	blt.w	80088d6 <UART_SetConfig+0x6be>
 80087d4:	3b02      	subs	r3, #2
 80087d6:	2b1e      	cmp	r3, #30
 80087d8:	d87d      	bhi.n	80088d6 <UART_SetConfig+0x6be>
 80087da:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <UART_SetConfig+0x5c8>)
 80087dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e0:	08008863 	.word	0x08008863
 80087e4:	080088d7 	.word	0x080088d7
 80087e8:	0800886b 	.word	0x0800886b
 80087ec:	080088d7 	.word	0x080088d7
 80087f0:	080088d7 	.word	0x080088d7
 80087f4:	080088d7 	.word	0x080088d7
 80087f8:	0800887b 	.word	0x0800887b
 80087fc:	080088d7 	.word	0x080088d7
 8008800:	080088d7 	.word	0x080088d7
 8008804:	080088d7 	.word	0x080088d7
 8008808:	080088d7 	.word	0x080088d7
 800880c:	080088d7 	.word	0x080088d7
 8008810:	080088d7 	.word	0x080088d7
 8008814:	080088d7 	.word	0x080088d7
 8008818:	0800888b 	.word	0x0800888b
 800881c:	080088d7 	.word	0x080088d7
 8008820:	080088d7 	.word	0x080088d7
 8008824:	080088d7 	.word	0x080088d7
 8008828:	080088d7 	.word	0x080088d7
 800882c:	080088d7 	.word	0x080088d7
 8008830:	080088d7 	.word	0x080088d7
 8008834:	080088d7 	.word	0x080088d7
 8008838:	080088d7 	.word	0x080088d7
 800883c:	080088d7 	.word	0x080088d7
 8008840:	080088d7 	.word	0x080088d7
 8008844:	080088d7 	.word	0x080088d7
 8008848:	080088d7 	.word	0x080088d7
 800884c:	080088d7 	.word	0x080088d7
 8008850:	080088d7 	.word	0x080088d7
 8008854:	080088d7 	.word	0x080088d7
 8008858:	080088c9 	.word	0x080088c9
 800885c:	2b40      	cmp	r3, #64	; 0x40
 800885e:	d036      	beq.n	80088ce <UART_SetConfig+0x6b6>
 8008860:	e039      	b.n	80088d6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008862:	f7fc fbf1 	bl	8005048 <HAL_RCCEx_GetD3PCLK1Freq>
 8008866:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008868:	e03b      	b.n	80088e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800886a:	f107 0314 	add.w	r3, r7, #20
 800886e:	4618      	mov	r0, r3
 8008870:	f7fc fc00 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008878:	e033      	b.n	80088e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800887a:	f107 0308 	add.w	r3, r7, #8
 800887e:	4618      	mov	r0, r3
 8008880:	f7fc fd4c 	bl	800531c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008888:	e02b      	b.n	80088e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800888a:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <UART_SetConfig+0x69c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008896:	4b07      	ldr	r3, [pc, #28]	; (80088b4 <UART_SetConfig+0x69c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	08db      	lsrs	r3, r3, #3
 800889c:	f003 0303 	and.w	r3, r3, #3
 80088a0:	4a08      	ldr	r2, [pc, #32]	; (80088c4 <UART_SetConfig+0x6ac>)
 80088a2:	fa22 f303 	lsr.w	r3, r2, r3
 80088a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088a8:	e01b      	b.n	80088e2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80088aa:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <UART_SetConfig+0x6ac>)
 80088ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088ae:	e018      	b.n	80088e2 <UART_SetConfig+0x6ca>
 80088b0:	40011400 	.word	0x40011400
 80088b4:	58024400 	.word	0x58024400
 80088b8:	40007800 	.word	0x40007800
 80088bc:	40007c00 	.word	0x40007c00
 80088c0:	58000c00 	.word	0x58000c00
 80088c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088c8:	4bc4      	ldr	r3, [pc, #784]	; (8008bdc <UART_SetConfig+0x9c4>)
 80088ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088cc:	e009      	b.n	80088e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088d4:	e005      	b.n	80088e2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80088e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 81da 	beq.w	8008c9e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	4abc      	ldr	r2, [pc, #752]	; (8008be0 <UART_SetConfig+0x9c8>)
 80088f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f4:	461a      	mov	r2, r3
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088fc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	4613      	mov	r3, r2
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	4413      	add	r3, r2
 8008908:	6a3a      	ldr	r2, [r7, #32]
 800890a:	429a      	cmp	r2, r3
 800890c:	d305      	bcc.n	800891a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008914:	6a3a      	ldr	r2, [r7, #32]
 8008916:	429a      	cmp	r2, r3
 8008918:	d903      	bls.n	8008922 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008920:	e1bd      	b.n	8008c9e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008924:	4618      	mov	r0, r3
 8008926:	f04f 0100 	mov.w	r1, #0
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	4aac      	ldr	r2, [pc, #688]	; (8008be0 <UART_SetConfig+0x9c8>)
 8008930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008934:	b29a      	uxth	r2, r3
 8008936:	f04f 0300 	mov.w	r3, #0
 800893a:	f7f7 fcd1 	bl	80002e0 <__aeabi_uldivmod>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4610      	mov	r0, r2
 8008944:	4619      	mov	r1, r3
 8008946:	f04f 0200 	mov.w	r2, #0
 800894a:	f04f 0300 	mov.w	r3, #0
 800894e:	020b      	lsls	r3, r1, #8
 8008950:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008954:	0202      	lsls	r2, r0, #8
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	6849      	ldr	r1, [r1, #4]
 800895a:	0849      	lsrs	r1, r1, #1
 800895c:	4608      	mov	r0, r1
 800895e:	f04f 0100 	mov.w	r1, #0
 8008962:	1814      	adds	r4, r2, r0
 8008964:	eb43 0501 	adc.w	r5, r3, r1
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	461a      	mov	r2, r3
 800896e:	f04f 0300 	mov.w	r3, #0
 8008972:	4620      	mov	r0, r4
 8008974:	4629      	mov	r1, r5
 8008976:	f7f7 fcb3 	bl	80002e0 <__aeabi_uldivmod>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4613      	mov	r3, r2
 8008980:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008988:	d308      	bcc.n	800899c <UART_SetConfig+0x784>
 800898a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008990:	d204      	bcs.n	800899c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008998:	60da      	str	r2, [r3, #12]
 800899a:	e180      	b.n	8008c9e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80089a2:	e17c      	b.n	8008c9e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ac:	f040 80bf 	bne.w	8008b2e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80089b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089b4:	2b20      	cmp	r3, #32
 80089b6:	dc49      	bgt.n	8008a4c <UART_SetConfig+0x834>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	db7c      	blt.n	8008ab6 <UART_SetConfig+0x89e>
 80089bc:	2b20      	cmp	r3, #32
 80089be:	d87a      	bhi.n	8008ab6 <UART_SetConfig+0x89e>
 80089c0:	a201      	add	r2, pc, #4	; (adr r2, 80089c8 <UART_SetConfig+0x7b0>)
 80089c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c6:	bf00      	nop
 80089c8:	08008a53 	.word	0x08008a53
 80089cc:	08008a5b 	.word	0x08008a5b
 80089d0:	08008ab7 	.word	0x08008ab7
 80089d4:	08008ab7 	.word	0x08008ab7
 80089d8:	08008a63 	.word	0x08008a63
 80089dc:	08008ab7 	.word	0x08008ab7
 80089e0:	08008ab7 	.word	0x08008ab7
 80089e4:	08008ab7 	.word	0x08008ab7
 80089e8:	08008a73 	.word	0x08008a73
 80089ec:	08008ab7 	.word	0x08008ab7
 80089f0:	08008ab7 	.word	0x08008ab7
 80089f4:	08008ab7 	.word	0x08008ab7
 80089f8:	08008ab7 	.word	0x08008ab7
 80089fc:	08008ab7 	.word	0x08008ab7
 8008a00:	08008ab7 	.word	0x08008ab7
 8008a04:	08008ab7 	.word	0x08008ab7
 8008a08:	08008a83 	.word	0x08008a83
 8008a0c:	08008ab7 	.word	0x08008ab7
 8008a10:	08008ab7 	.word	0x08008ab7
 8008a14:	08008ab7 	.word	0x08008ab7
 8008a18:	08008ab7 	.word	0x08008ab7
 8008a1c:	08008ab7 	.word	0x08008ab7
 8008a20:	08008ab7 	.word	0x08008ab7
 8008a24:	08008ab7 	.word	0x08008ab7
 8008a28:	08008ab7 	.word	0x08008ab7
 8008a2c:	08008ab7 	.word	0x08008ab7
 8008a30:	08008ab7 	.word	0x08008ab7
 8008a34:	08008ab7 	.word	0x08008ab7
 8008a38:	08008ab7 	.word	0x08008ab7
 8008a3c:	08008ab7 	.word	0x08008ab7
 8008a40:	08008ab7 	.word	0x08008ab7
 8008a44:	08008ab7 	.word	0x08008ab7
 8008a48:	08008aa9 	.word	0x08008aa9
 8008a4c:	2b40      	cmp	r3, #64	; 0x40
 8008a4e:	d02e      	beq.n	8008aae <UART_SetConfig+0x896>
 8008a50:	e031      	b.n	8008ab6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a52:	f7fa fe79 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8008a56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a58:	e033      	b.n	8008ac2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a5a:	f7fa fe8b 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8008a5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a60:	e02f      	b.n	8008ac2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a62:	f107 0314 	add.w	r3, r7, #20
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fc fb04 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a70:	e027      	b.n	8008ac2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a72:	f107 0308 	add.w	r3, r7, #8
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fc fc50 	bl	800531c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a80:	e01f      	b.n	8008ac2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a82:	4b58      	ldr	r3, [pc, #352]	; (8008be4 <UART_SetConfig+0x9cc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d009      	beq.n	8008aa2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a8e:	4b55      	ldr	r3, [pc, #340]	; (8008be4 <UART_SetConfig+0x9cc>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	08db      	lsrs	r3, r3, #3
 8008a94:	f003 0303 	and.w	r3, r3, #3
 8008a98:	4a53      	ldr	r2, [pc, #332]	; (8008be8 <UART_SetConfig+0x9d0>)
 8008a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008aa0:	e00f      	b.n	8008ac2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008aa2:	4b51      	ldr	r3, [pc, #324]	; (8008be8 <UART_SetConfig+0x9d0>)
 8008aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aa6:	e00c      	b.n	8008ac2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008aa8:	4b4c      	ldr	r3, [pc, #304]	; (8008bdc <UART_SetConfig+0x9c4>)
 8008aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aac:	e009      	b.n	8008ac2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ab4:	e005      	b.n	8008ac2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008ac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 80ea 	beq.w	8008c9e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	4a44      	ldr	r2, [pc, #272]	; (8008be0 <UART_SetConfig+0x9c8>)
 8008ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008adc:	005a      	lsls	r2, r3, #1
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	085b      	lsrs	r3, r3, #1
 8008ae4:	441a      	add	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af4:	2b0f      	cmp	r3, #15
 8008af6:	d916      	bls.n	8008b26 <UART_SetConfig+0x90e>
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008afe:	d212      	bcs.n	8008b26 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	f023 030f 	bic.w	r3, r3, #15
 8008b08:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0c:	085b      	lsrs	r3, r3, #1
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008b22:	60da      	str	r2, [r3, #12]
 8008b24:	e0bb      	b.n	8008c9e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008b2c:	e0b7      	b.n	8008c9e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b32:	2b20      	cmp	r3, #32
 8008b34:	dc4a      	bgt.n	8008bcc <UART_SetConfig+0x9b4>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f2c0 8086 	blt.w	8008c48 <UART_SetConfig+0xa30>
 8008b3c:	2b20      	cmp	r3, #32
 8008b3e:	f200 8083 	bhi.w	8008c48 <UART_SetConfig+0xa30>
 8008b42:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <UART_SetConfig+0x930>)
 8008b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b48:	08008bd3 	.word	0x08008bd3
 8008b4c:	08008bed 	.word	0x08008bed
 8008b50:	08008c49 	.word	0x08008c49
 8008b54:	08008c49 	.word	0x08008c49
 8008b58:	08008bf5 	.word	0x08008bf5
 8008b5c:	08008c49 	.word	0x08008c49
 8008b60:	08008c49 	.word	0x08008c49
 8008b64:	08008c49 	.word	0x08008c49
 8008b68:	08008c05 	.word	0x08008c05
 8008b6c:	08008c49 	.word	0x08008c49
 8008b70:	08008c49 	.word	0x08008c49
 8008b74:	08008c49 	.word	0x08008c49
 8008b78:	08008c49 	.word	0x08008c49
 8008b7c:	08008c49 	.word	0x08008c49
 8008b80:	08008c49 	.word	0x08008c49
 8008b84:	08008c49 	.word	0x08008c49
 8008b88:	08008c15 	.word	0x08008c15
 8008b8c:	08008c49 	.word	0x08008c49
 8008b90:	08008c49 	.word	0x08008c49
 8008b94:	08008c49 	.word	0x08008c49
 8008b98:	08008c49 	.word	0x08008c49
 8008b9c:	08008c49 	.word	0x08008c49
 8008ba0:	08008c49 	.word	0x08008c49
 8008ba4:	08008c49 	.word	0x08008c49
 8008ba8:	08008c49 	.word	0x08008c49
 8008bac:	08008c49 	.word	0x08008c49
 8008bb0:	08008c49 	.word	0x08008c49
 8008bb4:	08008c49 	.word	0x08008c49
 8008bb8:	08008c49 	.word	0x08008c49
 8008bbc:	08008c49 	.word	0x08008c49
 8008bc0:	08008c49 	.word	0x08008c49
 8008bc4:	08008c49 	.word	0x08008c49
 8008bc8:	08008c3b 	.word	0x08008c3b
 8008bcc:	2b40      	cmp	r3, #64	; 0x40
 8008bce:	d037      	beq.n	8008c40 <UART_SetConfig+0xa28>
 8008bd0:	e03a      	b.n	8008c48 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bd2:	f7fa fdb9 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8008bd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008bd8:	e03c      	b.n	8008c54 <UART_SetConfig+0xa3c>
 8008bda:	bf00      	nop
 8008bdc:	003d0900 	.word	0x003d0900
 8008be0:	08010afc 	.word	0x08010afc
 8008be4:	58024400 	.word	0x58024400
 8008be8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bec:	f7fa fdc2 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8008bf0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008bf2:	e02f      	b.n	8008c54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bf4:	f107 0314 	add.w	r3, r7, #20
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fc fa3b 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c02:	e027      	b.n	8008c54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c04:	f107 0308 	add.w	r3, r7, #8
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fc fb87 	bl	800531c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c12:	e01f      	b.n	8008c54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c14:	4b2c      	ldr	r3, [pc, #176]	; (8008cc8 <UART_SetConfig+0xab0>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0320 	and.w	r3, r3, #32
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d009      	beq.n	8008c34 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c20:	4b29      	ldr	r3, [pc, #164]	; (8008cc8 <UART_SetConfig+0xab0>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	08db      	lsrs	r3, r3, #3
 8008c26:	f003 0303 	and.w	r3, r3, #3
 8008c2a:	4a28      	ldr	r2, [pc, #160]	; (8008ccc <UART_SetConfig+0xab4>)
 8008c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c32:	e00f      	b.n	8008c54 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008c34:	4b25      	ldr	r3, [pc, #148]	; (8008ccc <UART_SetConfig+0xab4>)
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c38:	e00c      	b.n	8008c54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c3a:	4b25      	ldr	r3, [pc, #148]	; (8008cd0 <UART_SetConfig+0xab8>)
 8008c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c3e:	e009      	b.n	8008c54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c46:	e005      	b.n	8008c54 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008c52:	bf00      	nop
    }

    if (pclk != 0U)
 8008c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d021      	beq.n	8008c9e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	4a1d      	ldr	r2, [pc, #116]	; (8008cd4 <UART_SetConfig+0xabc>)
 8008c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c64:	461a      	mov	r2, r3
 8008c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c68:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	085b      	lsrs	r3, r3, #1
 8008c72:	441a      	add	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c82:	2b0f      	cmp	r3, #15
 8008c84:	d908      	bls.n	8008c98 <UART_SetConfig+0xa80>
 8008c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c8c:	d204      	bcs.n	8008c98 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c94:	60da      	str	r2, [r3, #12]
 8008c96:	e002      	b.n	8008c9e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008cba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3738      	adds	r7, #56	; 0x38
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	58024400 	.word	0x58024400
 8008ccc:	03d09000 	.word	0x03d09000
 8008cd0:	003d0900 	.word	0x003d0900
 8008cd4:	08010afc 	.word	0x08010afc

08008cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00a      	beq.n	8008d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00a      	beq.n	8008d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	430a      	orrs	r2, r1
 8008d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d28:	f003 0304 	and.w	r3, r3, #4
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00a      	beq.n	8008d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	430a      	orrs	r2, r1
 8008d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4a:	f003 0308 	and.w	r3, r3, #8
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00a      	beq.n	8008d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	430a      	orrs	r2, r1
 8008d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6c:	f003 0310 	and.w	r3, r3, #16
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00a      	beq.n	8008d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	430a      	orrs	r2, r1
 8008daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d01a      	beq.n	8008dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dd6:	d10a      	bne.n	8008dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00a      	beq.n	8008e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	605a      	str	r2, [r3, #4]
  }
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af02      	add	r7, sp, #8
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e2c:	f7f8 fdea 	bl	8001a04 <HAL_GetTick>
 8008e30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0308 	and.w	r3, r3, #8
 8008e3c:	2b08      	cmp	r3, #8
 8008e3e:	d10e      	bne.n	8008e5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f82f 	bl	8008eb2 <UART_WaitOnFlagUntilTimeout>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e025      	b.n	8008eaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0304 	and.w	r3, r3, #4
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d10e      	bne.n	8008e8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f819 	bl	8008eb2 <UART_WaitOnFlagUntilTimeout>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e00f      	b.n	8008eaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2220      	movs	r2, #32
 8008e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	60f8      	str	r0, [r7, #12]
 8008eba:	60b9      	str	r1, [r7, #8]
 8008ebc:	603b      	str	r3, [r7, #0]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec2:	e062      	b.n	8008f8a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eca:	d05e      	beq.n	8008f8a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ecc:	f7f8 fd9a 	bl	8001a04 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	69ba      	ldr	r2, [r7, #24]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d302      	bcc.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d11d      	bne.n	8008f1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ef0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	689a      	ldr	r2, [r3, #8]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 0201 	bic.w	r2, r2, #1
 8008f00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2220      	movs	r2, #32
 8008f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2220      	movs	r2, #32
 8008f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e045      	b.n	8008faa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0304 	and.w	r3, r3, #4
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d02e      	beq.n	8008f8a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f3a:	d126      	bne.n	8008f8a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f54:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0201 	bic.w	r2, r2, #1
 8008f64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2220      	movs	r2, #32
 8008f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e00f      	b.n	8008faa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69da      	ldr	r2, [r3, #28]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	4013      	ands	r3, r2
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	bf0c      	ite	eq
 8008f9a:	2301      	moveq	r3, #1
 8008f9c:	2300      	movne	r3, #0
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	79fb      	ldrb	r3, [r7, #7]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d08d      	beq.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b085      	sub	sp, #20
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d101      	bne.n	8008fc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	e027      	b.n	8009018 <HAL_UARTEx_DisableFifoMode+0x66>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2224      	movs	r2, #36	; 0x24
 8008fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 0201 	bic.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ff6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2220      	movs	r2, #32
 800900a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009034:	2b01      	cmp	r3, #1
 8009036:	d101      	bne.n	800903c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009038:	2302      	movs	r3, #2
 800903a:	e02d      	b.n	8009098 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2224      	movs	r2, #36	; 0x24
 8009048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f022 0201 	bic.w	r2, r2, #1
 8009062:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	430a      	orrs	r2, r1
 8009076:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f84f 	bl	800911c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2220      	movs	r2, #32
 800908a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d101      	bne.n	80090b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090b4:	2302      	movs	r3, #2
 80090b6:	e02d      	b.n	8009114 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2224      	movs	r2, #36	; 0x24
 80090c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f022 0201 	bic.w	r2, r2, #1
 80090de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f811 	bl	800911c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2220      	movs	r2, #32
 8009106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009128:	2b00      	cmp	r3, #0
 800912a:	d108      	bne.n	800913e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800913c:	e031      	b.n	80091a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800913e:	2310      	movs	r3, #16
 8009140:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009142:	2310      	movs	r3, #16
 8009144:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	0e5b      	lsrs	r3, r3, #25
 800914e:	b2db      	uxtb	r3, r3
 8009150:	f003 0307 	and.w	r3, r3, #7
 8009154:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	0f5b      	lsrs	r3, r3, #29
 800915e:	b2db      	uxtb	r3, r3
 8009160:	f003 0307 	and.w	r3, r3, #7
 8009164:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	7b3a      	ldrb	r2, [r7, #12]
 800916a:	4911      	ldr	r1, [pc, #68]	; (80091b0 <UARTEx_SetNbDataToProcess+0x94>)
 800916c:	5c8a      	ldrb	r2, [r1, r2]
 800916e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009172:	7b3a      	ldrb	r2, [r7, #12]
 8009174:	490f      	ldr	r1, [pc, #60]	; (80091b4 <UARTEx_SetNbDataToProcess+0x98>)
 8009176:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009178:	fb93 f3f2 	sdiv	r3, r3, r2
 800917c:	b29a      	uxth	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	7b7a      	ldrb	r2, [r7, #13]
 8009188:	4909      	ldr	r1, [pc, #36]	; (80091b0 <UARTEx_SetNbDataToProcess+0x94>)
 800918a:	5c8a      	ldrb	r2, [r1, r2]
 800918c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009190:	7b7a      	ldrb	r2, [r7, #13]
 8009192:	4908      	ldr	r1, [pc, #32]	; (80091b4 <UARTEx_SetNbDataToProcess+0x98>)
 8009194:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009196:	fb93 f3f2 	sdiv	r3, r3, r2
 800919a:	b29a      	uxth	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80091a2:	bf00      	nop
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	08010b14 	.word	0x08010b14
 80091b4:	08010b1c 	.word	0x08010b1c

080091b8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b087      	sub	sp, #28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	6812      	ldr	r2, [r2, #0]
 80091d0:	f023 0101 	bic.w	r1, r3, #1
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	2b08      	cmp	r3, #8
 80091e0:	d102      	bne.n	80091e8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80091e2:	2340      	movs	r3, #64	; 0x40
 80091e4:	617b      	str	r3, [r7, #20]
 80091e6:	e001      	b.n	80091ec <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80091e8:	2300      	movs	r3, #0
 80091ea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80091f8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80091fe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009204:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800920a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009210:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8009216:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800921c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009222:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8009228:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800922e:	4313      	orrs	r3, r2
 8009230:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4313      	orrs	r3, r2
 800923a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	4313      	orrs	r3, r2
 8009244:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4313      	orrs	r3, r2
 800924e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8009250:	4b20      	ldr	r3, [pc, #128]	; (80092d4 <FMC_NORSRAM_Init+0x11c>)
 8009252:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800925a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009262:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800926a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	43db      	mvns	r3, r3
 800927a:	ea02 0103 	and.w	r1, r2, r3
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	4319      	orrs	r1, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009294:	d10c      	bne.n	80092b0 <FMC_NORSRAM_Init+0xf8>
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d008      	beq.n	80092b0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	431a      	orrs	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d006      	beq.n	80092c6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c0:	431a      	orrs	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	371c      	adds	r7, #28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	0008fb7f 	.word	0x0008fb7f

080092d8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ee:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	011b      	lsls	r3, r3, #4
 80092fc:	431a      	orrs	r2, r3
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	021b      	lsls	r3, r3, #8
 8009304:	431a      	orrs	r2, r3
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	041b      	lsls	r3, r3, #16
 800930c:	431a      	orrs	r2, r3
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	3b01      	subs	r3, #1
 8009314:	051b      	lsls	r3, r3, #20
 8009316:	431a      	orrs	r2, r3
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	3b02      	subs	r3, #2
 800931e:	061b      	lsls	r3, r3, #24
 8009320:	431a      	orrs	r2, r3
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	4313      	orrs	r3, r2
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	3201      	adds	r2, #1
 800932c:	4319      	orrs	r1, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800933c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009340:	d113      	bne.n	800936a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800934a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	3b01      	subs	r3, #1
 8009352:	051b      	lsls	r3, r3, #20
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	4313      	orrs	r3, r2
 8009358:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	431a      	orrs	r2, r3
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	371c      	adds	r7, #28
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800938c:	d11d      	bne.n	80093ca <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009396:	4b13      	ldr	r3, [pc, #76]	; (80093e4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009398:	4013      	ands	r3, r2
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	6811      	ldr	r1, [r2, #0]
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	6852      	ldr	r2, [r2, #4]
 80093a2:	0112      	lsls	r2, r2, #4
 80093a4:	4311      	orrs	r1, r2
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	6892      	ldr	r2, [r2, #8]
 80093aa:	0212      	lsls	r2, r2, #8
 80093ac:	4311      	orrs	r1, r2
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	6992      	ldr	r2, [r2, #24]
 80093b2:	4311      	orrs	r1, r2
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	68d2      	ldr	r2, [r2, #12]
 80093b8:	0412      	lsls	r2, r2, #16
 80093ba:	430a      	orrs	r2, r1
 80093bc:	ea43 0102 	orr.w	r1, r3, r2
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80093c8:	e005      	b.n	80093d6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80093d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	cff00000 	.word	0xcff00000

080093e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d121      	bne.n	800943e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	4b27      	ldr	r3, [pc, #156]	; (800949c <FMC_SDRAM_Init+0xb4>)
 8009400:	4013      	ands	r3, r2
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	6851      	ldr	r1, [r2, #4]
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	6892      	ldr	r2, [r2, #8]
 800940a:	4311      	orrs	r1, r2
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	68d2      	ldr	r2, [r2, #12]
 8009410:	4311      	orrs	r1, r2
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	6912      	ldr	r2, [r2, #16]
 8009416:	4311      	orrs	r1, r2
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	6952      	ldr	r2, [r2, #20]
 800941c:	4311      	orrs	r1, r2
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	6992      	ldr	r2, [r2, #24]
 8009422:	4311      	orrs	r1, r2
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	69d2      	ldr	r2, [r2, #28]
 8009428:	4311      	orrs	r1, r2
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	6a12      	ldr	r2, [r2, #32]
 800942e:	4311      	orrs	r1, r2
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009434:	430a      	orrs	r2, r1
 8009436:	431a      	orrs	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	e026      	b.n	800948c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	69d9      	ldr	r1, [r3, #28]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	4319      	orrs	r1, r3
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	430b      	orrs	r3, r1
 8009456:	431a      	orrs	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	4b0e      	ldr	r3, [pc, #56]	; (800949c <FMC_SDRAM_Init+0xb4>)
 8009462:	4013      	ands	r3, r2
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	6851      	ldr	r1, [r2, #4]
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	6892      	ldr	r2, [r2, #8]
 800946c:	4311      	orrs	r1, r2
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	68d2      	ldr	r2, [r2, #12]
 8009472:	4311      	orrs	r1, r2
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	6912      	ldr	r2, [r2, #16]
 8009478:	4311      	orrs	r1, r2
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	6952      	ldr	r2, [r2, #20]
 800947e:	4311      	orrs	r1, r2
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	6992      	ldr	r2, [r2, #24]
 8009484:	430a      	orrs	r2, r1
 8009486:	431a      	orrs	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	ffff8000 	.word	0xffff8000

080094a0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d128      	bne.n	8009504 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	1e59      	subs	r1, r3, #1
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	4319      	orrs	r1, r3
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	021b      	lsls	r3, r3, #8
 80094d2:	4319      	orrs	r1, r3
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	3b01      	subs	r3, #1
 80094da:	031b      	lsls	r3, r3, #12
 80094dc:	4319      	orrs	r1, r3
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	041b      	lsls	r3, r3, #16
 80094e6:	4319      	orrs	r1, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	051b      	lsls	r3, r3, #20
 80094f0:	4319      	orrs	r1, r3
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	061b      	lsls	r3, r3, #24
 80094fa:	430b      	orrs	r3, r1
 80094fc:	431a      	orrs	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	609a      	str	r2, [r3, #8]
 8009502:	e02d      	b.n	8009560 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	689a      	ldr	r2, [r3, #8]
 8009508:	4b19      	ldr	r3, [pc, #100]	; (8009570 <FMC_SDRAM_Timing_Init+0xd0>)
 800950a:	4013      	ands	r3, r2
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	68d2      	ldr	r2, [r2, #12]
 8009510:	3a01      	subs	r2, #1
 8009512:	0311      	lsls	r1, r2, #12
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	6952      	ldr	r2, [r2, #20]
 8009518:	3a01      	subs	r2, #1
 800951a:	0512      	lsls	r2, r2, #20
 800951c:	430a      	orrs	r2, r1
 800951e:	431a      	orrs	r2, r3
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	1e59      	subs	r1, r3, #1
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	3b01      	subs	r3, #1
 8009538:	011b      	lsls	r3, r3, #4
 800953a:	4319      	orrs	r1, r3
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	3b01      	subs	r3, #1
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	4319      	orrs	r1, r3
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	3b01      	subs	r3, #1
 800954c:	041b      	lsls	r3, r3, #16
 800954e:	4319      	orrs	r1, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	3b01      	subs	r3, #1
 8009556:	061b      	lsls	r3, r3, #24
 8009558:	430b      	orrs	r3, r1
 800955a:	431a      	orrs	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	ff0f0fff 	.word	0xff0f0fff

08009574 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009574:	b084      	sub	sp, #16
 8009576:	b480      	push	{r7}
 8009578:	b085      	sub	sp, #20
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	f107 001c 	add.w	r0, r7, #28
 8009582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800958a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800958c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800958e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8009592:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009596:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800959a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	4313      	orrs	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <SDMMC_Init+0x50>)
 80095a8:	4013      	ands	r3, r2
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	431a      	orrs	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	b004      	add	sp, #16
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	ffc02c00 	.word	0xffc02c00

080095c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b083      	sub	sp, #12
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f043 0203 	orr.w	r2, r3, #3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0303 	and.w	r3, r3, #3
}
 8009636:	4618      	mov	r0, r3
 8009638:	370c      	adds	r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
	...

08009644 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009662:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009668:	431a      	orrs	r2, r3
                       Command->CPSM);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800966e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	4313      	orrs	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	4b06      	ldr	r3, [pc, #24]	; (8009694 <SDMMC_SendCommand+0x50>)
 800967c:	4013      	ands	r3, r2
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	431a      	orrs	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	fffee0c0 	.word	0xfffee0c0

08009698 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	b2db      	uxtb	r3, r3
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3314      	adds	r3, #20
 80096c0:	461a      	mov	r2, r3
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	4413      	add	r3, r2
 80096c6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80096fe:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009704:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800970a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	4313      	orrs	r3, r2
 8009710:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	431a      	orrs	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009722:	2300      	movs	r3, #0

}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b088      	sub	sp, #32
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800973e:	2310      	movs	r3, #16
 8009740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009748:	2300      	movs	r3, #0
 800974a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800974c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009750:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009752:	f107 0308 	add.w	r3, r7, #8
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7ff ff73 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800975e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009762:	2110      	movs	r1, #16
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fa5f 	bl	8009c28 <SDMMC_GetCmdResp1>
 800976a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800976c:	69fb      	ldr	r3, [r7, #28]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3720      	adds	r7, #32
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b088      	sub	sp, #32
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009784:	2311      	movs	r3, #17
 8009786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800978c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800978e:	2300      	movs	r3, #0
 8009790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009796:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009798:	f107 0308 	add.w	r3, r7, #8
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7ff ff50 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80097a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80097a8:	2111      	movs	r1, #17
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa3c 	bl	8009c28 <SDMMC_GetCmdResp1>
 80097b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097b2:	69fb      	ldr	r3, [r7, #28]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3720      	adds	r7, #32
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b088      	sub	sp, #32
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80097ca:	2312      	movs	r3, #18
 80097cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097d4:	2300      	movs	r3, #0
 80097d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097de:	f107 0308 	add.w	r3, r7, #8
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff ff2d 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80097ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80097ee:	2112      	movs	r1, #18
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fa19 	bl	8009c28 <SDMMC_GetCmdResp1>
 80097f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097f8:	69fb      	ldr	r3, [r7, #28]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3720      	adds	r7, #32
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b088      	sub	sp, #32
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009810:	2318      	movs	r3, #24
 8009812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800981a:	2300      	movs	r3, #0
 800981c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800981e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009824:	f107 0308 	add.w	r3, r7, #8
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7ff ff0a 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009830:	f241 3288 	movw	r2, #5000	; 0x1388
 8009834:	2118      	movs	r1, #24
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f9f6 	bl	8009c28 <SDMMC_GetCmdResp1>
 800983c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800983e:	69fb      	ldr	r3, [r7, #28]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3720      	adds	r7, #32
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009856:	2319      	movs	r3, #25
 8009858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800985a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800985e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009868:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800986a:	f107 0308 	add.w	r3, r7, #8
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fee7 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009876:	f241 3288 	movw	r2, #5000	; 0x1388
 800987a:	2119      	movs	r1, #25
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f9d3 	bl	8009c28 <SDMMC_GetCmdResp1>
 8009882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009884:	69fb      	ldr	r3, [r7, #28]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3720      	adds	r7, #32
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800989c:	230c      	movs	r3, #12
 800989e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098a6:	2300      	movs	r3, #0
 80098a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098ae:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098c8:	f107 0308 	add.w	r3, r7, #8
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7ff feb8 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80098d4:	4a0b      	ldr	r2, [pc, #44]	; (8009904 <SDMMC_CmdStopTransfer+0x74>)
 80098d6:	210c      	movs	r1, #12
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f9a5 	bl	8009c28 <SDMMC_GetCmdResp1>
 80098de:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098f2:	d101      	bne.n	80098f8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80098f4:	2300      	movs	r3, #0
 80098f6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80098f8:	69fb      	ldr	r3, [r7, #28]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3720      	adds	r7, #32
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	05f5e100 	.word	0x05f5e100

08009908 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009916:	2307      	movs	r3, #7
 8009918:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800991a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800991e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009920:	2300      	movs	r3, #0
 8009922:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009928:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800992a:	f107 0308 	add.w	r3, r7, #8
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff fe87 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009936:	f241 3288 	movw	r2, #5000	; 0x1388
 800993a:	2107      	movs	r1, #7
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f973 	bl	8009c28 <SDMMC_GetCmdResp1>
 8009942:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009944:	69fb      	ldr	r3, [r7, #28]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3720      	adds	r7, #32
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b088      	sub	sp, #32
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009956:	2300      	movs	r3, #0
 8009958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800995a:	2300      	movs	r3, #0
 800995c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800995e:	2300      	movs	r3, #0
 8009960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009962:	2300      	movs	r3, #0
 8009964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800996a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800996c:	f107 0308 	add.w	r3, r7, #8
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7ff fe66 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fb97 	bl	800a0ac <SDMMC_GetCmdError>
 800997e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009980:	69fb      	ldr	r3, [r7, #28]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3720      	adds	r7, #32
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b088      	sub	sp, #32
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009992:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009998:	2308      	movs	r3, #8
 800999a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800999c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099a2:	2300      	movs	r3, #0
 80099a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099ac:	f107 0308 	add.w	r3, r7, #8
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7ff fe46 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fb29 	bl	800a010 <SDMMC_GetCmdResp7>
 80099be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099c0:	69fb      	ldr	r3, [r7, #28]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3720      	adds	r7, #32
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b088      	sub	sp, #32
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80099d8:	2337      	movs	r3, #55	; 0x37
 80099da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099e2:	2300      	movs	r3, #0
 80099e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099ec:	f107 0308 	add.w	r3, r7, #8
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7ff fe26 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80099f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099fc:	2137      	movs	r1, #55	; 0x37
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f912 	bl	8009c28 <SDMMC_GetCmdResp1>
 8009a04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a06:	69fb      	ldr	r3, [r7, #28]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3720      	adds	r7, #32
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009a1e:	2329      	movs	r3, #41	; 0x29
 8009a20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a32:	f107 0308 	add.w	r3, r7, #8
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff fe03 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fa2e 	bl	8009ea0 <SDMMC_GetCmdResp3>
 8009a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a46:	69fb      	ldr	r3, [r7, #28]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3720      	adds	r7, #32
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009a5e:	2306      	movs	r3, #6
 8009a60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a72:	f107 0308 	add.w	r3, r7, #8
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff fde3 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a82:	2106      	movs	r1, #6
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f8cf 	bl	8009c28 <SDMMC_GetCmdResp1>
 8009a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3720      	adds	r7, #32
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b088      	sub	sp, #32
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009aa2:	2333      	movs	r3, #51	; 0x33
 8009aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aac:	2300      	movs	r3, #0
 8009aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ab4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ab6:	f107 0308 	add.w	r3, r7, #8
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff fdc1 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac6:	2133      	movs	r1, #51	; 0x33
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f8ad 	bl	8009c28 <SDMMC_GetCmdResp1>
 8009ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad0:	69fb      	ldr	r3, [r7, #28]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3720      	adds	r7, #32
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b088      	sub	sp, #32
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009aea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009af0:	2300      	movs	r3, #0
 8009af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009af8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009afa:	f107 0308 	add.w	r3, r7, #8
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff fd9f 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f980 	bl	8009e0c <SDMMC_GetCmdResp2>
 8009b0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b0e:	69fb      	ldr	r3, [r7, #28]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3720      	adds	r7, #32
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009b26:	2309      	movs	r3, #9
 8009b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009b2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b30:	2300      	movs	r3, #0
 8009b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b3a:	f107 0308 	add.w	r3, r7, #8
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7ff fd7f 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f960 	bl	8009e0c <SDMMC_GetCmdResp2>
 8009b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b62:	2300      	movs	r3, #0
 8009b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009b66:	2303      	movs	r3, #3
 8009b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b70:	2300      	movs	r3, #0
 8009b72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b7a:	f107 0308 	add.w	r3, r7, #8
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff fd5f 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	2103      	movs	r1, #3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f9c8 	bl	8009f20 <SDMMC_GetCmdResp6>
 8009b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b92:	69fb      	ldr	r3, [r7, #28]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3720      	adds	r7, #32
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009baa:	230d      	movs	r3, #13
 8009bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bbe:	f107 0308 	add.w	r3, r7, #8
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff fd3d 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bce:	210d      	movs	r1, #13
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f829 	bl	8009c28 <SDMMC_GetCmdResp1>
 8009bd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bd8:	69fb      	ldr	r3, [r7, #28]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3720      	adds	r7, #32
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b088      	sub	sp, #32
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009bea:	2300      	movs	r3, #0
 8009bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009bee:	230d      	movs	r3, #13
 8009bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c02:	f107 0308 	add.w	r3, r7, #8
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff fd1b 	bl	8009644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c12:	210d      	movs	r1, #13
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f807 	bl	8009c28 <SDMMC_GetCmdResp1>
 8009c1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c1c:	69fb      	ldr	r3, [r7, #28]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3720      	adds	r7, #32
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
	...

08009c28 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	460b      	mov	r3, r1
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009c36:	4b70      	ldr	r3, [pc, #448]	; (8009df8 <SDMMC_GetCmdResp1+0x1d0>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a70      	ldr	r2, [pc, #448]	; (8009dfc <SDMMC_GetCmdResp1+0x1d4>)
 8009c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c40:	0a5a      	lsrs	r2, r3, #9
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	fb02 f303 	mul.w	r3, r2, r3
 8009c48:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	1e5a      	subs	r2, r3, #1
 8009c4e:	61fa      	str	r2, [r7, #28]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d102      	bne.n	8009c5a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c58:	e0c9      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	4b67      	ldr	r3, [pc, #412]	; (8009e00 <SDMMC_GetCmdResp1+0x1d8>)
 8009c64:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d0ef      	beq.n	8009c4a <SDMMC_GetCmdResp1+0x22>
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1ea      	bne.n	8009c4a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d004      	beq.n	8009c8a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2204      	movs	r2, #4
 8009c84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c86:	2304      	movs	r3, #4
 8009c88:	e0b1      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d004      	beq.n	8009ca0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e0a6      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4a58      	ldr	r2, [pc, #352]	; (8009e04 <SDMMC_GetCmdResp1+0x1dc>)
 8009ca4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f7ff fcf6 	bl	8009698 <SDMMC_GetCommandResponse>
 8009cac:	4603      	mov	r3, r0
 8009cae:	461a      	mov	r2, r3
 8009cb0:	7afb      	ldrb	r3, [r7, #11]
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d001      	beq.n	8009cba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e099      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009cba:	2100      	movs	r1, #0
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f7ff fcf8 	bl	80096b2 <SDMMC_GetResponse>
 8009cc2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	4b50      	ldr	r3, [pc, #320]	; (8009e08 <SDMMC_GetCmdResp1+0x1e0>)
 8009cc8:	4013      	ands	r3, r2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d101      	bne.n	8009cd2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	e08d      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	da02      	bge.n	8009cde <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009cd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009cdc:	e087      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ce8:	2340      	movs	r3, #64	; 0x40
 8009cea:	e080      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009cf6:	2380      	movs	r3, #128	; 0x80
 8009cf8:	e079      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d08:	e071      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d18:	e069      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d28:	e061      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009d34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d38:	e059      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d48:	e051      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d58:	e049      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009d64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d68:	e041      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d78:	e039      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d88:	e031      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009d94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d98:	e029      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009da4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009da8:	e021      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009db4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009db8:	e019      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d002      	beq.n	8009dca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009dc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009dc8:	e011      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009dd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009dd8:	e009      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f003 0308 	and.w	r3, r3, #8
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d002      	beq.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009de4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009de8:	e001      	b.n	8009dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3720      	adds	r7, #32
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	24000000 	.word	0x24000000
 8009dfc:	10624dd3 	.word	0x10624dd3
 8009e00:	00200045 	.word	0x00200045
 8009e04:	002000c5 	.word	0x002000c5
 8009e08:	fdffe008 	.word	0xfdffe008

08009e0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e14:	4b1f      	ldr	r3, [pc, #124]	; (8009e94 <SDMMC_GetCmdResp2+0x88>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a1f      	ldr	r2, [pc, #124]	; (8009e98 <SDMMC_GetCmdResp2+0x8c>)
 8009e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1e:	0a5b      	lsrs	r3, r3, #9
 8009e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e24:	fb02 f303 	mul.w	r3, r2, r3
 8009e28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	1e5a      	subs	r2, r3, #1
 8009e2e:	60fa      	str	r2, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e38:	e026      	b.n	8009e88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d0ef      	beq.n	8009e2a <SDMMC_GetCmdResp2+0x1e>
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1ea      	bne.n	8009e2a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e58:	f003 0304 	and.w	r3, r3, #4
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d004      	beq.n	8009e6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2204      	movs	r2, #4
 8009e64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e66:	2304      	movs	r3, #4
 8009e68:	e00e      	b.n	8009e88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e003      	b.n	8009e88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a06      	ldr	r2, [pc, #24]	; (8009e9c <SDMMC_GetCmdResp2+0x90>)
 8009e84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	24000000 	.word	0x24000000
 8009e98:	10624dd3 	.word	0x10624dd3
 8009e9c:	002000c5 	.word	0x002000c5

08009ea0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ea8:	4b1a      	ldr	r3, [pc, #104]	; (8009f14 <SDMMC_GetCmdResp3+0x74>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a1a      	ldr	r2, [pc, #104]	; (8009f18 <SDMMC_GetCmdResp3+0x78>)
 8009eae:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb2:	0a5b      	lsrs	r3, r3, #9
 8009eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eb8:	fb02 f303 	mul.w	r3, r2, r3
 8009ebc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	1e5a      	subs	r2, r3, #1
 8009ec2:	60fa      	str	r2, [r7, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d102      	bne.n	8009ece <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ec8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ecc:	e01b      	b.n	8009f06 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0ef      	beq.n	8009ebe <SDMMC_GetCmdResp3+0x1e>
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1ea      	bne.n	8009ebe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d004      	beq.n	8009efe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2204      	movs	r2, #4
 8009ef8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009efa:	2304      	movs	r3, #4
 8009efc:	e003      	b.n	8009f06 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a06      	ldr	r2, [pc, #24]	; (8009f1c <SDMMC_GetCmdResp3+0x7c>)
 8009f02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	24000000 	.word	0x24000000
 8009f18:	10624dd3 	.word	0x10624dd3
 8009f1c:	002000c5 	.word	0x002000c5

08009f20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f2e:	4b35      	ldr	r3, [pc, #212]	; (800a004 <SDMMC_GetCmdResp6+0xe4>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a35      	ldr	r2, [pc, #212]	; (800a008 <SDMMC_GetCmdResp6+0xe8>)
 8009f34:	fba2 2303 	umull	r2, r3, r2, r3
 8009f38:	0a5b      	lsrs	r3, r3, #9
 8009f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f3e:	fb02 f303 	mul.w	r3, r2, r3
 8009f42:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	1e5a      	subs	r2, r3, #1
 8009f48:	61fa      	str	r2, [r7, #28]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d102      	bne.n	8009f54 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f52:	e052      	b.n	8009ffa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f58:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d0ef      	beq.n	8009f44 <SDMMC_GetCmdResp6+0x24>
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1ea      	bne.n	8009f44 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f72:	f003 0304 	and.w	r3, r3, #4
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d004      	beq.n	8009f84 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2204      	movs	r2, #4
 8009f7e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f80:	2304      	movs	r3, #4
 8009f82:	e03a      	b.n	8009ffa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f88:	f003 0301 	and.w	r3, r3, #1
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d004      	beq.n	8009f9a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2201      	movs	r2, #1
 8009f94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e02f      	b.n	8009ffa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff fb7c 	bl	8009698 <SDMMC_GetCommandResponse>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	7afb      	ldrb	r3, [r7, #11]
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d001      	beq.n	8009fae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e025      	b.n	8009ffa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4a16      	ldr	r2, [pc, #88]	; (800a00c <SDMMC_GetCmdResp6+0xec>)
 8009fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7ff fb7b 	bl	80096b2 <SDMMC_GetResponse>
 8009fbc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d106      	bne.n	8009fd6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	0c1b      	lsrs	r3, r3, #16
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	e011      	b.n	8009ffa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fe4:	e009      	b.n	8009ffa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d002      	beq.n	8009ff6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ff4:	e001      	b.n	8009ffa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3720      	adds	r7, #32
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	24000000 	.word	0x24000000
 800a008:	10624dd3 	.word	0x10624dd3
 800a00c:	002000c5 	.word	0x002000c5

0800a010 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a018:	4b22      	ldr	r3, [pc, #136]	; (800a0a4 <SDMMC_GetCmdResp7+0x94>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a22      	ldr	r2, [pc, #136]	; (800a0a8 <SDMMC_GetCmdResp7+0x98>)
 800a01e:	fba2 2303 	umull	r2, r3, r2, r3
 800a022:	0a5b      	lsrs	r3, r3, #9
 800a024:	f241 3288 	movw	r2, #5000	; 0x1388
 800a028:	fb02 f303 	mul.w	r3, r2, r3
 800a02c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	1e5a      	subs	r2, r3, #1
 800a032:	60fa      	str	r2, [r7, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a038:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a03c:	e02c      	b.n	800a098 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a042:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0ef      	beq.n	800a02e <SDMMC_GetCmdResp7+0x1e>
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1ea      	bne.n	800a02e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2204      	movs	r2, #4
 800a068:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a06a:	2304      	movs	r3, #4
 800a06c:	e014      	b.n	800a098 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a080:	2301      	movs	r3, #1
 800a082:	e009      	b.n	800a098 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2240      	movs	r2, #64	; 0x40
 800a094:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a096:	2300      	movs	r3, #0

}
 800a098:	4618      	mov	r0, r3
 800a09a:	3714      	adds	r7, #20
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr
 800a0a4:	24000000 	.word	0x24000000
 800a0a8:	10624dd3 	.word	0x10624dd3

0800a0ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a0b4:	4b11      	ldr	r3, [pc, #68]	; (800a0fc <SDMMC_GetCmdError+0x50>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a11      	ldr	r2, [pc, #68]	; (800a100 <SDMMC_GetCmdError+0x54>)
 800a0ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a0be:	0a5b      	lsrs	r3, r3, #9
 800a0c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0c4:	fb02 f303 	mul.w	r3, r2, r3
 800a0c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	1e5a      	subs	r2, r3, #1
 800a0ce:	60fa      	str	r2, [r7, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0d8:	e009      	b.n	800a0ee <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0f1      	beq.n	800a0ca <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a06      	ldr	r2, [pc, #24]	; (800a104 <SDMMC_GetCmdError+0x58>)
 800a0ea:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	24000000 	.word	0x24000000
 800a100:	10624dd3 	.word	0x10624dd3
 800a104:	002000c5 	.word	0x002000c5

0800a108 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a10c:	4904      	ldr	r1, [pc, #16]	; (800a120 <MX_FATFS_Init+0x18>)
 800a10e:	4805      	ldr	r0, [pc, #20]	; (800a124 <MX_FATFS_Init+0x1c>)
 800a110:	f002 fae4 	bl	800c6dc <FATFS_LinkDriver>
 800a114:	4603      	mov	r3, r0
 800a116:	461a      	mov	r2, r3
 800a118:	4b03      	ldr	r3, [pc, #12]	; (800a128 <MX_FATFS_Init+0x20>)
 800a11a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a11c:	bf00      	nop
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	24004f08 	.word	0x24004f08
 800a124:	08010b24 	.word	0x08010b24
 800a128:	24004f04 	.word	0x24004f04

0800a12c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a12c:	b480      	push	{r7}
 800a12e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a130:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a132:	4618      	mov	r0, r3
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a146:	f000 f877 	bl	800a238 <BSP_SD_IsDetected>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d001      	beq.n	800a154 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a150:	2302      	movs	r3, #2
 800a152:	e005      	b.n	800a160 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a154:	4804      	ldr	r0, [pc, #16]	; (800a168 <BSP_SD_Init+0x2c>)
 800a156:	f7fb fd46 	bl	8005be6 <HAL_SD_Init>
 800a15a:	4603      	mov	r3, r0
 800a15c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a15e:	79fb      	ldrb	r3, [r7, #7]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	24004bf4 	.word	0x24004bf4

0800a16c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	68f9      	ldr	r1, [r7, #12]
 800a182:	4806      	ldr	r0, [pc, #24]	; (800a19c <BSP_SD_ReadBlocks_DMA+0x30>)
 800a184:	f7fb fe46 	bl	8005e14 <HAL_SD_ReadBlocks_DMA>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a192:	7dfb      	ldrb	r3, [r7, #23]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	24004bf4 	.word	0x24004bf4

0800a1a0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	68f9      	ldr	r1, [r7, #12]
 800a1b6:	4806      	ldr	r0, [pc, #24]	; (800a1d0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a1b8:	f7fb fed4 	bl	8005f64 <HAL_SD_WriteBlocks_DMA>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	24004bf4 	.word	0x24004bf4

0800a1d4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a1d8:	4805      	ldr	r0, [pc, #20]	; (800a1f0 <BSP_SD_GetCardState+0x1c>)
 800a1da:	f7fc fcc1 	bl	8006b60 <HAL_SD_GetCardState>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	bf14      	ite	ne
 800a1e4:	2301      	movne	r3, #1
 800a1e6:	2300      	moveq	r3, #0
 800a1e8:	b2db      	uxtb	r3, r3
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	24004bf4 	.word	0x24004bf4

0800a1f4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a1fc:	6879      	ldr	r1, [r7, #4]
 800a1fe:	4803      	ldr	r0, [pc, #12]	; (800a20c <BSP_SD_GetCardInfo+0x18>)
 800a200:	f7fc fb72 	bl	80068e8 <HAL_SD_GetCardInfo>
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	24004bf4 	.word	0x24004bf4

0800a210 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a218:	f000 f9b8 	bl	800a58c <BSP_SD_WriteCpltCallback>
}
 800a21c:	bf00      	nop
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a22c:	f000 f9c0 	bl	800a5b0 <BSP_SD_ReadCpltCallback>
}
 800a230:	bf00      	nop
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a23e:	2301      	movs	r3, #1
 800a240:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a242:	f000 f80b 	bl	800a25c <BSP_PlatformIsDetected>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d101      	bne.n	800a250 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a24c:	2300      	movs	r3, #0
 800a24e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a250:	79fb      	ldrb	r3, [r7, #7]
 800a252:	b2db      	uxtb	r3, r3
}
 800a254:	4618      	mov	r0, r3
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a262:	2301      	movs	r3, #1
 800a264:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a266:	2104      	movs	r1, #4
 800a268:	480c      	ldr	r0, [pc, #48]	; (800a29c <BSP_PlatformIsDetected+0x40>)
 800a26a:	f7f8 f857 	bl	800231c <HAL_GPIO_ReadPin>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a274:	2300      	movs	r3, #0
 800a276:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 800a278:	2104      	movs	r1, #4
 800a27a:	4808      	ldr	r0, [pc, #32]	; (800a29c <BSP_PlatformIsDetected+0x40>)
 800a27c:	f7f8 f84e 	bl	800231c <HAL_GPIO_ReadPin>
 800a280:	4603      	mov	r3, r0
 800a282:	2b01      	cmp	r3, #1
 800a284:	d102      	bne.n	800a28c <BSP_PlatformIsDetected+0x30>
    {
       status = SD_PRESENT;
 800a286:	2301      	movs	r3, #1
 800a288:	71fb      	strb	r3, [r7, #7]
 800a28a:	e001      	b.n	800a290 <BSP_PlatformIsDetected+0x34>
    } else {
       status = SD_NOT_PRESENT;
 800a28c:	2300      	movs	r3, #0
 800a28e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE END 1 */
    return status;
 800a290:	79fb      	ldrb	r3, [r7, #7]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	58021800 	.word	0x58021800

0800a2a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a2a8:	f002 fb1c 	bl	800c8e4 <osKernelGetTickCount>
 800a2ac:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a2ae:	e006      	b.n	800a2be <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a2b0:	f7ff ff90 	bl	800a1d4 <BSP_SD_GetCardState>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e009      	b.n	800a2d2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a2be:	f002 fb11 	bl	800c8e4 <osKernelGetTickCount>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d8f0      	bhi.n	800a2b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a2ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a2e6:	4b0b      	ldr	r3, [pc, #44]	; (800a314 <SD_CheckStatus+0x38>)
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a2ec:	f7ff ff72 	bl	800a1d4 <BSP_SD_GetCardState>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d107      	bne.n	800a306 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a2f6:	4b07      	ldr	r3, [pc, #28]	; (800a314 <SD_CheckStatus+0x38>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	f023 0301 	bic.w	r3, r3, #1
 800a300:	b2da      	uxtb	r2, r3
 800a302:	4b04      	ldr	r3, [pc, #16]	; (800a314 <SD_CheckStatus+0x38>)
 800a304:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a306:	4b03      	ldr	r3, [pc, #12]	; (800a314 <SD_CheckStatus+0x38>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	b2db      	uxtb	r3, r3
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	2400000d 	.word	0x2400000d

0800a318 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	4603      	mov	r3, r0
 800a320:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a322:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <SD_initialize+0x7c>)
 800a324:	2201      	movs	r2, #1
 800a326:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800a328:	f002 fa94 	bl	800c854 <osKernelGetState>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d129      	bne.n	800a386 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a332:	f7ff ff03 	bl	800a13c <BSP_SD_Init>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d107      	bne.n	800a34c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a33c:	79fb      	ldrb	r3, [r7, #7]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff ffcc 	bl	800a2dc <SD_CheckStatus>
 800a344:	4603      	mov	r3, r0
 800a346:	461a      	mov	r2, r3
 800a348:	4b12      	ldr	r3, [pc, #72]	; (800a394 <SD_initialize+0x7c>)
 800a34a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a34c:	4b11      	ldr	r3, [pc, #68]	; (800a394 <SD_initialize+0x7c>)
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b01      	cmp	r3, #1
 800a354:	d017      	beq.n	800a386 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800a356:	4b10      	ldr	r3, [pc, #64]	; (800a398 <SD_initialize+0x80>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d107      	bne.n	800a36e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800a35e:	2200      	movs	r2, #0
 800a360:	2102      	movs	r1, #2
 800a362:	200a      	movs	r0, #10
 800a364:	f002 fcb4 	bl	800ccd0 <osMessageQueueNew>
 800a368:	4603      	mov	r3, r0
 800a36a:	4a0b      	ldr	r2, [pc, #44]	; (800a398 <SD_initialize+0x80>)
 800a36c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800a36e:	4b0a      	ldr	r3, [pc, #40]	; (800a398 <SD_initialize+0x80>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d107      	bne.n	800a386 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800a376:	4b07      	ldr	r3, [pc, #28]	; (800a394 <SD_initialize+0x7c>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	f043 0301 	orr.w	r3, r3, #1
 800a380:	b2da      	uxtb	r2, r3
 800a382:	4b04      	ldr	r3, [pc, #16]	; (800a394 <SD_initialize+0x7c>)
 800a384:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a386:	4b03      	ldr	r3, [pc, #12]	; (800a394 <SD_initialize+0x7c>)
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	b2db      	uxtb	r3, r3
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	2400000d 	.word	0x2400000d
 800a398:	2400009c 	.word	0x2400009c

0800a39c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a3a6:	79fb      	ldrb	r3, [r7, #7]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7ff ff97 	bl	800a2dc <SD_CheckStatus>
 800a3ae:	4603      	mov	r3, r0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	607a      	str	r2, [r7, #4]
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a3cc:	f247 5030 	movw	r0, #30000	; 0x7530
 800a3d0:	f7ff ff66 	bl	800a2a0 <SD_CheckStatusWithTimeout>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	da01      	bge.n	800a3de <SD_read+0x26>
  {
    return res;
 800a3da:	7ffb      	ldrb	r3, [r7, #31]
 800a3dc:	e02f      	b.n	800a43e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	6879      	ldr	r1, [r7, #4]
 800a3e2:	68b8      	ldr	r0, [r7, #8]
 800a3e4:	f7ff fec2 	bl	800a16c <BSP_SD_ReadBlocks_DMA>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800a3ec:	7fbb      	ldrb	r3, [r7, #30]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d124      	bne.n	800a43c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a3f2:	4b15      	ldr	r3, [pc, #84]	; (800a448 <SD_read+0x90>)
 800a3f4:	6818      	ldr	r0, [r3, #0]
 800a3f6:	f107 0112 	add.w	r1, r7, #18
 800a3fa:	f247 5330 	movw	r3, #30000	; 0x7530
 800a3fe:	2200      	movs	r2, #0
 800a400:	f002 fd3a 	bl	800ce78 <osMessageQueueGet>
 800a404:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d117      	bne.n	800a43c <SD_read+0x84>
 800a40c:	8a7b      	ldrh	r3, [r7, #18]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d114      	bne.n	800a43c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800a412:	f002 fa67 	bl	800c8e4 <osKernelGetTickCount>
 800a416:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a418:	e007      	b.n	800a42a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a41a:	f7ff fedb 	bl	800a1d4 <BSP_SD_GetCardState>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d102      	bne.n	800a42a <SD_read+0x72>
              {
                res = RES_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a428:	e008      	b.n	800a43c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a42a:	f002 fa5b 	bl	800c8e4 <osKernelGetTickCount>
 800a42e:	4602      	mov	r2, r0
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	f247 522f 	movw	r2, #29999	; 0x752f
 800a438:	4293      	cmp	r3, r2
 800a43a:	d9ee      	bls.n	800a41a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a43c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3720      	adds	r7, #32
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	2400009c 	.word	0x2400009c

0800a44c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b088      	sub	sp, #32
 800a450:	af00      	add	r7, sp, #0
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
 800a456:	603b      	str	r3, [r7, #0]
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a460:	f247 5030 	movw	r0, #30000	; 0x7530
 800a464:	f7ff ff1c 	bl	800a2a0 <SD_CheckStatusWithTimeout>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	da01      	bge.n	800a472 <SD_write+0x26>
  {
    return res;
 800a46e:	7ffb      	ldrb	r3, [r7, #31]
 800a470:	e02d      	b.n	800a4ce <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	6879      	ldr	r1, [r7, #4]
 800a476:	68b8      	ldr	r0, [r7, #8]
 800a478:	f7ff fe92 	bl	800a1a0 <BSP_SD_WriteBlocks_DMA>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d124      	bne.n	800a4cc <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a482:	4b15      	ldr	r3, [pc, #84]	; (800a4d8 <SD_write+0x8c>)
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	f107 0112 	add.w	r1, r7, #18
 800a48a:	f247 5330 	movw	r3, #30000	; 0x7530
 800a48e:	2200      	movs	r2, #0
 800a490:	f002 fcf2 	bl	800ce78 <osMessageQueueGet>
 800a494:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d117      	bne.n	800a4cc <SD_write+0x80>
 800a49c:	8a7b      	ldrh	r3, [r7, #18]
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d114      	bne.n	800a4cc <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800a4a2:	f002 fa1f 	bl	800c8e4 <osKernelGetTickCount>
 800a4a6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a4a8:	e007      	b.n	800a4ba <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a4aa:	f7ff fe93 	bl	800a1d4 <BSP_SD_GetCardState>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d102      	bne.n	800a4ba <SD_write+0x6e>
          {
            res = RES_OK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	77fb      	strb	r3, [r7, #31]
            break;
 800a4b8:	e008      	b.n	800a4cc <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a4ba:	f002 fa13 	bl	800c8e4 <osKernelGetTickCount>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	f247 522f 	movw	r2, #29999	; 0x752f
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d9ee      	bls.n	800a4aa <SD_write+0x5e>
    }

  }
#endif

  return res;
 800a4cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3720      	adds	r7, #32
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	2400009c 	.word	0x2400009c

0800a4dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b08c      	sub	sp, #48	; 0x30
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	603a      	str	r2, [r7, #0]
 800a4e6:	71fb      	strb	r3, [r7, #7]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a4f2:	4b25      	ldr	r3, [pc, #148]	; (800a588 <SD_ioctl+0xac>)
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <SD_ioctl+0x28>
 800a500:	2303      	movs	r3, #3
 800a502:	e03c      	b.n	800a57e <SD_ioctl+0xa2>

  switch (cmd)
 800a504:	79bb      	ldrb	r3, [r7, #6]
 800a506:	2b03      	cmp	r3, #3
 800a508:	d834      	bhi.n	800a574 <SD_ioctl+0x98>
 800a50a:	a201      	add	r2, pc, #4	; (adr r2, 800a510 <SD_ioctl+0x34>)
 800a50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a510:	0800a521 	.word	0x0800a521
 800a514:	0800a529 	.word	0x0800a529
 800a518:	0800a541 	.word	0x0800a541
 800a51c:	0800a55b 	.word	0x0800a55b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a526:	e028      	b.n	800a57a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a528:	f107 0308 	add.w	r3, r7, #8
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7ff fe61 	bl	800a1f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a532:	6a3a      	ldr	r2, [r7, #32]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a53e:	e01c      	b.n	800a57a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a540:	f107 0308 	add.w	r3, r7, #8
 800a544:	4618      	mov	r0, r3
 800a546:	f7ff fe55 	bl	800a1f4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a558:	e00f      	b.n	800a57a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a55a:	f107 0308 	add.w	r3, r7, #8
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff fe48 	bl	800a1f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	0a5a      	lsrs	r2, r3, #9
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a572:	e002      	b.n	800a57a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a574:	2304      	movs	r3, #4
 800a576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a57a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3730      	adds	r7, #48	; 0x30
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	2400000d 	.word	0x2400000d

0800a58c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800a592:	2302      	movs	r3, #2
 800a594:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a596:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <BSP_SD_WriteCpltCallback+0x20>)
 800a598:	6818      	ldr	r0, [r3, #0]
 800a59a:	1db9      	adds	r1, r7, #6
 800a59c:	2300      	movs	r3, #0
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f002 fc0a 	bl	800cdb8 <osMessageQueuePut>
#endif
}
 800a5a4:	bf00      	nop
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	2400009c 	.word	0x2400009c

0800a5b0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a5ba:	4b05      	ldr	r3, [pc, #20]	; (800a5d0 <BSP_SD_ReadCpltCallback+0x20>)
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	1db9      	adds	r1, r7, #6
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f002 fbf8 	bl	800cdb8 <osMessageQueuePut>
#endif
}
 800a5c8:	bf00      	nop
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	2400009c 	.word	0x2400009c

0800a5d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a5de:	79fb      	ldrb	r3, [r7, #7]
 800a5e0:	4a08      	ldr	r2, [pc, #32]	; (800a604 <disk_status+0x30>)
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4413      	add	r3, r2
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	79fa      	ldrb	r2, [r7, #7]
 800a5ec:	4905      	ldr	r1, [pc, #20]	; (800a604 <disk_status+0x30>)
 800a5ee:	440a      	add	r2, r1
 800a5f0:	7a12      	ldrb	r2, [r2, #8]
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	4798      	blx	r3
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	240000c8 	.word	0x240000c8

0800a608 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a616:	79fb      	ldrb	r3, [r7, #7]
 800a618:	4a0d      	ldr	r2, [pc, #52]	; (800a650 <disk_initialize+0x48>)
 800a61a:	5cd3      	ldrb	r3, [r2, r3]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d111      	bne.n	800a644 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a620:	79fb      	ldrb	r3, [r7, #7]
 800a622:	4a0b      	ldr	r2, [pc, #44]	; (800a650 <disk_initialize+0x48>)
 800a624:	2101      	movs	r1, #1
 800a626:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a628:	79fb      	ldrb	r3, [r7, #7]
 800a62a:	4a09      	ldr	r2, [pc, #36]	; (800a650 <disk_initialize+0x48>)
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4413      	add	r3, r2
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	79fa      	ldrb	r2, [r7, #7]
 800a636:	4906      	ldr	r1, [pc, #24]	; (800a650 <disk_initialize+0x48>)
 800a638:	440a      	add	r2, r1
 800a63a:	7a12      	ldrb	r2, [r2, #8]
 800a63c:	4610      	mov	r0, r2
 800a63e:	4798      	blx	r3
 800a640:	4603      	mov	r3, r0
 800a642:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a644:	7bfb      	ldrb	r3, [r7, #15]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	240000c8 	.word	0x240000c8

0800a654 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a654:	b590      	push	{r4, r7, lr}
 800a656:	b087      	sub	sp, #28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60b9      	str	r1, [r7, #8]
 800a65c:	607a      	str	r2, [r7, #4]
 800a65e:	603b      	str	r3, [r7, #0]
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a664:	7bfb      	ldrb	r3, [r7, #15]
 800a666:	4a0a      	ldr	r2, [pc, #40]	; (800a690 <disk_read+0x3c>)
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	689c      	ldr	r4, [r3, #8]
 800a670:	7bfb      	ldrb	r3, [r7, #15]
 800a672:	4a07      	ldr	r2, [pc, #28]	; (800a690 <disk_read+0x3c>)
 800a674:	4413      	add	r3, r2
 800a676:	7a18      	ldrb	r0, [r3, #8]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	68b9      	ldr	r1, [r7, #8]
 800a67e:	47a0      	blx	r4
 800a680:	4603      	mov	r3, r0
 800a682:	75fb      	strb	r3, [r7, #23]
  return res;
 800a684:	7dfb      	ldrb	r3, [r7, #23]
}
 800a686:	4618      	mov	r0, r3
 800a688:	371c      	adds	r7, #28
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd90      	pop	{r4, r7, pc}
 800a68e:	bf00      	nop
 800a690:	240000c8 	.word	0x240000c8

0800a694 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a694:	b590      	push	{r4, r7, lr}
 800a696:	b087      	sub	sp, #28
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	607a      	str	r2, [r7, #4]
 800a69e:	603b      	str	r3, [r7, #0]
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a6a4:	7bfb      	ldrb	r3, [r7, #15]
 800a6a6:	4a0a      	ldr	r2, [pc, #40]	; (800a6d0 <disk_write+0x3c>)
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	68dc      	ldr	r4, [r3, #12]
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	4a07      	ldr	r2, [pc, #28]	; (800a6d0 <disk_write+0x3c>)
 800a6b4:	4413      	add	r3, r2
 800a6b6:	7a18      	ldrb	r0, [r3, #8]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	68b9      	ldr	r1, [r7, #8]
 800a6be:	47a0      	blx	r4
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a6c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	371c      	adds	r7, #28
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd90      	pop	{r4, r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	240000c8 	.word	0x240000c8

0800a6d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	4603      	mov	r3, r0
 800a6dc:	603a      	str	r2, [r7, #0]
 800a6de:	71fb      	strb	r3, [r7, #7]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a6e4:	79fb      	ldrb	r3, [r7, #7]
 800a6e6:	4a09      	ldr	r2, [pc, #36]	; (800a70c <disk_ioctl+0x38>)
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4413      	add	r3, r2
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	79fa      	ldrb	r2, [r7, #7]
 800a6f2:	4906      	ldr	r1, [pc, #24]	; (800a70c <disk_ioctl+0x38>)
 800a6f4:	440a      	add	r2, r1
 800a6f6:	7a10      	ldrb	r0, [r2, #8]
 800a6f8:	79b9      	ldrb	r1, [r7, #6]
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	4798      	blx	r3
 800a6fe:	4603      	mov	r3, r0
 800a700:	73fb      	strb	r3, [r7, #15]
  return res;
 800a702:	7bfb      	ldrb	r3, [r7, #15]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	240000c8 	.word	0x240000c8

0800a710 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3301      	adds	r3, #1
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a720:	89fb      	ldrh	r3, [r7, #14]
 800a722:	021b      	lsls	r3, r3, #8
 800a724:	b21a      	sxth	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	b21b      	sxth	r3, r3
 800a72c:	4313      	orrs	r3, r2
 800a72e:	b21b      	sxth	r3, r3
 800a730:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a732:	89fb      	ldrh	r3, [r7, #14]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3714      	adds	r7, #20
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	3303      	adds	r3, #3
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	021b      	lsls	r3, r3, #8
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	3202      	adds	r2, #2
 800a758:	7812      	ldrb	r2, [r2, #0]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	021b      	lsls	r3, r3, #8
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	3201      	adds	r2, #1
 800a766:	7812      	ldrb	r2, [r2, #0]
 800a768:	4313      	orrs	r3, r2
 800a76a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	021b      	lsls	r3, r3, #8
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	7812      	ldrb	r2, [r2, #0]
 800a774:	4313      	orrs	r3, r2
 800a776:	60fb      	str	r3, [r7, #12]
	return rv;
 800a778:	68fb      	ldr	r3, [r7, #12]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr

0800a786 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a786:	b480      	push	{r7}
 800a788:	b083      	sub	sp, #12
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	460b      	mov	r3, r1
 800a790:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	1c5a      	adds	r2, r3, #1
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	887a      	ldrh	r2, [r7, #2]
 800a79a:	b2d2      	uxtb	r2, r2
 800a79c:	701a      	strb	r2, [r3, #0]
 800a79e:	887b      	ldrh	r3, [r7, #2]
 800a7a0:	0a1b      	lsrs	r3, r3, #8
 800a7a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	1c5a      	adds	r2, r3, #1
 800a7a8:	607a      	str	r2, [r7, #4]
 800a7aa:	887a      	ldrh	r2, [r7, #2]
 800a7ac:	b2d2      	uxtb	r2, r2
 800a7ae:	701a      	strb	r2, [r3, #0]
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	1c5a      	adds	r2, r3, #1
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	b2d2      	uxtb	r2, r2
 800a7d0:	701a      	strb	r2, [r3, #0]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	0a1b      	lsrs	r3, r3, #8
 800a7d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	1c5a      	adds	r2, r3, #1
 800a7dc:	607a      	str	r2, [r7, #4]
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	b2d2      	uxtb	r2, r2
 800a7e2:	701a      	strb	r2, [r3, #0]
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	0a1b      	lsrs	r3, r3, #8
 800a7e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	1c5a      	adds	r2, r3, #1
 800a7ee:	607a      	str	r2, [r7, #4]
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	b2d2      	uxtb	r2, r2
 800a7f4:	701a      	strb	r2, [r3, #0]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	0a1b      	lsrs	r3, r3, #8
 800a7fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	1c5a      	adds	r2, r3, #1
 800a800:	607a      	str	r2, [r7, #4]
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	b2d2      	uxtb	r2, r2
 800a806:	701a      	strb	r2, [r3, #0]
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a814:	b480      	push	{r7}
 800a816:	b087      	sub	sp, #28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00d      	beq.n	800a84a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	1c53      	adds	r3, r2, #1
 800a832:	613b      	str	r3, [r7, #16]
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	1c59      	adds	r1, r3, #1
 800a838:	6179      	str	r1, [r7, #20]
 800a83a:	7812      	ldrb	r2, [r2, #0]
 800a83c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3b01      	subs	r3, #1
 800a842:	607b      	str	r3, [r7, #4]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1f1      	bne.n	800a82e <mem_cpy+0x1a>
	}
}
 800a84a:	bf00      	nop
 800a84c:	371c      	adds	r7, #28
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a856:	b480      	push	{r7}
 800a858:	b087      	sub	sp, #28
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	60f8      	str	r0, [r7, #12]
 800a85e:	60b9      	str	r1, [r7, #8]
 800a860:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	1c5a      	adds	r2, r3, #1
 800a86a:	617a      	str	r2, [r7, #20]
 800a86c:	68ba      	ldr	r2, [r7, #8]
 800a86e:	b2d2      	uxtb	r2, r2
 800a870:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	3b01      	subs	r3, #1
 800a876:	607b      	str	r3, [r7, #4]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1f3      	bne.n	800a866 <mem_set+0x10>
}
 800a87e:	bf00      	nop
 800a880:	bf00      	nop
 800a882:	371c      	adds	r7, #28
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a88c:	b480      	push	{r7}
 800a88e:	b089      	sub	sp, #36	; 0x24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	61fb      	str	r3, [r7, #28]
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	61fa      	str	r2, [r7, #28]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	1c5a      	adds	r2, r3, #1
 800a8b2:	61ba      	str	r2, [r7, #24]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	1acb      	subs	r3, r1, r3
 800a8b8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	607b      	str	r3, [r7, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <mem_cmp+0x40>
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d0eb      	beq.n	800a8a4 <mem_cmp+0x18>

	return r;
 800a8cc:	697b      	ldr	r3, [r7, #20]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3724      	adds	r7, #36	; 0x24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a8e4:	e002      	b.n	800a8ec <chk_chr+0x12>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	607b      	str	r3, [r7, #4]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d005      	beq.n	800a900 <chk_chr+0x26>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d1f2      	bne.n	800a8e6 <chk_chr+0xc>
	return *str;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	781b      	ldrb	r3, [r3, #0]
}
 800a904:	4618      	mov	r0, r3
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d009      	beq.n	800a932 <lock_fs+0x22>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	4618      	mov	r0, r3
 800a924:	f001 ff0e 	bl	800c744 <ff_req_grant>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <lock_fs+0x22>
 800a92e:	2301      	movs	r3, #1
 800a930:	e000      	b.n	800a934 <lock_fs+0x24>
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00d      	beq.n	800a96a <unlock_fs+0x2e>
 800a94e:	78fb      	ldrb	r3, [r7, #3]
 800a950:	2b0c      	cmp	r3, #12
 800a952:	d00a      	beq.n	800a96a <unlock_fs+0x2e>
 800a954:	78fb      	ldrb	r3, [r7, #3]
 800a956:	2b0b      	cmp	r3, #11
 800a958:	d007      	beq.n	800a96a <unlock_fs+0x2e>
 800a95a:	78fb      	ldrb	r3, [r7, #3]
 800a95c:	2b0f      	cmp	r3, #15
 800a95e:	d004      	beq.n	800a96a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	4618      	mov	r0, r3
 800a966:	f001 ff02 	bl	800c76e <ff_rel_grant>
	}
}
 800a96a:	bf00      	nop
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
	...

0800a974 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a97e:	2300      	movs	r3, #0
 800a980:	60bb      	str	r3, [r7, #8]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	60fb      	str	r3, [r7, #12]
 800a986:	e029      	b.n	800a9dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a988:	4a27      	ldr	r2, [pc, #156]	; (800aa28 <chk_lock+0xb4>)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	011b      	lsls	r3, r3, #4
 800a98e:	4413      	add	r3, r2
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d01d      	beq.n	800a9d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a996:	4a24      	ldr	r2, [pc, #144]	; (800aa28 <chk_lock+0xb4>)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	011b      	lsls	r3, r3, #4
 800a99c:	4413      	add	r3, r2
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d116      	bne.n	800a9d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a9a8:	4a1f      	ldr	r2, [pc, #124]	; (800aa28 <chk_lock+0xb4>)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	011b      	lsls	r3, r3, #4
 800a9ae:	4413      	add	r3, r2
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d10c      	bne.n	800a9d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a9bc:	4a1a      	ldr	r2, [pc, #104]	; (800aa28 <chk_lock+0xb4>)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	011b      	lsls	r3, r3, #4
 800a9c2:	4413      	add	r3, r2
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d102      	bne.n	800a9d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a9d0:	e007      	b.n	800a9e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d9d2      	bls.n	800a988 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d109      	bne.n	800a9fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d102      	bne.n	800a9f4 <chk_lock+0x80>
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	d101      	bne.n	800a9f8 <chk_lock+0x84>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	e010      	b.n	800aa1a <chk_lock+0xa6>
 800a9f8:	2312      	movs	r3, #18
 800a9fa:	e00e      	b.n	800aa1a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d108      	bne.n	800aa14 <chk_lock+0xa0>
 800aa02:	4a09      	ldr	r2, [pc, #36]	; (800aa28 <chk_lock+0xb4>)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	011b      	lsls	r3, r3, #4
 800aa08:	4413      	add	r3, r2
 800aa0a:	330c      	adds	r3, #12
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa12:	d101      	bne.n	800aa18 <chk_lock+0xa4>
 800aa14:	2310      	movs	r3, #16
 800aa16:	e000      	b.n	800aa1a <chk_lock+0xa6>
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	240000a8 	.word	0x240000a8

0800aa2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aa32:	2300      	movs	r3, #0
 800aa34:	607b      	str	r3, [r7, #4]
 800aa36:	e002      	b.n	800aa3e <enq_lock+0x12>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	607b      	str	r3, [r7, #4]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d806      	bhi.n	800aa52 <enq_lock+0x26>
 800aa44:	4a09      	ldr	r2, [pc, #36]	; (800aa6c <enq_lock+0x40>)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	011b      	lsls	r3, r3, #4
 800aa4a:	4413      	add	r3, r2
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1f2      	bne.n	800aa38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	bf14      	ite	ne
 800aa58:	2301      	movne	r3, #1
 800aa5a:	2300      	moveq	r3, #0
 800aa5c:	b2db      	uxtb	r3, r3
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	240000a8 	.word	0x240000a8

0800aa70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	60fb      	str	r3, [r7, #12]
 800aa7e:	e01f      	b.n	800aac0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800aa80:	4a41      	ldr	r2, [pc, #260]	; (800ab88 <inc_lock+0x118>)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	011b      	lsls	r3, r3, #4
 800aa86:	4413      	add	r3, r2
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d113      	bne.n	800aaba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800aa92:	4a3d      	ldr	r2, [pc, #244]	; (800ab88 <inc_lock+0x118>)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	4413      	add	r3, r2
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d109      	bne.n	800aaba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800aaa6:	4a38      	ldr	r2, [pc, #224]	; (800ab88 <inc_lock+0x118>)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	011b      	lsls	r3, r3, #4
 800aaac:	4413      	add	r3, r2
 800aaae:	3308      	adds	r3, #8
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d006      	beq.n	800aac8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	3301      	adds	r3, #1
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d9dc      	bls.n	800aa80 <inc_lock+0x10>
 800aac6:	e000      	b.n	800aaca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800aac8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d132      	bne.n	800ab36 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aad0:	2300      	movs	r3, #0
 800aad2:	60fb      	str	r3, [r7, #12]
 800aad4:	e002      	b.n	800aadc <inc_lock+0x6c>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	3301      	adds	r3, #1
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d806      	bhi.n	800aaf0 <inc_lock+0x80>
 800aae2:	4a29      	ldr	r2, [pc, #164]	; (800ab88 <inc_lock+0x118>)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	011b      	lsls	r3, r3, #4
 800aae8:	4413      	add	r3, r2
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1f2      	bne.n	800aad6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d101      	bne.n	800aafa <inc_lock+0x8a>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	e040      	b.n	800ab7c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	4922      	ldr	r1, [pc, #136]	; (800ab88 <inc_lock+0x118>)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	011b      	lsls	r3, r3, #4
 800ab04:	440b      	add	r3, r1
 800ab06:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	491e      	ldr	r1, [pc, #120]	; (800ab88 <inc_lock+0x118>)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	011b      	lsls	r3, r3, #4
 800ab12:	440b      	add	r3, r1
 800ab14:	3304      	adds	r3, #4
 800ab16:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	695a      	ldr	r2, [r3, #20]
 800ab1c:	491a      	ldr	r1, [pc, #104]	; (800ab88 <inc_lock+0x118>)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	011b      	lsls	r3, r3, #4
 800ab22:	440b      	add	r3, r1
 800ab24:	3308      	adds	r3, #8
 800ab26:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ab28:	4a17      	ldr	r2, [pc, #92]	; (800ab88 <inc_lock+0x118>)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	011b      	lsls	r3, r3, #4
 800ab2e:	4413      	add	r3, r2
 800ab30:	330c      	adds	r3, #12
 800ab32:	2200      	movs	r2, #0
 800ab34:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d009      	beq.n	800ab50 <inc_lock+0xe0>
 800ab3c:	4a12      	ldr	r2, [pc, #72]	; (800ab88 <inc_lock+0x118>)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	011b      	lsls	r3, r3, #4
 800ab42:	4413      	add	r3, r2
 800ab44:	330c      	adds	r3, #12
 800ab46:	881b      	ldrh	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <inc_lock+0xe0>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	e015      	b.n	800ab7c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d108      	bne.n	800ab68 <inc_lock+0xf8>
 800ab56:	4a0c      	ldr	r2, [pc, #48]	; (800ab88 <inc_lock+0x118>)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	011b      	lsls	r3, r3, #4
 800ab5c:	4413      	add	r3, r2
 800ab5e:	330c      	adds	r3, #12
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	3301      	adds	r3, #1
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	e001      	b.n	800ab6c <inc_lock+0xfc>
 800ab68:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab6c:	4906      	ldr	r1, [pc, #24]	; (800ab88 <inc_lock+0x118>)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	011b      	lsls	r3, r3, #4
 800ab72:	440b      	add	r3, r1
 800ab74:	330c      	adds	r3, #12
 800ab76:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	3301      	adds	r3, #1
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr
 800ab88:	240000a8 	.word	0x240000a8

0800ab8c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	3b01      	subs	r3, #1
 800ab98:	607b      	str	r3, [r7, #4]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d825      	bhi.n	800abec <dec_lock+0x60>
		n = Files[i].ctr;
 800aba0:	4a17      	ldr	r2, [pc, #92]	; (800ac00 <dec_lock+0x74>)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	011b      	lsls	r3, r3, #4
 800aba6:	4413      	add	r3, r2
 800aba8:	330c      	adds	r3, #12
 800abaa:	881b      	ldrh	r3, [r3, #0]
 800abac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800abae:	89fb      	ldrh	r3, [r7, #14]
 800abb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abb4:	d101      	bne.n	800abba <dec_lock+0x2e>
 800abb6:	2300      	movs	r3, #0
 800abb8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800abba:	89fb      	ldrh	r3, [r7, #14]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <dec_lock+0x3a>
 800abc0:	89fb      	ldrh	r3, [r7, #14]
 800abc2:	3b01      	subs	r3, #1
 800abc4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800abc6:	4a0e      	ldr	r2, [pc, #56]	; (800ac00 <dec_lock+0x74>)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	011b      	lsls	r3, r3, #4
 800abcc:	4413      	add	r3, r2
 800abce:	330c      	adds	r3, #12
 800abd0:	89fa      	ldrh	r2, [r7, #14]
 800abd2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800abd4:	89fb      	ldrh	r3, [r7, #14]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d105      	bne.n	800abe6 <dec_lock+0x5a>
 800abda:	4a09      	ldr	r2, [pc, #36]	; (800ac00 <dec_lock+0x74>)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	011b      	lsls	r3, r3, #4
 800abe0:	4413      	add	r3, r2
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	737b      	strb	r3, [r7, #13]
 800abea:	e001      	b.n	800abf0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800abec:	2302      	movs	r3, #2
 800abee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800abf0:	7b7b      	ldrb	r3, [r7, #13]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	240000a8 	.word	0x240000a8

0800ac04 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	e010      	b.n	800ac34 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ac12:	4a0d      	ldr	r2, [pc, #52]	; (800ac48 <clear_lock+0x44>)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	011b      	lsls	r3, r3, #4
 800ac18:	4413      	add	r3, r2
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d105      	bne.n	800ac2e <clear_lock+0x2a>
 800ac22:	4a09      	ldr	r2, [pc, #36]	; (800ac48 <clear_lock+0x44>)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	011b      	lsls	r3, r3, #4
 800ac28:	4413      	add	r3, r2
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	3301      	adds	r3, #1
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d9eb      	bls.n	800ac12 <clear_lock+0xe>
	}
}
 800ac3a:	bf00      	nop
 800ac3c:	bf00      	nop
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	240000a8 	.word	0x240000a8

0800ac4c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	78db      	ldrb	r3, [r3, #3]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d034      	beq.n	800acca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac64:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	7858      	ldrb	r0, [r3, #1]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ac70:	2301      	movs	r3, #1
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	f7ff fd0e 	bl	800a694 <disk_write>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d002      	beq.n	800ac84 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	73fb      	strb	r3, [r7, #15]
 800ac82:	e022      	b.n	800acca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	1ad2      	subs	r2, r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	69db      	ldr	r3, [r3, #28]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d217      	bcs.n	800acca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	789b      	ldrb	r3, [r3, #2]
 800ac9e:	613b      	str	r3, [r7, #16]
 800aca0:	e010      	b.n	800acc4 <sync_window+0x78>
					wsect += fs->fsize;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	4413      	add	r3, r2
 800acaa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	7858      	ldrb	r0, [r3, #1]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800acb6:	2301      	movs	r3, #1
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	f7ff fceb 	bl	800a694 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	613b      	str	r3, [r7, #16]
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d8eb      	bhi.n	800aca2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800acca:	7bfb      	ldrb	r3, [r7, #15]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d01b      	beq.n	800ad24 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff ffad 	bl	800ac4c <sync_window>
 800acf2:	4603      	mov	r3, r0
 800acf4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800acf6:	7bfb      	ldrb	r3, [r7, #15]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d113      	bne.n	800ad24 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	7858      	ldrb	r0, [r3, #1]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ad06:	2301      	movs	r3, #1
 800ad08:	683a      	ldr	r2, [r7, #0]
 800ad0a:	f7ff fca3 	bl	800a654 <disk_read>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d004      	beq.n	800ad1e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ad14:	f04f 33ff 	mov.w	r3, #4294967295
 800ad18:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
	...

0800ad30 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f7ff ff87 	bl	800ac4c <sync_window>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d158      	bne.n	800adfa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d148      	bne.n	800ade2 <sync_fs+0xb2>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	791b      	ldrb	r3, [r3, #4]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d144      	bne.n	800ade2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	3334      	adds	r3, #52	; 0x34
 800ad5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad60:	2100      	movs	r1, #0
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff fd77 	bl	800a856 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	3334      	adds	r3, #52	; 0x34
 800ad6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ad70:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7ff fd06 	bl	800a786 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3334      	adds	r3, #52	; 0x34
 800ad7e:	4921      	ldr	r1, [pc, #132]	; (800ae04 <sync_fs+0xd4>)
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7ff fd1b 	bl	800a7bc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	3334      	adds	r3, #52	; 0x34
 800ad8a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ad8e:	491e      	ldr	r1, [pc, #120]	; (800ae08 <sync_fs+0xd8>)
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7ff fd13 	bl	800a7bc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	3334      	adds	r3, #52	; 0x34
 800ad9a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	695b      	ldr	r3, [r3, #20]
 800ada2:	4619      	mov	r1, r3
 800ada4:	4610      	mov	r0, r2
 800ada6:	f7ff fd09 	bl	800a7bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	3334      	adds	r3, #52	; 0x34
 800adae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	4619      	mov	r1, r3
 800adb8:	4610      	mov	r0, r2
 800adba:	f7ff fcff 	bl	800a7bc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	7858      	ldrb	r0, [r3, #1]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800add6:	2301      	movs	r3, #1
 800add8:	f7ff fc5c 	bl	800a694 <disk_write>
			fs->fsi_flag = 0;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	785b      	ldrb	r3, [r3, #1]
 800ade6:	2200      	movs	r2, #0
 800ade8:	2100      	movs	r1, #0
 800adea:	4618      	mov	r0, r3
 800adec:	f7ff fc72 	bl	800a6d4 <disk_ioctl>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d001      	beq.n	800adfa <sync_fs+0xca>
 800adf6:	2301      	movs	r3, #1
 800adf8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800adfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	41615252 	.word	0x41615252
 800ae08:	61417272 	.word	0x61417272

0800ae0c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	3b02      	subs	r3, #2
 800ae1a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	3b02      	subs	r3, #2
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d301      	bcc.n	800ae2c <clust2sect+0x20>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	e008      	b.n	800ae3e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	895b      	ldrh	r3, [r3, #10]
 800ae30:	461a      	mov	r2, r3
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	fb03 f202 	mul.w	r2, r3, r2
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3c:	4413      	add	r3, r2
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b086      	sub	sp, #24
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d904      	bls.n	800ae6a <get_fat+0x20>
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d302      	bcc.n	800ae70 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	617b      	str	r3, [r7, #20]
 800ae6e:	e08f      	b.n	800af90 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ae70:	f04f 33ff 	mov.w	r3, #4294967295
 800ae74:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d062      	beq.n	800af44 <get_fat+0xfa>
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	dc7c      	bgt.n	800af7c <get_fat+0x132>
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d002      	beq.n	800ae8c <get_fat+0x42>
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d042      	beq.n	800af10 <get_fat+0xc6>
 800ae8a:	e077      	b.n	800af7c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	60fb      	str	r3, [r7, #12]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	085b      	lsrs	r3, r3, #1
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	4413      	add	r3, r2
 800ae98:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	0a5b      	lsrs	r3, r3, #9
 800aea2:	4413      	add	r3, r2
 800aea4:	4619      	mov	r1, r3
 800aea6:	6938      	ldr	r0, [r7, #16]
 800aea8:	f7ff ff14 	bl	800acd4 <move_window>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d167      	bne.n	800af82 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	1c5a      	adds	r2, r3, #1
 800aeb6:	60fa      	str	r2, [r7, #12]
 800aeb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	4413      	add	r3, r2
 800aec0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aec4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	0a5b      	lsrs	r3, r3, #9
 800aece:	4413      	add	r3, r2
 800aed0:	4619      	mov	r1, r3
 800aed2:	6938      	ldr	r0, [r7, #16]
 800aed4:	f7ff fefe 	bl	800acd4 <move_window>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d153      	bne.n	800af86 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee4:	693a      	ldr	r2, [r7, #16]
 800aee6:	4413      	add	r3, r2
 800aee8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aeec:	021b      	lsls	r3, r3, #8
 800aeee:	461a      	mov	r2, r3
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	f003 0301 	and.w	r3, r3, #1
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <get_fat+0xbc>
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	091b      	lsrs	r3, r3, #4
 800af04:	e002      	b.n	800af0c <get_fat+0xc2>
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af0c:	617b      	str	r3, [r7, #20]
			break;
 800af0e:	e03f      	b.n	800af90 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	0a1b      	lsrs	r3, r3, #8
 800af18:	4413      	add	r3, r2
 800af1a:	4619      	mov	r1, r3
 800af1c:	6938      	ldr	r0, [r7, #16]
 800af1e:	f7ff fed9 	bl	800acd4 <move_window>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d130      	bne.n	800af8a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800af36:	4413      	add	r3, r2
 800af38:	4618      	mov	r0, r3
 800af3a:	f7ff fbe9 	bl	800a710 <ld_word>
 800af3e:	4603      	mov	r3, r0
 800af40:	617b      	str	r3, [r7, #20]
			break;
 800af42:	e025      	b.n	800af90 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	09db      	lsrs	r3, r3, #7
 800af4c:	4413      	add	r3, r2
 800af4e:	4619      	mov	r1, r3
 800af50:	6938      	ldr	r0, [r7, #16]
 800af52:	f7ff febf 	bl	800acd4 <move_window>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d118      	bne.n	800af8e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800af6a:	4413      	add	r3, r2
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff fbe7 	bl	800a740 <ld_dword>
 800af72:	4603      	mov	r3, r0
 800af74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800af78:	617b      	str	r3, [r7, #20]
			break;
 800af7a:	e009      	b.n	800af90 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800af7c:	2301      	movs	r3, #1
 800af7e:	617b      	str	r3, [r7, #20]
 800af80:	e006      	b.n	800af90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af82:	bf00      	nop
 800af84:	e004      	b.n	800af90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af86:	bf00      	nop
 800af88:	e002      	b.n	800af90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800af8a:	bf00      	nop
 800af8c:	e000      	b.n	800af90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800af8e:	bf00      	nop
		}
	}

	return val;
 800af90:	697b      	ldr	r3, [r7, #20]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800af9a:	b590      	push	{r4, r7, lr}
 800af9c:	b089      	sub	sp, #36	; 0x24
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	60f8      	str	r0, [r7, #12]
 800afa2:	60b9      	str	r1, [r7, #8]
 800afa4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800afa6:	2302      	movs	r3, #2
 800afa8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2b01      	cmp	r3, #1
 800afae:	f240 80d2 	bls.w	800b156 <put_fat+0x1bc>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	429a      	cmp	r2, r3
 800afba:	f080 80cc 	bcs.w	800b156 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	f000 8096 	beq.w	800b0f4 <put_fat+0x15a>
 800afc8:	2b03      	cmp	r3, #3
 800afca:	f300 80cd 	bgt.w	800b168 <put_fat+0x1ce>
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d002      	beq.n	800afd8 <put_fat+0x3e>
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d06e      	beq.n	800b0b4 <put_fat+0x11a>
 800afd6:	e0c7      	b.n	800b168 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	61bb      	str	r3, [r7, #24]
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	085b      	lsrs	r3, r3, #1
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	4413      	add	r3, r2
 800afe4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	0a5b      	lsrs	r3, r3, #9
 800afee:	4413      	add	r3, r2
 800aff0:	4619      	mov	r1, r3
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f7ff fe6e 	bl	800acd4 <move_window>
 800aff8:	4603      	mov	r3, r0
 800affa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800affc:	7ffb      	ldrb	r3, [r7, #31]
 800affe:	2b00      	cmp	r3, #0
 800b000:	f040 80ab 	bne.w	800b15a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	1c59      	adds	r1, r3, #1
 800b00e:	61b9      	str	r1, [r7, #24]
 800b010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b014:	4413      	add	r3, r2
 800b016:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f003 0301 	and.w	r3, r3, #1
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00d      	beq.n	800b03e <put_fat+0xa4>
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	b25b      	sxtb	r3, r3
 800b028:	f003 030f 	and.w	r3, r3, #15
 800b02c:	b25a      	sxtb	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	b2db      	uxtb	r3, r3
 800b032:	011b      	lsls	r3, r3, #4
 800b034:	b25b      	sxtb	r3, r3
 800b036:	4313      	orrs	r3, r2
 800b038:	b25b      	sxtb	r3, r3
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	e001      	b.n	800b042 <put_fat+0xa8>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	b2db      	uxtb	r3, r3
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2201      	movs	r2, #1
 800b04a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	0a5b      	lsrs	r3, r3, #9
 800b054:	4413      	add	r3, r2
 800b056:	4619      	mov	r1, r3
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f7ff fe3b 	bl	800acd4 <move_window>
 800b05e:	4603      	mov	r3, r0
 800b060:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b062:	7ffb      	ldrb	r3, [r7, #31]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d17a      	bne.n	800b15e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b074:	4413      	add	r3, r2
 800b076:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d003      	beq.n	800b08a <put_fat+0xf0>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	091b      	lsrs	r3, r3, #4
 800b086:	b2db      	uxtb	r3, r3
 800b088:	e00e      	b.n	800b0a8 <put_fat+0x10e>
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	b25b      	sxtb	r3, r3
 800b090:	f023 030f 	bic.w	r3, r3, #15
 800b094:	b25a      	sxtb	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	0a1b      	lsrs	r3, r3, #8
 800b09a:	b25b      	sxtb	r3, r3
 800b09c:	f003 030f 	and.w	r3, r3, #15
 800b0a0:	b25b      	sxtb	r3, r3
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	b25b      	sxtb	r3, r3
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	697a      	ldr	r2, [r7, #20]
 800b0aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	70da      	strb	r2, [r3, #3]
			break;
 800b0b2:	e059      	b.n	800b168 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	0a1b      	lsrs	r3, r3, #8
 800b0bc:	4413      	add	r3, r2
 800b0be:	4619      	mov	r1, r3
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f7ff fe07 	bl	800acd4 <move_window>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b0ca:	7ffb      	ldrb	r3, [r7, #31]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d148      	bne.n	800b162 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	005b      	lsls	r3, r3, #1
 800b0da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b0de:	4413      	add	r3, r2
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	b292      	uxth	r2, r2
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7ff fb4d 	bl	800a786 <st_word>
			fs->wflag = 1;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	70da      	strb	r2, [r3, #3]
			break;
 800b0f2:	e039      	b.n	800b168 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	09db      	lsrs	r3, r3, #7
 800b0fc:	4413      	add	r3, r2
 800b0fe:	4619      	mov	r1, r3
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f7ff fde7 	bl	800acd4 <move_window>
 800b106:	4603      	mov	r3, r0
 800b108:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b10a:	7ffb      	ldrb	r3, [r7, #31]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d12a      	bne.n	800b166 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b124:	4413      	add	r3, r2
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff fb0a 	bl	800a740 <ld_dword>
 800b12c:	4603      	mov	r3, r0
 800b12e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b132:	4323      	orrs	r3, r4
 800b134:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b144:	4413      	add	r3, r2
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff fb37 	bl	800a7bc <st_dword>
			fs->wflag = 1;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2201      	movs	r2, #1
 800b152:	70da      	strb	r2, [r3, #3]
			break;
 800b154:	e008      	b.n	800b168 <put_fat+0x1ce>
		}
	}
 800b156:	bf00      	nop
 800b158:	e006      	b.n	800b168 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b15a:	bf00      	nop
 800b15c:	e004      	b.n	800b168 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b15e:	bf00      	nop
 800b160:	e002      	b.n	800b168 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b162:	bf00      	nop
 800b164:	e000      	b.n	800b168 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b166:	bf00      	nop
	return res;
 800b168:	7ffb      	ldrb	r3, [r7, #31]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3724      	adds	r7, #36	; 0x24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd90      	pop	{r4, r7, pc}

0800b172 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b088      	sub	sp, #32
 800b176:	af00      	add	r7, sp, #0
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	60b9      	str	r1, [r7, #8]
 800b17c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b17e:	2300      	movs	r3, #0
 800b180:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d904      	bls.n	800b198 <remove_chain+0x26>
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	429a      	cmp	r2, r3
 800b196:	d301      	bcc.n	800b19c <remove_chain+0x2a>
 800b198:	2302      	movs	r3, #2
 800b19a:	e04b      	b.n	800b234 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00c      	beq.n	800b1bc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	69b8      	ldr	r0, [r7, #24]
 800b1aa:	f7ff fef6 	bl	800af9a <put_fat>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b1b2:	7ffb      	ldrb	r3, [r7, #31]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d001      	beq.n	800b1bc <remove_chain+0x4a>
 800b1b8:	7ffb      	ldrb	r3, [r7, #31]
 800b1ba:	e03b      	b.n	800b234 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b1bc:	68b9      	ldr	r1, [r7, #8]
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f7ff fe43 	bl	800ae4a <get_fat>
 800b1c4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d031      	beq.n	800b230 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d101      	bne.n	800b1d6 <remove_chain+0x64>
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	e02e      	b.n	800b234 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1dc:	d101      	bne.n	800b1e2 <remove_chain+0x70>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e028      	b.n	800b234 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	68b9      	ldr	r1, [r7, #8]
 800b1e6:	69b8      	ldr	r0, [r7, #24]
 800b1e8:	f7ff fed7 	bl	800af9a <put_fat>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b1f0:	7ffb      	ldrb	r3, [r7, #31]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <remove_chain+0x88>
 800b1f6:	7ffb      	ldrb	r3, [r7, #31]
 800b1f8:	e01c      	b.n	800b234 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	695a      	ldr	r2, [r3, #20]
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	3b02      	subs	r3, #2
 800b204:	429a      	cmp	r2, r3
 800b206:	d20b      	bcs.n	800b220 <remove_chain+0xae>
			fs->free_clst++;
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	695b      	ldr	r3, [r3, #20]
 800b20c:	1c5a      	adds	r2, r3, #1
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	791b      	ldrb	r3, [r3, #4]
 800b216:	f043 0301 	orr.w	r3, r3, #1
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d3c6      	bcc.n	800b1bc <remove_chain+0x4a>
 800b22e:	e000      	b.n	800b232 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b230:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3720      	adds	r7, #32
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b088      	sub	sp, #32
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10d      	bne.n	800b26e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d004      	beq.n	800b268 <create_chain+0x2c>
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	429a      	cmp	r2, r3
 800b266:	d31b      	bcc.n	800b2a0 <create_chain+0x64>
 800b268:	2301      	movs	r3, #1
 800b26a:	61bb      	str	r3, [r7, #24]
 800b26c:	e018      	b.n	800b2a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff fdea 	bl	800ae4a <get_fat>
 800b276:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d801      	bhi.n	800b282 <create_chain+0x46>
 800b27e:	2301      	movs	r3, #1
 800b280:	e070      	b.n	800b364 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b288:	d101      	bne.n	800b28e <create_chain+0x52>
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	e06a      	b.n	800b364 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	429a      	cmp	r2, r3
 800b296:	d201      	bcs.n	800b29c <create_chain+0x60>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	e063      	b.n	800b364 <create_chain+0x128>
		scl = clst;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	69fa      	ldr	r2, [r7, #28]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d307      	bcc.n	800b2c4 <create_chain+0x88>
				ncl = 2;
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b2b8:	69fa      	ldr	r2, [r7, #28]
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d901      	bls.n	800b2c4 <create_chain+0x88>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	e04f      	b.n	800b364 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b2c4:	69f9      	ldr	r1, [r7, #28]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7ff fdbf 	bl	800ae4a <get_fat>
 800b2cc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00e      	beq.n	800b2f2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d003      	beq.n	800b2e2 <create_chain+0xa6>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e0:	d101      	bne.n	800b2e6 <create_chain+0xaa>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	e03e      	b.n	800b364 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b2e6:	69fa      	ldr	r2, [r7, #28]
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d1da      	bne.n	800b2a4 <create_chain+0x68>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e038      	b.n	800b364 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b2f2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f8:	69f9      	ldr	r1, [r7, #28]
 800b2fa:	6938      	ldr	r0, [r7, #16]
 800b2fc:	f7ff fe4d 	bl	800af9a <put_fat>
 800b300:	4603      	mov	r3, r0
 800b302:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d109      	bne.n	800b31e <create_chain+0xe2>
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d006      	beq.n	800b31e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b310:	69fa      	ldr	r2, [r7, #28]
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6938      	ldr	r0, [r7, #16]
 800b316:	f7ff fe40 	bl	800af9a <put_fat>
 800b31a:	4603      	mov	r3, r0
 800b31c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d116      	bne.n	800b352 <create_chain+0x116>
		fs->last_clst = ncl;
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	69fa      	ldr	r2, [r7, #28]
 800b328:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	695a      	ldr	r2, [r3, #20]
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	3b02      	subs	r3, #2
 800b334:	429a      	cmp	r2, r3
 800b336:	d804      	bhi.n	800b342 <create_chain+0x106>
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	1e5a      	subs	r2, r3, #1
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	791b      	ldrb	r3, [r3, #4]
 800b346:	f043 0301 	orr.w	r3, r3, #1
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	711a      	strb	r2, [r3, #4]
 800b350:	e007      	b.n	800b362 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d102      	bne.n	800b35e <create_chain+0x122>
 800b358:	f04f 33ff 	mov.w	r3, #4294967295
 800b35c:	e000      	b.n	800b360 <create_chain+0x124>
 800b35e:	2301      	movs	r3, #1
 800b360:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b362:	69fb      	ldr	r3, [r7, #28]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3720      	adds	r7, #32
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b382:	d204      	bcs.n	800b38e <dir_sdi+0x22>
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	f003 031f 	and.w	r3, r3, #31
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d001      	beq.n	800b392 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b38e:	2302      	movs	r3, #2
 800b390:	e063      	b.n	800b45a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d106      	bne.n	800b3b2 <dir_sdi+0x46>
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d902      	bls.n	800b3b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10c      	bne.n	800b3d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	095b      	lsrs	r3, r3, #5
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	8912      	ldrh	r2, [r2, #8]
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d301      	bcc.n	800b3c8 <dir_sdi+0x5c>
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	e048      	b.n	800b45a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	61da      	str	r2, [r3, #28]
 800b3d0:	e029      	b.n	800b426 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	895b      	ldrh	r3, [r3, #10]
 800b3d6:	025b      	lsls	r3, r3, #9
 800b3d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b3da:	e019      	b.n	800b410 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6979      	ldr	r1, [r7, #20]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7ff fd32 	bl	800ae4a <get_fat>
 800b3e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ee:	d101      	bne.n	800b3f4 <dir_sdi+0x88>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e032      	b.n	800b45a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d904      	bls.n	800b404 <dir_sdi+0x98>
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	699b      	ldr	r3, [r3, #24]
 800b3fe:	697a      	ldr	r2, [r7, #20]
 800b400:	429a      	cmp	r2, r3
 800b402:	d301      	bcc.n	800b408 <dir_sdi+0x9c>
 800b404:	2302      	movs	r3, #2
 800b406:	e028      	b.n	800b45a <dir_sdi+0xee>
			ofs -= csz;
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b410:	683a      	ldr	r2, [r7, #0]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	429a      	cmp	r2, r3
 800b416:	d2e1      	bcs.n	800b3dc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b418:	6979      	ldr	r1, [r7, #20]
 800b41a:	6938      	ldr	r0, [r7, #16]
 800b41c:	f7ff fcf6 	bl	800ae0c <clust2sect>
 800b420:	4602      	mov	r2, r0
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	697a      	ldr	r2, [r7, #20]
 800b42a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	69db      	ldr	r3, [r3, #28]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d101      	bne.n	800b438 <dir_sdi+0xcc>
 800b434:	2302      	movs	r3, #2
 800b436:	e010      	b.n	800b45a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	69da      	ldr	r2, [r3, #28]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	0a5b      	lsrs	r3, r3, #9
 800b440:	441a      	add	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b452:	441a      	add	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b086      	sub	sp, #24
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	695b      	ldr	r3, [r3, #20]
 800b476:	3320      	adds	r3, #32
 800b478:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	69db      	ldr	r3, [r3, #28]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <dir_next+0x28>
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b488:	d301      	bcc.n	800b48e <dir_next+0x2c>
 800b48a:	2304      	movs	r3, #4
 800b48c:	e0aa      	b.n	800b5e4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b494:	2b00      	cmp	r3, #0
 800b496:	f040 8098 	bne.w	800b5ca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	1c5a      	adds	r2, r3, #1
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	699b      	ldr	r3, [r3, #24]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10b      	bne.n	800b4c4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	095b      	lsrs	r3, r3, #5
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	8912      	ldrh	r2, [r2, #8]
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	f0c0 8088 	bcc.w	800b5ca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	61da      	str	r2, [r3, #28]
 800b4c0:	2304      	movs	r3, #4
 800b4c2:	e08f      	b.n	800b5e4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	0a5b      	lsrs	r3, r3, #9
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	8952      	ldrh	r2, [r2, #10]
 800b4cc:	3a01      	subs	r2, #1
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d17a      	bne.n	800b5ca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	4610      	mov	r0, r2
 800b4de:	f7ff fcb4 	bl	800ae4a <get_fat>
 800b4e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d801      	bhi.n	800b4ee <dir_next+0x8c>
 800b4ea:	2302      	movs	r3, #2
 800b4ec:	e07a      	b.n	800b5e4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f4:	d101      	bne.n	800b4fa <dir_next+0x98>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e074      	b.n	800b5e4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	429a      	cmp	r2, r3
 800b502:	d358      	bcc.n	800b5b6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d104      	bne.n	800b514 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	61da      	str	r2, [r3, #28]
 800b510:	2304      	movs	r3, #4
 800b512:	e067      	b.n	800b5e4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	4619      	mov	r1, r3
 800b51c:	4610      	mov	r0, r2
 800b51e:	f7ff fe8d 	bl	800b23c <create_chain>
 800b522:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d101      	bne.n	800b52e <dir_next+0xcc>
 800b52a:	2307      	movs	r3, #7
 800b52c:	e05a      	b.n	800b5e4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d101      	bne.n	800b538 <dir_next+0xd6>
 800b534:	2302      	movs	r3, #2
 800b536:	e055      	b.n	800b5e4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53e:	d101      	bne.n	800b544 <dir_next+0xe2>
 800b540:	2301      	movs	r3, #1
 800b542:	e04f      	b.n	800b5e4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f7ff fb81 	bl	800ac4c <sync_window>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d001      	beq.n	800b554 <dir_next+0xf2>
 800b550:	2301      	movs	r3, #1
 800b552:	e047      	b.n	800b5e4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	3334      	adds	r3, #52	; 0x34
 800b558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b55c:	2100      	movs	r1, #0
 800b55e:	4618      	mov	r0, r3
 800b560:	f7ff f979 	bl	800a856 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b564:	2300      	movs	r3, #0
 800b566:	613b      	str	r3, [r7, #16]
 800b568:	6979      	ldr	r1, [r7, #20]
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff fc4e 	bl	800ae0c <clust2sect>
 800b570:	4602      	mov	r2, r0
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	631a      	str	r2, [r3, #48]	; 0x30
 800b576:	e012      	b.n	800b59e <dir_next+0x13c>
						fs->wflag = 1;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2201      	movs	r2, #1
 800b57c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f7ff fb64 	bl	800ac4c <sync_window>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <dir_next+0x12c>
 800b58a:	2301      	movs	r3, #1
 800b58c:	e02a      	b.n	800b5e4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	3301      	adds	r3, #1
 800b592:	613b      	str	r3, [r7, #16]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b598:	1c5a      	adds	r2, r3, #1
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	631a      	str	r2, [r3, #48]	; 0x30
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	895b      	ldrh	r3, [r3, #10]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d3e6      	bcc.n	800b578 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	1ad2      	subs	r2, r2, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b5bc:	6979      	ldr	r1, [r7, #20]
 800b5be:	68f8      	ldr	r0, [r7, #12]
 800b5c0:	f7ff fc24 	bl	800ae0c <clust2sect>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5dc:	441a      	add	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3718      	adds	r7, #24
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7ff feb4 	bl	800b36c <dir_sdi>
 800b604:	4603      	mov	r3, r0
 800b606:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b608:	7dfb      	ldrb	r3, [r7, #23]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d12b      	bne.n	800b666 <dir_alloc+0x7a>
		n = 0;
 800b60e:	2300      	movs	r3, #0
 800b610:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	4619      	mov	r1, r3
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f7ff fb5b 	bl	800acd4 <move_window>
 800b61e:	4603      	mov	r3, r0
 800b620:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b622:	7dfb      	ldrb	r3, [r7, #23]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d11d      	bne.n	800b664 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	2be5      	cmp	r3, #229	; 0xe5
 800b630:	d004      	beq.n	800b63c <dir_alloc+0x50>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d107      	bne.n	800b64c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	3301      	adds	r3, #1
 800b640:	613b      	str	r3, [r7, #16]
 800b642:	693a      	ldr	r2, [r7, #16]
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	429a      	cmp	r2, r3
 800b648:	d102      	bne.n	800b650 <dir_alloc+0x64>
 800b64a:	e00c      	b.n	800b666 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b64c:	2300      	movs	r3, #0
 800b64e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b650:	2101      	movs	r1, #1
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f7ff ff05 	bl	800b462 <dir_next>
 800b658:	4603      	mov	r3, r0
 800b65a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b65c:	7dfb      	ldrb	r3, [r7, #23]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d0d7      	beq.n	800b612 <dir_alloc+0x26>
 800b662:	e000      	b.n	800b666 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b664:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b666:	7dfb      	ldrb	r3, [r7, #23]
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d101      	bne.n	800b670 <dir_alloc+0x84>
 800b66c:	2307      	movs	r3, #7
 800b66e:	75fb      	strb	r3, [r7, #23]
	return res;
 800b670:	7dfb      	ldrb	r3, [r7, #23]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3718      	adds	r7, #24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b084      	sub	sp, #16
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	331a      	adds	r3, #26
 800b688:	4618      	mov	r0, r3
 800b68a:	f7ff f841 	bl	800a710 <ld_word>
 800b68e:	4603      	mov	r3, r0
 800b690:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	2b03      	cmp	r3, #3
 800b698:	d109      	bne.n	800b6ae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	3314      	adds	r3, #20
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7ff f836 	bl	800a710 <ld_word>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	041b      	lsls	r3, r3, #16
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3710      	adds	r7, #16
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	331a      	adds	r3, #26
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	b292      	uxth	r2, r2
 800b6cc:	4611      	mov	r1, r2
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7ff f859 	bl	800a786 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	d109      	bne.n	800b6f0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f103 0214 	add.w	r2, r3, #20
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	0c1b      	lsrs	r3, r3, #16
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	4610      	mov	r0, r2
 800b6ec:	f7ff f84b 	bl	800a786 <st_word>
	}
}
 800b6f0:	bf00      	nop
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b706:	2100      	movs	r1, #0
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff fe2f 	bl	800b36c <dir_sdi>
 800b70e:	4603      	mov	r3, r0
 800b710:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d001      	beq.n	800b71c <dir_find+0x24>
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	e03e      	b.n	800b79a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	69db      	ldr	r3, [r3, #28]
 800b720:	4619      	mov	r1, r3
 800b722:	6938      	ldr	r0, [r7, #16]
 800b724:	f7ff fad6 	bl	800acd4 <move_window>
 800b728:	4603      	mov	r3, r0
 800b72a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b72c:	7dfb      	ldrb	r3, [r7, #23]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d12f      	bne.n	800b792 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d102      	bne.n	800b746 <dir_find+0x4e>
 800b740:	2304      	movs	r3, #4
 800b742:	75fb      	strb	r3, [r7, #23]
 800b744:	e028      	b.n	800b798 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a1b      	ldr	r3, [r3, #32]
 800b74a:	330b      	adds	r3, #11
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b752:	b2da      	uxtb	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a1b      	ldr	r3, [r3, #32]
 800b75c:	330b      	adds	r3, #11
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	f003 0308 	and.w	r3, r3, #8
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10a      	bne.n	800b77e <dir_find+0x86>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a18      	ldr	r0, [r3, #32]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	3324      	adds	r3, #36	; 0x24
 800b770:	220b      	movs	r2, #11
 800b772:	4619      	mov	r1, r3
 800b774:	f7ff f88a 	bl	800a88c <mem_cmp>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00b      	beq.n	800b796 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b77e:	2100      	movs	r1, #0
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7ff fe6e 	bl	800b462 <dir_next>
 800b786:	4603      	mov	r3, r0
 800b788:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d0c5      	beq.n	800b71c <dir_find+0x24>
 800b790:	e002      	b.n	800b798 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b792:	bf00      	nop
 800b794:	e000      	b.n	800b798 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b796:	bf00      	nop

	return res;
 800b798:	7dfb      	ldrb	r3, [r7, #23]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3718      	adds	r7, #24
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b7b0:	2101      	movs	r1, #1
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7ff ff1a 	bl	800b5ec <dir_alloc>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b7bc:	7bfb      	ldrb	r3, [r7, #15]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d11c      	bne.n	800b7fc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	69db      	ldr	r3, [r3, #28]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	68b8      	ldr	r0, [r7, #8]
 800b7ca:	f7ff fa83 	bl	800acd4 <move_window>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d111      	bne.n	800b7fc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6a1b      	ldr	r3, [r3, #32]
 800b7dc:	2220      	movs	r2, #32
 800b7de:	2100      	movs	r1, #0
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7ff f838 	bl	800a856 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a18      	ldr	r0, [r3, #32]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	3324      	adds	r3, #36	; 0x24
 800b7ee:	220b      	movs	r2, #11
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	f7ff f80f 	bl	800a814 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
	...

0800b808 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b088      	sub	sp, #32
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	60fb      	str	r3, [r7, #12]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3324      	adds	r3, #36	; 0x24
 800b81c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b81e:	220b      	movs	r2, #11
 800b820:	2120      	movs	r1, #32
 800b822:	68b8      	ldr	r0, [r7, #8]
 800b824:	f7ff f817 	bl	800a856 <mem_set>
	si = i = 0; ni = 8;
 800b828:	2300      	movs	r3, #0
 800b82a:	613b      	str	r3, [r7, #16]
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	61fb      	str	r3, [r7, #28]
 800b830:	2308      	movs	r3, #8
 800b832:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	1c5a      	adds	r2, r3, #1
 800b838:	61fa      	str	r2, [r7, #28]
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	4413      	add	r3, r2
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b842:	7efb      	ldrb	r3, [r7, #27]
 800b844:	2b20      	cmp	r3, #32
 800b846:	d94e      	bls.n	800b8e6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b848:	7efb      	ldrb	r3, [r7, #27]
 800b84a:	2b2f      	cmp	r3, #47	; 0x2f
 800b84c:	d006      	beq.n	800b85c <create_name+0x54>
 800b84e:	7efb      	ldrb	r3, [r7, #27]
 800b850:	2b5c      	cmp	r3, #92	; 0x5c
 800b852:	d110      	bne.n	800b876 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b854:	e002      	b.n	800b85c <create_name+0x54>
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	3301      	adds	r3, #1
 800b85a:	61fb      	str	r3, [r7, #28]
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	4413      	add	r3, r2
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	2b2f      	cmp	r3, #47	; 0x2f
 800b866:	d0f6      	beq.n	800b856 <create_name+0x4e>
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	4413      	add	r3, r2
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2b5c      	cmp	r3, #92	; 0x5c
 800b872:	d0f0      	beq.n	800b856 <create_name+0x4e>
			break;
 800b874:	e038      	b.n	800b8e8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b876:	7efb      	ldrb	r3, [r7, #27]
 800b878:	2b2e      	cmp	r3, #46	; 0x2e
 800b87a:	d003      	beq.n	800b884 <create_name+0x7c>
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	429a      	cmp	r2, r3
 800b882:	d30c      	bcc.n	800b89e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2b0b      	cmp	r3, #11
 800b888:	d002      	beq.n	800b890 <create_name+0x88>
 800b88a:	7efb      	ldrb	r3, [r7, #27]
 800b88c:	2b2e      	cmp	r3, #46	; 0x2e
 800b88e:	d001      	beq.n	800b894 <create_name+0x8c>
 800b890:	2306      	movs	r3, #6
 800b892:	e044      	b.n	800b91e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b894:	2308      	movs	r3, #8
 800b896:	613b      	str	r3, [r7, #16]
 800b898:	230b      	movs	r3, #11
 800b89a:	617b      	str	r3, [r7, #20]
			continue;
 800b89c:	e022      	b.n	800b8e4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b89e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	da04      	bge.n	800b8b0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b8a6:	7efb      	ldrb	r3, [r7, #27]
 800b8a8:	3b80      	subs	r3, #128	; 0x80
 800b8aa:	4a1f      	ldr	r2, [pc, #124]	; (800b928 <create_name+0x120>)
 800b8ac:	5cd3      	ldrb	r3, [r2, r3]
 800b8ae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b8b0:	7efb      	ldrb	r3, [r7, #27]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	481d      	ldr	r0, [pc, #116]	; (800b92c <create_name+0x124>)
 800b8b6:	f7ff f810 	bl	800a8da <chk_chr>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d001      	beq.n	800b8c4 <create_name+0xbc>
 800b8c0:	2306      	movs	r3, #6
 800b8c2:	e02c      	b.n	800b91e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b8c4:	7efb      	ldrb	r3, [r7, #27]
 800b8c6:	2b60      	cmp	r3, #96	; 0x60
 800b8c8:	d905      	bls.n	800b8d6 <create_name+0xce>
 800b8ca:	7efb      	ldrb	r3, [r7, #27]
 800b8cc:	2b7a      	cmp	r3, #122	; 0x7a
 800b8ce:	d802      	bhi.n	800b8d6 <create_name+0xce>
 800b8d0:	7efb      	ldrb	r3, [r7, #27]
 800b8d2:	3b20      	subs	r3, #32
 800b8d4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	1c5a      	adds	r2, r3, #1
 800b8da:	613a      	str	r2, [r7, #16]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	4413      	add	r3, r2
 800b8e0:	7efa      	ldrb	r2, [r7, #27]
 800b8e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b8e4:	e7a6      	b.n	800b834 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b8e6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	441a      	add	r2, r3
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <create_name+0xf4>
 800b8f8:	2306      	movs	r3, #6
 800b8fa:	e010      	b.n	800b91e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	2be5      	cmp	r3, #229	; 0xe5
 800b902:	d102      	bne.n	800b90a <create_name+0x102>
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2205      	movs	r2, #5
 800b908:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b90a:	7efb      	ldrb	r3, [r7, #27]
 800b90c:	2b20      	cmp	r3, #32
 800b90e:	d801      	bhi.n	800b914 <create_name+0x10c>
 800b910:	2204      	movs	r2, #4
 800b912:	e000      	b.n	800b916 <create_name+0x10e>
 800b914:	2200      	movs	r2, #0
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	330b      	adds	r3, #11
 800b91a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b91c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3720      	adds	r7, #32
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	08010b38 	.word	0x08010b38
 800b92c:	08010a48 	.word	0x08010a48

0800b930 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b944:	e002      	b.n	800b94c <follow_path+0x1c>
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	3301      	adds	r3, #1
 800b94a:	603b      	str	r3, [r7, #0]
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	2b2f      	cmp	r3, #47	; 0x2f
 800b952:	d0f8      	beq.n	800b946 <follow_path+0x16>
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	2b5c      	cmp	r3, #92	; 0x5c
 800b95a:	d0f4      	beq.n	800b946 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	2200      	movs	r2, #0
 800b960:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b1f      	cmp	r3, #31
 800b968:	d80a      	bhi.n	800b980 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2280      	movs	r2, #128	; 0x80
 800b96e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b972:	2100      	movs	r1, #0
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff fcf9 	bl	800b36c <dir_sdi>
 800b97a:	4603      	mov	r3, r0
 800b97c:	75fb      	strb	r3, [r7, #23]
 800b97e:	e043      	b.n	800ba08 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b980:	463b      	mov	r3, r7
 800b982:	4619      	mov	r1, r3
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7ff ff3f 	bl	800b808 <create_name>
 800b98a:	4603      	mov	r3, r0
 800b98c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b98e:	7dfb      	ldrb	r3, [r7, #23]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d134      	bne.n	800b9fe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f7ff feaf 	bl	800b6f8 <dir_find>
 800b99a:	4603      	mov	r3, r0
 800b99c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b9a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00a      	beq.n	800b9c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b9ac:	7dfb      	ldrb	r3, [r7, #23]
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	d127      	bne.n	800ba02 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b9b2:	7afb      	ldrb	r3, [r7, #11]
 800b9b4:	f003 0304 	and.w	r3, r3, #4
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d122      	bne.n	800ba02 <follow_path+0xd2>
 800b9bc:	2305      	movs	r3, #5
 800b9be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b9c0:	e01f      	b.n	800ba02 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b9c2:	7afb      	ldrb	r3, [r7, #11]
 800b9c4:	f003 0304 	and.w	r3, r3, #4
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d11c      	bne.n	800ba06 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	799b      	ldrb	r3, [r3, #6]
 800b9d0:	f003 0310 	and.w	r3, r3, #16
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d102      	bne.n	800b9de <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b9d8:	2305      	movs	r3, #5
 800b9da:	75fb      	strb	r3, [r7, #23]
 800b9dc:	e014      	b.n	800ba08 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ec:	4413      	add	r3, r2
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f7ff fe42 	bl	800b67a <ld_clust>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b9fc:	e7c0      	b.n	800b980 <follow_path+0x50>
			if (res != FR_OK) break;
 800b9fe:	bf00      	nop
 800ba00:	e002      	b.n	800ba08 <follow_path+0xd8>
				break;
 800ba02:	bf00      	nop
 800ba04:	e000      	b.n	800ba08 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba06:	bf00      	nop
			}
		}
	}

	return res;
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ba12:	b480      	push	{r7}
 800ba14:	b087      	sub	sp, #28
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ba1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba1e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d031      	beq.n	800ba8c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	617b      	str	r3, [r7, #20]
 800ba2e:	e002      	b.n	800ba36 <get_ldnumber+0x24>
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	3301      	adds	r3, #1
 800ba34:	617b      	str	r3, [r7, #20]
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	2b20      	cmp	r3, #32
 800ba3c:	d903      	bls.n	800ba46 <get_ldnumber+0x34>
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	2b3a      	cmp	r3, #58	; 0x3a
 800ba44:	d1f4      	bne.n	800ba30 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b3a      	cmp	r3, #58	; 0x3a
 800ba4c:	d11c      	bne.n	800ba88 <get_ldnumber+0x76>
			tp = *path;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	60fa      	str	r2, [r7, #12]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	3b30      	subs	r3, #48	; 0x30
 800ba5e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	2b09      	cmp	r3, #9
 800ba64:	d80e      	bhi.n	800ba84 <get_ldnumber+0x72>
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d10a      	bne.n	800ba84 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d107      	bne.n	800ba84 <get_ldnumber+0x72>
					vol = (int)i;
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	617b      	str	r3, [r7, #20]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	697a      	ldr	r2, [r7, #20]
 800ba82:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	e002      	b.n	800ba8e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ba88:	2300      	movs	r3, #0
 800ba8a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ba8c:	693b      	ldr	r3, [r7, #16]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	371c      	adds	r7, #28
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
	...

0800ba9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	70da      	strb	r2, [r3, #3]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f04f 32ff 	mov.w	r2, #4294967295
 800bab2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff f90c 	bl	800acd4 <move_window>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d001      	beq.n	800bac6 <check_fs+0x2a>
 800bac2:	2304      	movs	r3, #4
 800bac4:	e038      	b.n	800bb38 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	3334      	adds	r3, #52	; 0x34
 800baca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fe fe1e 	bl	800a710 <ld_word>
 800bad4:	4603      	mov	r3, r0
 800bad6:	461a      	mov	r2, r3
 800bad8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800badc:	429a      	cmp	r2, r3
 800bade:	d001      	beq.n	800bae4 <check_fs+0x48>
 800bae0:	2303      	movs	r3, #3
 800bae2:	e029      	b.n	800bb38 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800baea:	2be9      	cmp	r3, #233	; 0xe9
 800baec:	d009      	beq.n	800bb02 <check_fs+0x66>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800baf4:	2beb      	cmp	r3, #235	; 0xeb
 800baf6:	d11e      	bne.n	800bb36 <check_fs+0x9a>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bafe:	2b90      	cmp	r3, #144	; 0x90
 800bb00:	d119      	bne.n	800bb36 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	3334      	adds	r3, #52	; 0x34
 800bb06:	3336      	adds	r3, #54	; 0x36
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7fe fe19 	bl	800a740 <ld_dword>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bb14:	4a0a      	ldr	r2, [pc, #40]	; (800bb40 <check_fs+0xa4>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d101      	bne.n	800bb1e <check_fs+0x82>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	e00c      	b.n	800bb38 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	3334      	adds	r3, #52	; 0x34
 800bb22:	3352      	adds	r3, #82	; 0x52
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fe fe0b 	bl	800a740 <ld_dword>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	4a05      	ldr	r2, [pc, #20]	; (800bb44 <check_fs+0xa8>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d101      	bne.n	800bb36 <check_fs+0x9a>
 800bb32:	2300      	movs	r3, #0
 800bb34:	e000      	b.n	800bb38 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bb36:	2302      	movs	r3, #2
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	00544146 	.word	0x00544146
 800bb44:	33544146 	.word	0x33544146

0800bb48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b096      	sub	sp, #88	; 0x58
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	4613      	mov	r3, r2
 800bb54:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f7ff ff58 	bl	800ba12 <get_ldnumber>
 800bb62:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	da01      	bge.n	800bb6e <find_volume+0x26>
 800bb6a:	230b      	movs	r3, #11
 800bb6c:	e236      	b.n	800bfdc <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bb6e:	4aac      	ldr	r2, [pc, #688]	; (800be20 <find_volume+0x2d8>)
 800bb70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb76:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d101      	bne.n	800bb82 <find_volume+0x3a>
 800bb7e:	230c      	movs	r3, #12
 800bb80:	e22c      	b.n	800bfdc <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800bb82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb84:	f7fe fec4 	bl	800a910 <lock_fs>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <find_volume+0x4a>
 800bb8e:	230f      	movs	r3, #15
 800bb90:	e224      	b.n	800bfdc <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb96:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bb98:	79fb      	ldrb	r3, [r7, #7]
 800bb9a:	f023 0301 	bic.w	r3, r3, #1
 800bb9e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d01a      	beq.n	800bbde <find_volume+0x96>
		stat = disk_status(fs->drv);
 800bba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbaa:	785b      	ldrb	r3, [r3, #1]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fe fd11 	bl	800a5d4 <disk_status>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bbb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10c      	bne.n	800bbde <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d007      	beq.n	800bbda <find_volume+0x92>
 800bbca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbce:	f003 0304 	and.w	r3, r3, #4
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800bbd6:	230a      	movs	r3, #10
 800bbd8:	e200      	b.n	800bfdc <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e1fe      	b.n	800bfdc <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbee:	785b      	ldrb	r3, [r3, #1]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7fe fd09 	bl	800a608 <disk_initialize>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bbfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc00:	f003 0301 	and.w	r3, r3, #1
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d001      	beq.n	800bc0c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bc08:	2303      	movs	r3, #3
 800bc0a:	e1e7      	b.n	800bfdc <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bc0c:	79fb      	ldrb	r3, [r7, #7]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d007      	beq.n	800bc22 <find_volume+0xda>
 800bc12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc16:	f003 0304 	and.w	r3, r3, #4
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800bc1e:	230a      	movs	r3, #10
 800bc20:	e1dc      	b.n	800bfdc <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bc22:	2300      	movs	r3, #0
 800bc24:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bc26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc2a:	f7ff ff37 	bl	800ba9c <check_fs>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bc34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d14b      	bne.n	800bcd4 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	643b      	str	r3, [r7, #64]	; 0x40
 800bc40:	e01f      	b.n	800bc82 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bc48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc4a:	011b      	lsls	r3, r3, #4
 800bc4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bc50:	4413      	add	r3, r2
 800bc52:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc56:	3304      	adds	r3, #4
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d006      	beq.n	800bc6c <find_volume+0x124>
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc60:	3308      	adds	r3, #8
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe fd6c 	bl	800a740 <ld_dword>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	e000      	b.n	800bc6e <find_volume+0x126>
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bc76:	440b      	add	r3, r1
 800bc78:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bc7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc7e:	3301      	adds	r3, #1
 800bc80:	643b      	str	r3, [r7, #64]	; 0x40
 800bc82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	d9dc      	bls.n	800bc42 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bc88:	2300      	movs	r3, #0
 800bc8a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bc8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d002      	beq.n	800bc98 <find_volume+0x150>
 800bc92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc94:	3b01      	subs	r3, #1
 800bc96:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bc98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bca0:	4413      	add	r3, r2
 800bca2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bca6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d005      	beq.n	800bcba <find_volume+0x172>
 800bcae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcb2:	f7ff fef3 	bl	800ba9c <check_fs>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	e000      	b.n	800bcbc <find_volume+0x174>
 800bcba:	2303      	movs	r3, #3
 800bcbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bcc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d905      	bls.n	800bcd4 <find_volume+0x18c>
 800bcc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcca:	3301      	adds	r3, #1
 800bccc:	643b      	str	r3, [r7, #64]	; 0x40
 800bcce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcd0:	2b03      	cmp	r3, #3
 800bcd2:	d9e1      	bls.n	800bc98 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bcd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcd8:	2b04      	cmp	r3, #4
 800bcda:	d101      	bne.n	800bce0 <find_volume+0x198>
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e17d      	b.n	800bfdc <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d901      	bls.n	800bcec <find_volume+0x1a4>
 800bce8:	230d      	movs	r3, #13
 800bcea:	e177      	b.n	800bfdc <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcee:	3334      	adds	r3, #52	; 0x34
 800bcf0:	330b      	adds	r3, #11
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fe fd0c 	bl	800a710 <ld_word>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcfe:	d001      	beq.n	800bd04 <find_volume+0x1bc>
 800bd00:	230d      	movs	r3, #13
 800bd02:	e16b      	b.n	800bfdc <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd06:	3334      	adds	r3, #52	; 0x34
 800bd08:	3316      	adds	r3, #22
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fe fd00 	bl	800a710 <ld_word>
 800bd10:	4603      	mov	r3, r0
 800bd12:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bd14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d106      	bne.n	800bd28 <find_volume+0x1e0>
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1c:	3334      	adds	r3, #52	; 0x34
 800bd1e:	3324      	adds	r3, #36	; 0x24
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7fe fd0d 	bl	800a740 <ld_dword>
 800bd26:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd2c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd30:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3a:	789b      	ldrb	r3, [r3, #2]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d005      	beq.n	800bd4c <find_volume+0x204>
 800bd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd42:	789b      	ldrb	r3, [r3, #2]
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d001      	beq.n	800bd4c <find_volume+0x204>
 800bd48:	230d      	movs	r3, #13
 800bd4a:	e147      	b.n	800bfdc <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4e:	789b      	ldrb	r3, [r3, #2]
 800bd50:	461a      	mov	r2, r3
 800bd52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd54:	fb02 f303 	mul.w	r3, r2, r3
 800bd58:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd68:	895b      	ldrh	r3, [r3, #10]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d008      	beq.n	800bd80 <find_volume+0x238>
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd70:	895b      	ldrh	r3, [r3, #10]
 800bd72:	461a      	mov	r2, r3
 800bd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd76:	895b      	ldrh	r3, [r3, #10]
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d001      	beq.n	800bd84 <find_volume+0x23c>
 800bd80:	230d      	movs	r3, #13
 800bd82:	e12b      	b.n	800bfdc <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd86:	3334      	adds	r3, #52	; 0x34
 800bd88:	3311      	adds	r3, #17
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fe fcc0 	bl	800a710 <ld_word>
 800bd90:	4603      	mov	r3, r0
 800bd92:	461a      	mov	r2, r3
 800bd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9a:	891b      	ldrh	r3, [r3, #8]
 800bd9c:	f003 030f 	and.w	r3, r3, #15
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d001      	beq.n	800bdaa <find_volume+0x262>
 800bda6:	230d      	movs	r3, #13
 800bda8:	e118      	b.n	800bfdc <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdac:	3334      	adds	r3, #52	; 0x34
 800bdae:	3313      	adds	r3, #19
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7fe fcad 	bl	800a710 <ld_word>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bdba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d106      	bne.n	800bdce <find_volume+0x286>
 800bdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc2:	3334      	adds	r3, #52	; 0x34
 800bdc4:	3320      	adds	r3, #32
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7fe fcba 	bl	800a740 <ld_dword>
 800bdcc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd0:	3334      	adds	r3, #52	; 0x34
 800bdd2:	330e      	adds	r3, #14
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fe fc9b 	bl	800a710 <ld_word>
 800bdda:	4603      	mov	r3, r0
 800bddc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bdde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d101      	bne.n	800bde8 <find_volume+0x2a0>
 800bde4:	230d      	movs	r3, #13
 800bde6:	e0f9      	b.n	800bfdc <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bde8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bdea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdec:	4413      	add	r3, r2
 800bdee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdf0:	8912      	ldrh	r2, [r2, #8]
 800bdf2:	0912      	lsrs	r2, r2, #4
 800bdf4:	b292      	uxth	r2, r2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bdfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d201      	bcs.n	800be06 <find_volume+0x2be>
 800be02:	230d      	movs	r3, #13
 800be04:	e0ea      	b.n	800bfdc <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800be06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be0e:	8952      	ldrh	r2, [r2, #10]
 800be10:	fbb3 f3f2 	udiv	r3, r3, r2
 800be14:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800be16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d103      	bne.n	800be24 <find_volume+0x2dc>
 800be1c:	230d      	movs	r3, #13
 800be1e:	e0dd      	b.n	800bfdc <find_volume+0x494>
 800be20:	240000a0 	.word	0x240000a0
		fmt = FS_FAT32;
 800be24:	2303      	movs	r3, #3
 800be26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800be2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800be30:	4293      	cmp	r3, r2
 800be32:	d802      	bhi.n	800be3a <find_volume+0x2f2>
 800be34:	2302      	movs	r3, #2
 800be36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800be3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800be40:	4293      	cmp	r3, r2
 800be42:	d802      	bhi.n	800be4a <find_volume+0x302>
 800be44:	2301      	movs	r3, #1
 800be46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	1c9a      	adds	r2, r3, #2
 800be4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be50:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800be52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be56:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800be58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800be5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be5c:	441a      	add	r2, r3
 800be5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be60:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800be62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be66:	441a      	add	r2, r3
 800be68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800be6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be70:	2b03      	cmp	r3, #3
 800be72:	d11e      	bne.n	800beb2 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800be74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be76:	3334      	adds	r3, #52	; 0x34
 800be78:	332a      	adds	r3, #42	; 0x2a
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7fe fc48 	bl	800a710 <ld_word>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d001      	beq.n	800be8a <find_volume+0x342>
 800be86:	230d      	movs	r3, #13
 800be88:	e0a8      	b.n	800bfdc <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800be8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8c:	891b      	ldrh	r3, [r3, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d001      	beq.n	800be96 <find_volume+0x34e>
 800be92:	230d      	movs	r3, #13
 800be94:	e0a2      	b.n	800bfdc <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800be96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be98:	3334      	adds	r3, #52	; 0x34
 800be9a:	332c      	adds	r3, #44	; 0x2c
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fe fc4f 	bl	800a740 <ld_dword>
 800bea2:	4602      	mov	r2, r0
 800bea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	647b      	str	r3, [r7, #68]	; 0x44
 800beb0:	e01f      	b.n	800bef2 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800beb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb4:	891b      	ldrh	r3, [r3, #8]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d101      	bne.n	800bebe <find_volume+0x376>
 800beba:	230d      	movs	r3, #13
 800bebc:	e08e      	b.n	800bfdc <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec4:	441a      	add	r2, r3
 800bec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800beca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d103      	bne.n	800beda <find_volume+0x392>
 800bed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	e00a      	b.n	800bef0 <find_volume+0x3a8>
 800beda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bedc:	699a      	ldr	r2, [r3, #24]
 800bede:	4613      	mov	r3, r2
 800bee0:	005b      	lsls	r3, r3, #1
 800bee2:	4413      	add	r3, r2
 800bee4:	085a      	lsrs	r2, r3, #1
 800bee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bef0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef4:	69da      	ldr	r2, [r3, #28]
 800bef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bef8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800befc:	0a5b      	lsrs	r3, r3, #9
 800befe:	429a      	cmp	r2, r3
 800bf00:	d201      	bcs.n	800bf06 <find_volume+0x3be>
 800bf02:	230d      	movs	r3, #13
 800bf04:	e06a      	b.n	800bfdc <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bf06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf08:	f04f 32ff 	mov.w	r2, #4294967295
 800bf0c:	615a      	str	r2, [r3, #20]
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf10:	695a      	ldr	r2, [r3, #20]
 800bf12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf14:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	2280      	movs	r2, #128	; 0x80
 800bf1a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bf1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf20:	2b03      	cmp	r3, #3
 800bf22:	d149      	bne.n	800bfb8 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	3334      	adds	r3, #52	; 0x34
 800bf28:	3330      	adds	r3, #48	; 0x30
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fe fbf0 	bl	800a710 <ld_word>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d140      	bne.n	800bfb8 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bf36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf38:	3301      	adds	r3, #1
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf3e:	f7fe fec9 	bl	800acd4 <move_window>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d137      	bne.n	800bfb8 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800bf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf50:	3334      	adds	r3, #52	; 0x34
 800bf52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fe fbda 	bl	800a710 <ld_word>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	461a      	mov	r2, r3
 800bf60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d127      	bne.n	800bfb8 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	3334      	adds	r3, #52	; 0x34
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fe fbe7 	bl	800a740 <ld_dword>
 800bf72:	4603      	mov	r3, r0
 800bf74:	4a1b      	ldr	r2, [pc, #108]	; (800bfe4 <find_volume+0x49c>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d11e      	bne.n	800bfb8 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7c:	3334      	adds	r3, #52	; 0x34
 800bf7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fe fbdc 	bl	800a740 <ld_dword>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	4a17      	ldr	r2, [pc, #92]	; (800bfe8 <find_volume+0x4a0>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d113      	bne.n	800bfb8 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf92:	3334      	adds	r3, #52	; 0x34
 800bf94:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7fe fbd1 	bl	800a740 <ld_dword>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	3334      	adds	r3, #52	; 0x34
 800bfa8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7fe fbc7 	bl	800a740 <ld_dword>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bfbe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bfc0:	4b0a      	ldr	r3, [pc, #40]	; (800bfec <find_volume+0x4a4>)
 800bfc2:	881b      	ldrh	r3, [r3, #0]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	4b08      	ldr	r3, [pc, #32]	; (800bfec <find_volume+0x4a4>)
 800bfca:	801a      	strh	r2, [r3, #0]
 800bfcc:	4b07      	ldr	r3, [pc, #28]	; (800bfec <find_volume+0x4a4>)
 800bfce:	881a      	ldrh	r2, [r3, #0]
 800bfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bfd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfd6:	f7fe fe15 	bl	800ac04 <clear_lock>
#endif
	return FR_OK;
 800bfda:	2300      	movs	r3, #0
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3758      	adds	r7, #88	; 0x58
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	41615252 	.word	0x41615252
 800bfe8:	61417272 	.word	0x61417272
 800bfec:	240000a4 	.word	0x240000a4

0800bff0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bffa:	2309      	movs	r3, #9
 800bffc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d02e      	beq.n	800c062 <validate+0x72>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d02a      	beq.n	800c062 <validate+0x72>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d025      	beq.n	800c062 <validate+0x72>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	889a      	ldrh	r2, [r3, #4]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	88db      	ldrh	r3, [r3, #6]
 800c020:	429a      	cmp	r2, r3
 800c022:	d11e      	bne.n	800c062 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe fc71 	bl	800a910 <lock_fs>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d014      	beq.n	800c05e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	785b      	ldrb	r3, [r3, #1]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe faca 	bl	800a5d4 <disk_status>
 800c040:	4603      	mov	r3, r0
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	2b00      	cmp	r3, #0
 800c048:	d102      	bne.n	800c050 <validate+0x60>
				res = FR_OK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	73fb      	strb	r3, [r7, #15]
 800c04e:	e008      	b.n	800c062 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2100      	movs	r1, #0
 800c056:	4618      	mov	r0, r3
 800c058:	f7fe fc70 	bl	800a93c <unlock_fs>
 800c05c:	e001      	b.n	800c062 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c05e:	230f      	movs	r3, #15
 800c060:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c062:	7bfb      	ldrb	r3, [r7, #15]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d102      	bne.n	800c06e <validate+0x7e>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	e000      	b.n	800c070 <validate+0x80>
 800c06e:	2300      	movs	r3, #0
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	6013      	str	r3, [r2, #0]
	return res;
 800c074:	7bfb      	ldrb	r3, [r7, #15]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
	...

0800c080 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b088      	sub	sp, #32
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	4613      	mov	r3, r2
 800c08c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c092:	f107 0310 	add.w	r3, r7, #16
 800c096:	4618      	mov	r0, r3
 800c098:	f7ff fcbb 	bl	800ba12 <get_ldnumber>
 800c09c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	da01      	bge.n	800c0a8 <f_mount+0x28>
 800c0a4:	230b      	movs	r3, #11
 800c0a6:	e048      	b.n	800c13a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c0a8:	4a26      	ldr	r2, [pc, #152]	; (800c144 <f_mount+0xc4>)
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00f      	beq.n	800c0d8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c0b8:	69b8      	ldr	r0, [r7, #24]
 800c0ba:	f7fe fda3 	bl	800ac04 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f000 fb32 	bl	800c72c <ff_del_syncobj>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <f_mount+0x52>
 800c0ce:	2302      	movs	r3, #2
 800c0d0:	e033      	b.n	800c13a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00f      	beq.n	800c0fe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	330c      	adds	r3, #12
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	4610      	mov	r0, r2
 800c0f0:	f000 fb03 	bl	800c6fa <ff_cre_syncobj>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d101      	bne.n	800c0fe <f_mount+0x7e>
 800c0fa:	2302      	movs	r3, #2
 800c0fc:	e01d      	b.n	800c13a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	4910      	ldr	r1, [pc, #64]	; (800c144 <f_mount+0xc4>)
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <f_mount+0x94>
 800c10e:	79fb      	ldrb	r3, [r7, #7]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d001      	beq.n	800c118 <f_mount+0x98>
 800c114:	2300      	movs	r3, #0
 800c116:	e010      	b.n	800c13a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c118:	f107 010c 	add.w	r1, r7, #12
 800c11c:	f107 0308 	add.w	r3, r7, #8
 800c120:	2200      	movs	r2, #0
 800c122:	4618      	mov	r0, r3
 800c124:	f7ff fd10 	bl	800bb48 <find_volume>
 800c128:	4603      	mov	r3, r0
 800c12a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	7dfa      	ldrb	r2, [r7, #23]
 800c130:	4611      	mov	r1, r2
 800c132:	4618      	mov	r0, r3
 800c134:	f7fe fc02 	bl	800a93c <unlock_fs>
 800c138:	7dfb      	ldrb	r3, [r7, #23]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3720      	adds	r7, #32
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	240000a0 	.word	0x240000a0

0800c148 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b098      	sub	sp, #96	; 0x60
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	4613      	mov	r3, r2
 800c154:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d101      	bne.n	800c160 <f_open+0x18>
 800c15c:	2309      	movs	r3, #9
 800c15e:	e1b4      	b.n	800c4ca <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c160:	79fb      	ldrb	r3, [r7, #7]
 800c162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c166:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c168:	79fa      	ldrb	r2, [r7, #7]
 800c16a:	f107 0110 	add.w	r1, r7, #16
 800c16e:	f107 0308 	add.w	r3, r7, #8
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff fce8 	bl	800bb48 <find_volume>
 800c178:	4603      	mov	r3, r0
 800c17a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c17e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c182:	2b00      	cmp	r3, #0
 800c184:	f040 8191 	bne.w	800c4aa <f_open+0x362>
		dj.obj.fs = fs;
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	f107 0314 	add.w	r3, r7, #20
 800c192:	4611      	mov	r1, r2
 800c194:	4618      	mov	r0, r3
 800c196:	f7ff fbcb 	bl	800b930 <follow_path>
 800c19a:	4603      	mov	r3, r0
 800c19c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c1a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d11a      	bne.n	800c1de <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c1a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c1ac:	b25b      	sxtb	r3, r3
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	da03      	bge.n	800c1ba <f_open+0x72>
				res = FR_INVALID_NAME;
 800c1b2:	2306      	movs	r3, #6
 800c1b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c1b8:	e011      	b.n	800c1de <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c1ba:	79fb      	ldrb	r3, [r7, #7]
 800c1bc:	f023 0301 	bic.w	r3, r3, #1
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	bf14      	ite	ne
 800c1c4:	2301      	movne	r3, #1
 800c1c6:	2300      	moveq	r3, #0
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	f107 0314 	add.w	r3, r7, #20
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fe fbce 	bl	800a974 <chk_lock>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c1de:	79fb      	ldrb	r3, [r7, #7]
 800c1e0:	f003 031c 	and.w	r3, r3, #28
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d07f      	beq.n	800c2e8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c1e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d017      	beq.n	800c220 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c1f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1f4:	2b04      	cmp	r3, #4
 800c1f6:	d10e      	bne.n	800c216 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c1f8:	f7fe fc18 	bl	800aa2c <enq_lock>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d006      	beq.n	800c210 <f_open+0xc8>
 800c202:	f107 0314 	add.w	r3, r7, #20
 800c206:	4618      	mov	r0, r3
 800c208:	f7ff facb 	bl	800b7a2 <dir_register>
 800c20c:	4603      	mov	r3, r0
 800c20e:	e000      	b.n	800c212 <f_open+0xca>
 800c210:	2312      	movs	r3, #18
 800c212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c216:	79fb      	ldrb	r3, [r7, #7]
 800c218:	f043 0308 	orr.w	r3, r3, #8
 800c21c:	71fb      	strb	r3, [r7, #7]
 800c21e:	e010      	b.n	800c242 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c220:	7ebb      	ldrb	r3, [r7, #26]
 800c222:	f003 0311 	and.w	r3, r3, #17
 800c226:	2b00      	cmp	r3, #0
 800c228:	d003      	beq.n	800c232 <f_open+0xea>
					res = FR_DENIED;
 800c22a:	2307      	movs	r3, #7
 800c22c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c230:	e007      	b.n	800c242 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c232:	79fb      	ldrb	r3, [r7, #7]
 800c234:	f003 0304 	and.w	r3, r3, #4
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d002      	beq.n	800c242 <f_open+0xfa>
 800c23c:	2308      	movs	r3, #8
 800c23e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c242:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c246:	2b00      	cmp	r3, #0
 800c248:	d168      	bne.n	800c31c <f_open+0x1d4>
 800c24a:	79fb      	ldrb	r3, [r7, #7]
 800c24c:	f003 0308 	and.w	r3, r3, #8
 800c250:	2b00      	cmp	r3, #0
 800c252:	d063      	beq.n	800c31c <f_open+0x1d4>
				dw = GET_FATTIME();
 800c254:	f7fd ff6a 	bl	800a12c <get_fattime>
 800c258:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25c:	330e      	adds	r3, #14
 800c25e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c260:	4618      	mov	r0, r3
 800c262:	f7fe faab 	bl	800a7bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c268:	3316      	adds	r3, #22
 800c26a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fe faa5 	bl	800a7bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c274:	330b      	adds	r3, #11
 800c276:	2220      	movs	r2, #32
 800c278:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c27e:	4611      	mov	r1, r2
 800c280:	4618      	mov	r0, r3
 800c282:	f7ff f9fa 	bl	800b67a <ld_clust>
 800c286:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c28c:	2200      	movs	r2, #0
 800c28e:	4618      	mov	r0, r3
 800c290:	f7ff fa12 	bl	800b6b8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c296:	331c      	adds	r3, #28
 800c298:	2100      	movs	r1, #0
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe fa8e 	bl	800a7bc <st_dword>
					fs->wflag = 1;
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c2a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d037      	beq.n	800c31c <f_open+0x1d4>
						dw = fs->winsect;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c2b2:	f107 0314 	add.w	r3, r7, #20
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fe ff59 	bl	800b172 <remove_chain>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c2c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d126      	bne.n	800c31c <f_open+0x1d4>
							res = move_window(fs, dw);
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fe fcfe 	bl	800acd4 <move_window>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2e2:	3a01      	subs	r2, #1
 800c2e4:	611a      	str	r2, [r3, #16]
 800c2e6:	e019      	b.n	800c31c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c2e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d115      	bne.n	800c31c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c2f0:	7ebb      	ldrb	r3, [r7, #26]
 800c2f2:	f003 0310 	and.w	r3, r3, #16
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d003      	beq.n	800c302 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c2fa:	2304      	movs	r3, #4
 800c2fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c300:	e00c      	b.n	800c31c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c302:	79fb      	ldrb	r3, [r7, #7]
 800c304:	f003 0302 	and.w	r3, r3, #2
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d007      	beq.n	800c31c <f_open+0x1d4>
 800c30c:	7ebb      	ldrb	r3, [r7, #26]
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	d002      	beq.n	800c31c <f_open+0x1d4>
						res = FR_DENIED;
 800c316:	2307      	movs	r3, #7
 800c318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c31c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c320:	2b00      	cmp	r3, #0
 800c322:	d128      	bne.n	800c376 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c324:	79fb      	ldrb	r3, [r7, #7]
 800c326:	f003 0308 	and.w	r3, r3, #8
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d003      	beq.n	800c336 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c32e:	79fb      	ldrb	r3, [r7, #7]
 800c330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c334:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c33e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c344:	79fb      	ldrb	r3, [r7, #7]
 800c346:	f023 0301 	bic.w	r3, r3, #1
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	bf14      	ite	ne
 800c34e:	2301      	movne	r3, #1
 800c350:	2300      	moveq	r3, #0
 800c352:	b2db      	uxtb	r3, r3
 800c354:	461a      	mov	r2, r3
 800c356:	f107 0314 	add.w	r3, r7, #20
 800c35a:	4611      	mov	r1, r2
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fe fb87 	bl	800aa70 <inc_lock>
 800c362:	4602      	mov	r2, r0
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d102      	bne.n	800c376 <f_open+0x22e>
 800c370:	2302      	movs	r3, #2
 800c372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f040 8095 	bne.w	800c4aa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c384:	4611      	mov	r1, r2
 800c386:	4618      	mov	r0, r3
 800c388:	f7ff f977 	bl	800b67a <ld_clust>
 800c38c:	4602      	mov	r2, r0
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c394:	331c      	adds	r3, #28
 800c396:	4618      	mov	r0, r3
 800c398:	f7fe f9d2 	bl	800a740 <ld_dword>
 800c39c:	4602      	mov	r2, r0
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	88da      	ldrh	r2, [r3, #6]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	79fa      	ldrb	r2, [r7, #7]
 800c3ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	3330      	adds	r3, #48	; 0x30
 800c3d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fe fa3c 	bl	800a856 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c3de:	79fb      	ldrb	r3, [r7, #7]
 800c3e0:	f003 0320 	and.w	r3, r3, #32
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d060      	beq.n	800c4aa <f_open+0x362>
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d05c      	beq.n	800c4aa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	68da      	ldr	r2, [r3, #12]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	895b      	ldrh	r3, [r3, #10]
 800c3fc:	025b      	lsls	r3, r3, #9
 800c3fe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	657b      	str	r3, [r7, #84]	; 0x54
 800c40c:	e016      	b.n	800c43c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c412:	4618      	mov	r0, r3
 800c414:	f7fe fd19 	bl	800ae4a <get_fat>
 800c418:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c41a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d802      	bhi.n	800c426 <f_open+0x2de>
 800c420:	2302      	movs	r3, #2
 800c422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42c:	d102      	bne.n	800c434 <f_open+0x2ec>
 800c42e:	2301      	movs	r3, #1
 800c430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	657b      	str	r3, [r7, #84]	; 0x54
 800c43c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c440:	2b00      	cmp	r3, #0
 800c442:	d103      	bne.n	800c44c <f_open+0x304>
 800c444:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c448:	429a      	cmp	r2, r3
 800c44a:	d8e0      	bhi.n	800c40e <f_open+0x2c6>
				}
				fp->clust = clst;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c450:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c456:	2b00      	cmp	r3, #0
 800c458:	d127      	bne.n	800c4aa <f_open+0x362>
 800c45a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c45c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c460:	2b00      	cmp	r3, #0
 800c462:	d022      	beq.n	800c4aa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c468:	4618      	mov	r0, r3
 800c46a:	f7fe fccf 	bl	800ae0c <clust2sect>
 800c46e:	6478      	str	r0, [r7, #68]	; 0x44
 800c470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c472:	2b00      	cmp	r3, #0
 800c474:	d103      	bne.n	800c47e <f_open+0x336>
						res = FR_INT_ERR;
 800c476:	2302      	movs	r3, #2
 800c478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c47c:	e015      	b.n	800c4aa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c47e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c480:	0a5a      	lsrs	r2, r3, #9
 800c482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c484:	441a      	add	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	7858      	ldrb	r0, [r3, #1]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6a1a      	ldr	r2, [r3, #32]
 800c498:	2301      	movs	r3, #1
 800c49a:	f7fe f8db 	bl	800a654 <disk_read>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <f_open+0x362>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c4aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d002      	beq.n	800c4b8 <f_open+0x370>
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c4be:	4611      	mov	r1, r2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fe fa3b 	bl	800a93c <unlock_fs>
 800c4c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3760      	adds	r7, #96	; 0x60
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b086      	sub	sp, #24
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f107 0208 	add.w	r2, r7, #8
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7ff fd84 	bl	800bff0 <validate>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4ec:	7dfb      	ldrb	r3, [r7, #23]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d16d      	bne.n	800c5ce <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	7d1b      	ldrb	r3, [r3, #20]
 800c4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d067      	beq.n	800c5ce <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	7d1b      	ldrb	r3, [r3, #20]
 800c502:	b25b      	sxtb	r3, r3
 800c504:	2b00      	cmp	r3, #0
 800c506:	da1a      	bge.n	800c53e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	7858      	ldrb	r0, [r3, #1]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a1a      	ldr	r2, [r3, #32]
 800c516:	2301      	movs	r3, #1
 800c518:	f7fe f8bc 	bl	800a694 <disk_write>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d006      	beq.n	800c530 <f_sync+0x5e>
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	2101      	movs	r1, #1
 800c526:	4618      	mov	r0, r3
 800c528:	f7fe fa08 	bl	800a93c <unlock_fs>
 800c52c:	2301      	movs	r3, #1
 800c52e:	e055      	b.n	800c5dc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	7d1b      	ldrb	r3, [r3, #20]
 800c534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c53e:	f7fd fdf5 	bl	800a12c <get_fattime>
 800c542:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c544:	68ba      	ldr	r2, [r7, #8]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54a:	4619      	mov	r1, r3
 800c54c:	4610      	mov	r0, r2
 800c54e:	f7fe fbc1 	bl	800acd4 <move_window>
 800c552:	4603      	mov	r3, r0
 800c554:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c556:	7dfb      	ldrb	r3, [r7, #23]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d138      	bne.n	800c5ce <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c560:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	330b      	adds	r3, #11
 800c566:	781a      	ldrb	r2, [r3, #0]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	330b      	adds	r3, #11
 800c56c:	f042 0220 	orr.w	r2, r2, #32
 800c570:	b2d2      	uxtb	r2, r2
 800c572:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6818      	ldr	r0, [r3, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	461a      	mov	r2, r3
 800c57e:	68f9      	ldr	r1, [r7, #12]
 800c580:	f7ff f89a 	bl	800b6b8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f103 021c 	add.w	r2, r3, #28
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	4619      	mov	r1, r3
 800c590:	4610      	mov	r0, r2
 800c592:	f7fe f913 	bl	800a7bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	3316      	adds	r3, #22
 800c59a:	6939      	ldr	r1, [r7, #16]
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fe f90d 	bl	800a7bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	3312      	adds	r3, #18
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fe f8ec 	bl	800a786 <st_word>
					fs->wflag = 1;
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fe fbba 	bl	800ad30 <sync_fs>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	7d1b      	ldrb	r3, [r3, #20]
 800c5c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	7dfa      	ldrb	r2, [r7, #23]
 800c5d2:	4611      	mov	r1, r2
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fe f9b1 	bl	800a93c <unlock_fs>
 800c5da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3718      	adds	r7, #24
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff ff70 	bl	800c4d2 <f_sync>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c5f6:	7bfb      	ldrb	r3, [r7, #15]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d11d      	bne.n	800c638 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f107 0208 	add.w	r2, r7, #8
 800c602:	4611      	mov	r1, r2
 800c604:	4618      	mov	r0, r3
 800c606:	f7ff fcf3 	bl	800bff0 <validate>
 800c60a:	4603      	mov	r3, r0
 800c60c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d111      	bne.n	800c638 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fe fab7 	bl	800ab8c <dec_lock>
 800c61e:	4603      	mov	r3, r0
 800c620:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c622:	7bfb      	ldrb	r3, [r7, #15]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	2100      	movs	r1, #0
 800c632:	4618      	mov	r0, r3
 800c634:	f7fe f982 	bl	800a93c <unlock_fs>
#endif
		}
	}
	return res;
 800c638:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
	...

0800c644 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c644:	b480      	push	{r7}
 800c646:	b087      	sub	sp, #28
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	4613      	mov	r3, r2
 800c650:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c652:	2301      	movs	r3, #1
 800c654:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c656:	2300      	movs	r3, #0
 800c658:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c65a:	4b1f      	ldr	r3, [pc, #124]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c65c:	7a5b      	ldrb	r3, [r3, #9]
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	2b00      	cmp	r3, #0
 800c662:	d131      	bne.n	800c6c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c664:	4b1c      	ldr	r3, [pc, #112]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c666:	7a5b      	ldrb	r3, [r3, #9]
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	461a      	mov	r2, r3
 800c66c:	4b1a      	ldr	r3, [pc, #104]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c66e:	2100      	movs	r1, #0
 800c670:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c672:	4b19      	ldr	r3, [pc, #100]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c674:	7a5b      	ldrb	r3, [r3, #9]
 800c676:	b2db      	uxtb	r3, r3
 800c678:	4a17      	ldr	r2, [pc, #92]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	4413      	add	r3, r2
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c682:	4b15      	ldr	r3, [pc, #84]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c684:	7a5b      	ldrb	r3, [r3, #9]
 800c686:	b2db      	uxtb	r3, r3
 800c688:	461a      	mov	r2, r3
 800c68a:	4b13      	ldr	r3, [pc, #76]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c68c:	4413      	add	r3, r2
 800c68e:	79fa      	ldrb	r2, [r7, #7]
 800c690:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c692:	4b11      	ldr	r3, [pc, #68]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c694:	7a5b      	ldrb	r3, [r3, #9]
 800c696:	b2db      	uxtb	r3, r3
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	b2d1      	uxtb	r1, r2
 800c69c:	4a0e      	ldr	r2, [pc, #56]	; (800c6d8 <FATFS_LinkDriverEx+0x94>)
 800c69e:	7251      	strb	r1, [r2, #9]
 800c6a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c6a2:	7dbb      	ldrb	r3, [r7, #22]
 800c6a4:	3330      	adds	r3, #48	; 0x30
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	223a      	movs	r2, #58	; 0x3a
 800c6b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	3302      	adds	r3, #2
 800c6b8:	222f      	movs	r2, #47	; 0x2f
 800c6ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	3303      	adds	r3, #3
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	371c      	adds	r7, #28
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	240000c8 	.word	0x240000c8

0800c6dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	6839      	ldr	r1, [r7, #0]
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7ff ffaa 	bl	800c644 <FATFS_LinkDriverEx>
 800c6f0:	4603      	mov	r3, r0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b084      	sub	sp, #16
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	4603      	mov	r3, r0
 800c702:	6039      	str	r1, [r7, #0]
 800c704:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
    *sobj = osMutexCreate(osMutex(MTX));
#else
    *sobj = osMutexNew(NULL);
 800c706:	2000      	movs	r0, #0
 800c708:	f000 f9ae 	bl	800ca68 <osMutexNew>
 800c70c:	4602      	mov	r2, r0
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	bf14      	ite	ne
 800c71a:	2301      	movne	r3, #1
 800c71c:	2300      	moveq	r3, #0
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	60fb      	str	r3, [r7, #12]

    return ret;
 800c722:	68fb      	ldr	r3, [r7, #12]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 faa5 	bl	800cc84 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800c73a:	2301      	movs	r3, #1
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	60fb      	str	r3, [r7, #12]
#endif

#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 800c750:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 fa0d 	bl	800cb74 <osMutexAcquire>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d101      	bne.n	800c764 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c760:	2301      	movs	r3, #1
 800c762:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c764:	68fb      	ldr	r3, [r7, #12]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}

0800c76e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c76e:	b580      	push	{r7, lr}
 800c770:	b082      	sub	sp, #8
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fa47 	bl	800cc0a <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800c77c:	bf00      	nop
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <__NVIC_SetPriority>:
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	4603      	mov	r3, r0
 800c78c:	6039      	str	r1, [r7, #0]
 800c78e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c794:	2b00      	cmp	r3, #0
 800c796:	db0a      	blt.n	800c7ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	b2da      	uxtb	r2, r3
 800c79c:	490c      	ldr	r1, [pc, #48]	; (800c7d0 <__NVIC_SetPriority+0x4c>)
 800c79e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7a2:	0112      	lsls	r2, r2, #4
 800c7a4:	b2d2      	uxtb	r2, r2
 800c7a6:	440b      	add	r3, r1
 800c7a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c7ac:	e00a      	b.n	800c7c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	4908      	ldr	r1, [pc, #32]	; (800c7d4 <__NVIC_SetPriority+0x50>)
 800c7b4:	88fb      	ldrh	r3, [r7, #6]
 800c7b6:	f003 030f 	and.w	r3, r3, #15
 800c7ba:	3b04      	subs	r3, #4
 800c7bc:	0112      	lsls	r2, r2, #4
 800c7be:	b2d2      	uxtb	r2, r2
 800c7c0:	440b      	add	r3, r1
 800c7c2:	761a      	strb	r2, [r3, #24]
}
 800c7c4:	bf00      	nop
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr
 800c7d0:	e000e100 	.word	0xe000e100
 800c7d4:	e000ed00 	.word	0xe000ed00

0800c7d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c7dc:	4b05      	ldr	r3, [pc, #20]	; (800c7f4 <SysTick_Handler+0x1c>)
 800c7de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c7e0:	f002 fa9e 	bl	800ed20 <xTaskGetSchedulerState>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d001      	beq.n	800c7ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c7ea:	f003 f985 	bl	800faf8 <xPortSysTickHandler>
  }
}
 800c7ee:	bf00      	nop
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	e000e010 	.word	0xe000e010

0800c7f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	f06f 0004 	mvn.w	r0, #4
 800c802:	f7ff ffbf 	bl	800c784 <__NVIC_SetPriority>
#endif
}
 800c806:	bf00      	nop
 800c808:	bd80      	pop	{r7, pc}
	...

0800c80c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c812:	f3ef 8305 	mrs	r3, IPSR
 800c816:	603b      	str	r3, [r7, #0]
  return(result);
 800c818:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d003      	beq.n	800c826 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c81e:	f06f 0305 	mvn.w	r3, #5
 800c822:	607b      	str	r3, [r7, #4]
 800c824:	e00c      	b.n	800c840 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c826:	4b0a      	ldr	r3, [pc, #40]	; (800c850 <osKernelInitialize+0x44>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d105      	bne.n	800c83a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c82e:	4b08      	ldr	r3, [pc, #32]	; (800c850 <osKernelInitialize+0x44>)
 800c830:	2201      	movs	r2, #1
 800c832:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c834:	2300      	movs	r3, #0
 800c836:	607b      	str	r3, [r7, #4]
 800c838:	e002      	b.n	800c840 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c83a:	f04f 33ff 	mov.w	r3, #4294967295
 800c83e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c840:	687b      	ldr	r3, [r7, #4]
}
 800c842:	4618      	mov	r0, r3
 800c844:	370c      	adds	r7, #12
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	240000d4 	.word	0x240000d4

0800c854 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800c85a:	f002 fa61 	bl	800ed20 <xTaskGetSchedulerState>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d004      	beq.n	800c86e <osKernelGetState+0x1a>
 800c864:	2b02      	cmp	r3, #2
 800c866:	d105      	bne.n	800c874 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800c868:	2302      	movs	r3, #2
 800c86a:	607b      	str	r3, [r7, #4]
      break;
 800c86c:	e00c      	b.n	800c888 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800c86e:	2303      	movs	r3, #3
 800c870:	607b      	str	r3, [r7, #4]
      break;
 800c872:	e009      	b.n	800c888 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c874:	4b07      	ldr	r3, [pc, #28]	; (800c894 <osKernelGetState+0x40>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d102      	bne.n	800c882 <osKernelGetState+0x2e>
        state = osKernelReady;
 800c87c:	2301      	movs	r3, #1
 800c87e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c880:	e001      	b.n	800c886 <osKernelGetState+0x32>
        state = osKernelInactive;
 800c882:	2300      	movs	r3, #0
 800c884:	607b      	str	r3, [r7, #4]
      break;
 800c886:	bf00      	nop
  }

  return (state);
 800c888:	687b      	ldr	r3, [r7, #4]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3708      	adds	r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	240000d4 	.word	0x240000d4

0800c898 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c89e:	f3ef 8305 	mrs	r3, IPSR
 800c8a2:	603b      	str	r3, [r7, #0]
  return(result);
 800c8a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d003      	beq.n	800c8b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c8aa:	f06f 0305 	mvn.w	r3, #5
 800c8ae:	607b      	str	r3, [r7, #4]
 800c8b0:	e010      	b.n	800c8d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c8b2:	4b0b      	ldr	r3, [pc, #44]	; (800c8e0 <osKernelStart+0x48>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d109      	bne.n	800c8ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c8ba:	f7ff ff9d 	bl	800c7f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c8be:	4b08      	ldr	r3, [pc, #32]	; (800c8e0 <osKernelStart+0x48>)
 800c8c0:	2202      	movs	r2, #2
 800c8c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c8c4:	f001 fdc2 	bl	800e44c <vTaskStartScheduler>
      stat = osOK;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	607b      	str	r3, [r7, #4]
 800c8cc:	e002      	b.n	800c8d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c8d4:	687b      	ldr	r3, [r7, #4]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	240000d4 	.word	0x240000d4

0800c8e4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8ea:	f3ef 8305 	mrs	r3, IPSR
 800c8ee:	603b      	str	r3, [r7, #0]
  return(result);
 800c8f0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d003      	beq.n	800c8fe <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c8f6:	f001 fecb 	bl	800e690 <xTaskGetTickCountFromISR>
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	e002      	b.n	800c904 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c8fe:	f001 feb7 	bl	800e670 <xTaskGetTickCount>
 800c902:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c904:	687b      	ldr	r3, [r7, #4]
}
 800c906:	4618      	mov	r0, r3
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c90e:	b580      	push	{r7, lr}
 800c910:	b08e      	sub	sp, #56	; 0x38
 800c912:	af04      	add	r7, sp, #16
 800c914:	60f8      	str	r0, [r7, #12]
 800c916:	60b9      	str	r1, [r7, #8]
 800c918:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c91a:	2300      	movs	r3, #0
 800c91c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c91e:	f3ef 8305 	mrs	r3, IPSR
 800c922:	617b      	str	r3, [r7, #20]
  return(result);
 800c924:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c926:	2b00      	cmp	r3, #0
 800c928:	d17e      	bne.n	800ca28 <osThreadNew+0x11a>
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d07b      	beq.n	800ca28 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c930:	2380      	movs	r3, #128	; 0x80
 800c932:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c934:	2318      	movs	r3, #24
 800c936:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c938:	2300      	movs	r3, #0
 800c93a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c93c:	f04f 33ff 	mov.w	r3, #4294967295
 800c940:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d045      	beq.n	800c9d4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d002      	beq.n	800c956 <osThreadNew+0x48>
        name = attr->name;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d002      	beq.n	800c964 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	699b      	ldr	r3, [r3, #24]
 800c962:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d008      	beq.n	800c97c <osThreadNew+0x6e>
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	2b38      	cmp	r3, #56	; 0x38
 800c96e:	d805      	bhi.n	800c97c <osThreadNew+0x6e>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	f003 0301 	and.w	r3, r3, #1
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d001      	beq.n	800c980 <osThreadNew+0x72>
        return (NULL);
 800c97c:	2300      	movs	r3, #0
 800c97e:	e054      	b.n	800ca2a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	695b      	ldr	r3, [r3, #20]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d003      	beq.n	800c990 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	695b      	ldr	r3, [r3, #20]
 800c98c:	089b      	lsrs	r3, r3, #2
 800c98e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00e      	beq.n	800c9b6 <osThreadNew+0xa8>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	2b5b      	cmp	r3, #91	; 0x5b
 800c99e:	d90a      	bls.n	800c9b6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d006      	beq.n	800c9b6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	695b      	ldr	r3, [r3, #20]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d002      	beq.n	800c9b6 <osThreadNew+0xa8>
        mem = 1;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	61bb      	str	r3, [r7, #24]
 800c9b4:	e010      	b.n	800c9d8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10c      	bne.n	800c9d8 <osThreadNew+0xca>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d108      	bne.n	800c9d8 <osThreadNew+0xca>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d104      	bne.n	800c9d8 <osThreadNew+0xca>
          mem = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	61bb      	str	r3, [r7, #24]
 800c9d2:	e001      	b.n	800c9d8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d110      	bne.n	800ca00 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c9e6:	9202      	str	r2, [sp, #8]
 800c9e8:	9301      	str	r3, [sp, #4]
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	6a3a      	ldr	r2, [r7, #32]
 800c9f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f001 fb53 	bl	800e0a0 <xTaskCreateStatic>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	613b      	str	r3, [r7, #16]
 800c9fe:	e013      	b.n	800ca28 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d110      	bne.n	800ca28 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	b29a      	uxth	r2, r3
 800ca0a:	f107 0310 	add.w	r3, r7, #16
 800ca0e:	9301      	str	r3, [sp, #4]
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f001 fb9e 	bl	800e15a <xTaskCreate>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d001      	beq.n	800ca28 <osThreadNew+0x11a>
            hTask = NULL;
 800ca24:	2300      	movs	r3, #0
 800ca26:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ca28:	693b      	ldr	r3, [r7, #16]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3728      	adds	r7, #40	; 0x28
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b084      	sub	sp, #16
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca3a:	f3ef 8305 	mrs	r3, IPSR
 800ca3e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d003      	beq.n	800ca4e <osDelay+0x1c>
    stat = osErrorISR;
 800ca46:	f06f 0305 	mvn.w	r3, #5
 800ca4a:	60fb      	str	r3, [r7, #12]
 800ca4c:	e007      	b.n	800ca5e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d002      	beq.n	800ca5e <osDelay+0x2c>
      vTaskDelay(ticks);
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f001 fcc3 	bl	800e3e4 <vTaskDelay>
    }
  }

  return (stat);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b088      	sub	sp, #32
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca74:	f3ef 8305 	mrs	r3, IPSR
 800ca78:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca7a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d174      	bne.n	800cb6a <osMutexNew+0x102>
    if (attr != NULL) {
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d003      	beq.n	800ca8e <osMutexNew+0x26>
      type = attr->attr_bits;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	61bb      	str	r3, [r7, #24]
 800ca8c:	e001      	b.n	800ca92 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d002      	beq.n	800caa2 <osMutexNew+0x3a>
      rmtx = 1U;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	617b      	str	r3, [r7, #20]
 800caa0:	e001      	b.n	800caa6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800caa2:	2300      	movs	r3, #0
 800caa4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	f003 0308 	and.w	r3, r3, #8
 800caac:	2b00      	cmp	r3, #0
 800caae:	d15c      	bne.n	800cb6a <osMutexNew+0x102>
      mem = -1;
 800cab0:	f04f 33ff 	mov.w	r3, #4294967295
 800cab4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d015      	beq.n	800cae8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d006      	beq.n	800cad2 <osMutexNew+0x6a>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	2b4f      	cmp	r3, #79	; 0x4f
 800caca:	d902      	bls.n	800cad2 <osMutexNew+0x6a>
          mem = 1;
 800cacc:	2301      	movs	r3, #1
 800cace:	613b      	str	r3, [r7, #16]
 800cad0:	e00c      	b.n	800caec <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d108      	bne.n	800caec <osMutexNew+0x84>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d104      	bne.n	800caec <osMutexNew+0x84>
            mem = 0;
 800cae2:	2300      	movs	r3, #0
 800cae4:	613b      	str	r3, [r7, #16]
 800cae6:	e001      	b.n	800caec <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800cae8:	2300      	movs	r3, #0
 800caea:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d112      	bne.n	800cb18 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d007      	beq.n	800cb08 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	689b      	ldr	r3, [r3, #8]
 800cafc:	4619      	mov	r1, r3
 800cafe:	2004      	movs	r0, #4
 800cb00:	f000 fc6f 	bl	800d3e2 <xQueueCreateMutexStatic>
 800cb04:	61f8      	str	r0, [r7, #28]
 800cb06:	e016      	b.n	800cb36 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	2001      	movs	r0, #1
 800cb10:	f000 fc67 	bl	800d3e2 <xQueueCreateMutexStatic>
 800cb14:	61f8      	str	r0, [r7, #28]
 800cb16:	e00e      	b.n	800cb36 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d10b      	bne.n	800cb36 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d004      	beq.n	800cb2e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cb24:	2004      	movs	r0, #4
 800cb26:	f000 fc44 	bl	800d3b2 <xQueueCreateMutex>
 800cb2a:	61f8      	str	r0, [r7, #28]
 800cb2c:	e003      	b.n	800cb36 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800cb2e:	2001      	movs	r0, #1
 800cb30:	f000 fc3f 	bl	800d3b2 <xQueueCreateMutex>
 800cb34:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00c      	beq.n	800cb56 <osMutexNew+0xee>
        if (attr != NULL) {
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d003      	beq.n	800cb4a <osMutexNew+0xe2>
          name = attr->name;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	60fb      	str	r3, [r7, #12]
 800cb48:	e001      	b.n	800cb4e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800cb4e:	68f9      	ldr	r1, [r7, #12]
 800cb50:	69f8      	ldr	r0, [r7, #28]
 800cb52:	f001 fa1d 	bl	800df90 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d006      	beq.n	800cb6a <osMutexNew+0x102>
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d003      	beq.n	800cb6a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	f043 0301 	orr.w	r3, r3, #1
 800cb68:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cb6a:	69fb      	ldr	r3, [r7, #28]
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3720      	adds	r7, #32
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b086      	sub	sp, #24
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f023 0301 	bic.w	r3, r3, #1
 800cb84:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb92:	f3ef 8305 	mrs	r3, IPSR
 800cb96:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb98:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d003      	beq.n	800cba6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800cb9e:	f06f 0305 	mvn.w	r3, #5
 800cba2:	617b      	str	r3, [r7, #20]
 800cba4:	e02c      	b.n	800cc00 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d103      	bne.n	800cbb4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cbac:	f06f 0303 	mvn.w	r3, #3
 800cbb0:	617b      	str	r3, [r7, #20]
 800cbb2:	e025      	b.n	800cc00 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d011      	beq.n	800cbde <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6938      	ldr	r0, [r7, #16]
 800cbbe:	f000 fc5f 	bl	800d480 <xQueueTakeMutexRecursive>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d01b      	beq.n	800cc00 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d003      	beq.n	800cbd6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800cbce:	f06f 0301 	mvn.w	r3, #1
 800cbd2:	617b      	str	r3, [r7, #20]
 800cbd4:	e014      	b.n	800cc00 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cbd6:	f06f 0302 	mvn.w	r3, #2
 800cbda:	617b      	str	r3, [r7, #20]
 800cbdc:	e010      	b.n	800cc00 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cbde:	6839      	ldr	r1, [r7, #0]
 800cbe0:	6938      	ldr	r0, [r7, #16]
 800cbe2:	f000 fefd 	bl	800d9e0 <xQueueSemaphoreTake>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d009      	beq.n	800cc00 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d003      	beq.n	800cbfa <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800cbf2:	f06f 0301 	mvn.w	r3, #1
 800cbf6:	617b      	str	r3, [r7, #20]
 800cbf8:	e002      	b.n	800cc00 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cbfa:	f06f 0302 	mvn.w	r3, #2
 800cbfe:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800cc00:	697b      	ldr	r3, [r7, #20]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3718      	adds	r7, #24
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b086      	sub	sp, #24
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f023 0301 	bic.w	r3, r3, #1
 800cc18:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f003 0301 	and.w	r3, r3, #1
 800cc20:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cc22:	2300      	movs	r3, #0
 800cc24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc26:	f3ef 8305 	mrs	r3, IPSR
 800cc2a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc2c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d003      	beq.n	800cc3a <osMutexRelease+0x30>
    stat = osErrorISR;
 800cc32:	f06f 0305 	mvn.w	r3, #5
 800cc36:	617b      	str	r3, [r7, #20]
 800cc38:	e01f      	b.n	800cc7a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d103      	bne.n	800cc48 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800cc40:	f06f 0303 	mvn.w	r3, #3
 800cc44:	617b      	str	r3, [r7, #20]
 800cc46:	e018      	b.n	800cc7a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d009      	beq.n	800cc62 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cc4e:	6938      	ldr	r0, [r7, #16]
 800cc50:	f000 fbe2 	bl	800d418 <xQueueGiveMutexRecursive>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d00f      	beq.n	800cc7a <osMutexRelease+0x70>
        stat = osErrorResource;
 800cc5a:	f06f 0302 	mvn.w	r3, #2
 800cc5e:	617b      	str	r3, [r7, #20]
 800cc60:	e00b      	b.n	800cc7a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cc62:	2300      	movs	r3, #0
 800cc64:	2200      	movs	r2, #0
 800cc66:	2100      	movs	r1, #0
 800cc68:	6938      	ldr	r0, [r7, #16]
 800cc6a:	f000 fc3f 	bl	800d4ec <xQueueGenericSend>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d002      	beq.n	800cc7a <osMutexRelease+0x70>
        stat = osErrorResource;
 800cc74:	f06f 0302 	mvn.w	r3, #2
 800cc78:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cc7a:	697b      	ldr	r3, [r7, #20]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3718      	adds	r7, #24
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f023 0301 	bic.w	r3, r3, #1
 800cc92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc94:	f3ef 8305 	mrs	r3, IPSR
 800cc98:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc9a:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d003      	beq.n	800cca8 <osMutexDelete+0x24>
    stat = osErrorISR;
 800cca0:	f06f 0305 	mvn.w	r3, #5
 800cca4:	617b      	str	r3, [r7, #20]
 800cca6:	e00e      	b.n	800ccc6 <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d103      	bne.n	800ccb6 <osMutexDelete+0x32>
    stat = osErrorParameter;
 800ccae:	f06f 0303 	mvn.w	r3, #3
 800ccb2:	617b      	str	r3, [r7, #20]
 800ccb4:	e007      	b.n	800ccc6 <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 800ccb6:	6938      	ldr	r0, [r7, #16]
 800ccb8:	f001 f994 	bl	800dfe4 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 800ccc0:	6938      	ldr	r0, [r7, #16]
 800ccc2:	f001 f819 	bl	800dcf8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800ccc6:	697b      	ldr	r3, [r7, #20]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3718      	adds	r7, #24
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08a      	sub	sp, #40	; 0x28
 800ccd4:	af02      	add	r7, sp, #8
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cce0:	f3ef 8305 	mrs	r3, IPSR
 800cce4:	613b      	str	r3, [r7, #16]
  return(result);
 800cce6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d15f      	bne.n	800cdac <osMessageQueueNew+0xdc>
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d05c      	beq.n	800cdac <osMessageQueueNew+0xdc>
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d059      	beq.n	800cdac <osMessageQueueNew+0xdc>
    mem = -1;
 800ccf8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d029      	beq.n	800cd58 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d012      	beq.n	800cd32 <osMessageQueueNew+0x62>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	2b4f      	cmp	r3, #79	; 0x4f
 800cd12:	d90e      	bls.n	800cd32 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00a      	beq.n	800cd32 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	695a      	ldr	r2, [r3, #20]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	68b9      	ldr	r1, [r7, #8]
 800cd24:	fb01 f303 	mul.w	r3, r1, r3
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d302      	bcc.n	800cd32 <osMessageQueueNew+0x62>
        mem = 1;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	61bb      	str	r3, [r7, #24]
 800cd30:	e014      	b.n	800cd5c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d110      	bne.n	800cd5c <osMessageQueueNew+0x8c>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10c      	bne.n	800cd5c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d108      	bne.n	800cd5c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	695b      	ldr	r3, [r3, #20]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d104      	bne.n	800cd5c <osMessageQueueNew+0x8c>
          mem = 0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	61bb      	str	r3, [r7, #24]
 800cd56:	e001      	b.n	800cd5c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cd5c:	69bb      	ldr	r3, [r7, #24]
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d10b      	bne.n	800cd7a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	691a      	ldr	r2, [r3, #16]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	9100      	str	r1, [sp, #0]
 800cd6e:	68b9      	ldr	r1, [r7, #8]
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f000 fa2f 	bl	800d1d4 <xQueueGenericCreateStatic>
 800cd76:	61f8      	str	r0, [r7, #28]
 800cd78:	e008      	b.n	800cd8c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d105      	bne.n	800cd8c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cd80:	2200      	movs	r2, #0
 800cd82:	68b9      	ldr	r1, [r7, #8]
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f000 fa9d 	bl	800d2c4 <xQueueGenericCreate>
 800cd8a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00c      	beq.n	800cdac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d003      	beq.n	800cda0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	617b      	str	r3, [r7, #20]
 800cd9e:	e001      	b.n	800cda4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cda0:	2300      	movs	r3, #0
 800cda2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cda4:	6979      	ldr	r1, [r7, #20]
 800cda6:	69f8      	ldr	r0, [r7, #28]
 800cda8:	f001 f8f2 	bl	800df90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cdac:	69fb      	ldr	r3, [r7, #28]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3720      	adds	r7, #32
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
	...

0800cdb8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b088      	sub	sp, #32
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	603b      	str	r3, [r7, #0]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdd0:	f3ef 8305 	mrs	r3, IPSR
 800cdd4:	617b      	str	r3, [r7, #20]
  return(result);
 800cdd6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d028      	beq.n	800ce2e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d005      	beq.n	800cdee <osMessageQueuePut+0x36>
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d002      	beq.n	800cdee <osMessageQueuePut+0x36>
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d003      	beq.n	800cdf6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cdee:	f06f 0303 	mvn.w	r3, #3
 800cdf2:	61fb      	str	r3, [r7, #28]
 800cdf4:	e038      	b.n	800ce68 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cdfa:	f107 0210 	add.w	r2, r7, #16
 800cdfe:	2300      	movs	r3, #0
 800ce00:	68b9      	ldr	r1, [r7, #8]
 800ce02:	69b8      	ldr	r0, [r7, #24]
 800ce04:	f000 fc70 	bl	800d6e8 <xQueueGenericSendFromISR>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d003      	beq.n	800ce16 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ce0e:	f06f 0302 	mvn.w	r3, #2
 800ce12:	61fb      	str	r3, [r7, #28]
 800ce14:	e028      	b.n	800ce68 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d025      	beq.n	800ce68 <osMessageQueuePut+0xb0>
 800ce1c:	4b15      	ldr	r3, [pc, #84]	; (800ce74 <osMessageQueuePut+0xbc>)
 800ce1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	e01c      	b.n	800ce68 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d002      	beq.n	800ce3a <osMessageQueuePut+0x82>
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d103      	bne.n	800ce42 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ce3a:	f06f 0303 	mvn.w	r3, #3
 800ce3e:	61fb      	str	r3, [r7, #28]
 800ce40:	e012      	b.n	800ce68 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ce42:	2300      	movs	r3, #0
 800ce44:	683a      	ldr	r2, [r7, #0]
 800ce46:	68b9      	ldr	r1, [r7, #8]
 800ce48:	69b8      	ldr	r0, [r7, #24]
 800ce4a:	f000 fb4f 	bl	800d4ec <xQueueGenericSend>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d009      	beq.n	800ce68 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ce5a:	f06f 0301 	mvn.w	r3, #1
 800ce5e:	61fb      	str	r3, [r7, #28]
 800ce60:	e002      	b.n	800ce68 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ce62:	f06f 0302 	mvn.w	r3, #2
 800ce66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ce68:	69fb      	ldr	r3, [r7, #28]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3720      	adds	r7, #32
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	e000ed04 	.word	0xe000ed04

0800ce78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b088      	sub	sp, #32
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
 800ce84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce8e:	f3ef 8305 	mrs	r3, IPSR
 800ce92:	617b      	str	r3, [r7, #20]
  return(result);
 800ce94:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d028      	beq.n	800ceec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d005      	beq.n	800ceac <osMessageQueueGet+0x34>
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d002      	beq.n	800ceac <osMessageQueueGet+0x34>
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ceac:	f06f 0303 	mvn.w	r3, #3
 800ceb0:	61fb      	str	r3, [r7, #28]
 800ceb2:	e037      	b.n	800cf24 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ceb8:	f107 0310 	add.w	r3, r7, #16
 800cebc:	461a      	mov	r2, r3
 800cebe:	68b9      	ldr	r1, [r7, #8]
 800cec0:	69b8      	ldr	r0, [r7, #24]
 800cec2:	f000 fe99 	bl	800dbf8 <xQueueReceiveFromISR>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d003      	beq.n	800ced4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cecc:	f06f 0302 	mvn.w	r3, #2
 800ced0:	61fb      	str	r3, [r7, #28]
 800ced2:	e027      	b.n	800cf24 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d024      	beq.n	800cf24 <osMessageQueueGet+0xac>
 800ceda:	4b15      	ldr	r3, [pc, #84]	; (800cf30 <osMessageQueueGet+0xb8>)
 800cedc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	e01b      	b.n	800cf24 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ceec:	69bb      	ldr	r3, [r7, #24]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d002      	beq.n	800cef8 <osMessageQueueGet+0x80>
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d103      	bne.n	800cf00 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cef8:	f06f 0303 	mvn.w	r3, #3
 800cefc:	61fb      	str	r3, [r7, #28]
 800cefe:	e011      	b.n	800cf24 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cf00:	683a      	ldr	r2, [r7, #0]
 800cf02:	68b9      	ldr	r1, [r7, #8]
 800cf04:	69b8      	ldr	r0, [r7, #24]
 800cf06:	f000 fc8b 	bl	800d820 <xQueueReceive>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d009      	beq.n	800cf24 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d003      	beq.n	800cf1e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cf16:	f06f 0301 	mvn.w	r3, #1
 800cf1a:	61fb      	str	r3, [r7, #28]
 800cf1c:	e002      	b.n	800cf24 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cf1e:	f06f 0302 	mvn.w	r3, #2
 800cf22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cf24:	69fb      	ldr	r3, [r7, #28]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3720      	adds	r7, #32
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	e000ed04 	.word	0xe000ed04

0800cf34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	4a07      	ldr	r2, [pc, #28]	; (800cf60 <vApplicationGetIdleTaskMemory+0x2c>)
 800cf44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	4a06      	ldr	r2, [pc, #24]	; (800cf64 <vApplicationGetIdleTaskMemory+0x30>)
 800cf4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2280      	movs	r2, #128	; 0x80
 800cf50:	601a      	str	r2, [r3, #0]
}
 800cf52:	bf00      	nop
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	240000d8 	.word	0x240000d8
 800cf64:	24000134 	.word	0x24000134

0800cf68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	4a07      	ldr	r2, [pc, #28]	; (800cf94 <vApplicationGetTimerTaskMemory+0x2c>)
 800cf78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	4a06      	ldr	r2, [pc, #24]	; (800cf98 <vApplicationGetTimerTaskMemory+0x30>)
 800cf7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf86:	601a      	str	r2, [r3, #0]
}
 800cf88:	bf00      	nop
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr
 800cf94:	24000334 	.word	0x24000334
 800cf98:	24000390 	.word	0x24000390

0800cf9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f103 0208 	add.w	r2, r3, #8
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f103 0208 	add.w	r2, r3, #8
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f103 0208 	add.w	r2, r3, #8
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cfea:	bf00      	nop
 800cfec:	370c      	adds	r7, #12
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr

0800cff6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cff6:	b480      	push	{r7}
 800cff8:	b085      	sub	sp, #20
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
 800cffe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	689a      	ldr	r2, [r3, #8]
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	1c5a      	adds	r2, r3, #1
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	601a      	str	r2, [r3, #0]
}
 800d032:	bf00      	nop
 800d034:	3714      	adds	r7, #20
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr

0800d03e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d03e:	b480      	push	{r7}
 800d040:	b085      	sub	sp, #20
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d054:	d103      	bne.n	800d05e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	e00c      	b.n	800d078 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	3308      	adds	r3, #8
 800d062:	60fb      	str	r3, [r7, #12]
 800d064:	e002      	b.n	800d06c <vListInsert+0x2e>
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	60fb      	str	r3, [r7, #12]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	429a      	cmp	r2, r3
 800d076:	d2f6      	bcs.n	800d066 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	685a      	ldr	r2, [r3, #4]
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	683a      	ldr	r2, [r7, #0]
 800d092:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	1c5a      	adds	r2, r3, #1
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	601a      	str	r2, [r3, #0]
}
 800d0a4:	bf00      	nop
 800d0a6:	3714      	adds	r7, #20
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b085      	sub	sp, #20
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	691b      	ldr	r3, [r3, #16]
 800d0bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	6892      	ldr	r2, [r2, #8]
 800d0c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	6852      	ldr	r2, [r2, #4]
 800d0d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d103      	bne.n	800d0e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	689a      	ldr	r2, [r3, #8]
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	1e5a      	subs	r2, r3, #1
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10a      	bne.n	800d12e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d12a:	bf00      	nop
 800d12c:	e7fe      	b.n	800d12c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d12e:	f002 fc51 	bl	800f9d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d13a:	68f9      	ldr	r1, [r7, #12]
 800d13c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d13e:	fb01 f303 	mul.w	r3, r1, r3
 800d142:	441a      	add	r2, r3
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d15e:	3b01      	subs	r3, #1
 800d160:	68f9      	ldr	r1, [r7, #12]
 800d162:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d164:	fb01 f303 	mul.w	r3, r1, r3
 800d168:	441a      	add	r2, r3
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	22ff      	movs	r2, #255	; 0xff
 800d172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	22ff      	movs	r2, #255	; 0xff
 800d17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d114      	bne.n	800d1ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	691b      	ldr	r3, [r3, #16]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d01a      	beq.n	800d1c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	3310      	adds	r3, #16
 800d190:	4618      	mov	r0, r3
 800d192:	f001 fbf7 	bl	800e984 <xTaskRemoveFromEventList>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d012      	beq.n	800d1c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d19c:	4b0c      	ldr	r3, [pc, #48]	; (800d1d0 <xQueueGenericReset+0xcc>)
 800d19e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a2:	601a      	str	r2, [r3, #0]
 800d1a4:	f3bf 8f4f 	dsb	sy
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	e009      	b.n	800d1c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	3310      	adds	r3, #16
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7ff fef2 	bl	800cf9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	3324      	adds	r3, #36	; 0x24
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7ff feed 	bl	800cf9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d1c2:	f002 fc37 	bl	800fa34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d1c6:	2301      	movs	r3, #1
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	e000ed04 	.word	0xe000ed04

0800d1d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b08e      	sub	sp, #56	; 0x38
 800d1d8:	af02      	add	r7, sp, #8
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10a      	bne.n	800d1fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ec:	f383 8811 	msr	BASEPRI, r3
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d1fa:	bf00      	nop
 800d1fc:	e7fe      	b.n	800d1fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d10a      	bne.n	800d21a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d216:	bf00      	nop
 800d218:	e7fe      	b.n	800d218 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d002      	beq.n	800d226 <xQueueGenericCreateStatic+0x52>
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <xQueueGenericCreateStatic+0x56>
 800d226:	2301      	movs	r3, #1
 800d228:	e000      	b.n	800d22c <xQueueGenericCreateStatic+0x58>
 800d22a:	2300      	movs	r3, #0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d10a      	bne.n	800d246 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	623b      	str	r3, [r7, #32]
}
 800d242:	bf00      	nop
 800d244:	e7fe      	b.n	800d244 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d102      	bne.n	800d252 <xQueueGenericCreateStatic+0x7e>
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d101      	bne.n	800d256 <xQueueGenericCreateStatic+0x82>
 800d252:	2301      	movs	r3, #1
 800d254:	e000      	b.n	800d258 <xQueueGenericCreateStatic+0x84>
 800d256:	2300      	movs	r3, #0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10a      	bne.n	800d272 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d260:	f383 8811 	msr	BASEPRI, r3
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	61fb      	str	r3, [r7, #28]
}
 800d26e:	bf00      	nop
 800d270:	e7fe      	b.n	800d270 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d272:	2350      	movs	r3, #80	; 0x50
 800d274:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	2b50      	cmp	r3, #80	; 0x50
 800d27a:	d00a      	beq.n	800d292 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d280:	f383 8811 	msr	BASEPRI, r3
 800d284:	f3bf 8f6f 	isb	sy
 800d288:	f3bf 8f4f 	dsb	sy
 800d28c:	61bb      	str	r3, [r7, #24]
}
 800d28e:	bf00      	nop
 800d290:	e7fe      	b.n	800d290 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d292:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00d      	beq.n	800d2ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d2a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	68b9      	ldr	r1, [r7, #8]
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f000 f83f 	bl	800d338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3730      	adds	r7, #48	; 0x30
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b08a      	sub	sp, #40	; 0x28
 800d2c8:	af02      	add	r7, sp, #8
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <xQueueGenericCreate+0x2a>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	613b      	str	r3, [r7, #16]
}
 800d2ea:	bf00      	nop
 800d2ec:	e7fe      	b.n	800d2ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	68ba      	ldr	r2, [r7, #8]
 800d2f2:	fb02 f303 	mul.w	r3, r2, r3
 800d2f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	3350      	adds	r3, #80	; 0x50
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f002 fc8b 	bl	800fc18 <pvPortMalloc>
 800d302:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d011      	beq.n	800d32e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	3350      	adds	r3, #80	; 0x50
 800d312:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	2200      	movs	r2, #0
 800d318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d31c:	79fa      	ldrb	r2, [r7, #7]
 800d31e:	69bb      	ldr	r3, [r7, #24]
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	4613      	mov	r3, r2
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	68b9      	ldr	r1, [r7, #8]
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f000 f805 	bl	800d338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d32e:	69bb      	ldr	r3, [r7, #24]
	}
 800d330:	4618      	mov	r0, r3
 800d332:	3720      	adds	r7, #32
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	607a      	str	r2, [r7, #4]
 800d344:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d103      	bne.n	800d354 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	69ba      	ldr	r2, [r7, #24]
 800d350:	601a      	str	r2, [r3, #0]
 800d352:	e002      	b.n	800d35a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	68fa      	ldr	r2, [r7, #12]
 800d35e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d366:	2101      	movs	r1, #1
 800d368:	69b8      	ldr	r0, [r7, #24]
 800d36a:	f7ff fecb 	bl	800d104 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	78fa      	ldrb	r2, [r7, #3]
 800d372:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d376:	bf00      	nop
 800d378:	3710      	adds	r7, #16
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b082      	sub	sp, #8
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d00e      	beq.n	800d3aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d39e:	2300      	movs	r3, #0
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 f8a1 	bl	800d4ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d3aa:	bf00      	nop
 800d3ac:	3708      	adds	r7, #8
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b086      	sub	sp, #24
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	617b      	str	r3, [r7, #20]
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d3c4:	79fb      	ldrb	r3, [r7, #7]
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	6939      	ldr	r1, [r7, #16]
 800d3ca:	6978      	ldr	r0, [r7, #20]
 800d3cc:	f7ff ff7a 	bl	800d2c4 <xQueueGenericCreate>
 800d3d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f7ff ffd3 	bl	800d37e <prvInitialiseMutex>

		return xNewQueue;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
	}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b088      	sub	sp, #32
 800d3e6:	af02      	add	r7, sp, #8
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	6039      	str	r1, [r7, #0]
 800d3ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	617b      	str	r3, [r7, #20]
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	6939      	ldr	r1, [r7, #16]
 800d400:	6978      	ldr	r0, [r7, #20]
 800d402:	f7ff fee7 	bl	800d1d4 <xQueueGenericCreateStatic>
 800d406:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f7ff ffb8 	bl	800d37e <prvInitialiseMutex>

		return xNewQueue;
 800d40e:	68fb      	ldr	r3, [r7, #12]
	}
 800d410:	4618      	mov	r0, r3
 800d412:	3718      	adds	r7, #24
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d418:	b590      	push	{r4, r7, lr}
 800d41a:	b087      	sub	sp, #28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d10a      	bne.n	800d440 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800d42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42e:	f383 8811 	msr	BASEPRI, r3
 800d432:	f3bf 8f6f 	isb	sy
 800d436:	f3bf 8f4f 	dsb	sy
 800d43a:	60fb      	str	r3, [r7, #12]
}
 800d43c:	bf00      	nop
 800d43e:	e7fe      	b.n	800d43e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	689c      	ldr	r4, [r3, #8]
 800d444:	f001 fc5c 	bl	800ed00 <xTaskGetCurrentTaskHandle>
 800d448:	4603      	mov	r3, r0
 800d44a:	429c      	cmp	r4, r3
 800d44c:	d111      	bne.n	800d472 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	1e5a      	subs	r2, r3, #1
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d105      	bne.n	800d46c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d460:	2300      	movs	r3, #0
 800d462:	2200      	movs	r2, #0
 800d464:	2100      	movs	r1, #0
 800d466:	6938      	ldr	r0, [r7, #16]
 800d468:	f000 f840 	bl	800d4ec <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d46c:	2301      	movs	r3, #1
 800d46e:	617b      	str	r3, [r7, #20]
 800d470:	e001      	b.n	800d476 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d472:	2300      	movs	r3, #0
 800d474:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d476:	697b      	ldr	r3, [r7, #20]
	}
 800d478:	4618      	mov	r0, r3
 800d47a:	371c      	adds	r7, #28
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd90      	pop	{r4, r7, pc}

0800d480 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d480:	b590      	push	{r4, r7, lr}
 800d482:	b087      	sub	sp, #28
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10a      	bne.n	800d4aa <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	60fb      	str	r3, [r7, #12]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	689c      	ldr	r4, [r3, #8]
 800d4ae:	f001 fc27 	bl	800ed00 <xTaskGetCurrentTaskHandle>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	429c      	cmp	r4, r3
 800d4b6:	d107      	bne.n	800d4c8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	1c5a      	adds	r2, r3, #1
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	617b      	str	r3, [r7, #20]
 800d4c6:	e00c      	b.n	800d4e2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d4c8:	6839      	ldr	r1, [r7, #0]
 800d4ca:	6938      	ldr	r0, [r7, #16]
 800d4cc:	f000 fa88 	bl	800d9e0 <xQueueSemaphoreTake>
 800d4d0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d004      	beq.n	800d4e2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	1c5a      	adds	r2, r3, #1
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d4e2:	697b      	ldr	r3, [r7, #20]
	}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	371c      	adds	r7, #28
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd90      	pop	{r4, r7, pc}

0800d4ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b08e      	sub	sp, #56	; 0x38
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
 800d4f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10a      	bne.n	800d51e <xQueueGenericSend+0x32>
	__asm volatile
 800d508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50c:	f383 8811 	msr	BASEPRI, r3
 800d510:	f3bf 8f6f 	isb	sy
 800d514:	f3bf 8f4f 	dsb	sy
 800d518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d51a:	bf00      	nop
 800d51c:	e7fe      	b.n	800d51c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d103      	bne.n	800d52c <xQueueGenericSend+0x40>
 800d524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d101      	bne.n	800d530 <xQueueGenericSend+0x44>
 800d52c:	2301      	movs	r3, #1
 800d52e:	e000      	b.n	800d532 <xQueueGenericSend+0x46>
 800d530:	2300      	movs	r3, #0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10a      	bne.n	800d54c <xQueueGenericSend+0x60>
	__asm volatile
 800d536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d548:	bf00      	nop
 800d54a:	e7fe      	b.n	800d54a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	2b02      	cmp	r3, #2
 800d550:	d103      	bne.n	800d55a <xQueueGenericSend+0x6e>
 800d552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d556:	2b01      	cmp	r3, #1
 800d558:	d101      	bne.n	800d55e <xQueueGenericSend+0x72>
 800d55a:	2301      	movs	r3, #1
 800d55c:	e000      	b.n	800d560 <xQueueGenericSend+0x74>
 800d55e:	2300      	movs	r3, #0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10a      	bne.n	800d57a <xQueueGenericSend+0x8e>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	623b      	str	r3, [r7, #32]
}
 800d576:	bf00      	nop
 800d578:	e7fe      	b.n	800d578 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d57a:	f001 fbd1 	bl	800ed20 <xTaskGetSchedulerState>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d102      	bne.n	800d58a <xQueueGenericSend+0x9e>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d101      	bne.n	800d58e <xQueueGenericSend+0xa2>
 800d58a:	2301      	movs	r3, #1
 800d58c:	e000      	b.n	800d590 <xQueueGenericSend+0xa4>
 800d58e:	2300      	movs	r3, #0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d10a      	bne.n	800d5aa <xQueueGenericSend+0xbe>
	__asm volatile
 800d594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d598:	f383 8811 	msr	BASEPRI, r3
 800d59c:	f3bf 8f6f 	isb	sy
 800d5a0:	f3bf 8f4f 	dsb	sy
 800d5a4:	61fb      	str	r3, [r7, #28]
}
 800d5a6:	bf00      	nop
 800d5a8:	e7fe      	b.n	800d5a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5aa:	f002 fa13 	bl	800f9d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d302      	bcc.n	800d5c0 <xQueueGenericSend+0xd4>
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d129      	bne.n	800d614 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5c0:	683a      	ldr	r2, [r7, #0]
 800d5c2:	68b9      	ldr	r1, [r7, #8]
 800d5c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5c6:	f000 fbd2 	bl	800dd6e <prvCopyDataToQueue>
 800d5ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d010      	beq.n	800d5f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d6:	3324      	adds	r3, #36	; 0x24
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f001 f9d3 	bl	800e984 <xTaskRemoveFromEventList>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d013      	beq.n	800d60c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d5e4:	4b3f      	ldr	r3, [pc, #252]	; (800d6e4 <xQueueGenericSend+0x1f8>)
 800d5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5ea:	601a      	str	r2, [r3, #0]
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	f3bf 8f6f 	isb	sy
 800d5f4:	e00a      	b.n	800d60c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d007      	beq.n	800d60c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d5fc:	4b39      	ldr	r3, [pc, #228]	; (800d6e4 <xQueueGenericSend+0x1f8>)
 800d5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d602:	601a      	str	r2, [r3, #0]
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d60c:	f002 fa12 	bl	800fa34 <vPortExitCritical>
				return pdPASS;
 800d610:	2301      	movs	r3, #1
 800d612:	e063      	b.n	800d6dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d103      	bne.n	800d622 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d61a:	f002 fa0b 	bl	800fa34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d61e:	2300      	movs	r3, #0
 800d620:	e05c      	b.n	800d6dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d624:	2b00      	cmp	r3, #0
 800d626:	d106      	bne.n	800d636 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d628:	f107 0314 	add.w	r3, r7, #20
 800d62c:	4618      	mov	r0, r3
 800d62e:	f001 fa0d 	bl	800ea4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d632:	2301      	movs	r3, #1
 800d634:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d636:	f002 f9fd 	bl	800fa34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d63a:	f000 ff6d 	bl	800e518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d63e:	f002 f9c9 	bl	800f9d4 <vPortEnterCritical>
 800d642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d648:	b25b      	sxtb	r3, r3
 800d64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64e:	d103      	bne.n	800d658 <xQueueGenericSend+0x16c>
 800d650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d652:	2200      	movs	r2, #0
 800d654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d65e:	b25b      	sxtb	r3, r3
 800d660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d664:	d103      	bne.n	800d66e <xQueueGenericSend+0x182>
 800d666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d668:	2200      	movs	r2, #0
 800d66a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d66e:	f002 f9e1 	bl	800fa34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d672:	1d3a      	adds	r2, r7, #4
 800d674:	f107 0314 	add.w	r3, r7, #20
 800d678:	4611      	mov	r1, r2
 800d67a:	4618      	mov	r0, r3
 800d67c:	f001 f9fc 	bl	800ea78 <xTaskCheckForTimeOut>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d124      	bne.n	800d6d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d688:	f000 fc69 	bl	800df5e <prvIsQueueFull>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d018      	beq.n	800d6c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d694:	3310      	adds	r3, #16
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	4611      	mov	r1, r2
 800d69a:	4618      	mov	r0, r3
 800d69c:	f001 f922 	bl	800e8e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d6a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6a2:	f000 fbf4 	bl	800de8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d6a6:	f000 ff45 	bl	800e534 <xTaskResumeAll>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f47f af7c 	bne.w	800d5aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d6b2:	4b0c      	ldr	r3, [pc, #48]	; (800d6e4 <xQueueGenericSend+0x1f8>)
 800d6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	f3bf 8f6f 	isb	sy
 800d6c2:	e772      	b.n	800d5aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d6c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6c6:	f000 fbe2 	bl	800de8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6ca:	f000 ff33 	bl	800e534 <xTaskResumeAll>
 800d6ce:	e76c      	b.n	800d5aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d6d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6d2:	f000 fbdc 	bl	800de8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6d6:	f000 ff2d 	bl	800e534 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d6da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3738      	adds	r7, #56	; 0x38
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	e000ed04 	.word	0xe000ed04

0800d6e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b090      	sub	sp, #64	; 0x40
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
 800d6f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10a      	bne.n	800d716 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d712:	bf00      	nop
 800d714:	e7fe      	b.n	800d714 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d103      	bne.n	800d724 <xQueueGenericSendFromISR+0x3c>
 800d71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d720:	2b00      	cmp	r3, #0
 800d722:	d101      	bne.n	800d728 <xQueueGenericSendFromISR+0x40>
 800d724:	2301      	movs	r3, #1
 800d726:	e000      	b.n	800d72a <xQueueGenericSendFromISR+0x42>
 800d728:	2300      	movs	r3, #0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10a      	bne.n	800d744 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d740:	bf00      	nop
 800d742:	e7fe      	b.n	800d742 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	2b02      	cmp	r3, #2
 800d748:	d103      	bne.n	800d752 <xQueueGenericSendFromISR+0x6a>
 800d74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d101      	bne.n	800d756 <xQueueGenericSendFromISR+0x6e>
 800d752:	2301      	movs	r3, #1
 800d754:	e000      	b.n	800d758 <xQueueGenericSendFromISR+0x70>
 800d756:	2300      	movs	r3, #0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10a      	bne.n	800d772 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d760:	f383 8811 	msr	BASEPRI, r3
 800d764:	f3bf 8f6f 	isb	sy
 800d768:	f3bf 8f4f 	dsb	sy
 800d76c:	623b      	str	r3, [r7, #32]
}
 800d76e:	bf00      	nop
 800d770:	e7fe      	b.n	800d770 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d772:	f002 fa11 	bl	800fb98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d776:	f3ef 8211 	mrs	r2, BASEPRI
 800d77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	61fa      	str	r2, [r7, #28]
 800d78c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d78e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d790:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d302      	bcc.n	800d7a4 <xQueueGenericSendFromISR+0xbc>
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	2b02      	cmp	r3, #2
 800d7a2:	d12f      	bne.n	800d804 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7b4:	683a      	ldr	r2, [r7, #0]
 800d7b6:	68b9      	ldr	r1, [r7, #8]
 800d7b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7ba:	f000 fad8 	bl	800dd6e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d7be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c6:	d112      	bne.n	800d7ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d016      	beq.n	800d7fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d2:	3324      	adds	r3, #36	; 0x24
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f001 f8d5 	bl	800e984 <xTaskRemoveFromEventList>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00e      	beq.n	800d7fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00b      	beq.n	800d7fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	e007      	b.n	800d7fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d7ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	b25a      	sxtb	r2, r3
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d7fe:	2301      	movs	r3, #1
 800d800:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d802:	e001      	b.n	800d808 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d804:	2300      	movs	r3, #0
 800d806:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d80a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d812:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d816:	4618      	mov	r0, r3
 800d818:	3740      	adds	r7, #64	; 0x40
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
	...

0800d820 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b08c      	sub	sp, #48	; 0x30
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d82c:	2300      	movs	r3, #0
 800d82e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d836:	2b00      	cmp	r3, #0
 800d838:	d10a      	bne.n	800d850 <xQueueReceive+0x30>
	__asm volatile
 800d83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83e:	f383 8811 	msr	BASEPRI, r3
 800d842:	f3bf 8f6f 	isb	sy
 800d846:	f3bf 8f4f 	dsb	sy
 800d84a:	623b      	str	r3, [r7, #32]
}
 800d84c:	bf00      	nop
 800d84e:	e7fe      	b.n	800d84e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d103      	bne.n	800d85e <xQueueReceive+0x3e>
 800d856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d101      	bne.n	800d862 <xQueueReceive+0x42>
 800d85e:	2301      	movs	r3, #1
 800d860:	e000      	b.n	800d864 <xQueueReceive+0x44>
 800d862:	2300      	movs	r3, #0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10a      	bne.n	800d87e <xQueueReceive+0x5e>
	__asm volatile
 800d868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86c:	f383 8811 	msr	BASEPRI, r3
 800d870:	f3bf 8f6f 	isb	sy
 800d874:	f3bf 8f4f 	dsb	sy
 800d878:	61fb      	str	r3, [r7, #28]
}
 800d87a:	bf00      	nop
 800d87c:	e7fe      	b.n	800d87c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d87e:	f001 fa4f 	bl	800ed20 <xTaskGetSchedulerState>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d102      	bne.n	800d88e <xQueueReceive+0x6e>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d101      	bne.n	800d892 <xQueueReceive+0x72>
 800d88e:	2301      	movs	r3, #1
 800d890:	e000      	b.n	800d894 <xQueueReceive+0x74>
 800d892:	2300      	movs	r3, #0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d10a      	bne.n	800d8ae <xQueueReceive+0x8e>
	__asm volatile
 800d898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d89c:	f383 8811 	msr	BASEPRI, r3
 800d8a0:	f3bf 8f6f 	isb	sy
 800d8a4:	f3bf 8f4f 	dsb	sy
 800d8a8:	61bb      	str	r3, [r7, #24]
}
 800d8aa:	bf00      	nop
 800d8ac:	e7fe      	b.n	800d8ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8ae:	f002 f891 	bl	800f9d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d01f      	beq.n	800d8fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8be:	68b9      	ldr	r1, [r7, #8]
 800d8c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8c2:	f000 fabe 	bl	800de42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c8:	1e5a      	subs	r2, r3, #1
 800d8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00f      	beq.n	800d8f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d8:	3310      	adds	r3, #16
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f001 f852 	bl	800e984 <xTaskRemoveFromEventList>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d007      	beq.n	800d8f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8e6:	4b3d      	ldr	r3, [pc, #244]	; (800d9dc <xQueueReceive+0x1bc>)
 800d8e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d8f6:	f002 f89d 	bl	800fa34 <vPortExitCritical>
				return pdPASS;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e069      	b.n	800d9d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d103      	bne.n	800d90c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d904:	f002 f896 	bl	800fa34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d908:	2300      	movs	r3, #0
 800d90a:	e062      	b.n	800d9d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d106      	bne.n	800d920 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d912:	f107 0310 	add.w	r3, r7, #16
 800d916:	4618      	mov	r0, r3
 800d918:	f001 f898 	bl	800ea4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d91c:	2301      	movs	r3, #1
 800d91e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d920:	f002 f888 	bl	800fa34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d924:	f000 fdf8 	bl	800e518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d928:	f002 f854 	bl	800f9d4 <vPortEnterCritical>
 800d92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d932:	b25b      	sxtb	r3, r3
 800d934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d938:	d103      	bne.n	800d942 <xQueueReceive+0x122>
 800d93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93c:	2200      	movs	r2, #0
 800d93e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d948:	b25b      	sxtb	r3, r3
 800d94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d94e:	d103      	bne.n	800d958 <xQueueReceive+0x138>
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	2200      	movs	r2, #0
 800d954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d958:	f002 f86c 	bl	800fa34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d95c:	1d3a      	adds	r2, r7, #4
 800d95e:	f107 0310 	add.w	r3, r7, #16
 800d962:	4611      	mov	r1, r2
 800d964:	4618      	mov	r0, r3
 800d966:	f001 f887 	bl	800ea78 <xTaskCheckForTimeOut>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d123      	bne.n	800d9b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d972:	f000 fade 	bl	800df32 <prvIsQueueEmpty>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d017      	beq.n	800d9ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97e:	3324      	adds	r3, #36	; 0x24
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	4611      	mov	r1, r2
 800d984:	4618      	mov	r0, r3
 800d986:	f000 ffad 	bl	800e8e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d98a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d98c:	f000 fa7f 	bl	800de8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d990:	f000 fdd0 	bl	800e534 <xTaskResumeAll>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d189      	bne.n	800d8ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d99a:	4b10      	ldr	r3, [pc, #64]	; (800d9dc <xQueueReceive+0x1bc>)
 800d99c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	f3bf 8f4f 	dsb	sy
 800d9a6:	f3bf 8f6f 	isb	sy
 800d9aa:	e780      	b.n	800d8ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d9ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9ae:	f000 fa6e 	bl	800de8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9b2:	f000 fdbf 	bl	800e534 <xTaskResumeAll>
 800d9b6:	e77a      	b.n	800d8ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d9b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9ba:	f000 fa68 	bl	800de8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9be:	f000 fdb9 	bl	800e534 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9c4:	f000 fab5 	bl	800df32 <prvIsQueueEmpty>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f43f af6f 	beq.w	800d8ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d9d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3730      	adds	r7, #48	; 0x30
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	e000ed04 	.word	0xe000ed04

0800d9e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b08e      	sub	sp, #56	; 0x38
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d10a      	bne.n	800da12 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da00:	f383 8811 	msr	BASEPRI, r3
 800da04:	f3bf 8f6f 	isb	sy
 800da08:	f3bf 8f4f 	dsb	sy
 800da0c:	623b      	str	r3, [r7, #32]
}
 800da0e:	bf00      	nop
 800da10:	e7fe      	b.n	800da10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00a      	beq.n	800da30 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	61fb      	str	r3, [r7, #28]
}
 800da2c:	bf00      	nop
 800da2e:	e7fe      	b.n	800da2e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da30:	f001 f976 	bl	800ed20 <xTaskGetSchedulerState>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d102      	bne.n	800da40 <xQueueSemaphoreTake+0x60>
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d101      	bne.n	800da44 <xQueueSemaphoreTake+0x64>
 800da40:	2301      	movs	r3, #1
 800da42:	e000      	b.n	800da46 <xQueueSemaphoreTake+0x66>
 800da44:	2300      	movs	r3, #0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d10a      	bne.n	800da60 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800da4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4e:	f383 8811 	msr	BASEPRI, r3
 800da52:	f3bf 8f6f 	isb	sy
 800da56:	f3bf 8f4f 	dsb	sy
 800da5a:	61bb      	str	r3, [r7, #24]
}
 800da5c:	bf00      	nop
 800da5e:	e7fe      	b.n	800da5e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da60:	f001 ffb8 	bl	800f9d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800da64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da68:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800da6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d024      	beq.n	800daba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da72:	1e5a      	subs	r2, r3, #1
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d104      	bne.n	800da8a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800da80:	f001 fac4 	bl	800f00c <pvTaskIncrementMutexHeldCount>
 800da84:	4602      	mov	r2, r0
 800da86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da88:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00f      	beq.n	800dab2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da94:	3310      	adds	r3, #16
 800da96:	4618      	mov	r0, r3
 800da98:	f000 ff74 	bl	800e984 <xTaskRemoveFromEventList>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d007      	beq.n	800dab2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800daa2:	4b54      	ldr	r3, [pc, #336]	; (800dbf4 <xQueueSemaphoreTake+0x214>)
 800daa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daa8:	601a      	str	r2, [r3, #0]
 800daaa:	f3bf 8f4f 	dsb	sy
 800daae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dab2:	f001 ffbf 	bl	800fa34 <vPortExitCritical>
				return pdPASS;
 800dab6:	2301      	movs	r3, #1
 800dab8:	e097      	b.n	800dbea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d111      	bne.n	800dae4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00a      	beq.n	800dadc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800dac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daca:	f383 8811 	msr	BASEPRI, r3
 800dace:	f3bf 8f6f 	isb	sy
 800dad2:	f3bf 8f4f 	dsb	sy
 800dad6:	617b      	str	r3, [r7, #20]
}
 800dad8:	bf00      	nop
 800dada:	e7fe      	b.n	800dada <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dadc:	f001 ffaa 	bl	800fa34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dae0:	2300      	movs	r3, #0
 800dae2:	e082      	b.n	800dbea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d106      	bne.n	800daf8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800daea:	f107 030c 	add.w	r3, r7, #12
 800daee:	4618      	mov	r0, r3
 800daf0:	f000 ffac 	bl	800ea4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800daf4:	2301      	movs	r3, #1
 800daf6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800daf8:	f001 ff9c 	bl	800fa34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dafc:	f000 fd0c 	bl	800e518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db00:	f001 ff68 	bl	800f9d4 <vPortEnterCritical>
 800db04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db0a:	b25b      	sxtb	r3, r3
 800db0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db10:	d103      	bne.n	800db1a <xQueueSemaphoreTake+0x13a>
 800db12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db14:	2200      	movs	r2, #0
 800db16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db20:	b25b      	sxtb	r3, r3
 800db22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db26:	d103      	bne.n	800db30 <xQueueSemaphoreTake+0x150>
 800db28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db30:	f001 ff80 	bl	800fa34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db34:	463a      	mov	r2, r7
 800db36:	f107 030c 	add.w	r3, r7, #12
 800db3a:	4611      	mov	r1, r2
 800db3c:	4618      	mov	r0, r3
 800db3e:	f000 ff9b 	bl	800ea78 <xTaskCheckForTimeOut>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d132      	bne.n	800dbae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db4a:	f000 f9f2 	bl	800df32 <prvIsQueueEmpty>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d026      	beq.n	800dba2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d109      	bne.n	800db70 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800db5c:	f001 ff3a 	bl	800f9d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	4618      	mov	r0, r3
 800db66:	f001 f8f9 	bl	800ed5c <xTaskPriorityInherit>
 800db6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800db6c:	f001 ff62 	bl	800fa34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db72:	3324      	adds	r3, #36	; 0x24
 800db74:	683a      	ldr	r2, [r7, #0]
 800db76:	4611      	mov	r1, r2
 800db78:	4618      	mov	r0, r3
 800db7a:	f000 feb3 	bl	800e8e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db80:	f000 f985 	bl	800de8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db84:	f000 fcd6 	bl	800e534 <xTaskResumeAll>
 800db88:	4603      	mov	r3, r0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f47f af68 	bne.w	800da60 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800db90:	4b18      	ldr	r3, [pc, #96]	; (800dbf4 <xQueueSemaphoreTake+0x214>)
 800db92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db96:	601a      	str	r2, [r3, #0]
 800db98:	f3bf 8f4f 	dsb	sy
 800db9c:	f3bf 8f6f 	isb	sy
 800dba0:	e75e      	b.n	800da60 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dba4:	f000 f973 	bl	800de8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dba8:	f000 fcc4 	bl	800e534 <xTaskResumeAll>
 800dbac:	e758      	b.n	800da60 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dbae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbb0:	f000 f96d 	bl	800de8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbb4:	f000 fcbe 	bl	800e534 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbba:	f000 f9ba 	bl	800df32 <prvIsQueueEmpty>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f43f af4d 	beq.w	800da60 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d00d      	beq.n	800dbe8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dbcc:	f001 ff02 	bl	800f9d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dbd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbd2:	f000 f8b4 	bl	800dd3e <prvGetDisinheritPriorityAfterTimeout>
 800dbd6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f001 f992 	bl	800ef08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dbe4:	f001 ff26 	bl	800fa34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dbe8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3738      	adds	r7, #56	; 0x38
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	e000ed04 	.word	0xe000ed04

0800dbf8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b08e      	sub	sp, #56	; 0x38
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d10a      	bne.n	800dc24 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800dc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	623b      	str	r3, [r7, #32]
}
 800dc20:	bf00      	nop
 800dc22:	e7fe      	b.n	800dc22 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d103      	bne.n	800dc32 <xQueueReceiveFromISR+0x3a>
 800dc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d101      	bne.n	800dc36 <xQueueReceiveFromISR+0x3e>
 800dc32:	2301      	movs	r3, #1
 800dc34:	e000      	b.n	800dc38 <xQueueReceiveFromISR+0x40>
 800dc36:	2300      	movs	r3, #0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d10a      	bne.n	800dc52 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800dc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc40:	f383 8811 	msr	BASEPRI, r3
 800dc44:	f3bf 8f6f 	isb	sy
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	61fb      	str	r3, [r7, #28]
}
 800dc4e:	bf00      	nop
 800dc50:	e7fe      	b.n	800dc50 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc52:	f001 ffa1 	bl	800fb98 <vPortValidateInterruptPriority>
	__asm volatile
 800dc56:	f3ef 8211 	mrs	r2, BASEPRI
 800dc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5e:	f383 8811 	msr	BASEPRI, r3
 800dc62:	f3bf 8f6f 	isb	sy
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	61ba      	str	r2, [r7, #24]
 800dc6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dc6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d02f      	beq.n	800dcde <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc88:	68b9      	ldr	r1, [r7, #8]
 800dc8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc8c:	f000 f8d9 	bl	800de42 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc92:	1e5a      	subs	r2, r3, #1
 800dc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dc98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca0:	d112      	bne.n	800dcc8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca4:	691b      	ldr	r3, [r3, #16]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d016      	beq.n	800dcd8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcac:	3310      	adds	r3, #16
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f000 fe68 	bl	800e984 <xTaskRemoveFromEventList>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d00e      	beq.n	800dcd8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d00b      	beq.n	800dcd8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	e007      	b.n	800dcd8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dcc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dccc:	3301      	adds	r3, #1
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	b25a      	sxtb	r2, r3
 800dcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	637b      	str	r3, [r7, #52]	; 0x34
 800dcdc:	e001      	b.n	800dce2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800dcde:	2300      	movs	r3, #0
 800dce0:	637b      	str	r3, [r7, #52]	; 0x34
 800dce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	f383 8811 	msr	BASEPRI, r3
}
 800dcec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3738      	adds	r7, #56	; 0x38
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d10a      	bne.n	800dd20 <vQueueDelete+0x28>
	__asm volatile
 800dd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0e:	f383 8811 	msr	BASEPRI, r3
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	60bb      	str	r3, [r7, #8]
}
 800dd1c:	bf00      	nop
 800dd1e:	e7fe      	b.n	800dd1e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f000 f95f 	bl	800dfe4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d102      	bne.n	800dd36 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f002 f83d 	bl	800fdb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dd36:	bf00      	nop
 800dd38:	3710      	adds	r7, #16
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}

0800dd3e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dd3e:	b480      	push	{r7}
 800dd40:	b085      	sub	sp, #20
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d006      	beq.n	800dd5c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800dd58:	60fb      	str	r3, [r7, #12]
 800dd5a:	e001      	b.n	800dd60 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dd60:	68fb      	ldr	r3, [r7, #12]
	}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3714      	adds	r7, #20
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr

0800dd6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b086      	sub	sp, #24
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	60f8      	str	r0, [r7, #12]
 800dd76:	60b9      	str	r1, [r7, #8]
 800dd78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d10d      	bne.n	800dda8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d14d      	bne.n	800de30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f001 f847 	bl	800ee2c <xTaskPriorityDisinherit>
 800dd9e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2200      	movs	r2, #0
 800dda4:	609a      	str	r2, [r3, #8]
 800dda6:	e043      	b.n	800de30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d119      	bne.n	800dde2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6858      	ldr	r0, [r3, #4]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	68b9      	ldr	r1, [r7, #8]
 800ddba:	f002 f941 	bl	8010040 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	685a      	ldr	r2, [r3, #4]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddc6:	441a      	add	r2, r3
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	685a      	ldr	r2, [r3, #4]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	689b      	ldr	r3, [r3, #8]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d32b      	bcc.n	800de30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	605a      	str	r2, [r3, #4]
 800dde0:	e026      	b.n	800de30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	68d8      	ldr	r0, [r3, #12]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddea:	461a      	mov	r2, r3
 800ddec:	68b9      	ldr	r1, [r7, #8]
 800ddee:	f002 f927 	bl	8010040 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	68da      	ldr	r2, [r3, #12]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddfa:	425b      	negs	r3, r3
 800ddfc:	441a      	add	r2, r3
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	68da      	ldr	r2, [r3, #12]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d207      	bcs.n	800de1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	689a      	ldr	r2, [r3, #8]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de16:	425b      	negs	r3, r3
 800de18:	441a      	add	r2, r3
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2b02      	cmp	r3, #2
 800de22:	d105      	bne.n	800de30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d002      	beq.n	800de30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	3b01      	subs	r3, #1
 800de2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	1c5a      	adds	r2, r3, #1
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800de38:	697b      	ldr	r3, [r7, #20]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3718      	adds	r7, #24
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b082      	sub	sp, #8
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de50:	2b00      	cmp	r3, #0
 800de52:	d018      	beq.n	800de86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	68da      	ldr	r2, [r3, #12]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de5c:	441a      	add	r2, r3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	68da      	ldr	r2, [r3, #12]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d303      	bcc.n	800de76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	68d9      	ldr	r1, [r3, #12]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de7e:	461a      	mov	r2, r3
 800de80:	6838      	ldr	r0, [r7, #0]
 800de82:	f002 f8dd 	bl	8010040 <memcpy>
	}
}
 800de86:	bf00      	nop
 800de88:	3708      	adds	r7, #8
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}

0800de8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800de8e:	b580      	push	{r7, lr}
 800de90:	b084      	sub	sp, #16
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800de96:	f001 fd9d 	bl	800f9d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dea0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dea2:	e011      	b.n	800dec8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d012      	beq.n	800ded2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	3324      	adds	r3, #36	; 0x24
 800deb0:	4618      	mov	r0, r3
 800deb2:	f000 fd67 	bl	800e984 <xTaskRemoveFromEventList>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d001      	beq.n	800dec0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800debc:	f000 fe3e 	bl	800eb3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dec0:	7bfb      	ldrb	r3, [r7, #15]
 800dec2:	3b01      	subs	r3, #1
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800decc:	2b00      	cmp	r3, #0
 800dece:	dce9      	bgt.n	800dea4 <prvUnlockQueue+0x16>
 800ded0:	e000      	b.n	800ded4 <prvUnlockQueue+0x46>
					break;
 800ded2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	22ff      	movs	r2, #255	; 0xff
 800ded8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dedc:	f001 fdaa 	bl	800fa34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dee0:	f001 fd78 	bl	800f9d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800deea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800deec:	e011      	b.n	800df12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d012      	beq.n	800df1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	3310      	adds	r3, #16
 800defa:	4618      	mov	r0, r3
 800defc:	f000 fd42 	bl	800e984 <xTaskRemoveFromEventList>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d001      	beq.n	800df0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df06:	f000 fe19 	bl	800eb3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df0a:	7bbb      	ldrb	r3, [r7, #14]
 800df0c:	3b01      	subs	r3, #1
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df16:	2b00      	cmp	r3, #0
 800df18:	dce9      	bgt.n	800deee <prvUnlockQueue+0x60>
 800df1a:	e000      	b.n	800df1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	22ff      	movs	r2, #255	; 0xff
 800df22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800df26:	f001 fd85 	bl	800fa34 <vPortExitCritical>
}
 800df2a:	bf00      	nop
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df32:	b580      	push	{r7, lr}
 800df34:	b084      	sub	sp, #16
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df3a:	f001 fd4b 	bl	800f9d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df42:	2b00      	cmp	r3, #0
 800df44:	d102      	bne.n	800df4c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800df46:	2301      	movs	r3, #1
 800df48:	60fb      	str	r3, [r7, #12]
 800df4a:	e001      	b.n	800df50 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800df4c:	2300      	movs	r3, #0
 800df4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df50:	f001 fd70 	bl	800fa34 <vPortExitCritical>

	return xReturn;
 800df54:	68fb      	ldr	r3, [r7, #12]
}
 800df56:	4618      	mov	r0, r3
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}

0800df5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800df5e:	b580      	push	{r7, lr}
 800df60:	b084      	sub	sp, #16
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df66:	f001 fd35 	bl	800f9d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df72:	429a      	cmp	r2, r3
 800df74:	d102      	bne.n	800df7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df76:	2301      	movs	r3, #1
 800df78:	60fb      	str	r3, [r7, #12]
 800df7a:	e001      	b.n	800df80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df7c:	2300      	movs	r3, #0
 800df7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df80:	f001 fd58 	bl	800fa34 <vPortExitCritical>

	return xReturn;
 800df84:	68fb      	ldr	r3, [r7, #12]
}
 800df86:	4618      	mov	r0, r3
 800df88:	3710      	adds	r7, #16
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
	...

0800df90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800df90:	b480      	push	{r7}
 800df92:	b085      	sub	sp, #20
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df9a:	2300      	movs	r3, #0
 800df9c:	60fb      	str	r3, [r7, #12]
 800df9e:	e014      	b.n	800dfca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dfa0:	4a0f      	ldr	r2, [pc, #60]	; (800dfe0 <vQueueAddToRegistry+0x50>)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d10b      	bne.n	800dfc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dfac:	490c      	ldr	r1, [pc, #48]	; (800dfe0 <vQueueAddToRegistry+0x50>)
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	683a      	ldr	r2, [r7, #0]
 800dfb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dfb6:	4a0a      	ldr	r2, [pc, #40]	; (800dfe0 <vQueueAddToRegistry+0x50>)
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	00db      	lsls	r3, r3, #3
 800dfbc:	4413      	add	r3, r2
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dfc2:	e006      	b.n	800dfd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	60fb      	str	r3, [r7, #12]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b07      	cmp	r3, #7
 800dfce:	d9e7      	bls.n	800dfa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dfd0:	bf00      	nop
 800dfd2:	bf00      	nop
 800dfd4:	3714      	adds	r7, #20
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	24005370 	.word	0x24005370

0800dfe4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfec:	2300      	movs	r3, #0
 800dfee:	60fb      	str	r3, [r7, #12]
 800dff0:	e016      	b.n	800e020 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dff2:	4a10      	ldr	r2, [pc, #64]	; (800e034 <vQueueUnregisterQueue+0x50>)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	00db      	lsls	r3, r3, #3
 800dff8:	4413      	add	r3, r2
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d10b      	bne.n	800e01a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e002:	4a0c      	ldr	r2, [pc, #48]	; (800e034 <vQueueUnregisterQueue+0x50>)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2100      	movs	r1, #0
 800e008:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e00c:	4a09      	ldr	r2, [pc, #36]	; (800e034 <vQueueUnregisterQueue+0x50>)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	00db      	lsls	r3, r3, #3
 800e012:	4413      	add	r3, r2
 800e014:	2200      	movs	r2, #0
 800e016:	605a      	str	r2, [r3, #4]
				break;
 800e018:	e006      	b.n	800e028 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	3301      	adds	r3, #1
 800e01e:	60fb      	str	r3, [r7, #12]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2b07      	cmp	r3, #7
 800e024:	d9e5      	bls.n	800dff2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e026:	bf00      	nop
 800e028:	bf00      	nop
 800e02a:	3714      	adds	r7, #20
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr
 800e034:	24005370 	.word	0x24005370

0800e038 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b086      	sub	sp, #24
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	60f8      	str	r0, [r7, #12]
 800e040:	60b9      	str	r1, [r7, #8]
 800e042:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e048:	f001 fcc4 	bl	800f9d4 <vPortEnterCritical>
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e052:	b25b      	sxtb	r3, r3
 800e054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e058:	d103      	bne.n	800e062 <vQueueWaitForMessageRestricted+0x2a>
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e068:	b25b      	sxtb	r3, r3
 800e06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e06e:	d103      	bne.n	800e078 <vQueueWaitForMessageRestricted+0x40>
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	2200      	movs	r2, #0
 800e074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e078:	f001 fcdc 	bl	800fa34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e080:	2b00      	cmp	r3, #0
 800e082:	d106      	bne.n	800e092 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	3324      	adds	r3, #36	; 0x24
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	68b9      	ldr	r1, [r7, #8]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f000 fc4d 	bl	800e92c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e092:	6978      	ldr	r0, [r7, #20]
 800e094:	f7ff fefb 	bl	800de8e <prvUnlockQueue>
	}
 800e098:	bf00      	nop
 800e09a:	3718      	adds	r7, #24
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b08e      	sub	sp, #56	; 0x38
 800e0a4:	af04      	add	r7, sp, #16
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	607a      	str	r2, [r7, #4]
 800e0ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d10a      	bne.n	800e0ca <xTaskCreateStatic+0x2a>
	__asm volatile
 800e0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b8:	f383 8811 	msr	BASEPRI, r3
 800e0bc:	f3bf 8f6f 	isb	sy
 800e0c0:	f3bf 8f4f 	dsb	sy
 800e0c4:	623b      	str	r3, [r7, #32]
}
 800e0c6:	bf00      	nop
 800e0c8:	e7fe      	b.n	800e0c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d10a      	bne.n	800e0e6 <xTaskCreateStatic+0x46>
	__asm volatile
 800e0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d4:	f383 8811 	msr	BASEPRI, r3
 800e0d8:	f3bf 8f6f 	isb	sy
 800e0dc:	f3bf 8f4f 	dsb	sy
 800e0e0:	61fb      	str	r3, [r7, #28]
}
 800e0e2:	bf00      	nop
 800e0e4:	e7fe      	b.n	800e0e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e0e6:	235c      	movs	r3, #92	; 0x5c
 800e0e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	2b5c      	cmp	r3, #92	; 0x5c
 800e0ee:	d00a      	beq.n	800e106 <xTaskCreateStatic+0x66>
	__asm volatile
 800e0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f4:	f383 8811 	msr	BASEPRI, r3
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	61bb      	str	r3, [r7, #24]
}
 800e102:	bf00      	nop
 800e104:	e7fe      	b.n	800e104 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e106:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d01e      	beq.n	800e14c <xTaskCreateStatic+0xac>
 800e10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e110:	2b00      	cmp	r3, #0
 800e112:	d01b      	beq.n	800e14c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e116:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e11c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e120:	2202      	movs	r2, #2
 800e122:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e126:	2300      	movs	r3, #0
 800e128:	9303      	str	r3, [sp, #12]
 800e12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12c:	9302      	str	r3, [sp, #8]
 800e12e:	f107 0314 	add.w	r3, r7, #20
 800e132:	9301      	str	r3, [sp, #4]
 800e134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	68b9      	ldr	r1, [r7, #8]
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	f000 f850 	bl	800e1e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e146:	f000 f8dd 	bl	800e304 <prvAddNewTaskToReadyList>
 800e14a:	e001      	b.n	800e150 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e14c:	2300      	movs	r3, #0
 800e14e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e150:	697b      	ldr	r3, [r7, #20]
	}
 800e152:	4618      	mov	r0, r3
 800e154:	3728      	adds	r7, #40	; 0x28
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b08c      	sub	sp, #48	; 0x30
 800e15e:	af04      	add	r7, sp, #16
 800e160:	60f8      	str	r0, [r7, #12]
 800e162:	60b9      	str	r1, [r7, #8]
 800e164:	603b      	str	r3, [r7, #0]
 800e166:	4613      	mov	r3, r2
 800e168:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e16a:	88fb      	ldrh	r3, [r7, #6]
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	4618      	mov	r0, r3
 800e170:	f001 fd52 	bl	800fc18 <pvPortMalloc>
 800e174:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d00e      	beq.n	800e19a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e17c:	205c      	movs	r0, #92	; 0x5c
 800e17e:	f001 fd4b 	bl	800fc18 <pvPortMalloc>
 800e182:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d003      	beq.n	800e192 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	697a      	ldr	r2, [r7, #20]
 800e18e:	631a      	str	r2, [r3, #48]	; 0x30
 800e190:	e005      	b.n	800e19e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e192:	6978      	ldr	r0, [r7, #20]
 800e194:	f001 fe0c 	bl	800fdb0 <vPortFree>
 800e198:	e001      	b.n	800e19e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e19a:	2300      	movs	r3, #0
 800e19c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d017      	beq.n	800e1d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e1ac:	88fa      	ldrh	r2, [r7, #6]
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	9303      	str	r3, [sp, #12]
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	9302      	str	r3, [sp, #8]
 800e1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b8:	9301      	str	r3, [sp, #4]
 800e1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	68b9      	ldr	r1, [r7, #8]
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	f000 f80e 	bl	800e1e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1c8:	69f8      	ldr	r0, [r7, #28]
 800e1ca:	f000 f89b 	bl	800e304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	61bb      	str	r3, [r7, #24]
 800e1d2:	e002      	b.n	800e1da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e1da:	69bb      	ldr	r3, [r7, #24]
	}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3720      	adds	r7, #32
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b088      	sub	sp, #32
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	607a      	str	r2, [r7, #4]
 800e1f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	21a5      	movs	r1, #165	; 0xa5
 800e1fe:	f001 ff2d 	bl	801005c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e206:	6879      	ldr	r1, [r7, #4]
 800e208:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e20c:	440b      	add	r3, r1
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4413      	add	r3, r2
 800e212:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e214:	69bb      	ldr	r3, [r7, #24]
 800e216:	f023 0307 	bic.w	r3, r3, #7
 800e21a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	f003 0307 	and.w	r3, r3, #7
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00a      	beq.n	800e23c <prvInitialiseNewTask+0x58>
	__asm volatile
 800e226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22a:	f383 8811 	msr	BASEPRI, r3
 800e22e:	f3bf 8f6f 	isb	sy
 800e232:	f3bf 8f4f 	dsb	sy
 800e236:	617b      	str	r3, [r7, #20]
}
 800e238:	bf00      	nop
 800e23a:	e7fe      	b.n	800e23a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d01f      	beq.n	800e282 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e242:	2300      	movs	r3, #0
 800e244:	61fb      	str	r3, [r7, #28]
 800e246:	e012      	b.n	800e26e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e248:	68ba      	ldr	r2, [r7, #8]
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	4413      	add	r3, r2
 800e24e:	7819      	ldrb	r1, [r3, #0]
 800e250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	4413      	add	r3, r2
 800e256:	3334      	adds	r3, #52	; 0x34
 800e258:	460a      	mov	r2, r1
 800e25a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	4413      	add	r3, r2
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d006      	beq.n	800e276 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	3301      	adds	r3, #1
 800e26c:	61fb      	str	r3, [r7, #28]
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	2b0f      	cmp	r3, #15
 800e272:	d9e9      	bls.n	800e248 <prvInitialiseNewTask+0x64>
 800e274:	e000      	b.n	800e278 <prvInitialiseNewTask+0x94>
			{
				break;
 800e276:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27a:	2200      	movs	r2, #0
 800e27c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e280:	e003      	b.n	800e28a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e284:	2200      	movs	r2, #0
 800e286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28c:	2b37      	cmp	r3, #55	; 0x37
 800e28e:	d901      	bls.n	800e294 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e290:	2337      	movs	r3, #55	; 0x37
 800e292:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e298:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e29e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fe fe96 	bl	800cfdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b2:	3318      	adds	r3, #24
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fe fe91 	bl	800cfdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e2de:	683a      	ldr	r2, [r7, #0]
 800e2e0:	68f9      	ldr	r1, [r7, #12]
 800e2e2:	69b8      	ldr	r0, [r7, #24]
 800e2e4:	f001 fa48 	bl	800f778 <pxPortInitialiseStack>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d002      	beq.n	800e2fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2fa:	bf00      	nop
 800e2fc:	3720      	adds	r7, #32
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
	...

0800e304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e30c:	f001 fb62 	bl	800f9d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e310:	4b2d      	ldr	r3, [pc, #180]	; (800e3c8 <prvAddNewTaskToReadyList+0xc4>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	3301      	adds	r3, #1
 800e316:	4a2c      	ldr	r2, [pc, #176]	; (800e3c8 <prvAddNewTaskToReadyList+0xc4>)
 800e318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e31a:	4b2c      	ldr	r3, [pc, #176]	; (800e3cc <prvAddNewTaskToReadyList+0xc8>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d109      	bne.n	800e336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e322:	4a2a      	ldr	r2, [pc, #168]	; (800e3cc <prvAddNewTaskToReadyList+0xc8>)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e328:	4b27      	ldr	r3, [pc, #156]	; (800e3c8 <prvAddNewTaskToReadyList+0xc4>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d110      	bne.n	800e352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e330:	f000 fc28 	bl	800eb84 <prvInitialiseTaskLists>
 800e334:	e00d      	b.n	800e352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e336:	4b26      	ldr	r3, [pc, #152]	; (800e3d0 <prvAddNewTaskToReadyList+0xcc>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d109      	bne.n	800e352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e33e:	4b23      	ldr	r3, [pc, #140]	; (800e3cc <prvAddNewTaskToReadyList+0xc8>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e348:	429a      	cmp	r2, r3
 800e34a:	d802      	bhi.n	800e352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e34c:	4a1f      	ldr	r2, [pc, #124]	; (800e3cc <prvAddNewTaskToReadyList+0xc8>)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e352:	4b20      	ldr	r3, [pc, #128]	; (800e3d4 <prvAddNewTaskToReadyList+0xd0>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	3301      	adds	r3, #1
 800e358:	4a1e      	ldr	r2, [pc, #120]	; (800e3d4 <prvAddNewTaskToReadyList+0xd0>)
 800e35a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e35c:	4b1d      	ldr	r3, [pc, #116]	; (800e3d4 <prvAddNewTaskToReadyList+0xd0>)
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e368:	4b1b      	ldr	r3, [pc, #108]	; (800e3d8 <prvAddNewTaskToReadyList+0xd4>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d903      	bls.n	800e378 <prvAddNewTaskToReadyList+0x74>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e374:	4a18      	ldr	r2, [pc, #96]	; (800e3d8 <prvAddNewTaskToReadyList+0xd4>)
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e37c:	4613      	mov	r3, r2
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	4413      	add	r3, r2
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	4a15      	ldr	r2, [pc, #84]	; (800e3dc <prvAddNewTaskToReadyList+0xd8>)
 800e386:	441a      	add	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3304      	adds	r3, #4
 800e38c:	4619      	mov	r1, r3
 800e38e:	4610      	mov	r0, r2
 800e390:	f7fe fe31 	bl	800cff6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e394:	f001 fb4e 	bl	800fa34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e398:	4b0d      	ldr	r3, [pc, #52]	; (800e3d0 <prvAddNewTaskToReadyList+0xcc>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d00e      	beq.n	800e3be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e3a0:	4b0a      	ldr	r3, [pc, #40]	; (800e3cc <prvAddNewTaskToReadyList+0xc8>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d207      	bcs.n	800e3be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e3ae:	4b0c      	ldr	r3, [pc, #48]	; (800e3e0 <prvAddNewTaskToReadyList+0xdc>)
 800e3b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3b4:	601a      	str	r2, [r3, #0]
 800e3b6:	f3bf 8f4f 	dsb	sy
 800e3ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3be:	bf00      	nop
 800e3c0:	3708      	adds	r7, #8
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	24000c64 	.word	0x24000c64
 800e3cc:	24000790 	.word	0x24000790
 800e3d0:	24000c70 	.word	0x24000c70
 800e3d4:	24000c80 	.word	0x24000c80
 800e3d8:	24000c6c 	.word	0x24000c6c
 800e3dc:	24000794 	.word	0x24000794
 800e3e0:	e000ed04 	.word	0xe000ed04

0800e3e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d017      	beq.n	800e426 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e3f6:	4b13      	ldr	r3, [pc, #76]	; (800e444 <vTaskDelay+0x60>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00a      	beq.n	800e414 <vTaskDelay+0x30>
	__asm volatile
 800e3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	60bb      	str	r3, [r7, #8]
}
 800e410:	bf00      	nop
 800e412:	e7fe      	b.n	800e412 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e414:	f000 f880 	bl	800e518 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e418:	2100      	movs	r1, #0
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 fe0a 	bl	800f034 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e420:	f000 f888 	bl	800e534 <xTaskResumeAll>
 800e424:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d107      	bne.n	800e43c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e42c:	4b06      	ldr	r3, [pc, #24]	; (800e448 <vTaskDelay+0x64>)
 800e42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e432:	601a      	str	r2, [r3, #0]
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e43c:	bf00      	nop
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	24000c8c 	.word	0x24000c8c
 800e448:	e000ed04 	.word	0xe000ed04

0800e44c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b08a      	sub	sp, #40	; 0x28
 800e450:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e452:	2300      	movs	r3, #0
 800e454:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e456:	2300      	movs	r3, #0
 800e458:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e45a:	463a      	mov	r2, r7
 800e45c:	1d39      	adds	r1, r7, #4
 800e45e:	f107 0308 	add.w	r3, r7, #8
 800e462:	4618      	mov	r0, r3
 800e464:	f7fe fd66 	bl	800cf34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e468:	6839      	ldr	r1, [r7, #0]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	68ba      	ldr	r2, [r7, #8]
 800e46e:	9202      	str	r2, [sp, #8]
 800e470:	9301      	str	r3, [sp, #4]
 800e472:	2300      	movs	r3, #0
 800e474:	9300      	str	r3, [sp, #0]
 800e476:	2300      	movs	r3, #0
 800e478:	460a      	mov	r2, r1
 800e47a:	4921      	ldr	r1, [pc, #132]	; (800e500 <vTaskStartScheduler+0xb4>)
 800e47c:	4821      	ldr	r0, [pc, #132]	; (800e504 <vTaskStartScheduler+0xb8>)
 800e47e:	f7ff fe0f 	bl	800e0a0 <xTaskCreateStatic>
 800e482:	4603      	mov	r3, r0
 800e484:	4a20      	ldr	r2, [pc, #128]	; (800e508 <vTaskStartScheduler+0xbc>)
 800e486:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e488:	4b1f      	ldr	r3, [pc, #124]	; (800e508 <vTaskStartScheduler+0xbc>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d002      	beq.n	800e496 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e490:	2301      	movs	r3, #1
 800e492:	617b      	str	r3, [r7, #20]
 800e494:	e001      	b.n	800e49a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e496:	2300      	movs	r3, #0
 800e498:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d102      	bne.n	800e4a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e4a0:	f000 fe1c 	bl	800f0dc <xTimerCreateTimerTask>
 800e4a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d116      	bne.n	800e4da <vTaskStartScheduler+0x8e>
	__asm volatile
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	613b      	str	r3, [r7, #16]
}
 800e4be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e4c0:	4b12      	ldr	r3, [pc, #72]	; (800e50c <vTaskStartScheduler+0xc0>)
 800e4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e4c8:	4b11      	ldr	r3, [pc, #68]	; (800e510 <vTaskStartScheduler+0xc4>)
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e4ce:	4b11      	ldr	r3, [pc, #68]	; (800e514 <vTaskStartScheduler+0xc8>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e4d4:	f001 f9dc 	bl	800f890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e4d8:	e00e      	b.n	800e4f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4e0:	d10a      	bne.n	800e4f8 <vTaskStartScheduler+0xac>
	__asm volatile
 800e4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e6:	f383 8811 	msr	BASEPRI, r3
 800e4ea:	f3bf 8f6f 	isb	sy
 800e4ee:	f3bf 8f4f 	dsb	sy
 800e4f2:	60fb      	str	r3, [r7, #12]
}
 800e4f4:	bf00      	nop
 800e4f6:	e7fe      	b.n	800e4f6 <vTaskStartScheduler+0xaa>
}
 800e4f8:	bf00      	nop
 800e4fa:	3718      	adds	r7, #24
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	08010a8c 	.word	0x08010a8c
 800e504:	0800eb55 	.word	0x0800eb55
 800e508:	24000c88 	.word	0x24000c88
 800e50c:	24000c84 	.word	0x24000c84
 800e510:	24000c70 	.word	0x24000c70
 800e514:	24000c68 	.word	0x24000c68

0800e518 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e518:	b480      	push	{r7}
 800e51a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e51c:	4b04      	ldr	r3, [pc, #16]	; (800e530 <vTaskSuspendAll+0x18>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	3301      	adds	r3, #1
 800e522:	4a03      	ldr	r2, [pc, #12]	; (800e530 <vTaskSuspendAll+0x18>)
 800e524:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e526:	bf00      	nop
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr
 800e530:	24000c8c 	.word	0x24000c8c

0800e534 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e53a:	2300      	movs	r3, #0
 800e53c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e53e:	2300      	movs	r3, #0
 800e540:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e542:	4b42      	ldr	r3, [pc, #264]	; (800e64c <xTaskResumeAll+0x118>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d10a      	bne.n	800e560 <xTaskResumeAll+0x2c>
	__asm volatile
 800e54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54e:	f383 8811 	msr	BASEPRI, r3
 800e552:	f3bf 8f6f 	isb	sy
 800e556:	f3bf 8f4f 	dsb	sy
 800e55a:	603b      	str	r3, [r7, #0]
}
 800e55c:	bf00      	nop
 800e55e:	e7fe      	b.n	800e55e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e560:	f001 fa38 	bl	800f9d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e564:	4b39      	ldr	r3, [pc, #228]	; (800e64c <xTaskResumeAll+0x118>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	3b01      	subs	r3, #1
 800e56a:	4a38      	ldr	r2, [pc, #224]	; (800e64c <xTaskResumeAll+0x118>)
 800e56c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e56e:	4b37      	ldr	r3, [pc, #220]	; (800e64c <xTaskResumeAll+0x118>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d162      	bne.n	800e63c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e576:	4b36      	ldr	r3, [pc, #216]	; (800e650 <xTaskResumeAll+0x11c>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d05e      	beq.n	800e63c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e57e:	e02f      	b.n	800e5e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e580:	4b34      	ldr	r3, [pc, #208]	; (800e654 <xTaskResumeAll+0x120>)
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	3318      	adds	r3, #24
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7fe fd8f 	bl	800d0b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	3304      	adds	r3, #4
 800e596:	4618      	mov	r0, r3
 800e598:	f7fe fd8a 	bl	800d0b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a0:	4b2d      	ldr	r3, [pc, #180]	; (800e658 <xTaskResumeAll+0x124>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d903      	bls.n	800e5b0 <xTaskResumeAll+0x7c>
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ac:	4a2a      	ldr	r2, [pc, #168]	; (800e658 <xTaskResumeAll+0x124>)
 800e5ae:	6013      	str	r3, [r2, #0]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5b4:	4613      	mov	r3, r2
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	4413      	add	r3, r2
 800e5ba:	009b      	lsls	r3, r3, #2
 800e5bc:	4a27      	ldr	r2, [pc, #156]	; (800e65c <xTaskResumeAll+0x128>)
 800e5be:	441a      	add	r2, r3
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	3304      	adds	r3, #4
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	4610      	mov	r0, r2
 800e5c8:	f7fe fd15 	bl	800cff6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5d0:	4b23      	ldr	r3, [pc, #140]	; (800e660 <xTaskResumeAll+0x12c>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d302      	bcc.n	800e5e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e5da:	4b22      	ldr	r3, [pc, #136]	; (800e664 <xTaskResumeAll+0x130>)
 800e5dc:	2201      	movs	r2, #1
 800e5de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5e0:	4b1c      	ldr	r3, [pc, #112]	; (800e654 <xTaskResumeAll+0x120>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1cb      	bne.n	800e580 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d001      	beq.n	800e5f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e5ee:	f000 fb67 	bl	800ecc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e5f2:	4b1d      	ldr	r3, [pc, #116]	; (800e668 <xTaskResumeAll+0x134>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d010      	beq.n	800e620 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e5fe:	f000 f859 	bl	800e6b4 <xTaskIncrementTick>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d002      	beq.n	800e60e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e608:	4b16      	ldr	r3, [pc, #88]	; (800e664 <xTaskResumeAll+0x130>)
 800e60a:	2201      	movs	r2, #1
 800e60c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	3b01      	subs	r3, #1
 800e612:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d1f1      	bne.n	800e5fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e61a:	4b13      	ldr	r3, [pc, #76]	; (800e668 <xTaskResumeAll+0x134>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e620:	4b10      	ldr	r3, [pc, #64]	; (800e664 <xTaskResumeAll+0x130>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d009      	beq.n	800e63c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e628:	2301      	movs	r3, #1
 800e62a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e62c:	4b0f      	ldr	r3, [pc, #60]	; (800e66c <xTaskResumeAll+0x138>)
 800e62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e632:	601a      	str	r2, [r3, #0]
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e63c:	f001 f9fa 	bl	800fa34 <vPortExitCritical>

	return xAlreadyYielded;
 800e640:	68bb      	ldr	r3, [r7, #8]
}
 800e642:	4618      	mov	r0, r3
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	24000c8c 	.word	0x24000c8c
 800e650:	24000c64 	.word	0x24000c64
 800e654:	24000c24 	.word	0x24000c24
 800e658:	24000c6c 	.word	0x24000c6c
 800e65c:	24000794 	.word	0x24000794
 800e660:	24000790 	.word	0x24000790
 800e664:	24000c78 	.word	0x24000c78
 800e668:	24000c74 	.word	0x24000c74
 800e66c:	e000ed04 	.word	0xe000ed04

0800e670 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e670:	b480      	push	{r7}
 800e672:	b083      	sub	sp, #12
 800e674:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e676:	4b05      	ldr	r3, [pc, #20]	; (800e68c <xTaskGetTickCount+0x1c>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e67c:	687b      	ldr	r3, [r7, #4]
}
 800e67e:	4618      	mov	r0, r3
 800e680:	370c      	adds	r7, #12
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr
 800e68a:	bf00      	nop
 800e68c:	24000c68 	.word	0x24000c68

0800e690 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e696:	f001 fa7f 	bl	800fb98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e69a:	2300      	movs	r3, #0
 800e69c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e69e:	4b04      	ldr	r3, [pc, #16]	; (800e6b0 <xTaskGetTickCountFromISR+0x20>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6a4:	683b      	ldr	r3, [r7, #0]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3708      	adds	r7, #8
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	24000c68 	.word	0x24000c68

0800e6b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b086      	sub	sp, #24
 800e6b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6be:	4b4f      	ldr	r3, [pc, #316]	; (800e7fc <xTaskIncrementTick+0x148>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	f040 808f 	bne.w	800e7e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e6c8:	4b4d      	ldr	r3, [pc, #308]	; (800e800 <xTaskIncrementTick+0x14c>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e6d0:	4a4b      	ldr	r2, [pc, #300]	; (800e800 <xTaskIncrementTick+0x14c>)
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d120      	bne.n	800e71e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e6dc:	4b49      	ldr	r3, [pc, #292]	; (800e804 <xTaskIncrementTick+0x150>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00a      	beq.n	800e6fc <xTaskIncrementTick+0x48>
	__asm volatile
 800e6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ea:	f383 8811 	msr	BASEPRI, r3
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f3bf 8f4f 	dsb	sy
 800e6f6:	603b      	str	r3, [r7, #0]
}
 800e6f8:	bf00      	nop
 800e6fa:	e7fe      	b.n	800e6fa <xTaskIncrementTick+0x46>
 800e6fc:	4b41      	ldr	r3, [pc, #260]	; (800e804 <xTaskIncrementTick+0x150>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	60fb      	str	r3, [r7, #12]
 800e702:	4b41      	ldr	r3, [pc, #260]	; (800e808 <xTaskIncrementTick+0x154>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a3f      	ldr	r2, [pc, #252]	; (800e804 <xTaskIncrementTick+0x150>)
 800e708:	6013      	str	r3, [r2, #0]
 800e70a:	4a3f      	ldr	r2, [pc, #252]	; (800e808 <xTaskIncrementTick+0x154>)
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6013      	str	r3, [r2, #0]
 800e710:	4b3e      	ldr	r3, [pc, #248]	; (800e80c <xTaskIncrementTick+0x158>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	3301      	adds	r3, #1
 800e716:	4a3d      	ldr	r2, [pc, #244]	; (800e80c <xTaskIncrementTick+0x158>)
 800e718:	6013      	str	r3, [r2, #0]
 800e71a:	f000 fad1 	bl	800ecc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e71e:	4b3c      	ldr	r3, [pc, #240]	; (800e810 <xTaskIncrementTick+0x15c>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	693a      	ldr	r2, [r7, #16]
 800e724:	429a      	cmp	r2, r3
 800e726:	d349      	bcc.n	800e7bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e728:	4b36      	ldr	r3, [pc, #216]	; (800e804 <xTaskIncrementTick+0x150>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d104      	bne.n	800e73c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e732:	4b37      	ldr	r3, [pc, #220]	; (800e810 <xTaskIncrementTick+0x15c>)
 800e734:	f04f 32ff 	mov.w	r2, #4294967295
 800e738:	601a      	str	r2, [r3, #0]
					break;
 800e73a:	e03f      	b.n	800e7bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e73c:	4b31      	ldr	r3, [pc, #196]	; (800e804 <xTaskIncrementTick+0x150>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e74c:	693a      	ldr	r2, [r7, #16]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	429a      	cmp	r2, r3
 800e752:	d203      	bcs.n	800e75c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e754:	4a2e      	ldr	r2, [pc, #184]	; (800e810 <xTaskIncrementTick+0x15c>)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e75a:	e02f      	b.n	800e7bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	3304      	adds	r3, #4
 800e760:	4618      	mov	r0, r3
 800e762:	f7fe fca5 	bl	800d0b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d004      	beq.n	800e778 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	3318      	adds	r3, #24
 800e772:	4618      	mov	r0, r3
 800e774:	f7fe fc9c 	bl	800d0b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e77c:	4b25      	ldr	r3, [pc, #148]	; (800e814 <xTaskIncrementTick+0x160>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	429a      	cmp	r2, r3
 800e782:	d903      	bls.n	800e78c <xTaskIncrementTick+0xd8>
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e788:	4a22      	ldr	r2, [pc, #136]	; (800e814 <xTaskIncrementTick+0x160>)
 800e78a:	6013      	str	r3, [r2, #0]
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e790:	4613      	mov	r3, r2
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	4413      	add	r3, r2
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	4a1f      	ldr	r2, [pc, #124]	; (800e818 <xTaskIncrementTick+0x164>)
 800e79a:	441a      	add	r2, r3
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	3304      	adds	r3, #4
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	f7fe fc27 	bl	800cff6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ac:	4b1b      	ldr	r3, [pc, #108]	; (800e81c <xTaskIncrementTick+0x168>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d3b8      	bcc.n	800e728 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7ba:	e7b5      	b.n	800e728 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e7bc:	4b17      	ldr	r3, [pc, #92]	; (800e81c <xTaskIncrementTick+0x168>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7c2:	4915      	ldr	r1, [pc, #84]	; (800e818 <xTaskIncrementTick+0x164>)
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4413      	add	r3, r2
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	440b      	add	r3, r1
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d901      	bls.n	800e7d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e7d8:	4b11      	ldr	r3, [pc, #68]	; (800e820 <xTaskIncrementTick+0x16c>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d007      	beq.n	800e7f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	617b      	str	r3, [r7, #20]
 800e7e4:	e004      	b.n	800e7f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e7e6:	4b0f      	ldr	r3, [pc, #60]	; (800e824 <xTaskIncrementTick+0x170>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	4a0d      	ldr	r2, [pc, #52]	; (800e824 <xTaskIncrementTick+0x170>)
 800e7ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e7f0:	697b      	ldr	r3, [r7, #20]
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3718      	adds	r7, #24
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	24000c8c 	.word	0x24000c8c
 800e800:	24000c68 	.word	0x24000c68
 800e804:	24000c1c 	.word	0x24000c1c
 800e808:	24000c20 	.word	0x24000c20
 800e80c:	24000c7c 	.word	0x24000c7c
 800e810:	24000c84 	.word	0x24000c84
 800e814:	24000c6c 	.word	0x24000c6c
 800e818:	24000794 	.word	0x24000794
 800e81c:	24000790 	.word	0x24000790
 800e820:	24000c78 	.word	0x24000c78
 800e824:	24000c74 	.word	0x24000c74

0800e828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e828:	b480      	push	{r7}
 800e82a:	b085      	sub	sp, #20
 800e82c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e82e:	4b28      	ldr	r3, [pc, #160]	; (800e8d0 <vTaskSwitchContext+0xa8>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d003      	beq.n	800e83e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e836:	4b27      	ldr	r3, [pc, #156]	; (800e8d4 <vTaskSwitchContext+0xac>)
 800e838:	2201      	movs	r2, #1
 800e83a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e83c:	e041      	b.n	800e8c2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e83e:	4b25      	ldr	r3, [pc, #148]	; (800e8d4 <vTaskSwitchContext+0xac>)
 800e840:	2200      	movs	r2, #0
 800e842:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e844:	4b24      	ldr	r3, [pc, #144]	; (800e8d8 <vTaskSwitchContext+0xb0>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	60fb      	str	r3, [r7, #12]
 800e84a:	e010      	b.n	800e86e <vTaskSwitchContext+0x46>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d10a      	bne.n	800e868 <vTaskSwitchContext+0x40>
	__asm volatile
 800e852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	607b      	str	r3, [r7, #4]
}
 800e864:	bf00      	nop
 800e866:	e7fe      	b.n	800e866 <vTaskSwitchContext+0x3e>
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	3b01      	subs	r3, #1
 800e86c:	60fb      	str	r3, [r7, #12]
 800e86e:	491b      	ldr	r1, [pc, #108]	; (800e8dc <vTaskSwitchContext+0xb4>)
 800e870:	68fa      	ldr	r2, [r7, #12]
 800e872:	4613      	mov	r3, r2
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	4413      	add	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	440b      	add	r3, r1
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d0e4      	beq.n	800e84c <vTaskSwitchContext+0x24>
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	4613      	mov	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	4413      	add	r3, r2
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	4a13      	ldr	r2, [pc, #76]	; (800e8dc <vTaskSwitchContext+0xb4>)
 800e88e:	4413      	add	r3, r2
 800e890:	60bb      	str	r3, [r7, #8]
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	685a      	ldr	r2, [r3, #4]
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	605a      	str	r2, [r3, #4]
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	685a      	ldr	r2, [r3, #4]
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d104      	bne.n	800e8b2 <vTaskSwitchContext+0x8a>
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	685a      	ldr	r2, [r3, #4]
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	605a      	str	r2, [r3, #4]
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	4a09      	ldr	r2, [pc, #36]	; (800e8e0 <vTaskSwitchContext+0xb8>)
 800e8ba:	6013      	str	r3, [r2, #0]
 800e8bc:	4a06      	ldr	r2, [pc, #24]	; (800e8d8 <vTaskSwitchContext+0xb0>)
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6013      	str	r3, [r2, #0]
}
 800e8c2:	bf00      	nop
 800e8c4:	3714      	adds	r7, #20
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop
 800e8d0:	24000c8c 	.word	0x24000c8c
 800e8d4:	24000c78 	.word	0x24000c78
 800e8d8:	24000c6c 	.word	0x24000c6c
 800e8dc:	24000794 	.word	0x24000794
 800e8e0:	24000790 	.word	0x24000790

0800e8e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d10a      	bne.n	800e90a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f8:	f383 8811 	msr	BASEPRI, r3
 800e8fc:	f3bf 8f6f 	isb	sy
 800e900:	f3bf 8f4f 	dsb	sy
 800e904:	60fb      	str	r3, [r7, #12]
}
 800e906:	bf00      	nop
 800e908:	e7fe      	b.n	800e908 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e90a:	4b07      	ldr	r3, [pc, #28]	; (800e928 <vTaskPlaceOnEventList+0x44>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	3318      	adds	r3, #24
 800e910:	4619      	mov	r1, r3
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f7fe fb93 	bl	800d03e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e918:	2101      	movs	r1, #1
 800e91a:	6838      	ldr	r0, [r7, #0]
 800e91c:	f000 fb8a 	bl	800f034 <prvAddCurrentTaskToDelayedList>
}
 800e920:	bf00      	nop
 800e922:	3710      	adds	r7, #16
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	24000790 	.word	0x24000790

0800e92c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b086      	sub	sp, #24
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d10a      	bne.n	800e954 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e942:	f383 8811 	msr	BASEPRI, r3
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	617b      	str	r3, [r7, #20]
}
 800e950:	bf00      	nop
 800e952:	e7fe      	b.n	800e952 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e954:	4b0a      	ldr	r3, [pc, #40]	; (800e980 <vTaskPlaceOnEventListRestricted+0x54>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	3318      	adds	r3, #24
 800e95a:	4619      	mov	r1, r3
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f7fe fb4a 	bl	800cff6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d002      	beq.n	800e96e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e968:	f04f 33ff 	mov.w	r3, #4294967295
 800e96c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e96e:	6879      	ldr	r1, [r7, #4]
 800e970:	68b8      	ldr	r0, [r7, #8]
 800e972:	f000 fb5f 	bl	800f034 <prvAddCurrentTaskToDelayedList>
	}
 800e976:	bf00      	nop
 800e978:	3718      	adds	r7, #24
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	24000790 	.word	0x24000790

0800e984 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b086      	sub	sp, #24
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d10a      	bne.n	800e9b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99e:	f383 8811 	msr	BASEPRI, r3
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	60fb      	str	r3, [r7, #12]
}
 800e9ac:	bf00      	nop
 800e9ae:	e7fe      	b.n	800e9ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	3318      	adds	r3, #24
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7fe fb7b 	bl	800d0b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9ba:	4b1e      	ldr	r3, [pc, #120]	; (800ea34 <xTaskRemoveFromEventList+0xb0>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d11d      	bne.n	800e9fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	3304      	adds	r3, #4
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fe fb72 	bl	800d0b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d0:	4b19      	ldr	r3, [pc, #100]	; (800ea38 <xTaskRemoveFromEventList+0xb4>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d903      	bls.n	800e9e0 <xTaskRemoveFromEventList+0x5c>
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9dc:	4a16      	ldr	r2, [pc, #88]	; (800ea38 <xTaskRemoveFromEventList+0xb4>)
 800e9de:	6013      	str	r3, [r2, #0]
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9e4:	4613      	mov	r3, r2
 800e9e6:	009b      	lsls	r3, r3, #2
 800e9e8:	4413      	add	r3, r2
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	4a13      	ldr	r2, [pc, #76]	; (800ea3c <xTaskRemoveFromEventList+0xb8>)
 800e9ee:	441a      	add	r2, r3
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	3304      	adds	r3, #4
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	4610      	mov	r0, r2
 800e9f8:	f7fe fafd 	bl	800cff6 <vListInsertEnd>
 800e9fc:	e005      	b.n	800ea0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	3318      	adds	r3, #24
 800ea02:	4619      	mov	r1, r3
 800ea04:	480e      	ldr	r0, [pc, #56]	; (800ea40 <xTaskRemoveFromEventList+0xbc>)
 800ea06:	f7fe faf6 	bl	800cff6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea0e:	4b0d      	ldr	r3, [pc, #52]	; (800ea44 <xTaskRemoveFromEventList+0xc0>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d905      	bls.n	800ea24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ea1c:	4b0a      	ldr	r3, [pc, #40]	; (800ea48 <xTaskRemoveFromEventList+0xc4>)
 800ea1e:	2201      	movs	r2, #1
 800ea20:	601a      	str	r2, [r3, #0]
 800ea22:	e001      	b.n	800ea28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ea24:	2300      	movs	r3, #0
 800ea26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ea28:	697b      	ldr	r3, [r7, #20]
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3718      	adds	r7, #24
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	24000c8c 	.word	0x24000c8c
 800ea38:	24000c6c 	.word	0x24000c6c
 800ea3c:	24000794 	.word	0x24000794
 800ea40:	24000c24 	.word	0x24000c24
 800ea44:	24000790 	.word	0x24000790
 800ea48:	24000c78 	.word	0x24000c78

0800ea4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea54:	4b06      	ldr	r3, [pc, #24]	; (800ea70 <vTaskInternalSetTimeOutState+0x24>)
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea5c:	4b05      	ldr	r3, [pc, #20]	; (800ea74 <vTaskInternalSetTimeOutState+0x28>)
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	605a      	str	r2, [r3, #4]
}
 800ea64:	bf00      	nop
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr
 800ea70:	24000c7c 	.word	0x24000c7c
 800ea74:	24000c68 	.word	0x24000c68

0800ea78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b088      	sub	sp, #32
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d10a      	bne.n	800ea9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ea88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8c:	f383 8811 	msr	BASEPRI, r3
 800ea90:	f3bf 8f6f 	isb	sy
 800ea94:	f3bf 8f4f 	dsb	sy
 800ea98:	613b      	str	r3, [r7, #16]
}
 800ea9a:	bf00      	nop
 800ea9c:	e7fe      	b.n	800ea9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10a      	bne.n	800eaba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa8:	f383 8811 	msr	BASEPRI, r3
 800eaac:	f3bf 8f6f 	isb	sy
 800eab0:	f3bf 8f4f 	dsb	sy
 800eab4:	60fb      	str	r3, [r7, #12]
}
 800eab6:	bf00      	nop
 800eab8:	e7fe      	b.n	800eab8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800eaba:	f000 ff8b 	bl	800f9d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eabe:	4b1d      	ldr	r3, [pc, #116]	; (800eb34 <xTaskCheckForTimeOut+0xbc>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	69ba      	ldr	r2, [r7, #24]
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead6:	d102      	bne.n	800eade <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ead8:	2300      	movs	r3, #0
 800eada:	61fb      	str	r3, [r7, #28]
 800eadc:	e023      	b.n	800eb26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	4b15      	ldr	r3, [pc, #84]	; (800eb38 <xTaskCheckForTimeOut+0xc0>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d007      	beq.n	800eafa <xTaskCheckForTimeOut+0x82>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	69ba      	ldr	r2, [r7, #24]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d302      	bcc.n	800eafa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	61fb      	str	r3, [r7, #28]
 800eaf8:	e015      	b.n	800eb26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d20b      	bcs.n	800eb1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	1ad2      	subs	r2, r2, r3
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7ff ff9b 	bl	800ea4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb16:	2300      	movs	r3, #0
 800eb18:	61fb      	str	r3, [r7, #28]
 800eb1a:	e004      	b.n	800eb26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb22:	2301      	movs	r3, #1
 800eb24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb26:	f000 ff85 	bl	800fa34 <vPortExitCritical>

	return xReturn;
 800eb2a:	69fb      	ldr	r3, [r7, #28]
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3720      	adds	r7, #32
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}
 800eb34:	24000c68 	.word	0x24000c68
 800eb38:	24000c7c 	.word	0x24000c7c

0800eb3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb40:	4b03      	ldr	r3, [pc, #12]	; (800eb50 <vTaskMissedYield+0x14>)
 800eb42:	2201      	movs	r2, #1
 800eb44:	601a      	str	r2, [r3, #0]
}
 800eb46:	bf00      	nop
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr
 800eb50:	24000c78 	.word	0x24000c78

0800eb54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eb5c:	f000 f852 	bl	800ec04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb60:	4b06      	ldr	r3, [pc, #24]	; (800eb7c <prvIdleTask+0x28>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d9f9      	bls.n	800eb5c <prvIdleTask+0x8>
			{
				taskYIELD();
 800eb68:	4b05      	ldr	r3, [pc, #20]	; (800eb80 <prvIdleTask+0x2c>)
 800eb6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb6e:	601a      	str	r2, [r3, #0]
 800eb70:	f3bf 8f4f 	dsb	sy
 800eb74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eb78:	e7f0      	b.n	800eb5c <prvIdleTask+0x8>
 800eb7a:	bf00      	nop
 800eb7c:	24000794 	.word	0x24000794
 800eb80:	e000ed04 	.word	0xe000ed04

0800eb84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	607b      	str	r3, [r7, #4]
 800eb8e:	e00c      	b.n	800ebaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	4613      	mov	r3, r2
 800eb94:	009b      	lsls	r3, r3, #2
 800eb96:	4413      	add	r3, r2
 800eb98:	009b      	lsls	r3, r3, #2
 800eb9a:	4a12      	ldr	r2, [pc, #72]	; (800ebe4 <prvInitialiseTaskLists+0x60>)
 800eb9c:	4413      	add	r3, r2
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fe f9fc 	bl	800cf9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	3301      	adds	r3, #1
 800eba8:	607b      	str	r3, [r7, #4]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b37      	cmp	r3, #55	; 0x37
 800ebae:	d9ef      	bls.n	800eb90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ebb0:	480d      	ldr	r0, [pc, #52]	; (800ebe8 <prvInitialiseTaskLists+0x64>)
 800ebb2:	f7fe f9f3 	bl	800cf9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ebb6:	480d      	ldr	r0, [pc, #52]	; (800ebec <prvInitialiseTaskLists+0x68>)
 800ebb8:	f7fe f9f0 	bl	800cf9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ebbc:	480c      	ldr	r0, [pc, #48]	; (800ebf0 <prvInitialiseTaskLists+0x6c>)
 800ebbe:	f7fe f9ed 	bl	800cf9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ebc2:	480c      	ldr	r0, [pc, #48]	; (800ebf4 <prvInitialiseTaskLists+0x70>)
 800ebc4:	f7fe f9ea 	bl	800cf9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ebc8:	480b      	ldr	r0, [pc, #44]	; (800ebf8 <prvInitialiseTaskLists+0x74>)
 800ebca:	f7fe f9e7 	bl	800cf9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ebce:	4b0b      	ldr	r3, [pc, #44]	; (800ebfc <prvInitialiseTaskLists+0x78>)
 800ebd0:	4a05      	ldr	r2, [pc, #20]	; (800ebe8 <prvInitialiseTaskLists+0x64>)
 800ebd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ebd4:	4b0a      	ldr	r3, [pc, #40]	; (800ec00 <prvInitialiseTaskLists+0x7c>)
 800ebd6:	4a05      	ldr	r2, [pc, #20]	; (800ebec <prvInitialiseTaskLists+0x68>)
 800ebd8:	601a      	str	r2, [r3, #0]
}
 800ebda:	bf00      	nop
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	24000794 	.word	0x24000794
 800ebe8:	24000bf4 	.word	0x24000bf4
 800ebec:	24000c08 	.word	0x24000c08
 800ebf0:	24000c24 	.word	0x24000c24
 800ebf4:	24000c38 	.word	0x24000c38
 800ebf8:	24000c50 	.word	0x24000c50
 800ebfc:	24000c1c 	.word	0x24000c1c
 800ec00:	24000c20 	.word	0x24000c20

0800ec04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec0a:	e019      	b.n	800ec40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec0c:	f000 fee2 	bl	800f9d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec10:	4b10      	ldr	r3, [pc, #64]	; (800ec54 <prvCheckTasksWaitingTermination+0x50>)
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	68db      	ldr	r3, [r3, #12]
 800ec16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	3304      	adds	r3, #4
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7fe fa47 	bl	800d0b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ec22:	4b0d      	ldr	r3, [pc, #52]	; (800ec58 <prvCheckTasksWaitingTermination+0x54>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	3b01      	subs	r3, #1
 800ec28:	4a0b      	ldr	r2, [pc, #44]	; (800ec58 <prvCheckTasksWaitingTermination+0x54>)
 800ec2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ec2c:	4b0b      	ldr	r3, [pc, #44]	; (800ec5c <prvCheckTasksWaitingTermination+0x58>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	3b01      	subs	r3, #1
 800ec32:	4a0a      	ldr	r2, [pc, #40]	; (800ec5c <prvCheckTasksWaitingTermination+0x58>)
 800ec34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ec36:	f000 fefd 	bl	800fa34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 f810 	bl	800ec60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec40:	4b06      	ldr	r3, [pc, #24]	; (800ec5c <prvCheckTasksWaitingTermination+0x58>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1e1      	bne.n	800ec0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec48:	bf00      	nop
 800ec4a:	bf00      	nop
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	24000c38 	.word	0x24000c38
 800ec58:	24000c64 	.word	0x24000c64
 800ec5c:	24000c4c 	.word	0x24000c4c

0800ec60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d108      	bne.n	800ec84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec76:	4618      	mov	r0, r3
 800ec78:	f001 f89a 	bl	800fdb0 <vPortFree>
				vPortFree( pxTCB );
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f001 f897 	bl	800fdb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec82:	e018      	b.n	800ecb6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d103      	bne.n	800ec96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f001 f88e 	bl	800fdb0 <vPortFree>
	}
 800ec94:	e00f      	b.n	800ecb6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ec9c:	2b02      	cmp	r3, #2
 800ec9e:	d00a      	beq.n	800ecb6 <prvDeleteTCB+0x56>
	__asm volatile
 800eca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	60fb      	str	r3, [r7, #12]
}
 800ecb2:	bf00      	nop
 800ecb4:	e7fe      	b.n	800ecb4 <prvDeleteTCB+0x54>
	}
 800ecb6:	bf00      	nop
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
	...

0800ecc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecc6:	4b0c      	ldr	r3, [pc, #48]	; (800ecf8 <prvResetNextTaskUnblockTime+0x38>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d104      	bne.n	800ecda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ecd0:	4b0a      	ldr	r3, [pc, #40]	; (800ecfc <prvResetNextTaskUnblockTime+0x3c>)
 800ecd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ecd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ecd8:	e008      	b.n	800ecec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecda:	4b07      	ldr	r3, [pc, #28]	; (800ecf8 <prvResetNextTaskUnblockTime+0x38>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	68db      	ldr	r3, [r3, #12]
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	4a04      	ldr	r2, [pc, #16]	; (800ecfc <prvResetNextTaskUnblockTime+0x3c>)
 800ecea:	6013      	str	r3, [r2, #0]
}
 800ecec:	bf00      	nop
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	24000c1c 	.word	0x24000c1c
 800ecfc:	24000c84 	.word	0x24000c84

0800ed00 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ed06:	4b05      	ldr	r3, [pc, #20]	; (800ed1c <xTaskGetCurrentTaskHandle+0x1c>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ed0c:	687b      	ldr	r3, [r7, #4]
	}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	370c      	adds	r7, #12
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	24000790 	.word	0x24000790

0800ed20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ed26:	4b0b      	ldr	r3, [pc, #44]	; (800ed54 <xTaskGetSchedulerState+0x34>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d102      	bne.n	800ed34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	607b      	str	r3, [r7, #4]
 800ed32:	e008      	b.n	800ed46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed34:	4b08      	ldr	r3, [pc, #32]	; (800ed58 <xTaskGetSchedulerState+0x38>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d102      	bne.n	800ed42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ed3c:	2302      	movs	r3, #2
 800ed3e:	607b      	str	r3, [r7, #4]
 800ed40:	e001      	b.n	800ed46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ed42:	2300      	movs	r3, #0
 800ed44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ed46:	687b      	ldr	r3, [r7, #4]
	}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr
 800ed54:	24000c70 	.word	0x24000c70
 800ed58:	24000c8c 	.word	0x24000c8c

0800ed5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d051      	beq.n	800ee16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed76:	4b2a      	ldr	r3, [pc, #168]	; (800ee20 <xTaskPriorityInherit+0xc4>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d241      	bcs.n	800ee04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	699b      	ldr	r3, [r3, #24]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	db06      	blt.n	800ed96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed88:	4b25      	ldr	r3, [pc, #148]	; (800ee20 <xTaskPriorityInherit+0xc4>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	6959      	ldr	r1, [r3, #20]
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed9e:	4613      	mov	r3, r2
 800eda0:	009b      	lsls	r3, r3, #2
 800eda2:	4413      	add	r3, r2
 800eda4:	009b      	lsls	r3, r3, #2
 800eda6:	4a1f      	ldr	r2, [pc, #124]	; (800ee24 <xTaskPriorityInherit+0xc8>)
 800eda8:	4413      	add	r3, r2
 800edaa:	4299      	cmp	r1, r3
 800edac:	d122      	bne.n	800edf4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	3304      	adds	r3, #4
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fe f97c 	bl	800d0b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800edb8:	4b19      	ldr	r3, [pc, #100]	; (800ee20 <xTaskPriorityInherit+0xc4>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edc6:	4b18      	ldr	r3, [pc, #96]	; (800ee28 <xTaskPriorityInherit+0xcc>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d903      	bls.n	800edd6 <xTaskPriorityInherit+0x7a>
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edd2:	4a15      	ldr	r2, [pc, #84]	; (800ee28 <xTaskPriorityInherit+0xcc>)
 800edd4:	6013      	str	r3, [r2, #0]
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edda:	4613      	mov	r3, r2
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	4413      	add	r3, r2
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	4a10      	ldr	r2, [pc, #64]	; (800ee24 <xTaskPriorityInherit+0xc8>)
 800ede4:	441a      	add	r2, r3
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	3304      	adds	r3, #4
 800edea:	4619      	mov	r1, r3
 800edec:	4610      	mov	r0, r2
 800edee:	f7fe f902 	bl	800cff6 <vListInsertEnd>
 800edf2:	e004      	b.n	800edfe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800edf4:	4b0a      	ldr	r3, [pc, #40]	; (800ee20 <xTaskPriorityInherit+0xc4>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800edfe:	2301      	movs	r3, #1
 800ee00:	60fb      	str	r3, [r7, #12]
 800ee02:	e008      	b.n	800ee16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee08:	4b05      	ldr	r3, [pc, #20]	; (800ee20 <xTaskPriorityInherit+0xc4>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d201      	bcs.n	800ee16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ee12:	2301      	movs	r3, #1
 800ee14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee16:	68fb      	ldr	r3, [r7, #12]
	}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	24000790 	.word	0x24000790
 800ee24:	24000794 	.word	0x24000794
 800ee28:	24000c6c 	.word	0x24000c6c

0800ee2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d056      	beq.n	800eef0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ee42:	4b2e      	ldr	r3, [pc, #184]	; (800eefc <xTaskPriorityDisinherit+0xd0>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	693a      	ldr	r2, [r7, #16]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d00a      	beq.n	800ee62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ee4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee50:	f383 8811 	msr	BASEPRI, r3
 800ee54:	f3bf 8f6f 	isb	sy
 800ee58:	f3bf 8f4f 	dsb	sy
 800ee5c:	60fb      	str	r3, [r7, #12]
}
 800ee5e:	bf00      	nop
 800ee60:	e7fe      	b.n	800ee60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10a      	bne.n	800ee80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ee6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6e:	f383 8811 	msr	BASEPRI, r3
 800ee72:	f3bf 8f6f 	isb	sy
 800ee76:	f3bf 8f4f 	dsb	sy
 800ee7a:	60bb      	str	r3, [r7, #8]
}
 800ee7c:	bf00      	nop
 800ee7e:	e7fe      	b.n	800ee7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee84:	1e5a      	subs	r2, r3, #1
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d02c      	beq.n	800eef0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d128      	bne.n	800eef0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	3304      	adds	r3, #4
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fe f904 	bl	800d0b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec0:	4b0f      	ldr	r3, [pc, #60]	; (800ef00 <xTaskPriorityDisinherit+0xd4>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d903      	bls.n	800eed0 <xTaskPriorityDisinherit+0xa4>
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eecc:	4a0c      	ldr	r2, [pc, #48]	; (800ef00 <xTaskPriorityDisinherit+0xd4>)
 800eece:	6013      	str	r3, [r2, #0]
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed4:	4613      	mov	r3, r2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	4413      	add	r3, r2
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	4a09      	ldr	r2, [pc, #36]	; (800ef04 <xTaskPriorityDisinherit+0xd8>)
 800eede:	441a      	add	r2, r3
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	3304      	adds	r3, #4
 800eee4:	4619      	mov	r1, r3
 800eee6:	4610      	mov	r0, r2
 800eee8:	f7fe f885 	bl	800cff6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eeec:	2301      	movs	r3, #1
 800eeee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eef0:	697b      	ldr	r3, [r7, #20]
	}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3718      	adds	r7, #24
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	24000790 	.word	0x24000790
 800ef00:	24000c6c 	.word	0x24000c6c
 800ef04:	24000794 	.word	0x24000794

0800ef08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b088      	sub	sp, #32
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ef16:	2301      	movs	r3, #1
 800ef18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d06a      	beq.n	800eff6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d10a      	bne.n	800ef3e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ef28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2c:	f383 8811 	msr	BASEPRI, r3
 800ef30:	f3bf 8f6f 	isb	sy
 800ef34:	f3bf 8f4f 	dsb	sy
 800ef38:	60fb      	str	r3, [r7, #12]
}
 800ef3a:	bf00      	nop
 800ef3c:	e7fe      	b.n	800ef3c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef42:	683a      	ldr	r2, [r7, #0]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d902      	bls.n	800ef4e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	61fb      	str	r3, [r7, #28]
 800ef4c:	e002      	b.n	800ef54 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef52:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef58:	69fa      	ldr	r2, [r7, #28]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d04b      	beq.n	800eff6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ef5e:	69bb      	ldr	r3, [r7, #24]
 800ef60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef62:	697a      	ldr	r2, [r7, #20]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d146      	bne.n	800eff6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ef68:	4b25      	ldr	r3, [pc, #148]	; (800f000 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	69ba      	ldr	r2, [r7, #24]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d10a      	bne.n	800ef88 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ef72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef76:	f383 8811 	msr	BASEPRI, r3
 800ef7a:	f3bf 8f6f 	isb	sy
 800ef7e:	f3bf 8f4f 	dsb	sy
 800ef82:	60bb      	str	r3, [r7, #8]
}
 800ef84:	bf00      	nop
 800ef86:	e7fe      	b.n	800ef86 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	69fa      	ldr	r2, [r7, #28]
 800ef92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef94:	69bb      	ldr	r3, [r7, #24]
 800ef96:	699b      	ldr	r3, [r3, #24]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	db04      	blt.n	800efa6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	6959      	ldr	r1, [r3, #20]
 800efaa:	693a      	ldr	r2, [r7, #16]
 800efac:	4613      	mov	r3, r2
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	4413      	add	r3, r2
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	4a13      	ldr	r2, [pc, #76]	; (800f004 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800efb6:	4413      	add	r3, r2
 800efb8:	4299      	cmp	r1, r3
 800efba:	d11c      	bne.n	800eff6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	3304      	adds	r3, #4
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7fe f875 	bl	800d0b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efca:	4b0f      	ldr	r3, [pc, #60]	; (800f008 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d903      	bls.n	800efda <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efd6:	4a0c      	ldr	r2, [pc, #48]	; (800f008 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800efd8:	6013      	str	r3, [r2, #0]
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efde:	4613      	mov	r3, r2
 800efe0:	009b      	lsls	r3, r3, #2
 800efe2:	4413      	add	r3, r2
 800efe4:	009b      	lsls	r3, r3, #2
 800efe6:	4a07      	ldr	r2, [pc, #28]	; (800f004 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800efe8:	441a      	add	r2, r3
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	3304      	adds	r3, #4
 800efee:	4619      	mov	r1, r3
 800eff0:	4610      	mov	r0, r2
 800eff2:	f7fe f800 	bl	800cff6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eff6:	bf00      	nop
 800eff8:	3720      	adds	r7, #32
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	24000790 	.word	0x24000790
 800f004:	24000794 	.word	0x24000794
 800f008:	24000c6c 	.word	0x24000c6c

0800f00c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f00c:	b480      	push	{r7}
 800f00e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f010:	4b07      	ldr	r3, [pc, #28]	; (800f030 <pvTaskIncrementMutexHeldCount+0x24>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d004      	beq.n	800f022 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f018:	4b05      	ldr	r3, [pc, #20]	; (800f030 <pvTaskIncrementMutexHeldCount+0x24>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f01e:	3201      	adds	r2, #1
 800f020:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f022:	4b03      	ldr	r3, [pc, #12]	; (800f030 <pvTaskIncrementMutexHeldCount+0x24>)
 800f024:	681b      	ldr	r3, [r3, #0]
	}
 800f026:	4618      	mov	r0, r3
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr
 800f030:	24000790 	.word	0x24000790

0800f034 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b084      	sub	sp, #16
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f03e:	4b21      	ldr	r3, [pc, #132]	; (800f0c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f044:	4b20      	ldr	r3, [pc, #128]	; (800f0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	3304      	adds	r3, #4
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fe f830 	bl	800d0b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f056:	d10a      	bne.n	800f06e <prvAddCurrentTaskToDelayedList+0x3a>
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d007      	beq.n	800f06e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f05e:	4b1a      	ldr	r3, [pc, #104]	; (800f0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	3304      	adds	r3, #4
 800f064:	4619      	mov	r1, r3
 800f066:	4819      	ldr	r0, [pc, #100]	; (800f0cc <prvAddCurrentTaskToDelayedList+0x98>)
 800f068:	f7fd ffc5 	bl	800cff6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f06c:	e026      	b.n	800f0bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f06e:	68fa      	ldr	r2, [r7, #12]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	4413      	add	r3, r2
 800f074:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f076:	4b14      	ldr	r3, [pc, #80]	; (800f0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f07e:	68ba      	ldr	r2, [r7, #8]
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	429a      	cmp	r2, r3
 800f084:	d209      	bcs.n	800f09a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f086:	4b12      	ldr	r3, [pc, #72]	; (800f0d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	4b0f      	ldr	r3, [pc, #60]	; (800f0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	3304      	adds	r3, #4
 800f090:	4619      	mov	r1, r3
 800f092:	4610      	mov	r0, r2
 800f094:	f7fd ffd3 	bl	800d03e <vListInsert>
}
 800f098:	e010      	b.n	800f0bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f09a:	4b0e      	ldr	r3, [pc, #56]	; (800f0d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f09c:	681a      	ldr	r2, [r3, #0]
 800f09e:	4b0a      	ldr	r3, [pc, #40]	; (800f0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	f7fd ffc9 	bl	800d03e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f0ac:	4b0a      	ldr	r3, [pc, #40]	; (800f0d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	68ba      	ldr	r2, [r7, #8]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d202      	bcs.n	800f0bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f0b6:	4a08      	ldr	r2, [pc, #32]	; (800f0d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	6013      	str	r3, [r2, #0]
}
 800f0bc:	bf00      	nop
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}
 800f0c4:	24000c68 	.word	0x24000c68
 800f0c8:	24000790 	.word	0x24000790
 800f0cc:	24000c50 	.word	0x24000c50
 800f0d0:	24000c20 	.word	0x24000c20
 800f0d4:	24000c1c 	.word	0x24000c1c
 800f0d8:	24000c84 	.word	0x24000c84

0800f0dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b08a      	sub	sp, #40	; 0x28
 800f0e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f0e6:	f000 fb07 	bl	800f6f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f0ea:	4b1c      	ldr	r3, [pc, #112]	; (800f15c <xTimerCreateTimerTask+0x80>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d021      	beq.n	800f136 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f0fa:	1d3a      	adds	r2, r7, #4
 800f0fc:	f107 0108 	add.w	r1, r7, #8
 800f100:	f107 030c 	add.w	r3, r7, #12
 800f104:	4618      	mov	r0, r3
 800f106:	f7fd ff2f 	bl	800cf68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f10a:	6879      	ldr	r1, [r7, #4]
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	9202      	str	r2, [sp, #8]
 800f112:	9301      	str	r3, [sp, #4]
 800f114:	2302      	movs	r3, #2
 800f116:	9300      	str	r3, [sp, #0]
 800f118:	2300      	movs	r3, #0
 800f11a:	460a      	mov	r2, r1
 800f11c:	4910      	ldr	r1, [pc, #64]	; (800f160 <xTimerCreateTimerTask+0x84>)
 800f11e:	4811      	ldr	r0, [pc, #68]	; (800f164 <xTimerCreateTimerTask+0x88>)
 800f120:	f7fe ffbe 	bl	800e0a0 <xTaskCreateStatic>
 800f124:	4603      	mov	r3, r0
 800f126:	4a10      	ldr	r2, [pc, #64]	; (800f168 <xTimerCreateTimerTask+0x8c>)
 800f128:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f12a:	4b0f      	ldr	r3, [pc, #60]	; (800f168 <xTimerCreateTimerTask+0x8c>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d001      	beq.n	800f136 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f132:	2301      	movs	r3, #1
 800f134:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d10a      	bne.n	800f152 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f140:	f383 8811 	msr	BASEPRI, r3
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	613b      	str	r3, [r7, #16]
}
 800f14e:	bf00      	nop
 800f150:	e7fe      	b.n	800f150 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f152:	697b      	ldr	r3, [r7, #20]
}
 800f154:	4618      	mov	r0, r3
 800f156:	3718      	adds	r7, #24
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	24000cc0 	.word	0x24000cc0
 800f160:	08010a94 	.word	0x08010a94
 800f164:	0800f2a1 	.word	0x0800f2a1
 800f168:	24000cc4 	.word	0x24000cc4

0800f16c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b08a      	sub	sp, #40	; 0x28
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	607a      	str	r2, [r7, #4]
 800f178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f17a:	2300      	movs	r3, #0
 800f17c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d10a      	bne.n	800f19a <xTimerGenericCommand+0x2e>
	__asm volatile
 800f184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f188:	f383 8811 	msr	BASEPRI, r3
 800f18c:	f3bf 8f6f 	isb	sy
 800f190:	f3bf 8f4f 	dsb	sy
 800f194:	623b      	str	r3, [r7, #32]
}
 800f196:	bf00      	nop
 800f198:	e7fe      	b.n	800f198 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f19a:	4b1a      	ldr	r3, [pc, #104]	; (800f204 <xTimerGenericCommand+0x98>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d02a      	beq.n	800f1f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	2b05      	cmp	r3, #5
 800f1b2:	dc18      	bgt.n	800f1e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f1b4:	f7ff fdb4 	bl	800ed20 <xTaskGetSchedulerState>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b02      	cmp	r3, #2
 800f1bc:	d109      	bne.n	800f1d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f1be:	4b11      	ldr	r3, [pc, #68]	; (800f204 <xTimerGenericCommand+0x98>)
 800f1c0:	6818      	ldr	r0, [r3, #0]
 800f1c2:	f107 0110 	add.w	r1, r7, #16
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1ca:	f7fe f98f 	bl	800d4ec <xQueueGenericSend>
 800f1ce:	6278      	str	r0, [r7, #36]	; 0x24
 800f1d0:	e012      	b.n	800f1f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f1d2:	4b0c      	ldr	r3, [pc, #48]	; (800f204 <xTimerGenericCommand+0x98>)
 800f1d4:	6818      	ldr	r0, [r3, #0]
 800f1d6:	f107 0110 	add.w	r1, r7, #16
 800f1da:	2300      	movs	r3, #0
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f7fe f985 	bl	800d4ec <xQueueGenericSend>
 800f1e2:	6278      	str	r0, [r7, #36]	; 0x24
 800f1e4:	e008      	b.n	800f1f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f1e6:	4b07      	ldr	r3, [pc, #28]	; (800f204 <xTimerGenericCommand+0x98>)
 800f1e8:	6818      	ldr	r0, [r3, #0]
 800f1ea:	f107 0110 	add.w	r1, r7, #16
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	683a      	ldr	r2, [r7, #0]
 800f1f2:	f7fe fa79 	bl	800d6e8 <xQueueGenericSendFromISR>
 800f1f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3728      	adds	r7, #40	; 0x28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	24000cc0 	.word	0x24000cc0

0800f208 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b088      	sub	sp, #32
 800f20c:	af02      	add	r7, sp, #8
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f212:	4b22      	ldr	r3, [pc, #136]	; (800f29c <prvProcessExpiredTimer+0x94>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	68db      	ldr	r3, [r3, #12]
 800f21a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	3304      	adds	r3, #4
 800f220:	4618      	mov	r0, r3
 800f222:	f7fd ff45 	bl	800d0b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f22c:	f003 0304 	and.w	r3, r3, #4
 800f230:	2b00      	cmp	r3, #0
 800f232:	d022      	beq.n	800f27a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	699a      	ldr	r2, [r3, #24]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	18d1      	adds	r1, r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	683a      	ldr	r2, [r7, #0]
 800f240:	6978      	ldr	r0, [r7, #20]
 800f242:	f000 f8d1 	bl	800f3e8 <prvInsertTimerInActiveList>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d01f      	beq.n	800f28c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f24c:	2300      	movs	r3, #0
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	2300      	movs	r3, #0
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	2100      	movs	r1, #0
 800f256:	6978      	ldr	r0, [r7, #20]
 800f258:	f7ff ff88 	bl	800f16c <xTimerGenericCommand>
 800f25c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d113      	bne.n	800f28c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f268:	f383 8811 	msr	BASEPRI, r3
 800f26c:	f3bf 8f6f 	isb	sy
 800f270:	f3bf 8f4f 	dsb	sy
 800f274:	60fb      	str	r3, [r7, #12]
}
 800f276:	bf00      	nop
 800f278:	e7fe      	b.n	800f278 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f280:	f023 0301 	bic.w	r3, r3, #1
 800f284:	b2da      	uxtb	r2, r3
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	6a1b      	ldr	r3, [r3, #32]
 800f290:	6978      	ldr	r0, [r7, #20]
 800f292:	4798      	blx	r3
}
 800f294:	bf00      	nop
 800f296:	3718      	adds	r7, #24
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}
 800f29c:	24000cb8 	.word	0x24000cb8

0800f2a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2a8:	f107 0308 	add.w	r3, r7, #8
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f000 f857 	bl	800f360 <prvGetNextExpireTime>
 800f2b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	68f8      	ldr	r0, [r7, #12]
 800f2ba:	f000 f803 	bl	800f2c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f2be:	f000 f8d5 	bl	800f46c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2c2:	e7f1      	b.n	800f2a8 <prvTimerTask+0x8>

0800f2c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f2ce:	f7ff f923 	bl	800e518 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2d2:	f107 0308 	add.w	r3, r7, #8
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f000 f866 	bl	800f3a8 <prvSampleTimeNow>
 800f2dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d130      	bne.n	800f346 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d10a      	bne.n	800f300 <prvProcessTimerOrBlockTask+0x3c>
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d806      	bhi.n	800f300 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f2f2:	f7ff f91f 	bl	800e534 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f2f6:	68f9      	ldr	r1, [r7, #12]
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f7ff ff85 	bl	800f208 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2fe:	e024      	b.n	800f34a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d008      	beq.n	800f318 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f306:	4b13      	ldr	r3, [pc, #76]	; (800f354 <prvProcessTimerOrBlockTask+0x90>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d101      	bne.n	800f314 <prvProcessTimerOrBlockTask+0x50>
 800f310:	2301      	movs	r3, #1
 800f312:	e000      	b.n	800f316 <prvProcessTimerOrBlockTask+0x52>
 800f314:	2300      	movs	r3, #0
 800f316:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f318:	4b0f      	ldr	r3, [pc, #60]	; (800f358 <prvProcessTimerOrBlockTask+0x94>)
 800f31a:	6818      	ldr	r0, [r3, #0]
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	1ad3      	subs	r3, r2, r3
 800f322:	683a      	ldr	r2, [r7, #0]
 800f324:	4619      	mov	r1, r3
 800f326:	f7fe fe87 	bl	800e038 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f32a:	f7ff f903 	bl	800e534 <xTaskResumeAll>
 800f32e:	4603      	mov	r3, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d10a      	bne.n	800f34a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f334:	4b09      	ldr	r3, [pc, #36]	; (800f35c <prvProcessTimerOrBlockTask+0x98>)
 800f336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f33a:	601a      	str	r2, [r3, #0]
 800f33c:	f3bf 8f4f 	dsb	sy
 800f340:	f3bf 8f6f 	isb	sy
}
 800f344:	e001      	b.n	800f34a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f346:	f7ff f8f5 	bl	800e534 <xTaskResumeAll>
}
 800f34a:	bf00      	nop
 800f34c:	3710      	adds	r7, #16
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	24000cbc 	.word	0x24000cbc
 800f358:	24000cc0 	.word	0x24000cc0
 800f35c:	e000ed04 	.word	0xe000ed04

0800f360 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f360:	b480      	push	{r7}
 800f362:	b085      	sub	sp, #20
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f368:	4b0e      	ldr	r3, [pc, #56]	; (800f3a4 <prvGetNextExpireTime+0x44>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d101      	bne.n	800f376 <prvGetNextExpireTime+0x16>
 800f372:	2201      	movs	r2, #1
 800f374:	e000      	b.n	800f378 <prvGetNextExpireTime+0x18>
 800f376:	2200      	movs	r2, #0
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d105      	bne.n	800f390 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f384:	4b07      	ldr	r3, [pc, #28]	; (800f3a4 <prvGetNextExpireTime+0x44>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	60fb      	str	r3, [r7, #12]
 800f38e:	e001      	b.n	800f394 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f390:	2300      	movs	r3, #0
 800f392:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f394:	68fb      	ldr	r3, [r7, #12]
}
 800f396:	4618      	mov	r0, r3
 800f398:	3714      	adds	r7, #20
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop
 800f3a4:	24000cb8 	.word	0x24000cb8

0800f3a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f3b0:	f7ff f95e 	bl	800e670 <xTaskGetTickCount>
 800f3b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f3b6:	4b0b      	ldr	r3, [pc, #44]	; (800f3e4 <prvSampleTimeNow+0x3c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	68fa      	ldr	r2, [r7, #12]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d205      	bcs.n	800f3cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f3c0:	f000 f936 	bl	800f630 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	e002      	b.n	800f3d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f3d2:	4a04      	ldr	r2, [pc, #16]	; (800f3e4 <prvSampleTimeNow+0x3c>)
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3710      	adds	r7, #16
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	24000cc8 	.word	0x24000cc8

0800f3e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b086      	sub	sp, #24
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	607a      	str	r2, [r7, #4]
 800f3f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	68ba      	ldr	r2, [r7, #8]
 800f3fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f406:	68ba      	ldr	r2, [r7, #8]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d812      	bhi.n	800f434 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	1ad2      	subs	r2, r2, r3
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	699b      	ldr	r3, [r3, #24]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d302      	bcc.n	800f422 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f41c:	2301      	movs	r3, #1
 800f41e:	617b      	str	r3, [r7, #20]
 800f420:	e01b      	b.n	800f45a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f422:	4b10      	ldr	r3, [pc, #64]	; (800f464 <prvInsertTimerInActiveList+0x7c>)
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	3304      	adds	r3, #4
 800f42a:	4619      	mov	r1, r3
 800f42c:	4610      	mov	r0, r2
 800f42e:	f7fd fe06 	bl	800d03e <vListInsert>
 800f432:	e012      	b.n	800f45a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f434:	687a      	ldr	r2, [r7, #4]
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	429a      	cmp	r2, r3
 800f43a:	d206      	bcs.n	800f44a <prvInsertTimerInActiveList+0x62>
 800f43c:	68ba      	ldr	r2, [r7, #8]
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	429a      	cmp	r2, r3
 800f442:	d302      	bcc.n	800f44a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f444:	2301      	movs	r3, #1
 800f446:	617b      	str	r3, [r7, #20]
 800f448:	e007      	b.n	800f45a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f44a:	4b07      	ldr	r3, [pc, #28]	; (800f468 <prvInsertTimerInActiveList+0x80>)
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	3304      	adds	r3, #4
 800f452:	4619      	mov	r1, r3
 800f454:	4610      	mov	r0, r2
 800f456:	f7fd fdf2 	bl	800d03e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f45a:	697b      	ldr	r3, [r7, #20]
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3718      	adds	r7, #24
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	24000cbc 	.word	0x24000cbc
 800f468:	24000cb8 	.word	0x24000cb8

0800f46c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b08e      	sub	sp, #56	; 0x38
 800f470:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f472:	e0ca      	b.n	800f60a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2b00      	cmp	r3, #0
 800f478:	da18      	bge.n	800f4ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f47a:	1d3b      	adds	r3, r7, #4
 800f47c:	3304      	adds	r3, #4
 800f47e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f482:	2b00      	cmp	r3, #0
 800f484:	d10a      	bne.n	800f49c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48a:	f383 8811 	msr	BASEPRI, r3
 800f48e:	f3bf 8f6f 	isb	sy
 800f492:	f3bf 8f4f 	dsb	sy
 800f496:	61fb      	str	r3, [r7, #28]
}
 800f498:	bf00      	nop
 800f49a:	e7fe      	b.n	800f49a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4a2:	6850      	ldr	r0, [r2, #4]
 800f4a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4a6:	6892      	ldr	r2, [r2, #8]
 800f4a8:	4611      	mov	r1, r2
 800f4aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f2c0 80aa 	blt.w	800f608 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ba:	695b      	ldr	r3, [r3, #20]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d004      	beq.n	800f4ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	3304      	adds	r3, #4
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7fd fdf3 	bl	800d0b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4ca:	463b      	mov	r3, r7
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7ff ff6b 	bl	800f3a8 <prvSampleTimeNow>
 800f4d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2b09      	cmp	r3, #9
 800f4d8:	f200 8097 	bhi.w	800f60a <prvProcessReceivedCommands+0x19e>
 800f4dc:	a201      	add	r2, pc, #4	; (adr r2, 800f4e4 <prvProcessReceivedCommands+0x78>)
 800f4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4e2:	bf00      	nop
 800f4e4:	0800f50d 	.word	0x0800f50d
 800f4e8:	0800f50d 	.word	0x0800f50d
 800f4ec:	0800f50d 	.word	0x0800f50d
 800f4f0:	0800f581 	.word	0x0800f581
 800f4f4:	0800f595 	.word	0x0800f595
 800f4f8:	0800f5df 	.word	0x0800f5df
 800f4fc:	0800f50d 	.word	0x0800f50d
 800f500:	0800f50d 	.word	0x0800f50d
 800f504:	0800f581 	.word	0x0800f581
 800f508:	0800f595 	.word	0x0800f595
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f512:	f043 0301 	orr.w	r3, r3, #1
 800f516:	b2da      	uxtb	r2, r3
 800f518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f522:	699b      	ldr	r3, [r3, #24]
 800f524:	18d1      	adds	r1, r2, r3
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f52a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f52c:	f7ff ff5c 	bl	800f3e8 <prvInsertTimerInActiveList>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d069      	beq.n	800f60a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f538:	6a1b      	ldr	r3, [r3, #32]
 800f53a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f53c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f544:	f003 0304 	and.w	r3, r3, #4
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d05e      	beq.n	800f60a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f54c:	68ba      	ldr	r2, [r7, #8]
 800f54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f550:	699b      	ldr	r3, [r3, #24]
 800f552:	441a      	add	r2, r3
 800f554:	2300      	movs	r3, #0
 800f556:	9300      	str	r3, [sp, #0]
 800f558:	2300      	movs	r3, #0
 800f55a:	2100      	movs	r1, #0
 800f55c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f55e:	f7ff fe05 	bl	800f16c <xTimerGenericCommand>
 800f562:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f564:	6a3b      	ldr	r3, [r7, #32]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d14f      	bne.n	800f60a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56e:	f383 8811 	msr	BASEPRI, r3
 800f572:	f3bf 8f6f 	isb	sy
 800f576:	f3bf 8f4f 	dsb	sy
 800f57a:	61bb      	str	r3, [r7, #24]
}
 800f57c:	bf00      	nop
 800f57e:	e7fe      	b.n	800f57e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f586:	f023 0301 	bic.w	r3, r3, #1
 800f58a:	b2da      	uxtb	r2, r3
 800f58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f592:	e03a      	b.n	800f60a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f59a:	f043 0301 	orr.w	r3, r3, #1
 800f59e:	b2da      	uxtb	r2, r3
 800f5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f5a6:	68ba      	ldr	r2, [r7, #8]
 800f5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ae:	699b      	ldr	r3, [r3, #24]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d10a      	bne.n	800f5ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b8:	f383 8811 	msr	BASEPRI, r3
 800f5bc:	f3bf 8f6f 	isb	sy
 800f5c0:	f3bf 8f4f 	dsb	sy
 800f5c4:	617b      	str	r3, [r7, #20]
}
 800f5c6:	bf00      	nop
 800f5c8:	e7fe      	b.n	800f5c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5cc:	699a      	ldr	r2, [r3, #24]
 800f5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d0:	18d1      	adds	r1, r2, r3
 800f5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5d8:	f7ff ff06 	bl	800f3e8 <prvInsertTimerInActiveList>
					break;
 800f5dc:	e015      	b.n	800f60a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5e4:	f003 0302 	and.w	r3, r3, #2
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d103      	bne.n	800f5f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f5ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5ee:	f000 fbdf 	bl	800fdb0 <vPortFree>
 800f5f2:	e00a      	b.n	800f60a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5fa:	f023 0301 	bic.w	r3, r3, #1
 800f5fe:	b2da      	uxtb	r2, r3
 800f600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f606:	e000      	b.n	800f60a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f608:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f60a:	4b08      	ldr	r3, [pc, #32]	; (800f62c <prvProcessReceivedCommands+0x1c0>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	1d39      	adds	r1, r7, #4
 800f610:	2200      	movs	r2, #0
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe f904 	bl	800d820 <xQueueReceive>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	f47f af2a 	bne.w	800f474 <prvProcessReceivedCommands+0x8>
	}
}
 800f620:	bf00      	nop
 800f622:	bf00      	nop
 800f624:	3730      	adds	r7, #48	; 0x30
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	24000cc0 	.word	0x24000cc0

0800f630 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b088      	sub	sp, #32
 800f634:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f636:	e048      	b.n	800f6ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f638:	4b2d      	ldr	r3, [pc, #180]	; (800f6f0 <prvSwitchTimerLists+0xc0>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f642:	4b2b      	ldr	r3, [pc, #172]	; (800f6f0 <prvSwitchTimerLists+0xc0>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	3304      	adds	r3, #4
 800f650:	4618      	mov	r0, r3
 800f652:	f7fd fd2d 	bl	800d0b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6a1b      	ldr	r3, [r3, #32]
 800f65a:	68f8      	ldr	r0, [r7, #12]
 800f65c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f664:	f003 0304 	and.w	r3, r3, #4
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d02e      	beq.n	800f6ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	699b      	ldr	r3, [r3, #24]
 800f670:	693a      	ldr	r2, [r7, #16]
 800f672:	4413      	add	r3, r2
 800f674:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d90e      	bls.n	800f69c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	68ba      	ldr	r2, [r7, #8]
 800f682:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	68fa      	ldr	r2, [r7, #12]
 800f688:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f68a:	4b19      	ldr	r3, [pc, #100]	; (800f6f0 <prvSwitchTimerLists+0xc0>)
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	3304      	adds	r3, #4
 800f692:	4619      	mov	r1, r3
 800f694:	4610      	mov	r0, r2
 800f696:	f7fd fcd2 	bl	800d03e <vListInsert>
 800f69a:	e016      	b.n	800f6ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f69c:	2300      	movs	r3, #0
 800f69e:	9300      	str	r3, [sp, #0]
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	693a      	ldr	r2, [r7, #16]
 800f6a4:	2100      	movs	r1, #0
 800f6a6:	68f8      	ldr	r0, [r7, #12]
 800f6a8:	f7ff fd60 	bl	800f16c <xTimerGenericCommand>
 800f6ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d10a      	bne.n	800f6ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b8:	f383 8811 	msr	BASEPRI, r3
 800f6bc:	f3bf 8f6f 	isb	sy
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	603b      	str	r3, [r7, #0]
}
 800f6c6:	bf00      	nop
 800f6c8:	e7fe      	b.n	800f6c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6ca:	4b09      	ldr	r3, [pc, #36]	; (800f6f0 <prvSwitchTimerLists+0xc0>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1b1      	bne.n	800f638 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f6d4:	4b06      	ldr	r3, [pc, #24]	; (800f6f0 <prvSwitchTimerLists+0xc0>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f6da:	4b06      	ldr	r3, [pc, #24]	; (800f6f4 <prvSwitchTimerLists+0xc4>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	4a04      	ldr	r2, [pc, #16]	; (800f6f0 <prvSwitchTimerLists+0xc0>)
 800f6e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f6e2:	4a04      	ldr	r2, [pc, #16]	; (800f6f4 <prvSwitchTimerLists+0xc4>)
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	6013      	str	r3, [r2, #0]
}
 800f6e8:	bf00      	nop
 800f6ea:	3718      	adds	r7, #24
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	24000cb8 	.word	0x24000cb8
 800f6f4:	24000cbc 	.word	0x24000cbc

0800f6f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f6fe:	f000 f969 	bl	800f9d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f702:	4b15      	ldr	r3, [pc, #84]	; (800f758 <prvCheckForValidListAndQueue+0x60>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d120      	bne.n	800f74c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f70a:	4814      	ldr	r0, [pc, #80]	; (800f75c <prvCheckForValidListAndQueue+0x64>)
 800f70c:	f7fd fc46 	bl	800cf9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f710:	4813      	ldr	r0, [pc, #76]	; (800f760 <prvCheckForValidListAndQueue+0x68>)
 800f712:	f7fd fc43 	bl	800cf9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f716:	4b13      	ldr	r3, [pc, #76]	; (800f764 <prvCheckForValidListAndQueue+0x6c>)
 800f718:	4a10      	ldr	r2, [pc, #64]	; (800f75c <prvCheckForValidListAndQueue+0x64>)
 800f71a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f71c:	4b12      	ldr	r3, [pc, #72]	; (800f768 <prvCheckForValidListAndQueue+0x70>)
 800f71e:	4a10      	ldr	r2, [pc, #64]	; (800f760 <prvCheckForValidListAndQueue+0x68>)
 800f720:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f722:	2300      	movs	r3, #0
 800f724:	9300      	str	r3, [sp, #0]
 800f726:	4b11      	ldr	r3, [pc, #68]	; (800f76c <prvCheckForValidListAndQueue+0x74>)
 800f728:	4a11      	ldr	r2, [pc, #68]	; (800f770 <prvCheckForValidListAndQueue+0x78>)
 800f72a:	2110      	movs	r1, #16
 800f72c:	200a      	movs	r0, #10
 800f72e:	f7fd fd51 	bl	800d1d4 <xQueueGenericCreateStatic>
 800f732:	4603      	mov	r3, r0
 800f734:	4a08      	ldr	r2, [pc, #32]	; (800f758 <prvCheckForValidListAndQueue+0x60>)
 800f736:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f738:	4b07      	ldr	r3, [pc, #28]	; (800f758 <prvCheckForValidListAndQueue+0x60>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d005      	beq.n	800f74c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f740:	4b05      	ldr	r3, [pc, #20]	; (800f758 <prvCheckForValidListAndQueue+0x60>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	490b      	ldr	r1, [pc, #44]	; (800f774 <prvCheckForValidListAndQueue+0x7c>)
 800f746:	4618      	mov	r0, r3
 800f748:	f7fe fc22 	bl	800df90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f74c:	f000 f972 	bl	800fa34 <vPortExitCritical>
}
 800f750:	bf00      	nop
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	24000cc0 	.word	0x24000cc0
 800f75c:	24000c90 	.word	0x24000c90
 800f760:	24000ca4 	.word	0x24000ca4
 800f764:	24000cb8 	.word	0x24000cb8
 800f768:	24000cbc 	.word	0x24000cbc
 800f76c:	24000d6c 	.word	0x24000d6c
 800f770:	24000ccc 	.word	0x24000ccc
 800f774:	08010a9c 	.word	0x08010a9c

0800f778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f778:	b480      	push	{r7}
 800f77a:	b085      	sub	sp, #20
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	3b04      	subs	r3, #4
 800f788:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	3b04      	subs	r3, #4
 800f796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	f023 0201 	bic.w	r2, r3, #1
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	3b04      	subs	r3, #4
 800f7a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f7a8:	4a0c      	ldr	r2, [pc, #48]	; (800f7dc <pxPortInitialiseStack+0x64>)
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	3b14      	subs	r3, #20
 800f7b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	3b04      	subs	r3, #4
 800f7be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f06f 0202 	mvn.w	r2, #2
 800f7c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	3b20      	subs	r3, #32
 800f7cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3714      	adds	r7, #20
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr
 800f7dc:	0800f7e1 	.word	0x0800f7e1

0800f7e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b085      	sub	sp, #20
 800f7e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f7ea:	4b12      	ldr	r3, [pc, #72]	; (800f834 <prvTaskExitError+0x54>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f2:	d00a      	beq.n	800f80a <prvTaskExitError+0x2a>
	__asm volatile
 800f7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f8:	f383 8811 	msr	BASEPRI, r3
 800f7fc:	f3bf 8f6f 	isb	sy
 800f800:	f3bf 8f4f 	dsb	sy
 800f804:	60fb      	str	r3, [r7, #12]
}
 800f806:	bf00      	nop
 800f808:	e7fe      	b.n	800f808 <prvTaskExitError+0x28>
	__asm volatile
 800f80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f80e:	f383 8811 	msr	BASEPRI, r3
 800f812:	f3bf 8f6f 	isb	sy
 800f816:	f3bf 8f4f 	dsb	sy
 800f81a:	60bb      	str	r3, [r7, #8]
}
 800f81c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f81e:	bf00      	nop
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d0fc      	beq.n	800f820 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f826:	bf00      	nop
 800f828:	bf00      	nop
 800f82a:	3714      	adds	r7, #20
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr
 800f834:	24000010 	.word	0x24000010
	...

0800f840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f840:	4b07      	ldr	r3, [pc, #28]	; (800f860 <pxCurrentTCBConst2>)
 800f842:	6819      	ldr	r1, [r3, #0]
 800f844:	6808      	ldr	r0, [r1, #0]
 800f846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f84a:	f380 8809 	msr	PSP, r0
 800f84e:	f3bf 8f6f 	isb	sy
 800f852:	f04f 0000 	mov.w	r0, #0
 800f856:	f380 8811 	msr	BASEPRI, r0
 800f85a:	4770      	bx	lr
 800f85c:	f3af 8000 	nop.w

0800f860 <pxCurrentTCBConst2>:
 800f860:	24000790 	.word	0x24000790
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f864:	bf00      	nop
 800f866:	bf00      	nop

0800f868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f868:	4808      	ldr	r0, [pc, #32]	; (800f88c <prvPortStartFirstTask+0x24>)
 800f86a:	6800      	ldr	r0, [r0, #0]
 800f86c:	6800      	ldr	r0, [r0, #0]
 800f86e:	f380 8808 	msr	MSP, r0
 800f872:	f04f 0000 	mov.w	r0, #0
 800f876:	f380 8814 	msr	CONTROL, r0
 800f87a:	b662      	cpsie	i
 800f87c:	b661      	cpsie	f
 800f87e:	f3bf 8f4f 	dsb	sy
 800f882:	f3bf 8f6f 	isb	sy
 800f886:	df00      	svc	0
 800f888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f88a:	bf00      	nop
 800f88c:	e000ed08 	.word	0xe000ed08

0800f890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b086      	sub	sp, #24
 800f894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f896:	4b46      	ldr	r3, [pc, #280]	; (800f9b0 <xPortStartScheduler+0x120>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4a46      	ldr	r2, [pc, #280]	; (800f9b4 <xPortStartScheduler+0x124>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d10a      	bne.n	800f8b6 <xPortStartScheduler+0x26>
	__asm volatile
 800f8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a4:	f383 8811 	msr	BASEPRI, r3
 800f8a8:	f3bf 8f6f 	isb	sy
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	613b      	str	r3, [r7, #16]
}
 800f8b2:	bf00      	nop
 800f8b4:	e7fe      	b.n	800f8b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f8b6:	4b3e      	ldr	r3, [pc, #248]	; (800f9b0 <xPortStartScheduler+0x120>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	4a3f      	ldr	r2, [pc, #252]	; (800f9b8 <xPortStartScheduler+0x128>)
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	d10a      	bne.n	800f8d6 <xPortStartScheduler+0x46>
	__asm volatile
 800f8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c4:	f383 8811 	msr	BASEPRI, r3
 800f8c8:	f3bf 8f6f 	isb	sy
 800f8cc:	f3bf 8f4f 	dsb	sy
 800f8d0:	60fb      	str	r3, [r7, #12]
}
 800f8d2:	bf00      	nop
 800f8d4:	e7fe      	b.n	800f8d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f8d6:	4b39      	ldr	r3, [pc, #228]	; (800f9bc <xPortStartScheduler+0x12c>)
 800f8d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	22ff      	movs	r2, #255	; 0xff
 800f8e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f8f0:	78fb      	ldrb	r3, [r7, #3]
 800f8f2:	b2db      	uxtb	r3, r3
 800f8f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f8f8:	b2da      	uxtb	r2, r3
 800f8fa:	4b31      	ldr	r3, [pc, #196]	; (800f9c0 <xPortStartScheduler+0x130>)
 800f8fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f8fe:	4b31      	ldr	r3, [pc, #196]	; (800f9c4 <xPortStartScheduler+0x134>)
 800f900:	2207      	movs	r2, #7
 800f902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f904:	e009      	b.n	800f91a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f906:	4b2f      	ldr	r3, [pc, #188]	; (800f9c4 <xPortStartScheduler+0x134>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	3b01      	subs	r3, #1
 800f90c:	4a2d      	ldr	r2, [pc, #180]	; (800f9c4 <xPortStartScheduler+0x134>)
 800f90e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f910:	78fb      	ldrb	r3, [r7, #3]
 800f912:	b2db      	uxtb	r3, r3
 800f914:	005b      	lsls	r3, r3, #1
 800f916:	b2db      	uxtb	r3, r3
 800f918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f91a:	78fb      	ldrb	r3, [r7, #3]
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f922:	2b80      	cmp	r3, #128	; 0x80
 800f924:	d0ef      	beq.n	800f906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f926:	4b27      	ldr	r3, [pc, #156]	; (800f9c4 <xPortStartScheduler+0x134>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	f1c3 0307 	rsb	r3, r3, #7
 800f92e:	2b04      	cmp	r3, #4
 800f930:	d00a      	beq.n	800f948 <xPortStartScheduler+0xb8>
	__asm volatile
 800f932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f936:	f383 8811 	msr	BASEPRI, r3
 800f93a:	f3bf 8f6f 	isb	sy
 800f93e:	f3bf 8f4f 	dsb	sy
 800f942:	60bb      	str	r3, [r7, #8]
}
 800f944:	bf00      	nop
 800f946:	e7fe      	b.n	800f946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f948:	4b1e      	ldr	r3, [pc, #120]	; (800f9c4 <xPortStartScheduler+0x134>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	021b      	lsls	r3, r3, #8
 800f94e:	4a1d      	ldr	r2, [pc, #116]	; (800f9c4 <xPortStartScheduler+0x134>)
 800f950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f952:	4b1c      	ldr	r3, [pc, #112]	; (800f9c4 <xPortStartScheduler+0x134>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f95a:	4a1a      	ldr	r2, [pc, #104]	; (800f9c4 <xPortStartScheduler+0x134>)
 800f95c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	b2da      	uxtb	r2, r3
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f966:	4b18      	ldr	r3, [pc, #96]	; (800f9c8 <xPortStartScheduler+0x138>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	4a17      	ldr	r2, [pc, #92]	; (800f9c8 <xPortStartScheduler+0x138>)
 800f96c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f972:	4b15      	ldr	r3, [pc, #84]	; (800f9c8 <xPortStartScheduler+0x138>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	4a14      	ldr	r2, [pc, #80]	; (800f9c8 <xPortStartScheduler+0x138>)
 800f978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f97c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f97e:	f000 f8dd 	bl	800fb3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f982:	4b12      	ldr	r3, [pc, #72]	; (800f9cc <xPortStartScheduler+0x13c>)
 800f984:	2200      	movs	r2, #0
 800f986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f988:	f000 f8fc 	bl	800fb84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f98c:	4b10      	ldr	r3, [pc, #64]	; (800f9d0 <xPortStartScheduler+0x140>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a0f      	ldr	r2, [pc, #60]	; (800f9d0 <xPortStartScheduler+0x140>)
 800f992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f998:	f7ff ff66 	bl	800f868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f99c:	f7fe ff44 	bl	800e828 <vTaskSwitchContext>
	prvTaskExitError();
 800f9a0:	f7ff ff1e 	bl	800f7e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f9a4:	2300      	movs	r3, #0
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3718      	adds	r7, #24
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	e000ed00 	.word	0xe000ed00
 800f9b4:	410fc271 	.word	0x410fc271
 800f9b8:	410fc270 	.word	0x410fc270
 800f9bc:	e000e400 	.word	0xe000e400
 800f9c0:	24000dbc 	.word	0x24000dbc
 800f9c4:	24000dc0 	.word	0x24000dc0
 800f9c8:	e000ed20 	.word	0xe000ed20
 800f9cc:	24000010 	.word	0x24000010
 800f9d0:	e000ef34 	.word	0xe000ef34

0800f9d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b083      	sub	sp, #12
 800f9d8:	af00      	add	r7, sp, #0
	__asm volatile
 800f9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9de:	f383 8811 	msr	BASEPRI, r3
 800f9e2:	f3bf 8f6f 	isb	sy
 800f9e6:	f3bf 8f4f 	dsb	sy
 800f9ea:	607b      	str	r3, [r7, #4]
}
 800f9ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f9ee:	4b0f      	ldr	r3, [pc, #60]	; (800fa2c <vPortEnterCritical+0x58>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	4a0d      	ldr	r2, [pc, #52]	; (800fa2c <vPortEnterCritical+0x58>)
 800f9f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f9f8:	4b0c      	ldr	r3, [pc, #48]	; (800fa2c <vPortEnterCritical+0x58>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	d10f      	bne.n	800fa20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa00:	4b0b      	ldr	r3, [pc, #44]	; (800fa30 <vPortEnterCritical+0x5c>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d00a      	beq.n	800fa20 <vPortEnterCritical+0x4c>
	__asm volatile
 800fa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa0e:	f383 8811 	msr	BASEPRI, r3
 800fa12:	f3bf 8f6f 	isb	sy
 800fa16:	f3bf 8f4f 	dsb	sy
 800fa1a:	603b      	str	r3, [r7, #0]
}
 800fa1c:	bf00      	nop
 800fa1e:	e7fe      	b.n	800fa1e <vPortEnterCritical+0x4a>
	}
}
 800fa20:	bf00      	nop
 800fa22:	370c      	adds	r7, #12
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr
 800fa2c:	24000010 	.word	0x24000010
 800fa30:	e000ed04 	.word	0xe000ed04

0800fa34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fa3a:	4b12      	ldr	r3, [pc, #72]	; (800fa84 <vPortExitCritical+0x50>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d10a      	bne.n	800fa58 <vPortExitCritical+0x24>
	__asm volatile
 800fa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa46:	f383 8811 	msr	BASEPRI, r3
 800fa4a:	f3bf 8f6f 	isb	sy
 800fa4e:	f3bf 8f4f 	dsb	sy
 800fa52:	607b      	str	r3, [r7, #4]
}
 800fa54:	bf00      	nop
 800fa56:	e7fe      	b.n	800fa56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fa58:	4b0a      	ldr	r3, [pc, #40]	; (800fa84 <vPortExitCritical+0x50>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	3b01      	subs	r3, #1
 800fa5e:	4a09      	ldr	r2, [pc, #36]	; (800fa84 <vPortExitCritical+0x50>)
 800fa60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fa62:	4b08      	ldr	r3, [pc, #32]	; (800fa84 <vPortExitCritical+0x50>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d105      	bne.n	800fa76 <vPortExitCritical+0x42>
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	f383 8811 	msr	BASEPRI, r3
}
 800fa74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fa76:	bf00      	nop
 800fa78:	370c      	adds	r7, #12
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr
 800fa82:	bf00      	nop
 800fa84:	24000010 	.word	0x24000010
	...

0800fa90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa90:	f3ef 8009 	mrs	r0, PSP
 800fa94:	f3bf 8f6f 	isb	sy
 800fa98:	4b15      	ldr	r3, [pc, #84]	; (800faf0 <pxCurrentTCBConst>)
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	f01e 0f10 	tst.w	lr, #16
 800faa0:	bf08      	it	eq
 800faa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800faa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faaa:	6010      	str	r0, [r2, #0]
 800faac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fab4:	f380 8811 	msr	BASEPRI, r0
 800fab8:	f3bf 8f4f 	dsb	sy
 800fabc:	f3bf 8f6f 	isb	sy
 800fac0:	f7fe feb2 	bl	800e828 <vTaskSwitchContext>
 800fac4:	f04f 0000 	mov.w	r0, #0
 800fac8:	f380 8811 	msr	BASEPRI, r0
 800facc:	bc09      	pop	{r0, r3}
 800face:	6819      	ldr	r1, [r3, #0]
 800fad0:	6808      	ldr	r0, [r1, #0]
 800fad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad6:	f01e 0f10 	tst.w	lr, #16
 800fada:	bf08      	it	eq
 800fadc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fae0:	f380 8809 	msr	PSP, r0
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	f3af 8000 	nop.w

0800faf0 <pxCurrentTCBConst>:
 800faf0:	24000790 	.word	0x24000790
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800faf4:	bf00      	nop
 800faf6:	bf00      	nop

0800faf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	607b      	str	r3, [r7, #4]
}
 800fb10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fb12:	f7fe fdcf 	bl	800e6b4 <xTaskIncrementTick>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d003      	beq.n	800fb24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fb1c:	4b06      	ldr	r3, [pc, #24]	; (800fb38 <xPortSysTickHandler+0x40>)
 800fb1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb22:	601a      	str	r2, [r3, #0]
 800fb24:	2300      	movs	r3, #0
 800fb26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	f383 8811 	msr	BASEPRI, r3
}
 800fb2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fb30:	bf00      	nop
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	e000ed04 	.word	0xe000ed04

0800fb3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb40:	4b0b      	ldr	r3, [pc, #44]	; (800fb70 <vPortSetupTimerInterrupt+0x34>)
 800fb42:	2200      	movs	r2, #0
 800fb44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb46:	4b0b      	ldr	r3, [pc, #44]	; (800fb74 <vPortSetupTimerInterrupt+0x38>)
 800fb48:	2200      	movs	r2, #0
 800fb4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb4c:	4b0a      	ldr	r3, [pc, #40]	; (800fb78 <vPortSetupTimerInterrupt+0x3c>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4a0a      	ldr	r2, [pc, #40]	; (800fb7c <vPortSetupTimerInterrupt+0x40>)
 800fb52:	fba2 2303 	umull	r2, r3, r2, r3
 800fb56:	099b      	lsrs	r3, r3, #6
 800fb58:	4a09      	ldr	r2, [pc, #36]	; (800fb80 <vPortSetupTimerInterrupt+0x44>)
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fb5e:	4b04      	ldr	r3, [pc, #16]	; (800fb70 <vPortSetupTimerInterrupt+0x34>)
 800fb60:	2207      	movs	r2, #7
 800fb62:	601a      	str	r2, [r3, #0]
}
 800fb64:	bf00      	nop
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr
 800fb6e:	bf00      	nop
 800fb70:	e000e010 	.word	0xe000e010
 800fb74:	e000e018 	.word	0xe000e018
 800fb78:	24000000 	.word	0x24000000
 800fb7c:	10624dd3 	.word	0x10624dd3
 800fb80:	e000e014 	.word	0xe000e014

0800fb84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fb94 <vPortEnableVFP+0x10>
 800fb88:	6801      	ldr	r1, [r0, #0]
 800fb8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fb8e:	6001      	str	r1, [r0, #0]
 800fb90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb92:	bf00      	nop
 800fb94:	e000ed88 	.word	0xe000ed88

0800fb98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb9e:	f3ef 8305 	mrs	r3, IPSR
 800fba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2b0f      	cmp	r3, #15
 800fba8:	d914      	bls.n	800fbd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fbaa:	4a17      	ldr	r2, [pc, #92]	; (800fc08 <vPortValidateInterruptPriority+0x70>)
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	4413      	add	r3, r2
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fbb4:	4b15      	ldr	r3, [pc, #84]	; (800fc0c <vPortValidateInterruptPriority+0x74>)
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	7afa      	ldrb	r2, [r7, #11]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d20a      	bcs.n	800fbd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	607b      	str	r3, [r7, #4]
}
 800fbd0:	bf00      	nop
 800fbd2:	e7fe      	b.n	800fbd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fbd4:	4b0e      	ldr	r3, [pc, #56]	; (800fc10 <vPortValidateInterruptPriority+0x78>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fbdc:	4b0d      	ldr	r3, [pc, #52]	; (800fc14 <vPortValidateInterruptPriority+0x7c>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d90a      	bls.n	800fbfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe8:	f383 8811 	msr	BASEPRI, r3
 800fbec:	f3bf 8f6f 	isb	sy
 800fbf0:	f3bf 8f4f 	dsb	sy
 800fbf4:	603b      	str	r3, [r7, #0]
}
 800fbf6:	bf00      	nop
 800fbf8:	e7fe      	b.n	800fbf8 <vPortValidateInterruptPriority+0x60>
	}
 800fbfa:	bf00      	nop
 800fbfc:	3714      	adds	r7, #20
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop
 800fc08:	e000e3f0 	.word	0xe000e3f0
 800fc0c:	24000dbc 	.word	0x24000dbc
 800fc10:	e000ed0c 	.word	0xe000ed0c
 800fc14:	24000dc0 	.word	0x24000dc0

0800fc18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b08a      	sub	sp, #40	; 0x28
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc20:	2300      	movs	r3, #0
 800fc22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc24:	f7fe fc78 	bl	800e518 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc28:	4b5b      	ldr	r3, [pc, #364]	; (800fd98 <pvPortMalloc+0x180>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d101      	bne.n	800fc34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fc30:	f000 f920 	bl	800fe74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fc34:	4b59      	ldr	r3, [pc, #356]	; (800fd9c <pvPortMalloc+0x184>)
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	4013      	ands	r3, r2
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	f040 8093 	bne.w	800fd68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d01d      	beq.n	800fc84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fc48:	2208      	movs	r2, #8
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f003 0307 	and.w	r3, r3, #7
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d014      	beq.n	800fc84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f023 0307 	bic.w	r3, r3, #7
 800fc60:	3308      	adds	r3, #8
 800fc62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f003 0307 	and.w	r3, r3, #7
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d00a      	beq.n	800fc84 <pvPortMalloc+0x6c>
	__asm volatile
 800fc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc72:	f383 8811 	msr	BASEPRI, r3
 800fc76:	f3bf 8f6f 	isb	sy
 800fc7a:	f3bf 8f4f 	dsb	sy
 800fc7e:	617b      	str	r3, [r7, #20]
}
 800fc80:	bf00      	nop
 800fc82:	e7fe      	b.n	800fc82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d06e      	beq.n	800fd68 <pvPortMalloc+0x150>
 800fc8a:	4b45      	ldr	r3, [pc, #276]	; (800fda0 <pvPortMalloc+0x188>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	687a      	ldr	r2, [r7, #4]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d869      	bhi.n	800fd68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc94:	4b43      	ldr	r3, [pc, #268]	; (800fda4 <pvPortMalloc+0x18c>)
 800fc96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fc98:	4b42      	ldr	r3, [pc, #264]	; (800fda4 <pvPortMalloc+0x18c>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc9e:	e004      	b.n	800fcaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d903      	bls.n	800fcbc <pvPortMalloc+0xa4>
 800fcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d1f1      	bne.n	800fca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fcbc:	4b36      	ldr	r3, [pc, #216]	; (800fd98 <pvPortMalloc+0x180>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d050      	beq.n	800fd68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fcc6:	6a3b      	ldr	r3, [r7, #32]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2208      	movs	r2, #8
 800fccc:	4413      	add	r3, r2
 800fcce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	6a3b      	ldr	r3, [r7, #32]
 800fcd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcda:	685a      	ldr	r2, [r3, #4]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	1ad2      	subs	r2, r2, r3
 800fce0:	2308      	movs	r3, #8
 800fce2:	005b      	lsls	r3, r3, #1
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d91f      	bls.n	800fd28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	4413      	add	r3, r2
 800fcee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcf0:	69bb      	ldr	r3, [r7, #24]
 800fcf2:	f003 0307 	and.w	r3, r3, #7
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d00a      	beq.n	800fd10 <pvPortMalloc+0xf8>
	__asm volatile
 800fcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfe:	f383 8811 	msr	BASEPRI, r3
 800fd02:	f3bf 8f6f 	isb	sy
 800fd06:	f3bf 8f4f 	dsb	sy
 800fd0a:	613b      	str	r3, [r7, #16]
}
 800fd0c:	bf00      	nop
 800fd0e:	e7fe      	b.n	800fd0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd12:	685a      	ldr	r2, [r3, #4]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	1ad2      	subs	r2, r2, r3
 800fd18:	69bb      	ldr	r3, [r7, #24]
 800fd1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd22:	69b8      	ldr	r0, [r7, #24]
 800fd24:	f000 f908 	bl	800ff38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd28:	4b1d      	ldr	r3, [pc, #116]	; (800fda0 <pvPortMalloc+0x188>)
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	4a1b      	ldr	r2, [pc, #108]	; (800fda0 <pvPortMalloc+0x188>)
 800fd34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd36:	4b1a      	ldr	r3, [pc, #104]	; (800fda0 <pvPortMalloc+0x188>)
 800fd38:	681a      	ldr	r2, [r3, #0]
 800fd3a:	4b1b      	ldr	r3, [pc, #108]	; (800fda8 <pvPortMalloc+0x190>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d203      	bcs.n	800fd4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd42:	4b17      	ldr	r3, [pc, #92]	; (800fda0 <pvPortMalloc+0x188>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4a18      	ldr	r2, [pc, #96]	; (800fda8 <pvPortMalloc+0x190>)
 800fd48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4c:	685a      	ldr	r2, [r3, #4]
 800fd4e:	4b13      	ldr	r3, [pc, #76]	; (800fd9c <pvPortMalloc+0x184>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	431a      	orrs	r2, r3
 800fd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fd5e:	4b13      	ldr	r3, [pc, #76]	; (800fdac <pvPortMalloc+0x194>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	3301      	adds	r3, #1
 800fd64:	4a11      	ldr	r2, [pc, #68]	; (800fdac <pvPortMalloc+0x194>)
 800fd66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fd68:	f7fe fbe4 	bl	800e534 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd6c:	69fb      	ldr	r3, [r7, #28]
 800fd6e:	f003 0307 	and.w	r3, r3, #7
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d00a      	beq.n	800fd8c <pvPortMalloc+0x174>
	__asm volatile
 800fd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd7a:	f383 8811 	msr	BASEPRI, r3
 800fd7e:	f3bf 8f6f 	isb	sy
 800fd82:	f3bf 8f4f 	dsb	sy
 800fd86:	60fb      	str	r3, [r7, #12]
}
 800fd88:	bf00      	nop
 800fd8a:	e7fe      	b.n	800fd8a <pvPortMalloc+0x172>
	return pvReturn;
 800fd8c:	69fb      	ldr	r3, [r7, #28]
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3728      	adds	r7, #40	; 0x28
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
 800fd96:	bf00      	nop
 800fd98:	240049cc 	.word	0x240049cc
 800fd9c:	240049e0 	.word	0x240049e0
 800fda0:	240049d0 	.word	0x240049d0
 800fda4:	240049c4 	.word	0x240049c4
 800fda8:	240049d4 	.word	0x240049d4
 800fdac:	240049d8 	.word	0x240049d8

0800fdb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d04d      	beq.n	800fe5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fdc2:	2308      	movs	r3, #8
 800fdc4:	425b      	negs	r3, r3
 800fdc6:	697a      	ldr	r2, [r7, #20]
 800fdc8:	4413      	add	r3, r2
 800fdca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	685a      	ldr	r2, [r3, #4]
 800fdd4:	4b24      	ldr	r3, [pc, #144]	; (800fe68 <vPortFree+0xb8>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4013      	ands	r3, r2
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d10a      	bne.n	800fdf4 <vPortFree+0x44>
	__asm volatile
 800fdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde2:	f383 8811 	msr	BASEPRI, r3
 800fde6:	f3bf 8f6f 	isb	sy
 800fdea:	f3bf 8f4f 	dsb	sy
 800fdee:	60fb      	str	r3, [r7, #12]
}
 800fdf0:	bf00      	nop
 800fdf2:	e7fe      	b.n	800fdf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d00a      	beq.n	800fe12 <vPortFree+0x62>
	__asm volatile
 800fdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe00:	f383 8811 	msr	BASEPRI, r3
 800fe04:	f3bf 8f6f 	isb	sy
 800fe08:	f3bf 8f4f 	dsb	sy
 800fe0c:	60bb      	str	r3, [r7, #8]
}
 800fe0e:	bf00      	nop
 800fe10:	e7fe      	b.n	800fe10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	685a      	ldr	r2, [r3, #4]
 800fe16:	4b14      	ldr	r3, [pc, #80]	; (800fe68 <vPortFree+0xb8>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	4013      	ands	r3, r2
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d01e      	beq.n	800fe5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d11a      	bne.n	800fe5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	685a      	ldr	r2, [r3, #4]
 800fe2c:	4b0e      	ldr	r3, [pc, #56]	; (800fe68 <vPortFree+0xb8>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	43db      	mvns	r3, r3
 800fe32:	401a      	ands	r2, r3
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fe38:	f7fe fb6e 	bl	800e518 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	685a      	ldr	r2, [r3, #4]
 800fe40:	4b0a      	ldr	r3, [pc, #40]	; (800fe6c <vPortFree+0xbc>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	4413      	add	r3, r2
 800fe46:	4a09      	ldr	r2, [pc, #36]	; (800fe6c <vPortFree+0xbc>)
 800fe48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe4a:	6938      	ldr	r0, [r7, #16]
 800fe4c:	f000 f874 	bl	800ff38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fe50:	4b07      	ldr	r3, [pc, #28]	; (800fe70 <vPortFree+0xc0>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	3301      	adds	r3, #1
 800fe56:	4a06      	ldr	r2, [pc, #24]	; (800fe70 <vPortFree+0xc0>)
 800fe58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fe5a:	f7fe fb6b 	bl	800e534 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fe5e:	bf00      	nop
 800fe60:	3718      	adds	r7, #24
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	240049e0 	.word	0x240049e0
 800fe6c:	240049d0 	.word	0x240049d0
 800fe70:	240049dc 	.word	0x240049dc

0800fe74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fe74:	b480      	push	{r7}
 800fe76:	b085      	sub	sp, #20
 800fe78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fe7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fe7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fe80:	4b27      	ldr	r3, [pc, #156]	; (800ff20 <prvHeapInit+0xac>)
 800fe82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f003 0307 	and.w	r3, r3, #7
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d00c      	beq.n	800fea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	3307      	adds	r3, #7
 800fe92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	f023 0307 	bic.w	r3, r3, #7
 800fe9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fe9c:	68ba      	ldr	r2, [r7, #8]
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	4a1f      	ldr	r2, [pc, #124]	; (800ff20 <prvHeapInit+0xac>)
 800fea4:	4413      	add	r3, r2
 800fea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800feac:	4a1d      	ldr	r2, [pc, #116]	; (800ff24 <prvHeapInit+0xb0>)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800feb2:	4b1c      	ldr	r3, [pc, #112]	; (800ff24 <prvHeapInit+0xb0>)
 800feb4:	2200      	movs	r2, #0
 800feb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	68ba      	ldr	r2, [r7, #8]
 800febc:	4413      	add	r3, r2
 800febe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fec0:	2208      	movs	r2, #8
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	1a9b      	subs	r3, r3, r2
 800fec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f023 0307 	bic.w	r3, r3, #7
 800fece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	4a15      	ldr	r2, [pc, #84]	; (800ff28 <prvHeapInit+0xb4>)
 800fed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fed6:	4b14      	ldr	r3, [pc, #80]	; (800ff28 <prvHeapInit+0xb4>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2200      	movs	r2, #0
 800fedc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fede:	4b12      	ldr	r3, [pc, #72]	; (800ff28 <prvHeapInit+0xb4>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2200      	movs	r2, #0
 800fee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	1ad2      	subs	r2, r2, r3
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fef4:	4b0c      	ldr	r3, [pc, #48]	; (800ff28 <prvHeapInit+0xb4>)
 800fef6:	681a      	ldr	r2, [r3, #0]
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	4a0a      	ldr	r2, [pc, #40]	; (800ff2c <prvHeapInit+0xb8>)
 800ff02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	4a09      	ldr	r2, [pc, #36]	; (800ff30 <prvHeapInit+0xbc>)
 800ff0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff0c:	4b09      	ldr	r3, [pc, #36]	; (800ff34 <prvHeapInit+0xc0>)
 800ff0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ff12:	601a      	str	r2, [r3, #0]
}
 800ff14:	bf00      	nop
 800ff16:	3714      	adds	r7, #20
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr
 800ff20:	24000dc4 	.word	0x24000dc4
 800ff24:	240049c4 	.word	0x240049c4
 800ff28:	240049cc 	.word	0x240049cc
 800ff2c:	240049d4 	.word	0x240049d4
 800ff30:	240049d0 	.word	0x240049d0
 800ff34:	240049e0 	.word	0x240049e0

0800ff38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b085      	sub	sp, #20
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff40:	4b28      	ldr	r3, [pc, #160]	; (800ffe4 <prvInsertBlockIntoFreeList+0xac>)
 800ff42:	60fb      	str	r3, [r7, #12]
 800ff44:	e002      	b.n	800ff4c <prvInsertBlockIntoFreeList+0x14>
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	60fb      	str	r3, [r7, #12]
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d8f7      	bhi.n	800ff46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	68ba      	ldr	r2, [r7, #8]
 800ff60:	4413      	add	r3, r2
 800ff62:	687a      	ldr	r2, [r7, #4]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d108      	bne.n	800ff7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	685a      	ldr	r2, [r3, #4]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	441a      	add	r2, r3
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	68ba      	ldr	r2, [r7, #8]
 800ff84:	441a      	add	r2, r3
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d118      	bne.n	800ffc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	4b15      	ldr	r3, [pc, #84]	; (800ffe8 <prvInsertBlockIntoFreeList+0xb0>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d00d      	beq.n	800ffb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	685a      	ldr	r2, [r3, #4]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	441a      	add	r2, r3
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	601a      	str	r2, [r3, #0]
 800ffb4:	e008      	b.n	800ffc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ffb6:	4b0c      	ldr	r3, [pc, #48]	; (800ffe8 <prvInsertBlockIntoFreeList+0xb0>)
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	601a      	str	r2, [r3, #0]
 800ffbe:	e003      	b.n	800ffc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ffc8:	68fa      	ldr	r2, [r7, #12]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d002      	beq.n	800ffd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ffd6:	bf00      	nop
 800ffd8:	3714      	adds	r7, #20
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop
 800ffe4:	240049c4 	.word	0x240049c4
 800ffe8:	240049cc 	.word	0x240049cc

0800ffec <__errno>:
 800ffec:	4b01      	ldr	r3, [pc, #4]	; (800fff4 <__errno+0x8>)
 800ffee:	6818      	ldr	r0, [r3, #0]
 800fff0:	4770      	bx	lr
 800fff2:	bf00      	nop
 800fff4:	24000014 	.word	0x24000014

0800fff8 <__libc_init_array>:
 800fff8:	b570      	push	{r4, r5, r6, lr}
 800fffa:	4d0d      	ldr	r5, [pc, #52]	; (8010030 <__libc_init_array+0x38>)
 800fffc:	4c0d      	ldr	r4, [pc, #52]	; (8010034 <__libc_init_array+0x3c>)
 800fffe:	1b64      	subs	r4, r4, r5
 8010000:	10a4      	asrs	r4, r4, #2
 8010002:	2600      	movs	r6, #0
 8010004:	42a6      	cmp	r6, r4
 8010006:	d109      	bne.n	801001c <__libc_init_array+0x24>
 8010008:	4d0b      	ldr	r5, [pc, #44]	; (8010038 <__libc_init_array+0x40>)
 801000a:	4c0c      	ldr	r4, [pc, #48]	; (801003c <__libc_init_array+0x44>)
 801000c:	f000 fcf4 	bl	80109f8 <_init>
 8010010:	1b64      	subs	r4, r4, r5
 8010012:	10a4      	asrs	r4, r4, #2
 8010014:	2600      	movs	r6, #0
 8010016:	42a6      	cmp	r6, r4
 8010018:	d105      	bne.n	8010026 <__libc_init_array+0x2e>
 801001a:	bd70      	pop	{r4, r5, r6, pc}
 801001c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010020:	4798      	blx	r3
 8010022:	3601      	adds	r6, #1
 8010024:	e7ee      	b.n	8010004 <__libc_init_array+0xc>
 8010026:	f855 3b04 	ldr.w	r3, [r5], #4
 801002a:	4798      	blx	r3
 801002c:	3601      	adds	r6, #1
 801002e:	e7f2      	b.n	8010016 <__libc_init_array+0x1e>
 8010030:	08010c24 	.word	0x08010c24
 8010034:	08010c24 	.word	0x08010c24
 8010038:	08010c24 	.word	0x08010c24
 801003c:	08010c28 	.word	0x08010c28

08010040 <memcpy>:
 8010040:	440a      	add	r2, r1
 8010042:	4291      	cmp	r1, r2
 8010044:	f100 33ff 	add.w	r3, r0, #4294967295
 8010048:	d100      	bne.n	801004c <memcpy+0xc>
 801004a:	4770      	bx	lr
 801004c:	b510      	push	{r4, lr}
 801004e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010056:	4291      	cmp	r1, r2
 8010058:	d1f9      	bne.n	801004e <memcpy+0xe>
 801005a:	bd10      	pop	{r4, pc}

0801005c <memset>:
 801005c:	4402      	add	r2, r0
 801005e:	4603      	mov	r3, r0
 8010060:	4293      	cmp	r3, r2
 8010062:	d100      	bne.n	8010066 <memset+0xa>
 8010064:	4770      	bx	lr
 8010066:	f803 1b01 	strb.w	r1, [r3], #1
 801006a:	e7f9      	b.n	8010060 <memset+0x4>

0801006c <_puts_r>:
 801006c:	b570      	push	{r4, r5, r6, lr}
 801006e:	460e      	mov	r6, r1
 8010070:	4605      	mov	r5, r0
 8010072:	b118      	cbz	r0, 801007c <_puts_r+0x10>
 8010074:	6983      	ldr	r3, [r0, #24]
 8010076:	b90b      	cbnz	r3, 801007c <_puts_r+0x10>
 8010078:	f000 fa48 	bl	801050c <__sinit>
 801007c:	69ab      	ldr	r3, [r5, #24]
 801007e:	68ac      	ldr	r4, [r5, #8]
 8010080:	b913      	cbnz	r3, 8010088 <_puts_r+0x1c>
 8010082:	4628      	mov	r0, r5
 8010084:	f000 fa42 	bl	801050c <__sinit>
 8010088:	4b2c      	ldr	r3, [pc, #176]	; (801013c <_puts_r+0xd0>)
 801008a:	429c      	cmp	r4, r3
 801008c:	d120      	bne.n	80100d0 <_puts_r+0x64>
 801008e:	686c      	ldr	r4, [r5, #4]
 8010090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010092:	07db      	lsls	r3, r3, #31
 8010094:	d405      	bmi.n	80100a2 <_puts_r+0x36>
 8010096:	89a3      	ldrh	r3, [r4, #12]
 8010098:	0598      	lsls	r0, r3, #22
 801009a:	d402      	bmi.n	80100a2 <_puts_r+0x36>
 801009c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801009e:	f000 fad3 	bl	8010648 <__retarget_lock_acquire_recursive>
 80100a2:	89a3      	ldrh	r3, [r4, #12]
 80100a4:	0719      	lsls	r1, r3, #28
 80100a6:	d51d      	bpl.n	80100e4 <_puts_r+0x78>
 80100a8:	6923      	ldr	r3, [r4, #16]
 80100aa:	b1db      	cbz	r3, 80100e4 <_puts_r+0x78>
 80100ac:	3e01      	subs	r6, #1
 80100ae:	68a3      	ldr	r3, [r4, #8]
 80100b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80100b4:	3b01      	subs	r3, #1
 80100b6:	60a3      	str	r3, [r4, #8]
 80100b8:	bb39      	cbnz	r1, 801010a <_puts_r+0x9e>
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	da38      	bge.n	8010130 <_puts_r+0xc4>
 80100be:	4622      	mov	r2, r4
 80100c0:	210a      	movs	r1, #10
 80100c2:	4628      	mov	r0, r5
 80100c4:	f000 f848 	bl	8010158 <__swbuf_r>
 80100c8:	3001      	adds	r0, #1
 80100ca:	d011      	beq.n	80100f0 <_puts_r+0x84>
 80100cc:	250a      	movs	r5, #10
 80100ce:	e011      	b.n	80100f4 <_puts_r+0x88>
 80100d0:	4b1b      	ldr	r3, [pc, #108]	; (8010140 <_puts_r+0xd4>)
 80100d2:	429c      	cmp	r4, r3
 80100d4:	d101      	bne.n	80100da <_puts_r+0x6e>
 80100d6:	68ac      	ldr	r4, [r5, #8]
 80100d8:	e7da      	b.n	8010090 <_puts_r+0x24>
 80100da:	4b1a      	ldr	r3, [pc, #104]	; (8010144 <_puts_r+0xd8>)
 80100dc:	429c      	cmp	r4, r3
 80100de:	bf08      	it	eq
 80100e0:	68ec      	ldreq	r4, [r5, #12]
 80100e2:	e7d5      	b.n	8010090 <_puts_r+0x24>
 80100e4:	4621      	mov	r1, r4
 80100e6:	4628      	mov	r0, r5
 80100e8:	f000 f888 	bl	80101fc <__swsetup_r>
 80100ec:	2800      	cmp	r0, #0
 80100ee:	d0dd      	beq.n	80100ac <_puts_r+0x40>
 80100f0:	f04f 35ff 	mov.w	r5, #4294967295
 80100f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100f6:	07da      	lsls	r2, r3, #31
 80100f8:	d405      	bmi.n	8010106 <_puts_r+0x9a>
 80100fa:	89a3      	ldrh	r3, [r4, #12]
 80100fc:	059b      	lsls	r3, r3, #22
 80100fe:	d402      	bmi.n	8010106 <_puts_r+0x9a>
 8010100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010102:	f000 faa2 	bl	801064a <__retarget_lock_release_recursive>
 8010106:	4628      	mov	r0, r5
 8010108:	bd70      	pop	{r4, r5, r6, pc}
 801010a:	2b00      	cmp	r3, #0
 801010c:	da04      	bge.n	8010118 <_puts_r+0xac>
 801010e:	69a2      	ldr	r2, [r4, #24]
 8010110:	429a      	cmp	r2, r3
 8010112:	dc06      	bgt.n	8010122 <_puts_r+0xb6>
 8010114:	290a      	cmp	r1, #10
 8010116:	d004      	beq.n	8010122 <_puts_r+0xb6>
 8010118:	6823      	ldr	r3, [r4, #0]
 801011a:	1c5a      	adds	r2, r3, #1
 801011c:	6022      	str	r2, [r4, #0]
 801011e:	7019      	strb	r1, [r3, #0]
 8010120:	e7c5      	b.n	80100ae <_puts_r+0x42>
 8010122:	4622      	mov	r2, r4
 8010124:	4628      	mov	r0, r5
 8010126:	f000 f817 	bl	8010158 <__swbuf_r>
 801012a:	3001      	adds	r0, #1
 801012c:	d1bf      	bne.n	80100ae <_puts_r+0x42>
 801012e:	e7df      	b.n	80100f0 <_puts_r+0x84>
 8010130:	6823      	ldr	r3, [r4, #0]
 8010132:	250a      	movs	r5, #10
 8010134:	1c5a      	adds	r2, r3, #1
 8010136:	6022      	str	r2, [r4, #0]
 8010138:	701d      	strb	r5, [r3, #0]
 801013a:	e7db      	b.n	80100f4 <_puts_r+0x88>
 801013c:	08010bdc 	.word	0x08010bdc
 8010140:	08010bfc 	.word	0x08010bfc
 8010144:	08010bbc 	.word	0x08010bbc

08010148 <puts>:
 8010148:	4b02      	ldr	r3, [pc, #8]	; (8010154 <puts+0xc>)
 801014a:	4601      	mov	r1, r0
 801014c:	6818      	ldr	r0, [r3, #0]
 801014e:	f7ff bf8d 	b.w	801006c <_puts_r>
 8010152:	bf00      	nop
 8010154:	24000014 	.word	0x24000014

08010158 <__swbuf_r>:
 8010158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801015a:	460e      	mov	r6, r1
 801015c:	4614      	mov	r4, r2
 801015e:	4605      	mov	r5, r0
 8010160:	b118      	cbz	r0, 801016a <__swbuf_r+0x12>
 8010162:	6983      	ldr	r3, [r0, #24]
 8010164:	b90b      	cbnz	r3, 801016a <__swbuf_r+0x12>
 8010166:	f000 f9d1 	bl	801050c <__sinit>
 801016a:	4b21      	ldr	r3, [pc, #132]	; (80101f0 <__swbuf_r+0x98>)
 801016c:	429c      	cmp	r4, r3
 801016e:	d12b      	bne.n	80101c8 <__swbuf_r+0x70>
 8010170:	686c      	ldr	r4, [r5, #4]
 8010172:	69a3      	ldr	r3, [r4, #24]
 8010174:	60a3      	str	r3, [r4, #8]
 8010176:	89a3      	ldrh	r3, [r4, #12]
 8010178:	071a      	lsls	r2, r3, #28
 801017a:	d52f      	bpl.n	80101dc <__swbuf_r+0x84>
 801017c:	6923      	ldr	r3, [r4, #16]
 801017e:	b36b      	cbz	r3, 80101dc <__swbuf_r+0x84>
 8010180:	6923      	ldr	r3, [r4, #16]
 8010182:	6820      	ldr	r0, [r4, #0]
 8010184:	1ac0      	subs	r0, r0, r3
 8010186:	6963      	ldr	r3, [r4, #20]
 8010188:	b2f6      	uxtb	r6, r6
 801018a:	4283      	cmp	r3, r0
 801018c:	4637      	mov	r7, r6
 801018e:	dc04      	bgt.n	801019a <__swbuf_r+0x42>
 8010190:	4621      	mov	r1, r4
 8010192:	4628      	mov	r0, r5
 8010194:	f000 f926 	bl	80103e4 <_fflush_r>
 8010198:	bb30      	cbnz	r0, 80101e8 <__swbuf_r+0x90>
 801019a:	68a3      	ldr	r3, [r4, #8]
 801019c:	3b01      	subs	r3, #1
 801019e:	60a3      	str	r3, [r4, #8]
 80101a0:	6823      	ldr	r3, [r4, #0]
 80101a2:	1c5a      	adds	r2, r3, #1
 80101a4:	6022      	str	r2, [r4, #0]
 80101a6:	701e      	strb	r6, [r3, #0]
 80101a8:	6963      	ldr	r3, [r4, #20]
 80101aa:	3001      	adds	r0, #1
 80101ac:	4283      	cmp	r3, r0
 80101ae:	d004      	beq.n	80101ba <__swbuf_r+0x62>
 80101b0:	89a3      	ldrh	r3, [r4, #12]
 80101b2:	07db      	lsls	r3, r3, #31
 80101b4:	d506      	bpl.n	80101c4 <__swbuf_r+0x6c>
 80101b6:	2e0a      	cmp	r6, #10
 80101b8:	d104      	bne.n	80101c4 <__swbuf_r+0x6c>
 80101ba:	4621      	mov	r1, r4
 80101bc:	4628      	mov	r0, r5
 80101be:	f000 f911 	bl	80103e4 <_fflush_r>
 80101c2:	b988      	cbnz	r0, 80101e8 <__swbuf_r+0x90>
 80101c4:	4638      	mov	r0, r7
 80101c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101c8:	4b0a      	ldr	r3, [pc, #40]	; (80101f4 <__swbuf_r+0x9c>)
 80101ca:	429c      	cmp	r4, r3
 80101cc:	d101      	bne.n	80101d2 <__swbuf_r+0x7a>
 80101ce:	68ac      	ldr	r4, [r5, #8]
 80101d0:	e7cf      	b.n	8010172 <__swbuf_r+0x1a>
 80101d2:	4b09      	ldr	r3, [pc, #36]	; (80101f8 <__swbuf_r+0xa0>)
 80101d4:	429c      	cmp	r4, r3
 80101d6:	bf08      	it	eq
 80101d8:	68ec      	ldreq	r4, [r5, #12]
 80101da:	e7ca      	b.n	8010172 <__swbuf_r+0x1a>
 80101dc:	4621      	mov	r1, r4
 80101de:	4628      	mov	r0, r5
 80101e0:	f000 f80c 	bl	80101fc <__swsetup_r>
 80101e4:	2800      	cmp	r0, #0
 80101e6:	d0cb      	beq.n	8010180 <__swbuf_r+0x28>
 80101e8:	f04f 37ff 	mov.w	r7, #4294967295
 80101ec:	e7ea      	b.n	80101c4 <__swbuf_r+0x6c>
 80101ee:	bf00      	nop
 80101f0:	08010bdc 	.word	0x08010bdc
 80101f4:	08010bfc 	.word	0x08010bfc
 80101f8:	08010bbc 	.word	0x08010bbc

080101fc <__swsetup_r>:
 80101fc:	4b32      	ldr	r3, [pc, #200]	; (80102c8 <__swsetup_r+0xcc>)
 80101fe:	b570      	push	{r4, r5, r6, lr}
 8010200:	681d      	ldr	r5, [r3, #0]
 8010202:	4606      	mov	r6, r0
 8010204:	460c      	mov	r4, r1
 8010206:	b125      	cbz	r5, 8010212 <__swsetup_r+0x16>
 8010208:	69ab      	ldr	r3, [r5, #24]
 801020a:	b913      	cbnz	r3, 8010212 <__swsetup_r+0x16>
 801020c:	4628      	mov	r0, r5
 801020e:	f000 f97d 	bl	801050c <__sinit>
 8010212:	4b2e      	ldr	r3, [pc, #184]	; (80102cc <__swsetup_r+0xd0>)
 8010214:	429c      	cmp	r4, r3
 8010216:	d10f      	bne.n	8010238 <__swsetup_r+0x3c>
 8010218:	686c      	ldr	r4, [r5, #4]
 801021a:	89a3      	ldrh	r3, [r4, #12]
 801021c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010220:	0719      	lsls	r1, r3, #28
 8010222:	d42c      	bmi.n	801027e <__swsetup_r+0x82>
 8010224:	06dd      	lsls	r5, r3, #27
 8010226:	d411      	bmi.n	801024c <__swsetup_r+0x50>
 8010228:	2309      	movs	r3, #9
 801022a:	6033      	str	r3, [r6, #0]
 801022c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010230:	81a3      	strh	r3, [r4, #12]
 8010232:	f04f 30ff 	mov.w	r0, #4294967295
 8010236:	e03e      	b.n	80102b6 <__swsetup_r+0xba>
 8010238:	4b25      	ldr	r3, [pc, #148]	; (80102d0 <__swsetup_r+0xd4>)
 801023a:	429c      	cmp	r4, r3
 801023c:	d101      	bne.n	8010242 <__swsetup_r+0x46>
 801023e:	68ac      	ldr	r4, [r5, #8]
 8010240:	e7eb      	b.n	801021a <__swsetup_r+0x1e>
 8010242:	4b24      	ldr	r3, [pc, #144]	; (80102d4 <__swsetup_r+0xd8>)
 8010244:	429c      	cmp	r4, r3
 8010246:	bf08      	it	eq
 8010248:	68ec      	ldreq	r4, [r5, #12]
 801024a:	e7e6      	b.n	801021a <__swsetup_r+0x1e>
 801024c:	0758      	lsls	r0, r3, #29
 801024e:	d512      	bpl.n	8010276 <__swsetup_r+0x7a>
 8010250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010252:	b141      	cbz	r1, 8010266 <__swsetup_r+0x6a>
 8010254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010258:	4299      	cmp	r1, r3
 801025a:	d002      	beq.n	8010262 <__swsetup_r+0x66>
 801025c:	4630      	mov	r0, r6
 801025e:	f000 fa59 	bl	8010714 <_free_r>
 8010262:	2300      	movs	r3, #0
 8010264:	6363      	str	r3, [r4, #52]	; 0x34
 8010266:	89a3      	ldrh	r3, [r4, #12]
 8010268:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801026c:	81a3      	strh	r3, [r4, #12]
 801026e:	2300      	movs	r3, #0
 8010270:	6063      	str	r3, [r4, #4]
 8010272:	6923      	ldr	r3, [r4, #16]
 8010274:	6023      	str	r3, [r4, #0]
 8010276:	89a3      	ldrh	r3, [r4, #12]
 8010278:	f043 0308 	orr.w	r3, r3, #8
 801027c:	81a3      	strh	r3, [r4, #12]
 801027e:	6923      	ldr	r3, [r4, #16]
 8010280:	b94b      	cbnz	r3, 8010296 <__swsetup_r+0x9a>
 8010282:	89a3      	ldrh	r3, [r4, #12]
 8010284:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801028c:	d003      	beq.n	8010296 <__swsetup_r+0x9a>
 801028e:	4621      	mov	r1, r4
 8010290:	4630      	mov	r0, r6
 8010292:	f000 f9ff 	bl	8010694 <__smakebuf_r>
 8010296:	89a0      	ldrh	r0, [r4, #12]
 8010298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801029c:	f010 0301 	ands.w	r3, r0, #1
 80102a0:	d00a      	beq.n	80102b8 <__swsetup_r+0xbc>
 80102a2:	2300      	movs	r3, #0
 80102a4:	60a3      	str	r3, [r4, #8]
 80102a6:	6963      	ldr	r3, [r4, #20]
 80102a8:	425b      	negs	r3, r3
 80102aa:	61a3      	str	r3, [r4, #24]
 80102ac:	6923      	ldr	r3, [r4, #16]
 80102ae:	b943      	cbnz	r3, 80102c2 <__swsetup_r+0xc6>
 80102b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80102b4:	d1ba      	bne.n	801022c <__swsetup_r+0x30>
 80102b6:	bd70      	pop	{r4, r5, r6, pc}
 80102b8:	0781      	lsls	r1, r0, #30
 80102ba:	bf58      	it	pl
 80102bc:	6963      	ldrpl	r3, [r4, #20]
 80102be:	60a3      	str	r3, [r4, #8]
 80102c0:	e7f4      	b.n	80102ac <__swsetup_r+0xb0>
 80102c2:	2000      	movs	r0, #0
 80102c4:	e7f7      	b.n	80102b6 <__swsetup_r+0xba>
 80102c6:	bf00      	nop
 80102c8:	24000014 	.word	0x24000014
 80102cc:	08010bdc 	.word	0x08010bdc
 80102d0:	08010bfc 	.word	0x08010bfc
 80102d4:	08010bbc 	.word	0x08010bbc

080102d8 <__sflush_r>:
 80102d8:	898a      	ldrh	r2, [r1, #12]
 80102da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102de:	4605      	mov	r5, r0
 80102e0:	0710      	lsls	r0, r2, #28
 80102e2:	460c      	mov	r4, r1
 80102e4:	d458      	bmi.n	8010398 <__sflush_r+0xc0>
 80102e6:	684b      	ldr	r3, [r1, #4]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	dc05      	bgt.n	80102f8 <__sflush_r+0x20>
 80102ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	dc02      	bgt.n	80102f8 <__sflush_r+0x20>
 80102f2:	2000      	movs	r0, #0
 80102f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102fa:	2e00      	cmp	r6, #0
 80102fc:	d0f9      	beq.n	80102f2 <__sflush_r+0x1a>
 80102fe:	2300      	movs	r3, #0
 8010300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010304:	682f      	ldr	r7, [r5, #0]
 8010306:	602b      	str	r3, [r5, #0]
 8010308:	d032      	beq.n	8010370 <__sflush_r+0x98>
 801030a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801030c:	89a3      	ldrh	r3, [r4, #12]
 801030e:	075a      	lsls	r2, r3, #29
 8010310:	d505      	bpl.n	801031e <__sflush_r+0x46>
 8010312:	6863      	ldr	r3, [r4, #4]
 8010314:	1ac0      	subs	r0, r0, r3
 8010316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010318:	b10b      	cbz	r3, 801031e <__sflush_r+0x46>
 801031a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801031c:	1ac0      	subs	r0, r0, r3
 801031e:	2300      	movs	r3, #0
 8010320:	4602      	mov	r2, r0
 8010322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010324:	6a21      	ldr	r1, [r4, #32]
 8010326:	4628      	mov	r0, r5
 8010328:	47b0      	blx	r6
 801032a:	1c43      	adds	r3, r0, #1
 801032c:	89a3      	ldrh	r3, [r4, #12]
 801032e:	d106      	bne.n	801033e <__sflush_r+0x66>
 8010330:	6829      	ldr	r1, [r5, #0]
 8010332:	291d      	cmp	r1, #29
 8010334:	d82c      	bhi.n	8010390 <__sflush_r+0xb8>
 8010336:	4a2a      	ldr	r2, [pc, #168]	; (80103e0 <__sflush_r+0x108>)
 8010338:	40ca      	lsrs	r2, r1
 801033a:	07d6      	lsls	r6, r2, #31
 801033c:	d528      	bpl.n	8010390 <__sflush_r+0xb8>
 801033e:	2200      	movs	r2, #0
 8010340:	6062      	str	r2, [r4, #4]
 8010342:	04d9      	lsls	r1, r3, #19
 8010344:	6922      	ldr	r2, [r4, #16]
 8010346:	6022      	str	r2, [r4, #0]
 8010348:	d504      	bpl.n	8010354 <__sflush_r+0x7c>
 801034a:	1c42      	adds	r2, r0, #1
 801034c:	d101      	bne.n	8010352 <__sflush_r+0x7a>
 801034e:	682b      	ldr	r3, [r5, #0]
 8010350:	b903      	cbnz	r3, 8010354 <__sflush_r+0x7c>
 8010352:	6560      	str	r0, [r4, #84]	; 0x54
 8010354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010356:	602f      	str	r7, [r5, #0]
 8010358:	2900      	cmp	r1, #0
 801035a:	d0ca      	beq.n	80102f2 <__sflush_r+0x1a>
 801035c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010360:	4299      	cmp	r1, r3
 8010362:	d002      	beq.n	801036a <__sflush_r+0x92>
 8010364:	4628      	mov	r0, r5
 8010366:	f000 f9d5 	bl	8010714 <_free_r>
 801036a:	2000      	movs	r0, #0
 801036c:	6360      	str	r0, [r4, #52]	; 0x34
 801036e:	e7c1      	b.n	80102f4 <__sflush_r+0x1c>
 8010370:	6a21      	ldr	r1, [r4, #32]
 8010372:	2301      	movs	r3, #1
 8010374:	4628      	mov	r0, r5
 8010376:	47b0      	blx	r6
 8010378:	1c41      	adds	r1, r0, #1
 801037a:	d1c7      	bne.n	801030c <__sflush_r+0x34>
 801037c:	682b      	ldr	r3, [r5, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d0c4      	beq.n	801030c <__sflush_r+0x34>
 8010382:	2b1d      	cmp	r3, #29
 8010384:	d001      	beq.n	801038a <__sflush_r+0xb2>
 8010386:	2b16      	cmp	r3, #22
 8010388:	d101      	bne.n	801038e <__sflush_r+0xb6>
 801038a:	602f      	str	r7, [r5, #0]
 801038c:	e7b1      	b.n	80102f2 <__sflush_r+0x1a>
 801038e:	89a3      	ldrh	r3, [r4, #12]
 8010390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010394:	81a3      	strh	r3, [r4, #12]
 8010396:	e7ad      	b.n	80102f4 <__sflush_r+0x1c>
 8010398:	690f      	ldr	r7, [r1, #16]
 801039a:	2f00      	cmp	r7, #0
 801039c:	d0a9      	beq.n	80102f2 <__sflush_r+0x1a>
 801039e:	0793      	lsls	r3, r2, #30
 80103a0:	680e      	ldr	r6, [r1, #0]
 80103a2:	bf08      	it	eq
 80103a4:	694b      	ldreq	r3, [r1, #20]
 80103a6:	600f      	str	r7, [r1, #0]
 80103a8:	bf18      	it	ne
 80103aa:	2300      	movne	r3, #0
 80103ac:	eba6 0807 	sub.w	r8, r6, r7
 80103b0:	608b      	str	r3, [r1, #8]
 80103b2:	f1b8 0f00 	cmp.w	r8, #0
 80103b6:	dd9c      	ble.n	80102f2 <__sflush_r+0x1a>
 80103b8:	6a21      	ldr	r1, [r4, #32]
 80103ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80103bc:	4643      	mov	r3, r8
 80103be:	463a      	mov	r2, r7
 80103c0:	4628      	mov	r0, r5
 80103c2:	47b0      	blx	r6
 80103c4:	2800      	cmp	r0, #0
 80103c6:	dc06      	bgt.n	80103d6 <__sflush_r+0xfe>
 80103c8:	89a3      	ldrh	r3, [r4, #12]
 80103ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103ce:	81a3      	strh	r3, [r4, #12]
 80103d0:	f04f 30ff 	mov.w	r0, #4294967295
 80103d4:	e78e      	b.n	80102f4 <__sflush_r+0x1c>
 80103d6:	4407      	add	r7, r0
 80103d8:	eba8 0800 	sub.w	r8, r8, r0
 80103dc:	e7e9      	b.n	80103b2 <__sflush_r+0xda>
 80103de:	bf00      	nop
 80103e0:	20400001 	.word	0x20400001

080103e4 <_fflush_r>:
 80103e4:	b538      	push	{r3, r4, r5, lr}
 80103e6:	690b      	ldr	r3, [r1, #16]
 80103e8:	4605      	mov	r5, r0
 80103ea:	460c      	mov	r4, r1
 80103ec:	b913      	cbnz	r3, 80103f4 <_fflush_r+0x10>
 80103ee:	2500      	movs	r5, #0
 80103f0:	4628      	mov	r0, r5
 80103f2:	bd38      	pop	{r3, r4, r5, pc}
 80103f4:	b118      	cbz	r0, 80103fe <_fflush_r+0x1a>
 80103f6:	6983      	ldr	r3, [r0, #24]
 80103f8:	b90b      	cbnz	r3, 80103fe <_fflush_r+0x1a>
 80103fa:	f000 f887 	bl	801050c <__sinit>
 80103fe:	4b14      	ldr	r3, [pc, #80]	; (8010450 <_fflush_r+0x6c>)
 8010400:	429c      	cmp	r4, r3
 8010402:	d11b      	bne.n	801043c <_fflush_r+0x58>
 8010404:	686c      	ldr	r4, [r5, #4]
 8010406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d0ef      	beq.n	80103ee <_fflush_r+0xa>
 801040e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010410:	07d0      	lsls	r0, r2, #31
 8010412:	d404      	bmi.n	801041e <_fflush_r+0x3a>
 8010414:	0599      	lsls	r1, r3, #22
 8010416:	d402      	bmi.n	801041e <_fflush_r+0x3a>
 8010418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801041a:	f000 f915 	bl	8010648 <__retarget_lock_acquire_recursive>
 801041e:	4628      	mov	r0, r5
 8010420:	4621      	mov	r1, r4
 8010422:	f7ff ff59 	bl	80102d8 <__sflush_r>
 8010426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010428:	07da      	lsls	r2, r3, #31
 801042a:	4605      	mov	r5, r0
 801042c:	d4e0      	bmi.n	80103f0 <_fflush_r+0xc>
 801042e:	89a3      	ldrh	r3, [r4, #12]
 8010430:	059b      	lsls	r3, r3, #22
 8010432:	d4dd      	bmi.n	80103f0 <_fflush_r+0xc>
 8010434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010436:	f000 f908 	bl	801064a <__retarget_lock_release_recursive>
 801043a:	e7d9      	b.n	80103f0 <_fflush_r+0xc>
 801043c:	4b05      	ldr	r3, [pc, #20]	; (8010454 <_fflush_r+0x70>)
 801043e:	429c      	cmp	r4, r3
 8010440:	d101      	bne.n	8010446 <_fflush_r+0x62>
 8010442:	68ac      	ldr	r4, [r5, #8]
 8010444:	e7df      	b.n	8010406 <_fflush_r+0x22>
 8010446:	4b04      	ldr	r3, [pc, #16]	; (8010458 <_fflush_r+0x74>)
 8010448:	429c      	cmp	r4, r3
 801044a:	bf08      	it	eq
 801044c:	68ec      	ldreq	r4, [r5, #12]
 801044e:	e7da      	b.n	8010406 <_fflush_r+0x22>
 8010450:	08010bdc 	.word	0x08010bdc
 8010454:	08010bfc 	.word	0x08010bfc
 8010458:	08010bbc 	.word	0x08010bbc

0801045c <std>:
 801045c:	2300      	movs	r3, #0
 801045e:	b510      	push	{r4, lr}
 8010460:	4604      	mov	r4, r0
 8010462:	e9c0 3300 	strd	r3, r3, [r0]
 8010466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801046a:	6083      	str	r3, [r0, #8]
 801046c:	8181      	strh	r1, [r0, #12]
 801046e:	6643      	str	r3, [r0, #100]	; 0x64
 8010470:	81c2      	strh	r2, [r0, #14]
 8010472:	6183      	str	r3, [r0, #24]
 8010474:	4619      	mov	r1, r3
 8010476:	2208      	movs	r2, #8
 8010478:	305c      	adds	r0, #92	; 0x5c
 801047a:	f7ff fdef 	bl	801005c <memset>
 801047e:	4b05      	ldr	r3, [pc, #20]	; (8010494 <std+0x38>)
 8010480:	6263      	str	r3, [r4, #36]	; 0x24
 8010482:	4b05      	ldr	r3, [pc, #20]	; (8010498 <std+0x3c>)
 8010484:	62a3      	str	r3, [r4, #40]	; 0x28
 8010486:	4b05      	ldr	r3, [pc, #20]	; (801049c <std+0x40>)
 8010488:	62e3      	str	r3, [r4, #44]	; 0x2c
 801048a:	4b05      	ldr	r3, [pc, #20]	; (80104a0 <std+0x44>)
 801048c:	6224      	str	r4, [r4, #32]
 801048e:	6323      	str	r3, [r4, #48]	; 0x30
 8010490:	bd10      	pop	{r4, pc}
 8010492:	bf00      	nop
 8010494:	08010889 	.word	0x08010889
 8010498:	080108ab 	.word	0x080108ab
 801049c:	080108e3 	.word	0x080108e3
 80104a0:	08010907 	.word	0x08010907

080104a4 <_cleanup_r>:
 80104a4:	4901      	ldr	r1, [pc, #4]	; (80104ac <_cleanup_r+0x8>)
 80104a6:	f000 b8af 	b.w	8010608 <_fwalk_reent>
 80104aa:	bf00      	nop
 80104ac:	080103e5 	.word	0x080103e5

080104b0 <__sfmoreglue>:
 80104b0:	b570      	push	{r4, r5, r6, lr}
 80104b2:	1e4a      	subs	r2, r1, #1
 80104b4:	2568      	movs	r5, #104	; 0x68
 80104b6:	4355      	muls	r5, r2
 80104b8:	460e      	mov	r6, r1
 80104ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80104be:	f000 f979 	bl	80107b4 <_malloc_r>
 80104c2:	4604      	mov	r4, r0
 80104c4:	b140      	cbz	r0, 80104d8 <__sfmoreglue+0x28>
 80104c6:	2100      	movs	r1, #0
 80104c8:	e9c0 1600 	strd	r1, r6, [r0]
 80104cc:	300c      	adds	r0, #12
 80104ce:	60a0      	str	r0, [r4, #8]
 80104d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80104d4:	f7ff fdc2 	bl	801005c <memset>
 80104d8:	4620      	mov	r0, r4
 80104da:	bd70      	pop	{r4, r5, r6, pc}

080104dc <__sfp_lock_acquire>:
 80104dc:	4801      	ldr	r0, [pc, #4]	; (80104e4 <__sfp_lock_acquire+0x8>)
 80104de:	f000 b8b3 	b.w	8010648 <__retarget_lock_acquire_recursive>
 80104e2:	bf00      	nop
 80104e4:	240053b8 	.word	0x240053b8

080104e8 <__sfp_lock_release>:
 80104e8:	4801      	ldr	r0, [pc, #4]	; (80104f0 <__sfp_lock_release+0x8>)
 80104ea:	f000 b8ae 	b.w	801064a <__retarget_lock_release_recursive>
 80104ee:	bf00      	nop
 80104f0:	240053b8 	.word	0x240053b8

080104f4 <__sinit_lock_acquire>:
 80104f4:	4801      	ldr	r0, [pc, #4]	; (80104fc <__sinit_lock_acquire+0x8>)
 80104f6:	f000 b8a7 	b.w	8010648 <__retarget_lock_acquire_recursive>
 80104fa:	bf00      	nop
 80104fc:	240053b3 	.word	0x240053b3

08010500 <__sinit_lock_release>:
 8010500:	4801      	ldr	r0, [pc, #4]	; (8010508 <__sinit_lock_release+0x8>)
 8010502:	f000 b8a2 	b.w	801064a <__retarget_lock_release_recursive>
 8010506:	bf00      	nop
 8010508:	240053b3 	.word	0x240053b3

0801050c <__sinit>:
 801050c:	b510      	push	{r4, lr}
 801050e:	4604      	mov	r4, r0
 8010510:	f7ff fff0 	bl	80104f4 <__sinit_lock_acquire>
 8010514:	69a3      	ldr	r3, [r4, #24]
 8010516:	b11b      	cbz	r3, 8010520 <__sinit+0x14>
 8010518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801051c:	f7ff bff0 	b.w	8010500 <__sinit_lock_release>
 8010520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010524:	6523      	str	r3, [r4, #80]	; 0x50
 8010526:	4b13      	ldr	r3, [pc, #76]	; (8010574 <__sinit+0x68>)
 8010528:	4a13      	ldr	r2, [pc, #76]	; (8010578 <__sinit+0x6c>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	62a2      	str	r2, [r4, #40]	; 0x28
 801052e:	42a3      	cmp	r3, r4
 8010530:	bf04      	itt	eq
 8010532:	2301      	moveq	r3, #1
 8010534:	61a3      	streq	r3, [r4, #24]
 8010536:	4620      	mov	r0, r4
 8010538:	f000 f820 	bl	801057c <__sfp>
 801053c:	6060      	str	r0, [r4, #4]
 801053e:	4620      	mov	r0, r4
 8010540:	f000 f81c 	bl	801057c <__sfp>
 8010544:	60a0      	str	r0, [r4, #8]
 8010546:	4620      	mov	r0, r4
 8010548:	f000 f818 	bl	801057c <__sfp>
 801054c:	2200      	movs	r2, #0
 801054e:	60e0      	str	r0, [r4, #12]
 8010550:	2104      	movs	r1, #4
 8010552:	6860      	ldr	r0, [r4, #4]
 8010554:	f7ff ff82 	bl	801045c <std>
 8010558:	68a0      	ldr	r0, [r4, #8]
 801055a:	2201      	movs	r2, #1
 801055c:	2109      	movs	r1, #9
 801055e:	f7ff ff7d 	bl	801045c <std>
 8010562:	68e0      	ldr	r0, [r4, #12]
 8010564:	2202      	movs	r2, #2
 8010566:	2112      	movs	r1, #18
 8010568:	f7ff ff78 	bl	801045c <std>
 801056c:	2301      	movs	r3, #1
 801056e:	61a3      	str	r3, [r4, #24]
 8010570:	e7d2      	b.n	8010518 <__sinit+0xc>
 8010572:	bf00      	nop
 8010574:	08010bb8 	.word	0x08010bb8
 8010578:	080104a5 	.word	0x080104a5

0801057c <__sfp>:
 801057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801057e:	4607      	mov	r7, r0
 8010580:	f7ff ffac 	bl	80104dc <__sfp_lock_acquire>
 8010584:	4b1e      	ldr	r3, [pc, #120]	; (8010600 <__sfp+0x84>)
 8010586:	681e      	ldr	r6, [r3, #0]
 8010588:	69b3      	ldr	r3, [r6, #24]
 801058a:	b913      	cbnz	r3, 8010592 <__sfp+0x16>
 801058c:	4630      	mov	r0, r6
 801058e:	f7ff ffbd 	bl	801050c <__sinit>
 8010592:	3648      	adds	r6, #72	; 0x48
 8010594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010598:	3b01      	subs	r3, #1
 801059a:	d503      	bpl.n	80105a4 <__sfp+0x28>
 801059c:	6833      	ldr	r3, [r6, #0]
 801059e:	b30b      	cbz	r3, 80105e4 <__sfp+0x68>
 80105a0:	6836      	ldr	r6, [r6, #0]
 80105a2:	e7f7      	b.n	8010594 <__sfp+0x18>
 80105a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80105a8:	b9d5      	cbnz	r5, 80105e0 <__sfp+0x64>
 80105aa:	4b16      	ldr	r3, [pc, #88]	; (8010604 <__sfp+0x88>)
 80105ac:	60e3      	str	r3, [r4, #12]
 80105ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80105b2:	6665      	str	r5, [r4, #100]	; 0x64
 80105b4:	f000 f847 	bl	8010646 <__retarget_lock_init_recursive>
 80105b8:	f7ff ff96 	bl	80104e8 <__sfp_lock_release>
 80105bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80105c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80105c4:	6025      	str	r5, [r4, #0]
 80105c6:	61a5      	str	r5, [r4, #24]
 80105c8:	2208      	movs	r2, #8
 80105ca:	4629      	mov	r1, r5
 80105cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80105d0:	f7ff fd44 	bl	801005c <memset>
 80105d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80105d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80105dc:	4620      	mov	r0, r4
 80105de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105e0:	3468      	adds	r4, #104	; 0x68
 80105e2:	e7d9      	b.n	8010598 <__sfp+0x1c>
 80105e4:	2104      	movs	r1, #4
 80105e6:	4638      	mov	r0, r7
 80105e8:	f7ff ff62 	bl	80104b0 <__sfmoreglue>
 80105ec:	4604      	mov	r4, r0
 80105ee:	6030      	str	r0, [r6, #0]
 80105f0:	2800      	cmp	r0, #0
 80105f2:	d1d5      	bne.n	80105a0 <__sfp+0x24>
 80105f4:	f7ff ff78 	bl	80104e8 <__sfp_lock_release>
 80105f8:	230c      	movs	r3, #12
 80105fa:	603b      	str	r3, [r7, #0]
 80105fc:	e7ee      	b.n	80105dc <__sfp+0x60>
 80105fe:	bf00      	nop
 8010600:	08010bb8 	.word	0x08010bb8
 8010604:	ffff0001 	.word	0xffff0001

08010608 <_fwalk_reent>:
 8010608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801060c:	4606      	mov	r6, r0
 801060e:	4688      	mov	r8, r1
 8010610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010614:	2700      	movs	r7, #0
 8010616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801061a:	f1b9 0901 	subs.w	r9, r9, #1
 801061e:	d505      	bpl.n	801062c <_fwalk_reent+0x24>
 8010620:	6824      	ldr	r4, [r4, #0]
 8010622:	2c00      	cmp	r4, #0
 8010624:	d1f7      	bne.n	8010616 <_fwalk_reent+0xe>
 8010626:	4638      	mov	r0, r7
 8010628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801062c:	89ab      	ldrh	r3, [r5, #12]
 801062e:	2b01      	cmp	r3, #1
 8010630:	d907      	bls.n	8010642 <_fwalk_reent+0x3a>
 8010632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010636:	3301      	adds	r3, #1
 8010638:	d003      	beq.n	8010642 <_fwalk_reent+0x3a>
 801063a:	4629      	mov	r1, r5
 801063c:	4630      	mov	r0, r6
 801063e:	47c0      	blx	r8
 8010640:	4307      	orrs	r7, r0
 8010642:	3568      	adds	r5, #104	; 0x68
 8010644:	e7e9      	b.n	801061a <_fwalk_reent+0x12>

08010646 <__retarget_lock_init_recursive>:
 8010646:	4770      	bx	lr

08010648 <__retarget_lock_acquire_recursive>:
 8010648:	4770      	bx	lr

0801064a <__retarget_lock_release_recursive>:
 801064a:	4770      	bx	lr

0801064c <__swhatbuf_r>:
 801064c:	b570      	push	{r4, r5, r6, lr}
 801064e:	460e      	mov	r6, r1
 8010650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010654:	2900      	cmp	r1, #0
 8010656:	b096      	sub	sp, #88	; 0x58
 8010658:	4614      	mov	r4, r2
 801065a:	461d      	mov	r5, r3
 801065c:	da07      	bge.n	801066e <__swhatbuf_r+0x22>
 801065e:	2300      	movs	r3, #0
 8010660:	602b      	str	r3, [r5, #0]
 8010662:	89b3      	ldrh	r3, [r6, #12]
 8010664:	061a      	lsls	r2, r3, #24
 8010666:	d410      	bmi.n	801068a <__swhatbuf_r+0x3e>
 8010668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801066c:	e00e      	b.n	801068c <__swhatbuf_r+0x40>
 801066e:	466a      	mov	r2, sp
 8010670:	f000 f970 	bl	8010954 <_fstat_r>
 8010674:	2800      	cmp	r0, #0
 8010676:	dbf2      	blt.n	801065e <__swhatbuf_r+0x12>
 8010678:	9a01      	ldr	r2, [sp, #4]
 801067a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801067e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010682:	425a      	negs	r2, r3
 8010684:	415a      	adcs	r2, r3
 8010686:	602a      	str	r2, [r5, #0]
 8010688:	e7ee      	b.n	8010668 <__swhatbuf_r+0x1c>
 801068a:	2340      	movs	r3, #64	; 0x40
 801068c:	2000      	movs	r0, #0
 801068e:	6023      	str	r3, [r4, #0]
 8010690:	b016      	add	sp, #88	; 0x58
 8010692:	bd70      	pop	{r4, r5, r6, pc}

08010694 <__smakebuf_r>:
 8010694:	898b      	ldrh	r3, [r1, #12]
 8010696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010698:	079d      	lsls	r5, r3, #30
 801069a:	4606      	mov	r6, r0
 801069c:	460c      	mov	r4, r1
 801069e:	d507      	bpl.n	80106b0 <__smakebuf_r+0x1c>
 80106a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80106a4:	6023      	str	r3, [r4, #0]
 80106a6:	6123      	str	r3, [r4, #16]
 80106a8:	2301      	movs	r3, #1
 80106aa:	6163      	str	r3, [r4, #20]
 80106ac:	b002      	add	sp, #8
 80106ae:	bd70      	pop	{r4, r5, r6, pc}
 80106b0:	ab01      	add	r3, sp, #4
 80106b2:	466a      	mov	r2, sp
 80106b4:	f7ff ffca 	bl	801064c <__swhatbuf_r>
 80106b8:	9900      	ldr	r1, [sp, #0]
 80106ba:	4605      	mov	r5, r0
 80106bc:	4630      	mov	r0, r6
 80106be:	f000 f879 	bl	80107b4 <_malloc_r>
 80106c2:	b948      	cbnz	r0, 80106d8 <__smakebuf_r+0x44>
 80106c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106c8:	059a      	lsls	r2, r3, #22
 80106ca:	d4ef      	bmi.n	80106ac <__smakebuf_r+0x18>
 80106cc:	f023 0303 	bic.w	r3, r3, #3
 80106d0:	f043 0302 	orr.w	r3, r3, #2
 80106d4:	81a3      	strh	r3, [r4, #12]
 80106d6:	e7e3      	b.n	80106a0 <__smakebuf_r+0xc>
 80106d8:	4b0d      	ldr	r3, [pc, #52]	; (8010710 <__smakebuf_r+0x7c>)
 80106da:	62b3      	str	r3, [r6, #40]	; 0x28
 80106dc:	89a3      	ldrh	r3, [r4, #12]
 80106de:	6020      	str	r0, [r4, #0]
 80106e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106e4:	81a3      	strh	r3, [r4, #12]
 80106e6:	9b00      	ldr	r3, [sp, #0]
 80106e8:	6163      	str	r3, [r4, #20]
 80106ea:	9b01      	ldr	r3, [sp, #4]
 80106ec:	6120      	str	r0, [r4, #16]
 80106ee:	b15b      	cbz	r3, 8010708 <__smakebuf_r+0x74>
 80106f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106f4:	4630      	mov	r0, r6
 80106f6:	f000 f93f 	bl	8010978 <_isatty_r>
 80106fa:	b128      	cbz	r0, 8010708 <__smakebuf_r+0x74>
 80106fc:	89a3      	ldrh	r3, [r4, #12]
 80106fe:	f023 0303 	bic.w	r3, r3, #3
 8010702:	f043 0301 	orr.w	r3, r3, #1
 8010706:	81a3      	strh	r3, [r4, #12]
 8010708:	89a0      	ldrh	r0, [r4, #12]
 801070a:	4305      	orrs	r5, r0
 801070c:	81a5      	strh	r5, [r4, #12]
 801070e:	e7cd      	b.n	80106ac <__smakebuf_r+0x18>
 8010710:	080104a5 	.word	0x080104a5

08010714 <_free_r>:
 8010714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010716:	2900      	cmp	r1, #0
 8010718:	d048      	beq.n	80107ac <_free_r+0x98>
 801071a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801071e:	9001      	str	r0, [sp, #4]
 8010720:	2b00      	cmp	r3, #0
 8010722:	f1a1 0404 	sub.w	r4, r1, #4
 8010726:	bfb8      	it	lt
 8010728:	18e4      	addlt	r4, r4, r3
 801072a:	f000 f947 	bl	80109bc <__malloc_lock>
 801072e:	4a20      	ldr	r2, [pc, #128]	; (80107b0 <_free_r+0x9c>)
 8010730:	9801      	ldr	r0, [sp, #4]
 8010732:	6813      	ldr	r3, [r2, #0]
 8010734:	4615      	mov	r5, r2
 8010736:	b933      	cbnz	r3, 8010746 <_free_r+0x32>
 8010738:	6063      	str	r3, [r4, #4]
 801073a:	6014      	str	r4, [r2, #0]
 801073c:	b003      	add	sp, #12
 801073e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010742:	f000 b941 	b.w	80109c8 <__malloc_unlock>
 8010746:	42a3      	cmp	r3, r4
 8010748:	d90b      	bls.n	8010762 <_free_r+0x4e>
 801074a:	6821      	ldr	r1, [r4, #0]
 801074c:	1862      	adds	r2, r4, r1
 801074e:	4293      	cmp	r3, r2
 8010750:	bf04      	itt	eq
 8010752:	681a      	ldreq	r2, [r3, #0]
 8010754:	685b      	ldreq	r3, [r3, #4]
 8010756:	6063      	str	r3, [r4, #4]
 8010758:	bf04      	itt	eq
 801075a:	1852      	addeq	r2, r2, r1
 801075c:	6022      	streq	r2, [r4, #0]
 801075e:	602c      	str	r4, [r5, #0]
 8010760:	e7ec      	b.n	801073c <_free_r+0x28>
 8010762:	461a      	mov	r2, r3
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	b10b      	cbz	r3, 801076c <_free_r+0x58>
 8010768:	42a3      	cmp	r3, r4
 801076a:	d9fa      	bls.n	8010762 <_free_r+0x4e>
 801076c:	6811      	ldr	r1, [r2, #0]
 801076e:	1855      	adds	r5, r2, r1
 8010770:	42a5      	cmp	r5, r4
 8010772:	d10b      	bne.n	801078c <_free_r+0x78>
 8010774:	6824      	ldr	r4, [r4, #0]
 8010776:	4421      	add	r1, r4
 8010778:	1854      	adds	r4, r2, r1
 801077a:	42a3      	cmp	r3, r4
 801077c:	6011      	str	r1, [r2, #0]
 801077e:	d1dd      	bne.n	801073c <_free_r+0x28>
 8010780:	681c      	ldr	r4, [r3, #0]
 8010782:	685b      	ldr	r3, [r3, #4]
 8010784:	6053      	str	r3, [r2, #4]
 8010786:	4421      	add	r1, r4
 8010788:	6011      	str	r1, [r2, #0]
 801078a:	e7d7      	b.n	801073c <_free_r+0x28>
 801078c:	d902      	bls.n	8010794 <_free_r+0x80>
 801078e:	230c      	movs	r3, #12
 8010790:	6003      	str	r3, [r0, #0]
 8010792:	e7d3      	b.n	801073c <_free_r+0x28>
 8010794:	6825      	ldr	r5, [r4, #0]
 8010796:	1961      	adds	r1, r4, r5
 8010798:	428b      	cmp	r3, r1
 801079a:	bf04      	itt	eq
 801079c:	6819      	ldreq	r1, [r3, #0]
 801079e:	685b      	ldreq	r3, [r3, #4]
 80107a0:	6063      	str	r3, [r4, #4]
 80107a2:	bf04      	itt	eq
 80107a4:	1949      	addeq	r1, r1, r5
 80107a6:	6021      	streq	r1, [r4, #0]
 80107a8:	6054      	str	r4, [r2, #4]
 80107aa:	e7c7      	b.n	801073c <_free_r+0x28>
 80107ac:	b003      	add	sp, #12
 80107ae:	bd30      	pop	{r4, r5, pc}
 80107b0:	240049e4 	.word	0x240049e4

080107b4 <_malloc_r>:
 80107b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b6:	1ccd      	adds	r5, r1, #3
 80107b8:	f025 0503 	bic.w	r5, r5, #3
 80107bc:	3508      	adds	r5, #8
 80107be:	2d0c      	cmp	r5, #12
 80107c0:	bf38      	it	cc
 80107c2:	250c      	movcc	r5, #12
 80107c4:	2d00      	cmp	r5, #0
 80107c6:	4606      	mov	r6, r0
 80107c8:	db01      	blt.n	80107ce <_malloc_r+0x1a>
 80107ca:	42a9      	cmp	r1, r5
 80107cc:	d903      	bls.n	80107d6 <_malloc_r+0x22>
 80107ce:	230c      	movs	r3, #12
 80107d0:	6033      	str	r3, [r6, #0]
 80107d2:	2000      	movs	r0, #0
 80107d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107d6:	f000 f8f1 	bl	80109bc <__malloc_lock>
 80107da:	4921      	ldr	r1, [pc, #132]	; (8010860 <_malloc_r+0xac>)
 80107dc:	680a      	ldr	r2, [r1, #0]
 80107de:	4614      	mov	r4, r2
 80107e0:	b99c      	cbnz	r4, 801080a <_malloc_r+0x56>
 80107e2:	4f20      	ldr	r7, [pc, #128]	; (8010864 <_malloc_r+0xb0>)
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	b923      	cbnz	r3, 80107f2 <_malloc_r+0x3e>
 80107e8:	4621      	mov	r1, r4
 80107ea:	4630      	mov	r0, r6
 80107ec:	f000 f83c 	bl	8010868 <_sbrk_r>
 80107f0:	6038      	str	r0, [r7, #0]
 80107f2:	4629      	mov	r1, r5
 80107f4:	4630      	mov	r0, r6
 80107f6:	f000 f837 	bl	8010868 <_sbrk_r>
 80107fa:	1c43      	adds	r3, r0, #1
 80107fc:	d123      	bne.n	8010846 <_malloc_r+0x92>
 80107fe:	230c      	movs	r3, #12
 8010800:	6033      	str	r3, [r6, #0]
 8010802:	4630      	mov	r0, r6
 8010804:	f000 f8e0 	bl	80109c8 <__malloc_unlock>
 8010808:	e7e3      	b.n	80107d2 <_malloc_r+0x1e>
 801080a:	6823      	ldr	r3, [r4, #0]
 801080c:	1b5b      	subs	r3, r3, r5
 801080e:	d417      	bmi.n	8010840 <_malloc_r+0x8c>
 8010810:	2b0b      	cmp	r3, #11
 8010812:	d903      	bls.n	801081c <_malloc_r+0x68>
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	441c      	add	r4, r3
 8010818:	6025      	str	r5, [r4, #0]
 801081a:	e004      	b.n	8010826 <_malloc_r+0x72>
 801081c:	6863      	ldr	r3, [r4, #4]
 801081e:	42a2      	cmp	r2, r4
 8010820:	bf0c      	ite	eq
 8010822:	600b      	streq	r3, [r1, #0]
 8010824:	6053      	strne	r3, [r2, #4]
 8010826:	4630      	mov	r0, r6
 8010828:	f000 f8ce 	bl	80109c8 <__malloc_unlock>
 801082c:	f104 000b 	add.w	r0, r4, #11
 8010830:	1d23      	adds	r3, r4, #4
 8010832:	f020 0007 	bic.w	r0, r0, #7
 8010836:	1ac2      	subs	r2, r0, r3
 8010838:	d0cc      	beq.n	80107d4 <_malloc_r+0x20>
 801083a:	1a1b      	subs	r3, r3, r0
 801083c:	50a3      	str	r3, [r4, r2]
 801083e:	e7c9      	b.n	80107d4 <_malloc_r+0x20>
 8010840:	4622      	mov	r2, r4
 8010842:	6864      	ldr	r4, [r4, #4]
 8010844:	e7cc      	b.n	80107e0 <_malloc_r+0x2c>
 8010846:	1cc4      	adds	r4, r0, #3
 8010848:	f024 0403 	bic.w	r4, r4, #3
 801084c:	42a0      	cmp	r0, r4
 801084e:	d0e3      	beq.n	8010818 <_malloc_r+0x64>
 8010850:	1a21      	subs	r1, r4, r0
 8010852:	4630      	mov	r0, r6
 8010854:	f000 f808 	bl	8010868 <_sbrk_r>
 8010858:	3001      	adds	r0, #1
 801085a:	d1dd      	bne.n	8010818 <_malloc_r+0x64>
 801085c:	e7cf      	b.n	80107fe <_malloc_r+0x4a>
 801085e:	bf00      	nop
 8010860:	240049e4 	.word	0x240049e4
 8010864:	240049e8 	.word	0x240049e8

08010868 <_sbrk_r>:
 8010868:	b538      	push	{r3, r4, r5, lr}
 801086a:	4d06      	ldr	r5, [pc, #24]	; (8010884 <_sbrk_r+0x1c>)
 801086c:	2300      	movs	r3, #0
 801086e:	4604      	mov	r4, r0
 8010870:	4608      	mov	r0, r1
 8010872:	602b      	str	r3, [r5, #0]
 8010874:	f7f0 fe84 	bl	8001580 <_sbrk>
 8010878:	1c43      	adds	r3, r0, #1
 801087a:	d102      	bne.n	8010882 <_sbrk_r+0x1a>
 801087c:	682b      	ldr	r3, [r5, #0]
 801087e:	b103      	cbz	r3, 8010882 <_sbrk_r+0x1a>
 8010880:	6023      	str	r3, [r4, #0]
 8010882:	bd38      	pop	{r3, r4, r5, pc}
 8010884:	240053bc 	.word	0x240053bc

08010888 <__sread>:
 8010888:	b510      	push	{r4, lr}
 801088a:	460c      	mov	r4, r1
 801088c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010890:	f000 f8a0 	bl	80109d4 <_read_r>
 8010894:	2800      	cmp	r0, #0
 8010896:	bfab      	itete	ge
 8010898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801089a:	89a3      	ldrhlt	r3, [r4, #12]
 801089c:	181b      	addge	r3, r3, r0
 801089e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80108a2:	bfac      	ite	ge
 80108a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80108a6:	81a3      	strhlt	r3, [r4, #12]
 80108a8:	bd10      	pop	{r4, pc}

080108aa <__swrite>:
 80108aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ae:	461f      	mov	r7, r3
 80108b0:	898b      	ldrh	r3, [r1, #12]
 80108b2:	05db      	lsls	r3, r3, #23
 80108b4:	4605      	mov	r5, r0
 80108b6:	460c      	mov	r4, r1
 80108b8:	4616      	mov	r6, r2
 80108ba:	d505      	bpl.n	80108c8 <__swrite+0x1e>
 80108bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108c0:	2302      	movs	r3, #2
 80108c2:	2200      	movs	r2, #0
 80108c4:	f000 f868 	bl	8010998 <_lseek_r>
 80108c8:	89a3      	ldrh	r3, [r4, #12]
 80108ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80108d2:	81a3      	strh	r3, [r4, #12]
 80108d4:	4632      	mov	r2, r6
 80108d6:	463b      	mov	r3, r7
 80108d8:	4628      	mov	r0, r5
 80108da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108de:	f000 b817 	b.w	8010910 <_write_r>

080108e2 <__sseek>:
 80108e2:	b510      	push	{r4, lr}
 80108e4:	460c      	mov	r4, r1
 80108e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108ea:	f000 f855 	bl	8010998 <_lseek_r>
 80108ee:	1c43      	adds	r3, r0, #1
 80108f0:	89a3      	ldrh	r3, [r4, #12]
 80108f2:	bf15      	itete	ne
 80108f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80108f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80108fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80108fe:	81a3      	strheq	r3, [r4, #12]
 8010900:	bf18      	it	ne
 8010902:	81a3      	strhne	r3, [r4, #12]
 8010904:	bd10      	pop	{r4, pc}

08010906 <__sclose>:
 8010906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801090a:	f000 b813 	b.w	8010934 <_close_r>
	...

08010910 <_write_r>:
 8010910:	b538      	push	{r3, r4, r5, lr}
 8010912:	4d07      	ldr	r5, [pc, #28]	; (8010930 <_write_r+0x20>)
 8010914:	4604      	mov	r4, r0
 8010916:	4608      	mov	r0, r1
 8010918:	4611      	mov	r1, r2
 801091a:	2200      	movs	r2, #0
 801091c:	602a      	str	r2, [r5, #0]
 801091e:	461a      	mov	r2, r3
 8010920:	f7f0 fddd 	bl	80014de <_write>
 8010924:	1c43      	adds	r3, r0, #1
 8010926:	d102      	bne.n	801092e <_write_r+0x1e>
 8010928:	682b      	ldr	r3, [r5, #0]
 801092a:	b103      	cbz	r3, 801092e <_write_r+0x1e>
 801092c:	6023      	str	r3, [r4, #0]
 801092e:	bd38      	pop	{r3, r4, r5, pc}
 8010930:	240053bc 	.word	0x240053bc

08010934 <_close_r>:
 8010934:	b538      	push	{r3, r4, r5, lr}
 8010936:	4d06      	ldr	r5, [pc, #24]	; (8010950 <_close_r+0x1c>)
 8010938:	2300      	movs	r3, #0
 801093a:	4604      	mov	r4, r0
 801093c:	4608      	mov	r0, r1
 801093e:	602b      	str	r3, [r5, #0]
 8010940:	f7f0 fde9 	bl	8001516 <_close>
 8010944:	1c43      	adds	r3, r0, #1
 8010946:	d102      	bne.n	801094e <_close_r+0x1a>
 8010948:	682b      	ldr	r3, [r5, #0]
 801094a:	b103      	cbz	r3, 801094e <_close_r+0x1a>
 801094c:	6023      	str	r3, [r4, #0]
 801094e:	bd38      	pop	{r3, r4, r5, pc}
 8010950:	240053bc 	.word	0x240053bc

08010954 <_fstat_r>:
 8010954:	b538      	push	{r3, r4, r5, lr}
 8010956:	4d07      	ldr	r5, [pc, #28]	; (8010974 <_fstat_r+0x20>)
 8010958:	2300      	movs	r3, #0
 801095a:	4604      	mov	r4, r0
 801095c:	4608      	mov	r0, r1
 801095e:	4611      	mov	r1, r2
 8010960:	602b      	str	r3, [r5, #0]
 8010962:	f7f0 fde4 	bl	800152e <_fstat>
 8010966:	1c43      	adds	r3, r0, #1
 8010968:	d102      	bne.n	8010970 <_fstat_r+0x1c>
 801096a:	682b      	ldr	r3, [r5, #0]
 801096c:	b103      	cbz	r3, 8010970 <_fstat_r+0x1c>
 801096e:	6023      	str	r3, [r4, #0]
 8010970:	bd38      	pop	{r3, r4, r5, pc}
 8010972:	bf00      	nop
 8010974:	240053bc 	.word	0x240053bc

08010978 <_isatty_r>:
 8010978:	b538      	push	{r3, r4, r5, lr}
 801097a:	4d06      	ldr	r5, [pc, #24]	; (8010994 <_isatty_r+0x1c>)
 801097c:	2300      	movs	r3, #0
 801097e:	4604      	mov	r4, r0
 8010980:	4608      	mov	r0, r1
 8010982:	602b      	str	r3, [r5, #0]
 8010984:	f7f0 fde3 	bl	800154e <_isatty>
 8010988:	1c43      	adds	r3, r0, #1
 801098a:	d102      	bne.n	8010992 <_isatty_r+0x1a>
 801098c:	682b      	ldr	r3, [r5, #0]
 801098e:	b103      	cbz	r3, 8010992 <_isatty_r+0x1a>
 8010990:	6023      	str	r3, [r4, #0]
 8010992:	bd38      	pop	{r3, r4, r5, pc}
 8010994:	240053bc 	.word	0x240053bc

08010998 <_lseek_r>:
 8010998:	b538      	push	{r3, r4, r5, lr}
 801099a:	4d07      	ldr	r5, [pc, #28]	; (80109b8 <_lseek_r+0x20>)
 801099c:	4604      	mov	r4, r0
 801099e:	4608      	mov	r0, r1
 80109a0:	4611      	mov	r1, r2
 80109a2:	2200      	movs	r2, #0
 80109a4:	602a      	str	r2, [r5, #0]
 80109a6:	461a      	mov	r2, r3
 80109a8:	f7f0 fddc 	bl	8001564 <_lseek>
 80109ac:	1c43      	adds	r3, r0, #1
 80109ae:	d102      	bne.n	80109b6 <_lseek_r+0x1e>
 80109b0:	682b      	ldr	r3, [r5, #0]
 80109b2:	b103      	cbz	r3, 80109b6 <_lseek_r+0x1e>
 80109b4:	6023      	str	r3, [r4, #0]
 80109b6:	bd38      	pop	{r3, r4, r5, pc}
 80109b8:	240053bc 	.word	0x240053bc

080109bc <__malloc_lock>:
 80109bc:	4801      	ldr	r0, [pc, #4]	; (80109c4 <__malloc_lock+0x8>)
 80109be:	f7ff be43 	b.w	8010648 <__retarget_lock_acquire_recursive>
 80109c2:	bf00      	nop
 80109c4:	240053b4 	.word	0x240053b4

080109c8 <__malloc_unlock>:
 80109c8:	4801      	ldr	r0, [pc, #4]	; (80109d0 <__malloc_unlock+0x8>)
 80109ca:	f7ff be3e 	b.w	801064a <__retarget_lock_release_recursive>
 80109ce:	bf00      	nop
 80109d0:	240053b4 	.word	0x240053b4

080109d4 <_read_r>:
 80109d4:	b538      	push	{r3, r4, r5, lr}
 80109d6:	4d07      	ldr	r5, [pc, #28]	; (80109f4 <_read_r+0x20>)
 80109d8:	4604      	mov	r4, r0
 80109da:	4608      	mov	r0, r1
 80109dc:	4611      	mov	r1, r2
 80109de:	2200      	movs	r2, #0
 80109e0:	602a      	str	r2, [r5, #0]
 80109e2:	461a      	mov	r2, r3
 80109e4:	f7f0 fd5e 	bl	80014a4 <_read>
 80109e8:	1c43      	adds	r3, r0, #1
 80109ea:	d102      	bne.n	80109f2 <_read_r+0x1e>
 80109ec:	682b      	ldr	r3, [r5, #0]
 80109ee:	b103      	cbz	r3, 80109f2 <_read_r+0x1e>
 80109f0:	6023      	str	r3, [r4, #0]
 80109f2:	bd38      	pop	{r3, r4, r5, pc}
 80109f4:	240053bc 	.word	0x240053bc

080109f8 <_init>:
 80109f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109fa:	bf00      	nop
 80109fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109fe:	bc08      	pop	{r3}
 8010a00:	469e      	mov	lr, r3
 8010a02:	4770      	bx	lr

08010a04 <_fini>:
 8010a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a06:	bf00      	nop
 8010a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a0a:	bc08      	pop	{r3}
 8010a0c:	469e      	mov	lr, r3
 8010a0e:	4770      	bx	lr
